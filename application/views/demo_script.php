<script>
    localforage.config({
        driver: localforage.LOCALSTORAGE,
        name: 'userData'
    });
    var banhji = banhji || {};
    var baseUrl = "<?php echo base_url(); ?>";
    var apiUrl = baseUrl + 'api/';
    banhji.s3 = "https://banhji.s3.amazonaws.com/";
    banhji.token = null;
    banhji.dateFormat = "dd-MM-yyyy";
    banhji.emptyString = "";
    banhji.no_image = "https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/no_image.jpg";
    // custom widget for min and max
    kendo.data.binders.widget.max = kendo.data.Binder.extend({
        init: function(widget, bindings, options) {//call the base constructor
            kendo.data.Binder.fn.init.call(this, widget.element[0], bindings, options);
        },
        refresh: function() {
            var that = this,
            value = that.bindings["max"].get(); //get the value from the View-Model
            $(that.element).data("kendoDatePicker").max(value); //update the widget
        }
    });
    kendo.data.binders.widget.min = kendo.data.Binder.extend({
        init: function(widget, bindings, options) {
            //call the base constructor
            kendo.data.Binder.fn.init.call(this, widget.element[0], bindings, options);
        },
        refresh: function() {
            var that = this,
            value = that.bindings["min"].get(); //get the value from the View-Model
            $(that.element).data("kendoDatePicker").min(value); //update the widget
        }
    });
    // end of custom widget
    banhji.fileManagement = kendo.observable({
        dataSource: new kendo.data.DataSource({
          transport: {
            read  : {
              url: baseUrl + 'api/attachments',
              type: "GET",
              dataType: 'json',
              headers: { Institute: JSON.parse(localStorage.getItem('userData/user')).institute.id }
            },
            create  : {
              url: baseUrl + 'api/attachments',
              type: "POST",
              dataType: 'json',
              headers: { Institute: JSON.parse(localStorage.getItem('userData/user')).institute.id }
            },
            update  : {
              url: baseUrl + 'api/attachments',
              type: "PUT",
              dataType: 'json',
              headers: { Institute: JSON.parse(localStorage.getItem('userData/user')).institute.id }
            },
            destroy  : {
              url: baseUrl + 'api/attachments',
              type: "DELETE",
              dataType: 'json',
              headers: { Institute: JSON.parse(localStorage.getItem('userData/user')).institute.id }
            },
            parameterMap: function(options, operation) {
              if(operation === 'read') {
                return {
                  limit: options.take,
                  page: options.page,
                  filter: options.filter
                };
              } else {
                return {models: kendo.stringify(options.models)};
              }
            }
          },
          schema  : {
            model: {
              id: 'id'
            },
            data: 'results',
            total: 'count'
          },
          batch: true,
          serverFiltering: true,
          serverPaging: true,
          pageSize: 50
        }),
        fileArray     : [],
        onRemove      : function(e) {
                    e.preventDefault();
          banhji.fileManagement.dataSource.remove(e.data);
                    var isConfirmed = confirm("Are you sure you want to delete?");
                    if(isConfirmed) {
                        banhji.fileManagement.save();
                    } else {
                        banhji.fileManagement.dataSource.cancelChanges();
                    }
        },
        onSelected    : function(e) {
          var files = e.files;
          var key = 'ATTACH_' + JSON.parse(localStorage.getItem('userData/user')).institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ files[0].name;
          banhji.fileManagement.dataSource.add({
            transaction_id  : 0,
            type            : "Transaction",
            name            : files[0].name,
            contact_id      : null,
            description     : "",
            key             : key,
            url             : "https://s3-ap-southeast-1.amazonaws.com/banhji/"+key,
            created_at      : new Date(),
            file            : files[0].rawFile
          });
        },
        allowSize     : 0,
        transactionSize: 0,
        contactSize   : 0,
        totalSize     : 0,
        transactionNu : 0,
        contactNu     : 0,
        save                : function(contact_id){
          $.each(banhji.fileManagement.dataSource.data(), function(index, value){
            banhji.fileManagement.dataSource.at(index).set("transaction_id", contact_id);
            if(!value.id){
              var params = {
                Body: value.file,
                Key: value.key
              };
              bucket.upload(params, function (err, data) {
                  // console.log(err, data);
                  // var url = data.Location;
              });
            }
          });

          banhji.fileManagement.dataSource.sync();
          var saved = false;
          banhji.fileManagement.dataSource.bind("requestEnd", function(e){
            //Delete File
            if(e.type=="destroy"){
              if(saved==false && e.response){
                saved = true;
                var response = e.response.results;
                $.each(response, function(index, value){
                  var params = {
                    Delete: { /* required */
                      Objects: [ /* required */
                        {
                          Key: value.data.key
                        }
                      ]
                    }
                  };
                  bucket.deleteObjects(params, function(err, data) {
                    //console.log(err, data);
                  });
                });
              }
            }
            // banhji.fileManagement.dataSource.data([]);
          });
        }
    });
    banhji.pageLoaded = {};
    // Initializing AWS Cognito service
    var userPool = new AWSCognito.CognitoIdentityServiceProvider.CognitoUserPool(poolData);
    // Get User Information from AWS Cognito service

    // Initializing AWS S3 Service
    var bucket = new AWS.S3({params: {Bucket: 'banhji'}});
    banhji.accessMod = new kendo.data.DataSource({
      transport: {
        read  : {
          url: baseUrl + 'api/users/access',
          type: "GET",
          dataType: 'json'
        },
        parameterMap: function(options, operation) {
          if(operation === 'read') {
            return {
              limit: options.pageSize,
              page: options.page,
              filter: options.filter
            };
          } else {
            return {models: kendo.stringify(options.models)};
          }
        }
      },
      schema  : {
        model: {
          id: 'id'
        },
        data: 'results',
        total: 'count'
      },
      batch: true,
      serverFiltering: true,
      serverPaging: true,
      filter: {field: 'username', value: userPool.getCurrentUser() == null ? '': userPool.getCurrentUser().username},
      pageSize: 1
    });
    banhji.accessPage = new kendo.data.DataSource({
        transport: {
            read  : {
                url: baseUrl + 'api/users/access_role',
                type: "GET",
                dataType: 'json'
            },
            parameterMap: function(options, operation) {
                if(operation === 'read') {
                    return {
                        limit: options.pageSize,
                        page: options.page,
                        filter: options.filter
                    };
                } else {
                    return {models: kendo.stringify(options.models)};
                }
            }
        },
        schema  : {
            model: {
              id: 'id'
            },
            data: 'results',
            total: 'count'
        },
        batch: true,
        serverFiltering: true,
        serverPaging: true,
        page:1,
        pageSize: 1
    });
    banhji.allowed;
    function checkRole(arg) {
        var dfd = $.Deferred();
        // var roleName = $(location).attr('hash').substr(2);
        // loop through roles if this has in the role list
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
                if(banhji.accessMod.data().length > 0) {
                    for(var i = 0; i < banhji.accessMod.data().length; i++) {
                        if(arg == banhji.accessMod.data()[i].name.toLowerCase()) {
                            dfd.resolve(true);
                            break;
                        }
                    }
                }
            }
        );
    }
    banhji.companyDS = new kendo.data.DataSource({
      transport: {
        read  : {
          url: baseUrl + 'api/profiles/company',
          type: "GET",
          dataType: 'json'
        },
        update  : {
          url: baseUrl + 'api/profiles/company',
          type: "PUT",
          dataType: 'json'
        },
        parameterMap: function(options, operation) {
          if(operation === 'read') {
            return {
              limit: options.pageSize,
              page: options.page,
              filter: options.filter
            };
          } else {
            return {models: kendo.stringify(options.models)};
          }
        }
      },
      schema  : {
        model: {
          id: 'id'
        },
        data: 'results',
        total: 'count'
      },
      batch: true,
      serverFiltering: true,
      serverPaging: true,
      filter: {field: 'username', value: userPool.getCurrentUser() == null ? '': userPool.getCurrentUser().username},
      pageSize: 1
    });
    banhji.profileDS = new kendo.data.DataSource({
      transport: {
        read  : {
          url: baseUrl + 'api/profiles',
          type: "GET",
          dataType: 'json',
          headers: banhji.header,
        },
        parameterMap: function(options, operation) {
          if(operation === 'read') {
            return {
              limit: options.pageSize,
              page: options.page,
              filter: options.filter
            };
          } else {
            return {models: kendo.stringify(options.models)};
          }
        }
      },
      schema  : {
        model: {
          id: 'id'
        },
        data: 'results',
        total: 'count'
      },
      batch: true,
      serverFiltering: true,
      serverPaging: true,
      filter: {field: 'username', value: userPool.getCurrentUser() == null ? '':userPool.getCurrentUser().username},
      pageSize: 100
    });
    banhji.aws = kendo.observable({
        password: null,
        confirm: null,
        email: null,
        verificationCode: null,
        cognitoUser: null,
        newPass: null,
        oldPass: null,
        image: "https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/blank.png",
        getImage: function() {
          banhji.profileDS.fetch(function(e){
            banhji.aws.set('image', banhji.profileDS.data()[0].profile_photo);
          });
        },
        signUp: function() {
          // e.preventDefault();
          if(this.get('password') != this.get('confirm')) {
            alert('Passwords do not match');
          } else {
            // using cognito to sign up
            var attributeList = [];

            var dataEmail = {
                Name : 'email',
                Value : this.get('email')
            };

            var attributeEmail = new AWSCognito.CognitoIdentityServiceProvider.CognitoUserAttribute(dataEmail);

            attributeList.push(attributeEmail);

            userPool.signUp(this.get('email'), this.get('password'), attributeList, null, function(err, result){
                if (err) {
                    alert(err);
                    return;
                }
                // update attribute
                // 2. move to admin page
                // banhji.awsCognito.set('cognitoUser', result.user);
                banhji.router.navigate('confirm');
            });
          }
        },
        comfirmCode: function(e) {
           e.preventDefault();
            // confirm user verification code after signed up
            var userData = {
                Username : userPool.getCurrentUser().username,
                Pool : userPool
            };
            var cognitoUser = new AWSCognito.CognitoIdentityServiceProvider.CognitoUser(userData);
            cognitoUser.confirmRegistration(this.get('verificationCode'), true, function(err, result) {
                if (err) {
                    alert(err);
                    return;
                }
                banhji.router.navigate('index');
            });
        },
        resendCode: function(e) {
          e.preventDefault();
          alert('code resent');
        },
        signIn: function() {
            var authenticationData = {
                Username : this.get('email'),
                Password : this.get('password'),
            };
            var authenticationDetails = new AWSCognito.CognitoIdentityServiceProvider.AuthenticationDetails(authenticationData);

            var userData = {
                Username : this.get('email'),
                Pool : userPool
            };
            var cognitoUser = new AWSCognito.CognitoIdentityServiceProvider.CognitoUser(userData);
            cognitoUser.authenticateUser(authenticationDetails, {
                onSuccess: function (result) {
                    banhji.awsCognito.set('cognitoUser', cognitoUser);
                },

                onFailure: function(err) {
                    alert(err);
                },

            });
        },
        signOut: function(e){
          e.preventDefault();
          var userData = {
              Username : userPool.getCurrentUser().username,
              Pool : userPool
          };
          var cognitoUser = new AWSCognito.CognitoIdentityServiceProvider.CognitoUser(userData);
          if(cognitoUser != null) {
              cognitoUser.signOut();
              localforage.clear().then(function(){
                window.location.replace("<?php base_url(); ?>login");
              });
          } else {
              console.log('No user');
          }
        },
        changePassword: function() {
            var userData = {
                Username : this.get('email'),
                Pool : userPool
            };
            var cognitoUser = new AWSCognito.CognitoIdentityServiceProvider.CognitoUser(userData);
            cognitoUser.changePassword('oldPassword', 'newPassword', function(err, result) {
                if (err) {
                    alert(err);
                    return;
                }
                console.log('call result: ' + result);
            });
        },
        forgotPassword: function(e) {
            e.preventDefault();
            var userData = {
                Username : this.get('email'),
                Pool : userPool
            };
            var cognitoUser = new AWSCognito.CognitoIdentityServiceProvider.CognitoUser(userData);
            cognitoUser.forgotPassword({
                onSuccess: function (result) {
                    console.log('call result: ' + result);
                },
                onFailure: function(err) {
                    alert(err);
                },
                inputVerificationCode() {
                    var verificationCode = prompt('Please input verification code ' ,'');
                    var newPassword = prompt('Enter new password ' ,'');
                    cognitoUser.confirmPassword(verificationCode, newPassword, this);
                }
            });
        },
        getCurrentUser: function() {
            var cognitoUser = null;
            if (userPool.getCurrentUser() != null) {
                cognitoUser = userPool.getCurrentUser();
            }
            return cognitoUser;
        }
    });
    // Check if user is logged and authenticated via cognito service
    if(userPool.getCurrentUser() == null) {
        // if not login return to login page
        //window.location.replace('http://localhost/aws/login.html');
    } else {
        var cognitoUser = userPool.getCurrentUser();
        if(cognitoUser !== null) {
            // banhji.aws.getImage();
            cognitoUser.getSession(function(err, result) {
                if(result) {
                    AWS.config.credentials = new AWS.CognitoIdentityCredentials({
                        IdentityPoolId: 'us-east-1:35445541-da4c-4dbb-b83f-d1d0301a26a9',
                        Logins: {
                            'cognito-idp.us-east-1.amazonaws.com/us-east-1_56S0nUDS4' : result.getIdToken().getJwtToken()
                        }
                    });
                }
            });
        }
    }
    var langVM = kendo.observable({
        lang        : null,
        localeCode  : null,
        changeToEn  : function() {
            localforage.setItem("locale", "en-US");
            localforage.setItem("lang", "EN").then(function(value){
                location.reload(false);
            });
        },
        changeToKh  : function() {
            localforage.setItem("locale", "km-KH");
            localforage.setItem("lang", "KH").then(function(value){
                location.reload(false);
            });
        }
    });
    banhji.userData = JSON.parse(localStorage.getItem('userData/user')) ? JSON.parse(localStorage.getItem('userData/user')) : "";
    if(banhji.userData == "") {
        banhji.companyDS.fetch(function() {
            banhji.profileDS.fetch(function(){
                var data = banhji.companyDS.data();
                var id = 0;
                id = banhji.profileDS.data()[0].id;
                if(data.length > 0) {
                    var user = {
                        id: id,
                        username: userPool.getCurrentUser().username,
                        institute: data
                    };
                    localforage.setItem('user', user);
                }
                banhji.userData = JSON.parse(localStorage.getItem('userData/user'));
            });
        });
    }
    banhji.institute = banhji.userData ? banhji.userData.institute : "";
    banhji.locale = banhji.institute.currency.locale;
    kendo.culture(JSON.parse(localStorage.getItem('userData/locale')));
    banhji.localeReport = banhji.institute.reportCurrency.locale;
    banhji.header = { Institute: banhji.institute.id };
    var dataStore = function(url) {
        var o = new kendo.data.DataSource({
            transport: {
                read    : {
                    url: url,
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                create  : {
                    url: url,
                    type: "POST",
                    headers: banhji.header,
                    dataType: 'json'
                },
                update  : {
                    url: url,
                    type: "PUT",
                    headers: banhji.header,
                    dataType: 'json'
                },
                destroy     : {
                    url: url,
                    type: "DELETE",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page: 1,
            pageSize: 100
        });
        return o;
    };
    banhji.userManagement = kendo.observable({
        lang : langVM,
        multiTaskList       : [],
        searchText : "",
        searchType : "contacts",
        checkRole  : function(e) {
            e.preventDefault();
        if(JSON.parse(localStorage.getItem('userData/user')).role == 1) {
            banhji.router.navigate("");
          } else {
            window.location.replace("<?php echo base_url(); ?>admin");
          }
        },
        searchContact: function() {
            this.set("searchType", "contacts");

            $("#search-placeholder").attr('placeholder', "Search Contact");
        },
        searchTransaction: function() {
            this.set("searchType", "transactions");

            $("#search-placeholder").attr('placeholder', "Search Transaction");
        },
        searchItem: function() {
            this.set("searchType", "items");

            $("#search-placeholder").attr('placeholder', "Search Item");
        },
        search: function(e) {
            e.preventDefault();

            banhji.searchAdvanced.set("searchText", this.get("searchText"));
            banhji.searchAdvanced.set("searchType", this.get("searchType"));
            banhji.searchAdvanced.search();
            banhji.router.navigate('/search_advanced');
        },
        removeLink          : function(e){
            e.preventDefault();

            var data = e.data,
            index = this.multiTaskList.indexOf(data);

            if(data.vm!==null){
                data.vm.cancel();
            }
            this.multiTaskList.splice(index, 1);
        },
        removeMultiTask     : function(url){
            var self = this;

            $.each(this.multiTaskList, function(index, value){
                if(value.url==url){
                    self.multiTaskList.splice(index, 1);

                    return false;
                }
            });
        },
        addMultiTask        : function(name, url, vm){
            var isExisting = false;
            $.each(this.multiTaskList, function(index, value){
                if(value.url==url){
                    isExisting = true;

                    return false;
                }
            });

            if(isExisting==false){
                this.multiTaskList.push({ name:name, url:url, vm:vm });
            }
        },
        auth : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + 'authentication',
                    type: "GET",
                    dataType: 'json'
                },
                create  : {
                    url: apiUrl + 'authentication',
                    type: "POST",
                    dataType: 'json'
                },
                update  : {
                    url: apiUrl + 'authentication',
                    type: "PUT",
                    dataType: 'json'
                },
                destroy : {
                    url: apiUrl + 'authentication',
                    type: "DELETE",
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            limit: options.pageSize,
                            page: options.page,
                            filter: options.filter
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            batch: true,
            serverFiltering: true,
            serverPaging: true,
            // pageSize: 100
        }),
        inst     : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + 'banhji/company',
                    type: "GET",
                    dataType: 'json'
                },
                create  : {
                    url: apiUrl + 'banhji/company',
                    type: "POST",
                    dataType: 'json'
                },
                update  : {
                    url: apiUrl + 'banhji/company',
                    type: "PUT",
                    dataType: 'json'
                },
                destroy : {
                    url: apiUrl + 'banhji/company',
                    type: "DELETE",
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            limit: options.pageSize,
                            page: options.page,
                            filter: options.filter
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            batch: true,
            serverFiltering: true,
            serverPaging: true,
            // pageSize: 100
        }),
        industry : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + 'banhji/industry',
                    type: "GET",
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            limit: options.pageSize,
                            page: options.page,
                            filter: options.filter
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            batch: true,
            serverFiltering: true,
            serverPaging: true,
            // pageSize: 100
        }),
        countries: new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + 'banhji/countries',
                    type: "GET",
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            limit: options.pageSize,
                            page: options.page,
                            filter: options.filter
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            batch: true,
            serverFiltering: true,
            serverPaging: true,
            // pageSize: 100
        }),
        provinces: new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + 'banhji/provinces',
                    type: "GET",
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            limit: options.pageSize,
                            page: options.page,
                            filter: options.filter
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            batch: true,
            serverFiltering: true,
            serverPaging: true,
            // pageSize: 100
        }),
        types    : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + 'banhji/types',
                    type: "GET",
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            limit: options.pageSize,
                            page: options.page,
                            filter: options.filter
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            batch: true,
            serverFiltering: true,
            serverPaging: true,
            // pageSize: 100
        }),
        instMod     : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + 'admin/modules_institute',
                    type: "GET",
                    dataType: 'json'
                },
                create  : {
                    url: apiUrl + 'admin/modules_institute',
                    type: "POST",
                    dataType: 'json'
                },
                update  : {
                    url: apiUrl + 'admin/modules_institute',
                    type: "PUT",
                    dataType: 'json'
                },
                destroy : {
                    url: apiUrl + 'admin/modules_institute',
                    type: "DELETE",
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            limit: options.pageSize,
                            page: options.page,
                            filter: options.filter
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            batch: true,
            serverFiltering: true,
            serverPaging: true,
            filter: {field: 'id', value: 1}
            // pageSize: 100
        }),
        onSuccessUpload: function(e){
            var logo = e.response.results.url;
            this.get('newInst').set('logo', logo);
            this.saveIntitute();
            // console.log(logo);
        },
        close       : function() {
            window.history.back(-1);
            if(this.inst.hasChanges()) {
                this.inst.cancelChanges();
            }
            if(this.auth.hasChanges()) {
                this.auth.cancelChanges();
            }
        },
        getUsername : function() {
            var x = banhji.userData.username.substring(0,2);
            return x.toUpperCase();
        },
        taxRegimes: [
            { code: 'small', type: 'ខ្នាតតូច'},
            { code: 'medium', type: 'ខ្នាតមធ្យម'},
            { code: 'large', type: 'ខ្នាតធំ'}
        ],
        currency : [
            { code: 'KHR', locale: 'km-KH'},
            { code: 'USD', locale: 'us-US'},
            { code: 'VND', locale: 'vn-VN'}
        ],
        username : null,
        password : null,
        _password: null,
        pwdDS    : new kendo.data.DataSource({
            transport: {
                create  : {
                    url: apiUrl + 'banhji/password',
                    type: "POST",
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            limit: options.pageSize,
                            page: options.page,
                            filter: options.filter
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            batch: true,
            serverFiltering: true,
            serverPaging: true,
            pageSize: 100
        }),
        validateEmail: function() {
            var sQtext = '[^\\x0d\\x22\\x5c\\x80-\\xff]';
            var sDtext = '[^\\x0d\\x5b-\\x5d\\x80-\\xff]';
            var sAtom = '[^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+';
            var sQuotedPair = '\\x5c[\\x00-\\x7f]';
            var sDomainLiteral = '\\x5b(' + sDtext + '|' + sQuotedPair + ')*\\x5d';
            var sQuotedString = '\\x22(' + sQtext + '|' + sQuotedPair + ')*\\x22';
            var sDomain_ref = sAtom;
            var sSubDomain = '(' + sDomain_ref + '|' + sDomainLiteral + ')';
            var sWord = '(' + sAtom + '|' + sQuotedString + ')';
            var sDomain = sSubDomain + '(\\x2e' + sSubDomain + ')*';
            var sLocalPart = sWord + '(\\x2e' + sWord + ')*';
            var sAddrSpec = sLocalPart + '\\x40' + sDomain; // complete RFC822 email address spec
            var sValidEmail = '^' + sAddrSpec + '$'; // as whole string

            var reValidEmail = new RegExp(sValidEmail);

            if(!reValidEmail.test(this.get('username'))){
                alert("Please enter valid address");
                this.set('passed', false);
            }
            this.set('passed', false);
        },
        loginBtn : function() {
            banhji.view.layout.showIn('#content', banhji.view.loginView);
        },
        login    : function() {
            this.auth.query({
                filter: [
                    {field: 'username', value: banhji.userManagement.get('username')},
                    {field: 'password', value: banhji.userManagement.get('password')}
                ]
            }).done(function(e){
                var data = banhji.userManagement.auth.data();
                if(data.length > 0) {
                    var user = banhji.userManagement.auth.data()[0];
                    localforage.setItem('user', user);
                    if(user.institute.length === 0) {
                        banhji.router.navigate('/no-page');
                    } else {
                        banhji.router.navigate('/');
                    }
                } else {
                    console.log('bad');
                }
            });
        },
        registerBtn: function() {
            banhji.view.layout.showIn('#content', banhji.view.signupView);
        },
        logout      : function(e) {
            e.preventDefault();
            var userData = {
                Username : userPool.getCurrentUser().username,
                Pool : userPool
            };
            var cognitoUser = new AWSCognito.CognitoIdentityServiceProvider.CognitoUser(userData);
            if(cognitoUser != null) {
                cognitoUser.signOut();
                localforage.removeItem('user').then(function() {
                    // Run this code once the key has been removed.
                    console.log('Key is cleared!');
                }).catch(function(err) {
                    // This code runs if there were any errors
                    console.log(err);
                });
                window.location.replace("<?php echo base_url(); ?>login");
            } else {
                console.log('No user');
            }
        },
        setCurrent : function(current) {
            this.set('current', current);
        },
        changePwd  : function() {
            if(this.get('password') !== this.get('_password')) {
                alert("Password does not match");
            } else {
                this.pwdDS.sync();
            }
        },
        getLogin    : function() {
            return JSON.parse(localStorage.getItem('userData/user'));
        },
        page     : function() {
            if(banhji.userManagement.getLogin()) {
                if(banhji.userManagement.getLogin().perm === 1) {
                    return 'admin';
                }
            } else {
                return 'home';
            }
            // if(this.getLogin()) {
            //  return '\#/page';
            // } else {
            //  return '\#/page/';
            // }
        },
        createComp : function() {
            banhji.router.navigate('/create_company');
        },
        setInstitute: function(newIns) {
            this.set('newInst', newIns);
        },
        addInst    : function() {
            this.inst.insert(0, {
                name: "",
                email: "",
                address: "",
                description: "",
                industry: {id: null, name: null},
                type: {id: null, name: null},
                country: {id: null, code: null, name: null},
                province: {id: null, local: null, english: null},
                vat_no: null,
                fiscal_date: null,
                tax_regime: null,
                locale : null,
                legal_name: null,
                date_founded: null,
                logo: ""
            });
            this.setInstitute(this.inst.at(0));
        },
        cancelInst : function() {
            this.inst.cancelChanges();
        },
        saveIntitute: function() {
            if(this.get('newInst').industry.id !== null || this.get('newInst').province.id || this.get('newInst').country.id) {
                this.inst.sync();
                this.inst.bind('requestEnd', function(e){
                    var type = e.type, res = e.response.results;
                    if(e.response.error === false) {
                        if(e.type === 'create') {
                            $('#createComMessage').text("created. Please wait till site admin created database for you.");
                        } else {
                            localforage.removeItem('company', function(err){
                            });
                            localforage.setItem('company', res);
                            $('#createComMessage').text("Updated");
                        }
                    } else {
                        $('#createComMessage').text("error creating company.");
                    }
                });
            } else {
                alert('filling all fields');
            }
        },
        signup     : function() {
            this.auth.add({username: this.get('username'), password: this.get('password')});
            this.sync();
            this.auth.bind('requestEnd', function(e){
                if(e.type === 'create' && e.response.error === false) {
                    alert("អ្នកបានចុះឈ្មោះរួច");
                    banhji.router.route('')
                }
            });
        },
        onFileSelect: function(e) {
            console.log(e.files[0]);
        },
        sync: function() {
            this.auth.sync();
            this.auth.bind('requestEnd', function(e){
                var type = e.type;
                var result = e.response.results;
                if(type === "read" && e.error !== true) {
                    // get login info
                    console.log('true');
                } else if(type === "create") {
                    if(e.response.error === true) {
                        banhji.userManagement.auth.cancelChanges();
                        alert('មានរួចហើយ');
                    } else {
                        var user = banhji.userManagement.auth.data()[0];
                        localforage.setItem('user', user);
                        if(!user.institute) {
                            banhji.router.navigate('/page', false);
                        } else {
                            banhji.router.navigate('/app', false);
                        }
                    }
                }
            });
        }
    });
    function getDB() {
        var entity = null;
        if(banhji.userManagement.getLogin()) {
            if(banhji.userManagement.getLogin().institute) {
                if(banhji.userManagement.getLogin().institute.length > 0) {
                    entity = banhji.userManagement.getLogin().institute.name
                }
            } else {
                entity = false
            }
        }
        return entity;
    }
    banhji.currency = kendo.observable({
        dataSource          : dataStore(apiUrl + 'currencies'),
        getCurrencyID       : function(locale){
            var currency_id = 0;

            $.each(this.dataSource.data(), function(index, value){
                if(value.locale===locale){
                    currency_id = value.id;
                    return false;
                }
            });

            return currency_id;
        }
    });
    banhji.users = kendo.observable({
        dataStore   : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + 'banhji/users',
                    type: "GET",
                    headers: {
                        "Entity": getDB(),
                        "User": banhji.userManagement.getLogin() === null ? '': banhji.userManagement.getLogin().id
                    },
                    dataType: 'json'
                },
                create  : {
                    url: apiUrl + 'banhji/users',
                    type: "POST",
                    headers: {
                        "Entity": getDB(),
                        "User": banhji.userManagement.getLogin() === null ? '': banhji.userManagement.getLogin().id
                    },
                    dataType: 'json'
                },
                update  : {
                    url: apiUrl + 'banhji/users',
                    type: "PUT",
                    headers: {
                        "Entity": getDB(),
                        "User": banhji.userManagement.getLogin() === null ? '': banhji.userManagement.getLogin().id
                    },
                    dataType: 'json'
                },
                destroy : {
                    url: apiUrl + 'banhji/users',
                    type: "DELETE",
                    headers: {
                        "Entity": getDB(),
                        "User": banhji.userManagement.getLogin() === null ? '': banhji.userManagement.getLogin().id
                    },
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            limit: options.pageSize,
                            page: options.page,
                            filter: options.filter
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            batch: true,
            serverFiltering: true,
            serverPaging: true,
            pageSize: 100
        }),
        roleDS      : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + 'banhji/roles',
                    type: "GET",
                    headers: {
                        "Entity": getDB(),
                        "User": banhji.userManagement.getLogin() === null ? '': banhji.userManagement.getLogin().id
                    },
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            limit: options.pageSize,
                            page: options.page,
                            filter: options.filter
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            batch: true,
            serverFiltering: true,
            serverPaging: true,
            pageSize: 100
        }),
        add         : function() {
            banhji.view.pageAdmin.showIn('#col2', banhji.view.addUserView);
            this.dataStore.insert(0, {username: '', password: null, permission: {id: null, name: null}});
            this.setCurrent(this.dataStore.at(0));
        },
        remove      : function(e) {
            var user = confirm('Are you sure you want to remove this user?');
            if(user === true) {
                this.dataStore.remove(e.data);
                this.sync();
            }
        },
        editRight   : function(e) {
            banhji.view.pageAdmin.showIn('#col2', banhji.view.editRoleView);
            this.setCurrent(e.data);
        },
        cancelAdd   : function() {
            banhji.view.pageAdmin.showIn('#col2', banhji.view.userListView);
            this.dataStore.cancelChanges();
        },
        setCurrent  : function(current) {
            this.set('current', current);
        },
        sync        : function() {
            this.dataStore.sync();
            this.dataStore.bind('requestEnd', function(e){
                var type = e.type;
                var data = e.response.results;
                if(type !== 'read') {
                    console.log('data recorded');
                }
            });
        }
    });
    banhji.people = kendo.observable({
        dataSource : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "people",
                    type: "GET",
                    headers: {
                        "Entity": banhji.userManagement.getLogin() !== null ? banhji.userManagement.getLogin().institute.name:""
                    },
                    dataType: 'json'
                },
                create  : {
                    url: apiUrl + "people",
                    type: "POST",
                    headers: {
                        "Entity": banhji.userManagement.getLogin() !== null ? banhji.userManagement.getLogin().institute.name:""
                    },
                    dataType: 'json'
                },
                update  : {
                    url: apiUrl + "people",
                    type: "PUT",
                    headers: {
                        "Entity": banhji.userManagement.getLogin() !== null ? banhji.userManagement.getLogin().institutename:""
                    },
                    dataType: 'json'
                },
                destroy : {
                    url: apiUrl + "people",
                    type: "DELETE",
                    headers: {
                        "Entity": banhji.userManagement.getLogin() !== null ? banhji.userManagement.getLogin().institute.name:""
                    },
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            limit: options.pageSize,
                            offset: options.skip,
                            filter: options.filter
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count',
                errors: 'error'
            },
            batch: true,
            serverFiltering: true,
            serverPaging: true,
            pageSize: 20
        }),
        filterBy   : function() {},
        save       : function() {}
    });
    // end TEst offline
    var obj = function(url) {
        var o = kendo.observable({
            dataStore: new kendo.data.DataSource({
                transport: {
                    read    : {
                        url: url,
                        type: "GET",
                        headers: {
                            "Entity": getDB()
                        },
                        dataType: 'json'
                    },
                    create  : {
                        url: url,
                        type: "POST",
                        headers: {
                            "Entity": getDB()
                        },
                        dataType: 'json'
                    },
                    update  : {
                        url: url,
                        type: "PUT",
                        headers: {
                            "Entity": getDB()
                        },
                        dataType: 'json'
                    },
                    destroy : {
                        url: url,
                        type: "DELETE",
                        headers: {
                            "Entity": getDB()
                        },
                        dataType: 'json'
                    },
                    parameterMap: function(options, operation) {
                        if(operation === 'read') {
                            return {
                                limit: options.pageSize,
                                offset: options.skip,
                                filter: options.filter
                            };
                        } else {
                            return {models: kendo.stringify(options.models)};
                        }
                    }
                },
                schema  : {
                    model: {
                        id: 'id'
                    },
                    data: 'results',
                    total: 'count',
                    errors: 'error'
                },
                batch: true,
                serverFiltering: true,
                serverPaging: true,
                pageSize: 20
            }),
            findById: function(id) {},
            findBy  : function(arr) {},
            insert  : function(data) {},
            remove  : function(model) {
                this.dataStore.remove(model);
                this.save();
            },
            save    : function() {
                this.dataStore.sync();
                this.dataStore.bind('requestEnd', function(e){
                    var type = e.type, res = e.response.results;
                    console.log(type + " operation is successful.");
                });
            }
        });
        return o;
    }
    banhji.Layout = kendo.observable({
        locale: "km-KH",
        menu    : [],
        // isShown : true,
        // isAdmin : auth.isAdmin(),
        // logout   : function(e) {
        //  e.preventDefault();
        //  auth.logout();
        // },
        // isLogin : function(){
        //  if(banhji.userManagement.getLogin()) {
        //      return true;
        //  } else {
        //      return false;
        //  }
        // },
        // init: function() {
        //  // initialize when the whole page load
        // },
        // ui: function() {
        //  // get UI information from source base on locale
        // }
    });
    var role = kendo.observable({
        dataStore   : new kendo.data.DataSource({
            transport: {
                read: {
                    url: apiUrl + 'roles',
                    dataType: 'json',
                    headers: {
                        "Entity": getDB()
                    },
                    type: 'GET'
                },
                create: {
                    url: apiUrl + 'roles',
                    dataType: 'json',
                    headers: {
                        "Entity": getDB()
                    },
                    type: 'GET'
                },
                update: {
                    url: apiUrl + 'roles',
                    dataType: 'json',
                    headers: {
                        "Entity": getDB()
                    },
                    type: 'GET'
                },
                destroy: {
                    url: apiUrl + 'roles',
                    dataType: 'json',
                    headers: {
                        "Entity": getDB()
                    },
                    type: 'GET'
                },
                parameterMap: function(data, operation) {
                    if(operation === 'read') {
                        return {
                            limit: data.pageSize,
                            offset: data.skip,
                            filter: data.filter
                        };
                    }
                    return {models: kendo.stringify(data.models)};
                }
            },
            schema: {
                model: {
                    id: "id"
                },
                data: "results"
            },
            pageSize: 20,
            serverPaging: true,
            serverFiltering: true,
            batch: true
        }),
        roleUserDs  : new kendo.data.DataSource({
            transport: {
                read: {
                    url: apiUrl + 'roles/user',
                    dataType: 'json',
                    headers: {
                        "Entity": getDB()
                    },
                    type: 'GET'
                },
                create: {
                    url: apiUrl + 'roles/user',
                    dataType: 'json',
                    headers: {
                        "Entity": getDB()
                    },
                    type: 'POST'
                },
                update: {
                    url: apiUrl + 'roles/user',
                    dataType: 'json',
                    headers: {
                        "Entity": getDB()
                    },
                    type: 'PUT'
                },
                destroy: {
                    url: apiUrl + 'roles/user',
                    dataType: 'json',
                    headers: {
                        "Entity": getDB()
                    },
                    type: 'DELETE'
                },
                parameterMap: function(data, operation) {
                    if(operation === 'read') {
                        return {
                            limit: data.pageSize,
                            offset: data.skip,
                            filter: data.filter
                        };
                    }
                    return {models: kendo.stringify(data.models)};
                }
            },
            schema: {
                model: {
                    id: "id"
                },
                data: "results"
            },
            pageSize: 20,
            serverPaging: true,
            serverFiltering: true,
            batch: true
        }),
        find        : function(arg) {},
        setCurrent  : function(currentRole) {},
        save        : function() {}
    });

    // DBS
    banhji.store = banhji.store || {};
    banhji.dbsUrl = "https://developers.dbs.com:10443/api/sg/v1/accounts/1018260032/accountHolders?productType=CA";
    banhji.dbsApiKey = "9c976436-9f86-42b1-965c-3a6d15c73d66";
    banhji.dbsToken = "bPIIqpDNbR14tBI0X+DbkVWa0Ao=";
    banhji.dbsHeaders = {
        'apiKey'        : banhji.dbsApiKey,
        'uuid'          : banhji.dbsApiKey,
        'Authorization' : banhji.dbsToken == "" ? banhji.authorization : banhji.dbsToken
    };
    banhji.store.dbsDataSource = new kendo.data.DataSource({
        transport: {
            read: {
                url: banhji.dbsUrl,
                headers: banhji.dbsHeaders,
                type: "GET",
                dataType: "json",
                contentType: 'application/json'
            }
        },
        batch: false,
        schema: {
            data: function(response) {
                var data = [];
                data.push(response);
                return data;
            }
        }
    });

    // SOURCE #############################################################################################
    banhji.source = kendo.observable({
        lang                        : langVM,
        testDS                      : dataStore(apiUrl + "transactions/number"),
        countryDS                   : dataStore(apiUrl + "countries"),
        //Contact
        customerDS                  : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "contacts",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field:"parent_id", operator:"where_related_contact_type", value:1 },//Customer
                { field:"status", value:1 }
            ],
            sort:[
                { field:"contact_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page: 1,
            pageSize: 100
        }),
        supplierDS                  : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "contacts",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field:"parent_id", operator:"where_related_contact_type", value:2 },//Supplier
                { field:"status", value:1 }
            ],
            sort:[
                { field:"contact_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page: 1,
            pageSize: 100
        }),
        employeeDS                  : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "contacts",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field:"parent_id", operator:"where_related_contact_type", value:3 },//Employee
                { field:"status", value:1 }
            ],
            sort:[
                { field:"contact_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page: 1,
            pageSize: 100
        }),
        employeeUserDS              : dataStore(apiUrl + "contacts"),
        //Contact Type
        contactTypeList             : [],
        contactTypeDS               : dataStore(apiUrl + "contacts/type"),
        //Job
        jobList                     : [],
        jobDS                       : dataStore(apiUrl + "jobs"),
        //Currency
        currencyList                : [],
        currencyDS                  : dataStore(apiUrl + "currencies"),
        currencyRateDS              : dataStore(apiUrl + "currencies/rate"),
        //Item
        itemDS                      : dataStore(apiUrl + "items"),
        itemTypeDS                  : dataStore(apiUrl + "item_types"),
        itemGroupList               : [],
        itemGroupDS                 : dataStore(apiUrl + "items/group"),
        brandDS                     : dataStore(apiUrl + "brands"),
        categoryList                : [],
        categoryDS                  : dataStore(apiUrl + "categories"),
        itemPriceDS                 : dataStore(apiUrl + "item_prices"),
        measurementList             : [],
        measurementDS               : dataStore(apiUrl + "measurements"),
        locationDS                  : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "locations",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:{ field:"contact_id", operator:"by_user_id", value:banhji.userData.id },
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        //Tax
        taxTypeDS                   : dataStore(apiUrl + "tax_types"),
        taxList                     : [],
        taxItemDS                   : dataStore(apiUrl + "tax_items"),
        //Accounting
        accountList                 : [],
        accountDS                   : dataStore(apiUrl + "accounts"),
        accountTypeDS               : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "accounts/type",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:{ field:"id >", value:9 },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        //Payment Term, Method, Segment
        paymentTermDS               : dataStore(apiUrl + "payment_terms"),
        paymentMethodDS             : dataStore(apiUrl + "payment_methods"),
        //Segment
        segmentDS                   : dataStore(apiUrl + "segments"),
        segmentItemList             : [],
        segmentItemDS               : dataStore(apiUrl + "segments/item"),
        //Txn Template
        txnTemplateList             : [],
        txnTemplateDS               : dataStore(apiUrl + "transaction_templates"),
        //Prefixes
        prefixList                  : [],
        prefixDS                    : dataStore(apiUrl + "prefixes"),
        frequencyList               : [
            { id: 'Daily', name: 'Day' },
            { id: 'Weekly', name: 'Week' },
            { id: 'Monthly', name: 'Month' },
            { id: 'Annually', name: 'Annual' }
        ],
        monthOptionList             : [
            { id: 'Day', name: 'Day' },
            { id: '1st', name: '1st' },
            { id: '2nd', name: '2nd' },
            { id: '3rd', name: '3rd' },
            { id: '4th', name: '4th' }
        ],
        monthList                   : [
            { id: 0, name: 'January' },
            { id: 1, name: 'February' },
            { id: 2, name: 'March' },
            { id: 3, name: 'April' },
            { id: 4, name: 'May' },
            { id: 5, name: 'June' },
            { id: 6, name: 'July' },
            { id: 7, name: 'August' },
            { id: 8, name: 'September' },
            { id: 9, name: 'October' },
            { id: 10, name: 'November' },
            { id: 11, name: 'December' }
        ],
        weekDayList                 : [
            { id: 0, name: 'Sunday' },
            { id: 1, name: 'Monday' },
            { id: 2, name: 'Tuesday' },
            { id: 3, name: 'Wednesday' },
            { id: 4, name: 'Thurday' },
            { id: 5, name: 'Friday' },
            { id: 6, name: 'Saturday' }
        ],
        dayList                     : [
            { id: 1, name: '1st' },
            { id: 2, name: '2nd' },
            { id: 3, name: '3rd' },
            { id: 4, name: '4th' },
            { id: 5, name: '5th' },
            { id: 6, name: '6th' },
            { id: 7, name: '7th' },
            { id: 8, name: '8th' },
            { id: 9, name: '9th' },
            { id: 10, name: '10th' },
            { id: 11, name: '11st' },
            { id: 12, name: '12nd' },
            { id: 13, name: '13rd' },
            { id: 14, name: '14th' },
            { id: 15, name: '15th' },
            { id: 16, name: '16th' },
            { id: 17, name: '17th' },
            { id: 18, name: '18th' },
            { id: 19, name: '19th' },
            { id: 20, name: '20th' },
            { id: 21, name: '21st' },
            { id: 22, name: '22nd' },
            { id: 23, name: '23rd' },
            { id: 24, name: '24th' },
            { id: 25, name: '25th' },
            { id: 26, name: '26th' },
            { id: 27, name: '27th' },
            { id: 28, name: '28th' },
            { id: 0, name: 'Last' }
        ],
        sortList                    : [
            { text:"All", value: "all" },
            { text:"Today", value: "today" },
            { text:"This Week", value: "week" },
            { text:"This Month", value: "month" },
            { text:"This Year", value: "year" }
        ],
        statusList                  : [
            { "id": 1, "name": "Active" },
            { "id": 0, "name": "Inactive" },
            { "id": 2, "name": "Void" }
        ],
        applicationStatusList       : [
            { "id": 1, "name": "Approve" },
            { "id": 0, "name": "Pending" },
            { "id": 2, "name": "Review" },
            { "id": 3, "name": "Submit" }
        ],
        customerFormList            : [
            { id: "Quote", name: "Quotation" },
            { id: "Sale_Order", name: "Sale Order" },
            { id: "Deposit", name: "Deposit" },
            { id: "Cash_Sale", name: "Cash Sale" },
            { id: "Invoice", name: "Invoice" },
            { id: "Cash_Receipt", name: "Cash Receipt" },
            //{ id: "Sale_Return", name: "Sale Return" },
            { id: "GDN", name: "Delivered Note" }
        ],
        vendorFormList              : [
            { id: "Purchase_Order", name: "Purchase Order" },
            { id: "GRN", name: "GRN" },
            // { id: "Deposit", name: "Deposit" },
            // { id: "Purchase", name: "Purchase" },
            // { id: "Pur_Return", name: "Pur.Return" },
            { id: "Cash_Payment", name: "Cash Payment" }
        ],
        cashFormList                : [
            { id: "Cash_Transfer", name: "Cash Transaction" },
            { id: "Cash_Receipt", name: "Cash Receipt" },
            { id: "Cash_Payment", name: "Cash Payment" },
            { id: "Cash_Advance", name: "Cash Advance" },
            { id: "Reimbursement", name: "Reimbursement" },
            { id: "Advance_Settlement", name: "Advance Settlement" }
        ],
        cashMGTFormList             : [
            { id: "Cash_Transfer", name: "Transfer" },
            { id: "Deposit", name: "Deposit" },
            { id: "Withdraw", name: "Withdraw" },
            { id: "Cash_Advance", name: "Advance" },
            { id: "Cash_Payment", name: "Payment" },
            { id: "Reimbursement", name: "Reimbursement" },
            { id: "Journal", name: "Journal" }
        ],
        statusObj                   : { text:"", date:"", number:"", url:"" },
        defaultLines                : 2,
        genderList                  : ["M", "F"],
        typeList                    : ['Invoice','Commercial_Invoice','Vat_Invoice','Electricity_Invoice','Water_Invoice','Cash_Sale','Commercial_Cash_Sale','Vat_Cash_Sale','Receipt_Allocation','Sale_Order','Quote','GDN','Sale_Return','Purchase_Order','GRN','Cash_Purchase','Credit_Purchase','Purchase_Return','Payment_Allocation','Deposit','Electricty_Deposit','Water_Deposit','Customer_Deposit','Vendor_Deposit','Withdraw','Transfer','Journal','Item_Adjustment','Cash_Advance','Reimbursement','Direct_Expense','Advance_Settlement','Additional_Cost','Cash_Payment','Cash_Receipt','Credit_Note','Debit_Note','Offset_Bill','Offset_Invoice','Cash_Transfer','Internal_Usage'],
        user_id                     : banhji.userData.id,
        active                      : "Active",
        inactive                    : "Inactive",
        amtDueColor                 : "#eee",
        acceptedSrc                 : "https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/ICONs/accepted.ico",
        approvedSrc                 : "https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/ICONs/approved.ico",
        cancelSrc                   : "https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/ICONs/cancel.ico",
        openSrc                     : "https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/ICONs/open.ico",
        paidSrc                     : "https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/ICONs/paid.ico",
        partialyPaidSrc             : "https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/ICONs/partialy_paid.ico",
        usedSrc                     : "https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/ICONs/used.ico",
        receivedSrc                 : "https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/ICONs/received.ico",
        deliveredSrc                : "https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/ICONs/delivered.ico",
        successMessage              : "Saved Successful!",
        errorMessage                : "Warning, please review it again!",
        confirmMessage              : "Are you sure, you want to delete it?",
        requiredMessage             : "Required",
        duplicateNumber             : "Duplicate Number!",
        duplicateInvoice            : "Duplicate Invoice!",
        selectCustomerMessage       : "Please select a customer.",
        selectSupplierMessage       : "Please select a supplier.",
        selectItemMessage           : "Please select an item.",
        duplicateMeasurementMessage : "Sorry, you can not use the same measurement.",
        duplicateSelectedItemMessage: "You already selected this item.",
        noChangeInvoicePaidMessage  : "Sorry, you can not change the amount of paid invoice.",
        test : function () {
            var a = "foo 12.34 bar 56 baz 78.90";
            var numbers = a.match(/\d+/g).map(Number);
            console.log(numbers);
        },
        pageLoad                    : function(){
            this.loadAccounts();
            this.accountTypeDS.read();
            this.taxTypeDS.read();
            this.loadTaxes();
            this.loadJobs();
            this.loadSegmentItems();
            this.loadCurrencies();
            this.loadRates();
            this.loadPrefixes();
            this.loadTxnTemplates();

            this.loadCategories();
            this.loadItemGroups();
            this.itemTypeDS.read();
            this.loadMeasurements();

            this.loadContactTypes();
        },
        checkAccessModule           : function(moduleName){
            banhji.accessMod.query({
                filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
            }).then(function(e){
                var allowed = false;
                if(banhji.accessMod.data().length > 0) {
                    for(var i = 0; i < banhji.accessMod.data().length; i++) {
                        if(moduleName.toLowerCase() == banhji.accessMod.data()[i].name.toLowerCase()) {
                            allowed = true;
                            break;
                        }
                    }
                }
                return allowed;
            });
        },
        getFiscalDate               : function(){
            var today = new Date(),
            fDate = new Date(today.getFullYear() +"-"+ banhji.institute.fiscal_date);

            if(today < fDate){
                fDate.setFullYear(today.getFullYear()-1);
            }

            return fDate;
        },
        loadPrefixes                : function(){
            var self = this, raw = this.get("prefixList");

            //Clear array
            if(raw.length>0){
                raw.splice(0,raw.length);
            }

            this.prefixDS.query({
                filter: [],
            }).then(function(){
                var view = self.prefixDS.view();

                $.each(view, function(index, value){
                    raw.push(value);
                });
            });
        },
        loadTxnTemplates            : function(){
            var self = this, raw = this.get("txnTemplateList");

            //Clear array
            if(raw.length>0){
                raw.splice(0,raw.length);
            }

            this.txnTemplateDS.query({
                filter:[]
            }).then(function(){
                var view = self.txnTemplateDS.view();

                $.each(view, function(index, value){
                    raw.push(value);
                });
            });
        },
        loadCurrencies              : function(){
            var self = this, raw = this.get("currencyList");

            //Clear array
            if(raw.length>0){
                raw.splice(0,raw.length);
            }

            this.currencyDS.query({
                filter:[]
            }).then(function(){
                var view = self.currencyDS.view();

                $.each(view, function(index, value){
                    raw.push(value);
                });
            });
        },
        loadRates                   : function(){
            this.currencyRateDS.query({
                filter:[],
                sort:{ field:"date", dir:"desc"}
            });
        },
        getRate                     : function(locale, date){
            var rate = 0, lastRate = 1;
            $.each(this.currencyRateDS.data(), function(index, value){
                if(value.locale == locale){
                    lastRate = kendo.parseFloat(value.rate);

                    if(date >= new Date(value.date)){
                        rate = kendo.parseFloat(value.rate);

                        return false;
                    }
                }
            });

            //If no rate, use the last rate
            if(rate==0){
                rate = lastRate;
            }

            return rate;
        },
        loadTaxes                   : function(){
            var self = this, raw = this.get("taxList");

            //Clear array
            if(raw.length>0){
                raw.splice(0,raw.length);
            }

            this.taxItemDS.query({
                filter:[]
            }).then(function(){
                var view = self.taxItemDS.view();

                $.each(view, function(index, value){
                    raw.push(value);
                });
            });
        },
        checkWHT                    : function(tax_type_id){
            var result = false,
                types = this.taxTypeDS.get(tax_type_id);

            if(types.sub_of_id==12){
                result = true;
            }

            return result;
        },
        loadJobs                    : function(){
            var self = this, raw = this.get("jobList");

            //Clear array
            if(raw.length>0){
                raw.splice(0,raw.length);
            }

            this.jobDS.query({
                filter:[]
            }).then(function(){
                var view = self.jobDS.view();

                $.each(view, function(index, value){
                    raw.push(value);
                });
            });
        },
        loadSegmentItems            : function(){
            var self = this, raw = this.get("segmentItemList");

            //Clear array
            if(raw.length>0){
                raw.splice(0,raw.length);
            }

            this.segmentItemDS.query({
                filter:{ field:"segment_id >", value: 0 }
            }).then(function(){
                var view = self.segmentItemDS.view();

                $.each(view, function(index, value){
                    raw.push(value);
                });
            });
        },
        loadAccounts                : function(){
            var self = this, raw = this.get("accountList");

            //Clear array
            if(raw.length>0){
                raw.splice(0,raw.length);
            }

            this.accountDS.query({
                filter: { field:"status", value:1 },
                sort: [
                    { field: "account_type_id", dir: "asc" },
                    { field: "number", dir: "asc" }
                ]
            }).then(function(){
                var view = self.accountDS.view();

                $.each(view, function(index, value){
                    raw.push(value);
                });
            });
        },
        loadCategories              : function(){
            var self = this, raw = this.get("categoryList");

            //Clear array
            if(raw.length>0){
                raw.splice(0,raw.length);
            }

            this.categoryDS.query({
                filter:[]
            }).then(function(){
                var view = self.categoryDS.view();

                $.each(view, function(index, value){
                    raw.push(value);
                });
            });
        },
        loadItemGroups              : function(){
            var self = this, raw = this.get("itemGroupList");

            //Clear array
            if(raw.length>0){
                raw.splice(0,raw.length);
            }

            this.itemGroupDS.query({
                filter:[]
            }).then(function(){
                var view = self.itemGroupDS.view();

                $.each(view, function(index, value){
                    raw.push(value);
                });
            });
        },
        loadMeasurements            : function(){
            var self = this, raw = this.get("measurementList");

            //Clear array
            if(raw.length>0){
                raw.splice(0,raw.length);
            }

            this.measurementDS.query({
                filter:[],
            }).then(function(){
                var view = self.measurementDS.view();

                $.each(view, function(index, value){
                    raw.push(value);
                });
            });
        },
        loadContactTypes            : function(){
            var self = this, raw = this.get("contactTypeList");

            //Clear array
            if(raw.length>0){
                raw.splice(0,raw.length);
            }

            this.contactTypeDS.query({
                filter:[]
            }).then(function(){
                var view = self.contactTypeDS.view();

                $.each(view, function(index, value){
                    raw.push(value);
                });
            });
        },
        getPaymentTerm              : function(id){
            var data = this.paymentTermDS.get(id);
            return data.name;
        },
        getPrefixAbbr               : function(type){
            var abbr = "";
            $.each(this.prefixList, function(index, value){
                if(value.type==type){
                    abbr = value.abbr;

                    return false;
                }
            });

            return abbr;
        },
        getCurrencyCode             : function(locale){
            var code = "";

            $.each(this.currencyDS.data(), function(index, value){
                if(value.locale==locale){
                    code = value.code;

                    return false;
                }
            });

            return code;
        },
        getPriceList                : function(id){
            var priceList = [],
                item = this.itemDS.get(id),
                measurement = this.measurementDS.get(item.measurement_id);

            $.each(this.itemPriceList, function(index, value){
                if(value.item_id==id){
                    priceList.push(value);
                }
            });

            return priceList;
        }
    });

    /*************************************************
    *   HOME PAGE MVVM                               *
    *************************************************/
    banhji.index = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl+"accounting_modules/apar"),
        summaryDS           : dataStore(apiUrl+"accounting_modules/financial_snapshot"),
        graphDS             : dataStore(apiUrl+"cash_modules/cash_in_out"),
        modules             : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + 'admin/modules',
                    type: "GET",
                    dataType: 'json'
                },
                create  : {
                    url: apiUrl + 'admin/modules',
                    type: "POST",
                    dataType: 'json'
                },
                update  : {
                    url: apiUrl + 'admin/modules',
                    type: "PUT",
                    dataType: 'json'
                },
                destroy : {
                    url: apiUrl + 'admin/modules',
                    type: "DELETE",
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            limit: options.pageSize,
                            page: options.page,
                            filter: options.filter
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            batch: true,
            serverFiltering: true,
            serverPaging: true,
            // pageSize: 100
        }),
        companyInf          : function() {
            var company = JSON.parse(localStorage.getItem('userData/user'));
            return company;
        },
        getLogo             : function() {
            banhji.companyDS.fetch(function(){
                if(banhji.companyDS.data().length > 0) {
                    banhji.index.set('companyLogo', banhji.companyDS.data()[0].logo);
                }
            });
        },
        obj                 : {},
        today               : new Date(),
        companyName         : null,
        companyLogo         : banhji.institute.logo.url,
        pageLoad            : function(){
            this.setObj();
            this.loadData();
        },
        setObj      : function(){
            this.set("obj", {
                //AR
                ar                  : 0,
                ar_open             : 0,
                ar_customer         : 0,
                ar_overdue          : 0,
                //AP
                ap                  : 0,
                ap_open             : 0,
                ap_vendor           : 0,
                ap_overdue          : 0,
                //Performance
                income              : 0,
                expense             : 0,
                net_income          : 0,
                //Position
                asset               : 0,
                liability           : 0,
                equity              : 0
            });
        },
        loadData            : function(){
            var self = this, obj = this.get("obj");

            this.graphDS.read();

            this.dataSource.query({
                filter: [],
                page: 1,
                pageSize: 5
            }).then(function(){
                var view = self.dataSource.view();

                obj.set("ar", kendo.toString(view[0].ar, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
                obj.set("ar_open", kendo.toString(view[0].ar_open, "n0"));
                obj.set("ar_customer", kendo.toString(view[0].ar_customer, "n0"));
                obj.set("ar_overdue", kendo.toString(view[0].ar_overdue, "n0"));

                obj.set("ap", kendo.toString(view[0].ap, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
                obj.set("ap_open", kendo.toString(view[0].ap_open, "n0"));
                obj.set("ap_vendor", kendo.toString(view[0].ap_vendor, "n0"));
                obj.set("ap_overdue", kendo.toString(view[0].ap_overdue, "n0"));
            });

            this.summaryDS.query({
                filter: [],
                page: 1,
                pageSize: 5
            }).then(function(){
                var view = self.summaryDS.view();

                obj.set("income", kendo.toString(view[0].income, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
                obj.set("expense", kendo.toString(view[0].expense, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
                obj.set("net_income", kendo.toString(view[0].net_income, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));

                obj.set("asset", kendo.toString(view[0].asset, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
                obj.set("liability", kendo.toString(view[0].liability, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
                obj.set("equity", kendo.toString(view[0].equity, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
            });
        }
    });
    banhji.searchAdvanced =  kendo.observable({
        lang                : langVM,
        contactDS           : dataStore(apiUrl+"contacts"),
        contactTypeDS       : dataStore(apiUrl+"contacts/type"),
        transactionDS       : dataStore(apiUrl+"transactions"),
        itemDS              : dataStore(apiUrl+"items"),
        accountDS           : dataStore(apiUrl+"accounts"),
        searchType          : "",
        searchText          : "",
        found               : 0,
        pageLoad            : function(){
        },
        search              : function(){
            var self = this,
            searchText = this.get("searchText");
            this.set("found", 0);

            if(searchText){
                this.contactDS.query({
                    filter:[
                        { field:"number", operator:"like", value: searchText },
                        { field:"surname", operator:"or_like", value: searchText },
                        { field:"name", operator:"or_like", value: searchText },
                        { field:"company", operator:"or_like", value: searchText }
                    ],
                    page:1,
                    pageSize: 10
                }).then(function(){
                    var found = self.get("found") + self.contactDS.total();
                    self.set("found", found);
                });

                this.transactionDS.query({
                    filter:[
                        { field:"number", operator:"like", value: searchText }
                    ],
                    page:1,
                    pageSize: 10
                }).then(function(){
                    var found = self.get("found") + self.transactionDS.total();
                    self.set("found", found);
                });

                this.itemDS.query({
                    filter:[
                        { field:"number", operator:"like", value: searchText },
                        { field:"name", operator:"or_like", value: searchText }
                    ],
                    page:1,
                    pageSize: 10
                }).then(function(){
                    var found = self.get("found") + self.itemDS.total();
                    self.set("found", found);
                });

                this.accountDS.query({
                    filter:[
                        { field:"number", operator:"like", value: searchText },
                        { field:"name", operator:"or_like", value: searchText }
                    ],
                    page:1,
                    pageSize: 10
                }).then(function(){
                    var found = self.get("found") + self.accountDS.total();
                    self.set("found", found);
                });
            }
        },
        selectedContact     : function(e){
            e.preventDefault();

            var data = e.data,
            type = this.contactTypeDS.get(data.contact_type_id);

            if(type.parent_id==1){
                banhji.customerCenter.loadContact(data.id);
                banhji.router.navigate('/customer_center', false);
            }else{
                banhji.vendorCenter.loadContact(data.id);
                banhji.router.navigate('/vendor_center', false);
            }
        },
        selectedTransaction : function(e){
            e.preventDefault();

            var data = e.data;
            banhji.router.navigate('/'+data.type.toLowerCase()+'/'+data.id);
        },
        selectedItem        : function(e){
            e.preventDefault();

            var data = e.data;
            banhji.router.navigate('/item_center/'+e.data.id);
        },
        selectedAccount         : function(e){
            e.preventDefault();

            var data = e.data;
            banhji.router.navigate('/accounting_center/'+e.data.id);
        }
    });
    banhji.customTable =  kendo.observable({
        lang            : langVM,
        id              : "",
        txnDS           : dataStore(apiUrl+"transactions"),
        itemLineDS      : dataStore(apiUrl+"item_lines"),
        accountLineDS   : dataStore(apiUrl+"account_lines"),
        journalLineDS   : dataStore(apiUrl+"journal_lines"),
        pageLoad        : function(){
        },
        searchTxn       : function(){
            var id = this.get("id");

            this.txnDS.filter({ field:"id", value: id });
            this.itemLineDS.filter({ field:"transaction_id", value: id });
            this.accountLineDS.filter({ field:"transaction_id", value: id });
            this.journalLineDS.filter({ field:"transaction_id", value: id });
        }
    });





    /*************************************************
    *   CUSTOMER MVVM                                *
    *************************************************/
    banhji.customerDashboard = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "customer_modules/dashboard"),
        graphDS             : dataStore(apiUrl + "customer_modules/monthly_sale"),
        obj                 : {},
        pageLoad            : function(){
            var self = this;

            this.graphDS.read();

            this.dataSource.query({
                filter: []
            }).then(function(){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
            });
        }
    });
    banhji.customerCenter = kendo.observable({
        lang                : langVM,
        transactionDS       : dataStore(apiUrl + 'transactions'),
        noteDS              : dataStore(apiUrl + 'notes'),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        txnDS               : dataStore(apiUrl + "transactions"),
        currencyDS          : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        contactTypeDS       : new kendo.data.DataSource({
            data: banhji.source.contactTypeList,
            filter: { field:"parent_id", value: 1 }//Customer
        }),
        contactDS           : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "contacts",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:{ field:"parent_id", operator:"where_related_contact_type", value:1 },
            sort:{ field:"number", dir:"asc" },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        sortList            : banhji.source.sortList,
        sorter              : "all",
        sdate               : "",
        edate               : "",
        obj                 : null,
        note                : "",
        searchText          : "",
        contact_type_id     : null,
        currency_id         : 0,
        balance             : 0,
        deposit             : 0,
        outInvoice          : 0,
        overInvoice         : 0,
        currencyCode        : "",
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.loadObj(id);
            }

            //Refresh
            if(this.contactDS.total()>0){
                this.contactDS.fetch();
                this.searchTransaction();
                this.loadSummary();
            }
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");
                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));
                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        setCurrencyCode     : function(){
            var code = "", obj = this.get("obj");

            $.each(banhji.source.currencyDS.data(), function(index, value){
                if(value.locale == obj.locale){
                    code = value.code;

                    return false;
                }
            });

            this.set("currencyCode", code);
        },
        //Obj
        loadObj             : function(id){
            var self = this;

            this.contactDS.query({
                filter: { field:"id", value:id},
                page:1,
                pageSize:100
            }).then(function(){
                var view = self.contactDS.view();

                if(view.length>0){
                    self.set("obj", view[0]);
                    self.loadData();
                }
            });
        },
        loadData            : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.searchTransaction();
                this.loadSummary();
                this.setCurrencyCode();

                this.attachmentDS.query({
                    filter:{ field:"contact_id", value: obj.id },
                    page: 1,
                    pageSize:10
                });
                this.noteDS.query({
                    filter: { field:"contact_id", value: obj.id },
                    sort: { field:"noted_date", dir:"desc" },
                    page: 1,
                    pageSize: 10
                });
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            if(obj!==null){
                // Check the extension of each file and abort the upload if it is not .jpg
                $.each(files, function(index, value){
                    if (value.extension.toLowerCase() === ".jpg"
                        || value.extension.toLowerCase() === ".jpeg"
                        || value.extension.toLowerCase() === ".tiff"
                        || value.extension.toLowerCase() === ".png"
                        || value.extension.toLowerCase() === ".gif"
                        || value.extension.toLowerCase() === ".pdf"){

                        var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                        self.attachmentDS.add({
                            user_id         : self.get("user_id"),
                            contact_id      : obj.id,
                            type            : "Contact",
                            name            : value.name,
                            description     : "",
                            key             : key,
                            url             : banhji.s3 + key,
                            size            : value.size,
                            created_at      : new Date(),

                            file            : value.rawFile
                        });
                    }else{
                        alert("This type of file is not allowed to attach.");
                    }
                });
            }
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
                this.attachmentDS.sync();
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Summary
        loadContact         : function(id){
            var self = this;

            this.contactDS.query({
                filter:[
                    { field:"id", value:id }
                ],
                page: 1,
                pageSize: 50
            }).then(function(e) {
                var view = self.contactDS.data();

                if(view.length>0){
                    self.set("obj", view[0]);
                    self.loadData();
                }
            });
        },
        loadSummary         : function(){
            var self = this, obj = this.get("obj");

            if(obj!==null){
                this.txnDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", operator:"where_in", value: ["Customer_Deposit", "Commercial_Invoice", "Vat_Invoice", "Invoice"] },
                        { field:"status", operator:"where_in", value: [0,2] }
                    ],
                    sort: { field: "issued_date", dir: "desc" },
                    page: 1,
                    pageSize: 1000
                }).then(function(){
                    var view = self.txnDS.view(),
                    deposit = 0, open = 0, over = 0, balance = 0, today = new Date();

                    $.each(view, function(index, value){
                        if(value.type=="Customer_Deposit"){
                            deposit += kendo.parseFloat(value.amount);
                        }else{
                            balance += kendo.parseFloat(value.amount) - (kendo.parseFloat(value.deposit) + value.amount_paid);
                            open++;

                            if(new Date(value.due_date) < today){
                                over++;
                            }
                        }
                    });

                    self.set("deposit", kendo.toString(deposit, obj.locale=="km-KH"?"c0":"c", obj.locale));
                    self.set("outInvoice", kendo.toString(open, "n0"));
                    self.set("overInvoice", kendo.toString(over, "n0"));
                    self.set("balance", kendo.toString(balance, obj.locale=="km-KH"?"c0":"c", obj.locale));
                });
            }
        },
        loadBalance         : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.transactionDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", operator:"where_in", value:["Commercial_Invoice", "Vat_Invoice", "Invoice"] },
                        { field:"status", operator:"where_in", value: [0,2] }
                    ],
                    sort: [
                        { field: "issued_date", dir: "desc" },
                        { field: "id", dir: "desc" }
                    ],
                    page: 1,
                    pageSize: 10
                });
            }
        },
        loadDeposit         : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.transactionDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", value:"Customer_Deposit" }
                    ],
                    sort: [
                        { field: "issued_date", dir: "desc" },
                        { field: "id", dir: "desc" }
                    ],
                    page: 1,
                    pageSize: 10
                });
            }
        },
        loadOverInvoice     : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.transactionDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", operator:"where_in", value: ["Commercial_Invoice", "Vat_Invoice", "Invoice"] },
                        { field:"status", operator:"where_in", value: [0,2] },
                        { field:"due_date <", value: kendo.toString(new Date(), "yyyy-MM-dd") }
                    ],
                    sort: [
                        { field: "issued_date", dir: "desc" },
                        { field: "id", dir: "desc" }
                    ],
                    page: 1,
                    pageSize: 10
                });
            }
        },
        selectedRow         : function(e){
            var data = e.data;

            this.set("obj", data);
            this.loadData();
        },
        //Search
        enterSearch         : function(e){
            e.preventDefault();

            this.search();
        },
        search              : function(){
            var self = this,
            para = [],
            searchText = this.get("searchText"),
            contact_type_id = this.get("contact_type_id");

            if(searchText){
                //Phone
                if(this.phonenumber(searchText)){
                    para.push({ field: "phone", operator: "contains", value: searchText });
                }else{
                    var textParts = searchText.replace(/([a-z]+)/i, "$1 ").split(/[^0-9a-z]+/ig);
                    if(textParts.length===2){
                        if(textParts[0]!=="" && textParts[1]!==""){
                            para.push({ field: "abbr", value: textParts[0] });
                            para.push({ field: "number", value: textParts[1] });
                        }else{
                            para.push({ field: "name", operator: "contains", value: searchText });
                        }
                    }else{
                        para.push({ field: "name", operator: "contains", value: searchText });
                    }
                }
            }

            if(contact_type_id){
                para.push({ field: "contact_type_id", value: contact_type_id });
            }else{
                para.push({ field: "parent_id", operator:"where_related_contact_type", value: 1 });
            }

            this.contactDS.filter(para);

            //Clear search filters
            self.set("searchText", "");
            self.set("contact_type_id", 0);
        },
        phonenumber         : function (inputtxt){
            var phoneno = /^[+]*[(]{0,1}[0-9]{1,3}[)]{0,1}[-\s\./0-9]*$/g;
            if(inputtxt.match(phoneno)){
                return true;
            }else{
                return false;
            }
        },
        searchTransaction   : function(){
            var self = this,
                start = this.get("sdate"),
                end = this.get("edate"),
                para = [], obj = this.get("obj");

            if(obj!==null){
                para.push({ field:"contact_id", value: obj.id });

                //Dates
                if(start && end){
                    start = new Date(start);
                    end = new Date(end);
                    end.setDate(end.getDate()+1);

                    para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                    para.push({ field:"issued_date <=", value: kendo.toString(end, "yyyy-MM-dd") });
                }else if(start){
                    start = new Date(start);
                    para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
                }else if(end){
                    end = new Date(end);
                    end.setDate(end.getDate()+1);
                    para.push({ field:"issued_date <=", value: kendo.toString(end, "yyyy-MM-dd") });
                }else{}

                this.transactionDS.query({
                    filter: para,
                    sort: { field: "issued_date", dir: "desc" },
                    page: 1,
                    pageSize: 10
                });
            }
        },
        //Links
        goEdit              : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/customer/'+obj.id);
            }
        },
        goReference         : function(e){
            var self = this, data = e.data;

            this.txnDS.query({
                filter:{ field:"id", value:data.reference_id}
            }).then(function(){
                var view = self.txnDS.view();

                banhji.router.navigate('/' + view[0].type.toLowerCase() +'/'+ data.reference_id);
            });
        },
        goQuote             : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/quote');
                banhji.quote.setContact(obj);
            }
        },
        goDeposit           : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/customer_deposit');
                banhji.customerDeposit.setContact(obj);
            }
        },
        goSaleOrder         : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/sale_order');
                banhji.saleOrder.setContact(obj);
            }
        },
        goCashSale          : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/cash_sale');
                banhji.cashSale.setContact(obj);
            }
        },
        goInvoice           : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/invoice');
                banhji.invoice.setContact(obj);
            }
        },
        goGDN               : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/gdn');
                banhji.gdn.setContact(obj);
            }
        },
        goSaleReturn        : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/sale_return');
                banhji.saleReturn.setContact(obj);
            }
        },
        goStatement         : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/statement');
                banhji.statement.setContact(obj);
            }
        },
        goCashRefound       : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/cash_refund');
                banhji.cashRefund.setContact(obj);
            }
        },
        goCashReceipt       : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/cash_receipt');
                banhji.cashReceipt.loadContact(obj.id);
            }
        },
        payInvoice          : function(e){
            var data = e.data;

            if(obj!==null){
                banhji.router.navigate('/cash_receipt');
                banhji.cashReceipt.loadInvoice(data.id);
            }
        },
        //Note
        saveNoteEnter       : function(e){
            e.preventDefault();
            this.saveNote();
        },
        saveNote            : function(){
            var obj = this.get("obj");

            if(obj!==null && this.get("note")!==""){
                this.noteDS.insert(0, {
                    contact_id  : obj.id,
                    note        : this.get("note"),
                    noted_date  : new Date(),
                    created_by  : this.get("user_id"),

                    creator     : ""
                });

                this.noteDS.sync();
                this.set("note", "");
            }else{
                alert("Please select a customer and Memo is required");
            }
        }
    });
    banhji.customer = kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "contacts"),
        attachmentDS            : dataStore(apiUrl + "attachments"),
        patternDS               : dataStore(apiUrl + "contacts"),
        numberDS                : dataStore(apiUrl + "contacts"),
        deleteDS                : dataStore(apiUrl + "transactions"),
        existingDS              : dataStore(apiUrl + "contacts"),
        contactPersonDS         : dataStore(apiUrl + "contact_persons"),
        paymentTermDS           : banhji.source.paymentTermDS,
        paymentMethodDS         : banhji.source.paymentMethodDS,
        countryDS               : banhji.source.countryDS,
        currencyDS              : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        contactTypeDS           : new kendo.data.DataSource({
            data: banhji.source.contactTypeList,
            filter: { field:"parent_id", value: 1 }//Customer
        }),
        arDS                    : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: { field:"account_type_id", value: 12 },
            sort: { field:"number", dir:"asc" }
        }),
        raDS                    : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 35 },
                    { field: "account_type_id", value: 39 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        depositDS               : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 25 },
                    { field: "account_type_id", value: 30 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        tradeDiscountDS         : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: { field:"id", value: 72 },
            sort: { field:"number", dir:"asc" }
        }),
        settlementDiscountDS    : new kendo.data.DataSource({
            data: banhji.source.accountList,
            // filter: { field:"id", value: 99 },
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 36 },
                    { field: "account_type_id", value: 37 },
                    { field: "account_type_id", value: 38 },
                    { field: "account_type_id", value: 40 },
                    { field: "account_type_id", value: 41 },
                    { field: "account_type_id", value: 42 },
                    { field: "account_type_id", value: 43 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        taxItemDS               : new kendo.data.DataSource({
            data: banhji.source.taxList,
            filter:{
                logic: "or",
                filters: [
                    { field: "tax_type_id", value: 3 },//Customer Tax
                    { field: "tax_type_id", value: 9 }
                ]
            },
            sort: [
                { field: "tax_type_id", dir: "asc" },
                { field: "name", dir: "asc" }
            ]
        }),
        genders                 : banhji.source.genderList,
        statusList              : banhji.source.statusList,
        confirmMessage          : banhji.source.confirmMessage,
        isEdit                  : false,
        isProtected             : false,
        obj                     : null,
        saveClose               : false,
        showConfirm             : false,
        notDuplicateNumber      : true,
        phFullname              : "Customer Name ...",
        contact_type_id         : 0,
        pageLoad                : function(id, contact_type_id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id, contact_type_id);
            }else{
                if(this.dataSource.total()==0){
                    this.addEmpty();
                }else{
                    var obj = this.get("obj");
                    if(obj.isNew()==false){
                        this.addEmpty();
                    }
                }
            }
        },
        //Contact Person
        addEmptyContactPerson   : function(){
            var obj = this.get("obj");

            this.contactPersonDS.add({
                contact_id          : obj.id,
                prefix              : "",
                name                : "",
                department          : "",
                phone               : "",
                email               : ""
            });
        },
        deleteContactPerson     : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var d = e.data,
                obj = this.contactPersonDS.getByUid(d.uid);

                this.contactPersonDS.remove(obj);
            }
        },
        //Map
        loadMap                 : function(){
            var obj = this.get("obj"), lat = kendo.parseFloat(obj.latitute),
            lng = kendo.parseFloat(obj.longtitute);

            if(lat && lng){
                var myLatLng = {lat:lat, lng:lng};
                var mapOptions = {
                    zoom: 17,
                    center: myLatLng,
                    mapTypeControl: false,
                    zoomControl: false,
                    scaleControl: false,
                    streetViewControl: false
                };
                var map = new google.maps.Map(document.getElementById('map'),mapOptions);
                var marker = new google.maps.Marker({
                    position: myLatLng,
                    map: map,
                    title: obj.number
                });
            }
        },
        copyBillTo              : function(){
            var obj = this.get("obj");

            obj.set("ship_to", obj.bill_to);
        },
        //Upload
        onSelect                : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files[0],
            obj = this.get("obj");

            var fileReader = new FileReader();
            fileReader.onload = function (event) {
                var mapImage = event.target.result;
                self.obj.set('image_url', mapImage);
            }
            fileReader.readAsDataURL(files.rawFile);

            // Check the extension of each file and abort the upload if it is not .jpg
            if (files.extension.toLowerCase() === ".jpg"
                || files.extension.toLowerCase() === ".jpeg"
                || files.extension.toLowerCase() === ".tiff"
                || files.extension.toLowerCase() === ".png"
                || files.extension.toLowerCase() === ".gif"){

                if(this.attachmentDS.total()>0){
                    var att = this.attachmentDS.at(0);
                    this.attachmentDS.remove(att);
                }

                var key = 'ITEM_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ files.name;

                this.attachmentDS.add({
                    user_id         : this.get("user_id"),
                    item_id         : obj.id,
                    type            : "Item",
                    name            : files.name,
                    description     : "",
                    key             : key,
                    url             : banhji.s3 + key,
                    size            : files.size,
                    created_at      : new Date(),

                    file            : files.rawFile
                });
            }else{
                alert("This type of file is not allowed to attach.");
            }
        },
        saveAttachment          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"abbr", value: obj.abbr });
                para.push({ field:"number", value: obj.number });
                para.push({ field:"contact_type_id", value: obj.contact_type_id });

                this.existingDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.existingDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber          : function(){
            var self = this, obj = this.get("obj");

            this.numberDS.query({
                filter:[
                    { field:"contact_type_id", value:obj.contact_type_id }
                ],
                sort: { field:"number", dir:"desc" },
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.numberDS.view();

                var lastNo = 0;
                if(view.length>0){
                    lastNo = kendo.parseInt(view[0].number);
                }
                lastNo++;
                obj.set("number",kendo.toString(lastNo, "00000"));
            });
        },
        checkExistingTxn        : function(){
            var self = this, obj = this.get("obj");

            this.deleteDS.query({
                filter: { field:"contact_id", value: obj.id },
                page: 1,
                pageSize: 1
            }).then(function(e){
                var view = self.deleteDS.view();

                if(view.length>0){
                    self.set("isProtected", true);
                }else{
                    self.set("isProtected", false);
                }
            });
        },
        //Obj
        loadObj                 : function(id, contact_type_id){
            var self = this, para = [];

            if(id>0){
                para.push({ field:"id", value: id });
            }

            if(contact_type_id){
                para.push({ field:"contact_type_id", value: contact_type_id });
                para.push({ field:"is_pattern", value: 1 });
            }

            this.dataSource.query({
                filter: para,
                page: 1,
                pageSize: 100
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
                self.loadMap();
                self.checkExistingTxn();
            });

            this.contactPersonDS.filter({ field:"contact_id", value: id });
        },
        addEmpty                : function(){
            this.dataSource.insert(0, {
                "country_id"            : 0,
                "user_id"               : 0,
                "contact_type_id"       : 4, //General Customer
                "abbr"                  : "",
                "number"                : "",
                "membership_number"     : "",
                "surname"               : "",
                "name"                  : "",
                "gender"                : "M",
                "dob"                   : "",
                "phone"                 : "",
                "email"                 : "",
                "company"               : "",
                "vat_no"                : "",
                "memo"                  : "",
                "city"                  : "",
                "post_code"             : "",
                "address"               : "",
                "bill_to"               : "",
                "ship_to"               : "",
                "latitute"              : "",
                "longtitute"            : "",
                "credit_limit"          : 0,
                "locale"                : banhji.locale,
                "invoice_note"          : "",
                "payment_term_id"       : 0,
                "payment_method_id"     : 0,
                "registered_date"       : new Date(),
                "account_id"            : 0,
                "ra_id"                 : 0,
                "tax_item_id"           : 0,
                "deposit_account_id"    : 0,
                "trade_discount_id"     : 0,
                "settlement_discount_id": 0,
                "is_pattern"            : 0,
                "status"                : 1,
                "image_url"             : banhji.no_image,

                "custom_fields"         : []
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.typeChanges();
        },
        objSync                 : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, obj = this.get("obj");

            obj.set("registered_date", kendo.toString(new Date(obj.registered_date), "yyyy-MM-dd"));
            if(obj.dob!==""){
                obj.set("dob", kendo.toString(new Date(obj.dob), "yyyy-MM-dd"));
            }

            //Edit Mode
            if(this.get("isEdit")){
                //Contact Person has changes
                if(this.contactPersonDS.hasChanges()){
                    obj.set("dirty", true);
                }
            }

            //Attachment
            if(this.attachmentDS.total()>0){
                var att = this.attachmentDS.at(0);
                obj.set("image_url", att.url);
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Contact Person
                    $.each(self.contactPersonDS.data(), function(index, value) {
                        value.set("contact_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("item_id", data[0].id);
                    });
                }
                self.contactPersonDS.sync();
                self.saveAttachment();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear                   : function(){
            this.dataSource.cancelChanges();
            this.contactPersonDS.cancelChanges();

            // this.dataSource.data([]);
            // this.contactPersonDS.data([]);

            this.set("isEdit", false);
            this.set("isProtected", false);
            this.set("notDuplicateNumber", true);
            this.set("contact_type_id", 0);
        },
        cancel                  : function(){
            this.clear();

            banhji.userManagement.removeMultiTask("customer");

            history.back();
        },
        delete                  : function(){
            var obj = this.get("obj");
            this.set("showConfirm",false);

            if(!obj.is_system==1){
                if(this.get("isProtected")){
                    alert("Sorry, this data is protected!");
                }else{
                    obj.set("deleted", 1);
                    this.dataSource.sync();
                    banhji.source.customerDS.fetch();

                    window.history.back();
                }
            }
        },
        openConfirm             : function(){
            this.set("showConfirm", true);
        },
        closeConfirm            : function(){
            this.set("showConfirm", false);
        },
        //Pattern
        typeChanges             : function(){
            var obj = this.get("obj");

            if(obj.contact_type_id){
                this.applyPattern();
                this.generateNumber();
            }
        },
        applyPattern            : function(){
            var self = this, obj = self.get("obj");

            this.patternDS.query({
                filter: [
                    { field:"contact_type_id", value: obj.contact_type_id },
                    { field:"is_pattern", value: 1 }
                ],
                page: 1,
                pageSize: 1
            }).then(function(data){
                var view = self.patternDS.view(),
                type = self.contactTypeDS.get(view[0].contact_type_id);
                if(view.length>0){
                    obj.set("country_id", view[0].country_id);
                    obj.set("abbr", type.abbr);
                    obj.set("gender", view[0].gender);
                    obj.set("company", view[0].company);
                    obj.set("vat_no", view[0].vat_no);
                    obj.set("memo", view[0].memo);
                    obj.set("city", view[0].city);
                    obj.set("post_code", view[0].post_code);
                    obj.set("address", view[0].address);
                    obj.set("bill_to", view[0].bill_to);
                    obj.set("ship_to", view[0].ship_to);
                    obj.set("invoice_note", view[0].invoice_note);
                    obj.set("payment_term_id", view[0].payment_term_id);
                    obj.set("payment_method_id", view[0].payment_method_id);
                    obj.set("credit_limit", view[0].credit_limit);
                    obj.set("locale", view[0].locale);
                    obj.set("account_id", view[0].account_id);
                    obj.set("ra_id", view[0].ra_id);
                    obj.set("tax_item_id", view[0].tax_item_id);
                    obj.set("deposit_account_id", view[0].deposit_account_id);
                    obj.set("trade_discount_id", view[0].trade_discount_id);
                    obj.set("settlement_discount_id", view[0].settlement_discount_id);
                }
            });
        }
    });
    // CUSTOMER FUNCTIONS
    banhji.quote =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        assemblyLineDS      : dataStore(apiUrl + "item_lines"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "item_lines"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        balanceDS           : dataStore(apiUrl + "transactions/balance"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        itemDS              : dataStore(apiUrl + "items"),
        assemblyDS          : dataStore(apiUrl + "item_assemblies"),
        itemPriceDS         : dataStore(apiUrl + "item_prices"),
        wacDS               : dataStore(apiUrl + "items/weighted_average_costing"),
        employeeDS          : banhji.source.employeeDS,
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "Quote" }
        }),
        categoryDS          : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: [
                { field:"item_type_id", value: 1 },
                { field:"id", operator:"neq", value: 5 },
                { field:"id", operator:"neq", value: 6 }
            ]
        }),
        itemGroupDS         : banhji.source.itemGroupDS,
        contactDS           : banhji.source.customerDS,
        paymentTermDS       : banhji.source.paymentTermDS,
        statusObj           : banhji.source.statusObj,
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthOptionList     : banhji.source.monthOptionList,
        monthList           : banhji.source.monthList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        isEdit              : false,
        saveDraft           : false,
        saveClose           : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        notDuplicateNumber  : true,
        recurring           : "",
        recurring_validate  : false,
        balance             : 0,
        total               : 0,
        barcode             : "",
        barcodeVisible      : false,
        category_id         : 0,
        item_group_id       : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Barcode
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                category_id = this.get("category_id"),
                item_group_id = this.get("item_group_id");

            if(item_group_id>0){
                para.push({ field:"number", value:item_group_id });
            }else{
                if(category_id>0){
                    para.push({ field:"category_id", value:category_id });
                }
            }

            this.itemDS.query({
                filter: para,
                page:1,
                pageSize: 10
            });

            this.set("category_id", 0);
            this.set("item_group_id", 0);
        },
        searchByBarcode     : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                barcode = this.get("barcode");

            if(barcode!==""){
                this.itemDS.query({
                    filter: { field: "barcode", value: barcode },
                    page:1,
                    pageSize: 1
                }).then(function(){
                    var view = self.itemDS.view();

                    if(view.length>0){
                        self.insertItem(view[0]);
                    }
                });

                this.set("barcode", "");
            }
        },
        addSearchItem       : function(e){
            var data = e.data;

            this.insertItem(data);
        },
        openBarcodeWindow   : function(){
            this.set("barcodeVisible", true);
        },
        closeBarcodeWindow  : function(){
            this.set("barcodeVisible", false);
        },
        insertItem      : function(data){
            var self = this,
                obj = this.get("obj"),
                rate = obj.rate / banhji.source.getRate(data.locale, new Date(obj.issued_date));

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: data.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();

                var item_price = {
                    measurement_id  : data.measurement_id,
                    price           : kendo.parseFloat(data.price),
                    conversion_ratio: 1,
                    measurement     : data.measurement.name
                };

                self.lineDS.insert(0, {
                    transaction_id      : obj.id,
                    tax_item_id         : 0,
                    item_id             : data.id,
                    assembly_id         : 0,
                    measurement_id      : data.measurement_id,
                    description         : data.sale_description,
                    quantity            : 1,
                    conversion_ratio    : 1,
                    cost                : wac[0].cost * rate,
                    price               : data.price,
                    amount              : data.price,
                    discount            : 0,
                    discount_percentage : 0,
                    tax                 : 0,
                    rate                : rate,
                    locale              : data.locale,
                    movement            : 0,
                    reference_no        : "",

                    item                : data,
                    item_price          : item_price,
                    tax_item            : { id:"", name:"" }
                });
            });
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Contact
        setContact      : function(contact){
            var obj = this.get("obj");

            obj.set("contact", contact);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
                obj.set("payment_term_id", contact.payment_term_id);
                obj.set("locale", contact.locale);
                obj.set("bill_to", contact.bill_to);
                obj.set("ship_to", contact.ship_to);

                this.setRate();
                this.setTerm();
                this.loadBalance();
                this.jobDS.filter({ field:"contact_id", value: contact.id });
            }

            this.changes();
        },
        employeeChanges         : function(){
            var obj = this.get("obj");

            if(obj.employee){
                var employee = obj.employee;

                obj.set("employee_id", employee.id);
            }else{
                obj.set("employee_id", 0);
            }
        },
        loadBalance         : function(){
            var self = this, obj = this.get("obj");

            this.balanceDS.query({
                filter:[
                    { field:"contact_id", value:obj.contact_id },
                    { field:"type", operator:"where_in", value:["Commercial_Invoice", "Vat_Invoice", "Invoice"] }
                ]
            }).then(function(){
                var view = self.balanceDS.view(),
                    contact = obj.contact,
                    balance = view[0].amount,
                    creditAllowed = 0;

                if(contact.credit_limit > balance){
                    creditAllowed = contact.credit_limit - balance;
                }

                self.set("balance", kendo.toString(balance, "c", obj.locale));
                obj.set("credit_allowed", creditAllowed);
            });
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            //Item Lines
            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });

            //Assembly Lines
            $.each(this.assemblyLineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });
        },
        //Payment Term
        setTerm             : function(){
            var duedate = new Date(), obj = this.get("obj");

            if(obj.payment_term_id>0){
                var term = this.paymentTermDS.get(obj.payment_term_id);

                duedate.setDate(duedate.getDate() + term.net_due);

                obj.set("due_date", duedate);
            }else{
                obj.set("due_date", new Date());
            }
        },
        //Segment
        segmentChanges      : function(e) {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //Item
        addItem             : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Item base price
            var item_price = {
                measurement_id  : item.measurement_id,
                price           : kendo.parseFloat(item.price),
                conversion_ratio: 1,
                measurement     : item.measurement.name
            };
            row.set("item_price", item_price);

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: item.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();
                row.set("cost", wac[0].cost * rate);
            });
        },
        addItemCatalog      : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : catalogItem.cost * rate,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : 0,

                        discount_percentage : 0,
                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" },
                        tax_item            : { id:"", name:"" }
                    });
                }
            });
        },
        addItemAssembly     : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            var notExist = true;
            $.each(this.assemblyLineDS.data(), function(index, value){
                if(value.assembly_id==item.id){
                    notExist = false;

                    return false;
                }
            });

            if(notExist){
                row.set("item_id", item.id);
                row.set("measurement_id", item.measurement_id);
                row.set("description", item.sale_description);
                row.set("conversion_ratio", 1);
                row.set("cost", item.cost * rate);
                row.set("price", item.price * rate);
                row.set("rate", rate);
                row.set("locale", item.locale);

                this.assemblyDS.query({
                    filter:{ field:"assembly_id", value:row.item_id }
                }).then(function(){
                    var view = self.assemblyDS.view();

                    $.each(view, function(index, value){
                        var itemAssembly = banhji.source.itemDS.get(value.item_id),
                            itemAssemblyRate = obj.rate / banhji.source.getRate(itemAssembly.locale, new Date(obj.issued_date));

                        self.assemblyLineDS.add({
                            transaction_id      : obj.id,
                            item_id             : value.item_id,
                            assembly_id         : value.assembly_id,
                            measurement_id      : value.measurement_id,
                            description         : itemAssembly.sale_description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : itemAssembly.cost * rate,
                            price               : value.price * itemAssemblyRate,
                            amount              : value.price * itemAssemblyRate,
                            rate                : itemAssemblyRate,
                            locale              : value.locale,
                            movement            : 0,

                            item                : itemAssembly
                        });
                    });
                });
            }else{
                alert("Duplicate Item Assembly!");
                row.set("item_id", 0);
                row.set("item", { id:"", name:"" });
            }
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
                total = 0, subTotal = 0, discount =0, tax = 0, remaining = 0, amount_due = 0, itemIds = [];

            $.each(this.lineDS.data(), function(index, value) {
                var amt = value.quantity * value.price;
                subTotal += amt;

                //Discount by line
                if(value.discount>0){
                    amt -= value.discount;
                    discount += value.discount;
                }

                //Tax by line
                if(value.tax_item_id>0){
                    var taxAmount = amt * value.tax_item.rate;
                    tax += taxAmount;
                    value.set("tax", taxAmount);
                }else{
                    value.set("tax", 0);
                }

                value.set("amount", amt);

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            //Total
            total = (subTotal + tax) - discount;

            //Warning over credit allowed
            if(obj.credit_allowed>0 && total>obj.credit_allowed){
                this.set("amtDueColor", "Gold");
            }else{
                this.set("amtDueColor", banhji.source.amtDueColor);
            }

            obj.set("sub_total", subTotal);
            obj.set("discount", discount);
            obj.set("tax", tax);
            obj.set("amount", total);

            this.set("total", kendo.toString(total, "c", obj.locale));

            //Remove Assembly Item List
            var raw = this.assemblyLineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (jQuery.inArray(kendo.parseInt(item.assembly_id), itemIds)==-1) {
                    this.assemblyLineDS.remove(item);
                }
            }
        },
        lineDSChanges       : function(arg){
            var self = banhji.quote;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else if(item.is_assembly=="1"){
                        self.addItemAssembly(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity" || arg.field=="price" || arg.field=="discount"){
                    self.changes();
                }else if(arg.field=="item_price"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.item_price.measurement_id);
                    dataRow.set("price", dataRow.item_price.price * dataRow.rate);
                    dataRow.set("conversion_ratio", dataRow.item_price.conversion_ratio);
                }else if(arg.field=="discount_percentage"){
                    var dataRow = arg.items[0],
                        percentageAmount = dataRow.quantity * dataRow.price * dataRow.discount_percentage;

                    dataRow.set("discount", percentageAmount);
                }else if(arg.field=="tax_item"){
                    var dataRow = arg.items[0];

                    dataRow.set("tax_item_id", dataRow.tax_item.id);
                    dataRow.set("tax", 0);

                    self.changes();
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        setStatus           : function(){
            var self = this,
                obj = this.get("obj"),
                statusObj = this.get("statusObj");

            statusObj.set("text", "");
            statusObj.set("date", "");
            statusObj.set("number", "");
            statusObj.set("url", "");

            switch(obj.status) {
                case 1:
                    statusObj.set("text", "used");

                    this.txnDS.query({
                        filter:{ field:"reference_id", value: obj.id },
                        sort: { field:"issued_date", dir:"desc" },
                        page:1,
                        pageSize:1
                    }).then(function(){
                        var view = self.txnDS.view();

                        if(view.length>0){
                            statusObj.set("date", kendo.toString(new Date(view[0].issued_date), "dd-MM-yyyy h:mm:ss tt"));
                            statusObj.set("number", view[0].number);

                            var url = "#/" + view[0].type.toLowerCase() + "/" + view[0].id;
                            statusObj.set("url", url);
                        }
                    });
                    break;
                case 3:
                    statusObj.set("text", "return");
                    break;
                case 4:
                    statusObj.set("text", "draft");
                    break;
                default:
                    //Default here
            }
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    self.set("total", kendo.toString(view[0].amount, "c2", view[0].locale));
                    self.setStatus();

                    self.lineDS.query({
                        filter: [
                            { field: "transaction_id", value: id },
                            { field: "assembly_id", value: 0 }
                        ]
                    });

                    self.assemblyLineDS.query({
                        filter:[
                            { field: "transaction_id", value: id },
                            { field: "assembly_id >", value: 0 }
                        ]
                    });

                    self.attachmentDS.filter({ field: "transaction_id", value: id });
                });
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);
            this.set("amtDueColor", banhji.source.amtDueColor);

            //Set Date
            var duedate = new Date();
            duedate.setDate(duedate.getDate() + 30);

            this.dataSource.insert(0, {
                contact_id          : "",
                transaction_template_id : 1,
                payment_term_id     : 0,
                reference_id        : "",
                recurring_id        : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                employee_id         : "",
                type                : "Quote",//Required
                number              : "",
                sub_total           : 0,
                amount              : 0,
                credit_allowed      : 0,
                discount            : 0,
                tax                 : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                due_date            : duedate,
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                status              : 0,
                segments            : [],
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:"", name:"" }
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.setRate();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                item_id             : "",
                assembly_id         : 0,
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio    : 0,
                cost                : 0,
                price               : 0,
                amount              : 0,
                discount            : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : 0,

                discount_percentage : 0,
                item                : { id:"", name:"" },
                item_price          : { measurement_id:"", measurement:"" },
                tax_item            : { id:"", name:"" }
            });
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        removeRow           : function(e){
            var data = e.data;
            if(this.lineDS.total()>1){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");

            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));
            obj.set("due_date", kendo.toString(new Date(obj.due_date), "yyyy-MM-dd"));

            //Warning over credit allowed
            if(obj.credit_limit>0 && obj.amount>obj.credit_allowed){
                alert("Over credit allowed!");
            }

            this.removeEmptyRow();

            //Save Draft
            if(this.get("saveDraft")){
                obj.set("status", 4); //In progress
                obj.set("progress", "Draft");
                obj.set("is_journal", 0);//No Journal
            }

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Edit Mode
            if(obj.isNew()==false){
                //Use draft
                if(obj.status==4){
                    obj.set("status", 0);//Open
                    obj.set("progress", "");
                    obj.set("is_journal", 1);//Add Journal
                }
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Assembly Item line
                    $.each(self.assemblyLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                self.lineDS.sync();
                self.assemblyLineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveDraft") || self.get("saveClose")){
                    //Save Draft or Save Close
                    self.set("saveDraft", false);
                    self.set("saveClose", false);
                    self.cancel();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.clear();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear               : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.assemblyLineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("quote");
        },
        cancel              : function(){
            this.clear();
            window.history.back();
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id },
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);

                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        validating          : function(){
            var result = true, nonItem = true;

            //Check select non item
            $.each(this.lineDS.data(), function(index, value){
                if(value.item_id>0){
                    nonItem = false;
                }
            });

            if(nonItem){
                $("#ntf1").data("kendoNotification").error("Please select at least one item!");

                result = false;
            }

            return result;
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("contact", view[0].contact);
                obj.set("contact_id", view[0].contact.id);
                obj.set("recurring_id", id);
                obj.set("payment_term_id", view[0].payment_term_id);
                obj.set("employee_id", view[0].employee_id);//Sale Rep
                obj.set("job_id", view[0].job_id);
                obj.set("segments", view[0].segments);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
                obj.set("bill_to", view[0].bill_to);
                obj.set("ship_to", view[0].ship_to);

                // self.setContact(view[0].contact);
            });

            this.recurringLineDS.query({
                filter:[
                    { field: "transaction_id", value: id },
                    { field: "assembly_id", value: 0 }
                ]
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        tax_item_id         : value.tax_item_id,
                        item_id             : value.item_id,
                        measurement_id      : value.measurement_id,
                        description         : value.description,
                        quantity            : value.quantity,
                        cost                : value.cost,
                        price               : value.price,
                        amount              : value.amount,
                        discount            : value.discount,
                        rate                : value.rate,
                        locale              : value.locale,
                        movement            : 0,

                        item                : value.item,
                        item_price          : value.item_price,
                        tax_item            : value.tax_item
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.saleOrder =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        assemblyLineDS      : dataStore(apiUrl + "item_lines"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "item_lines"),
        referenceLineDS     : dataStore(apiUrl + "item_lines"),
        balanceDS           : dataStore(apiUrl + "transactions/balance"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        wacDS               : dataStore(apiUrl + "items/weighted_average_costing"),
        itemDS              : dataStore(apiUrl + "items"),
        assemblyDS          : dataStore(apiUrl + "item_assemblies"),
        itemPriceDS         : dataStore(apiUrl + "item_prices"),
        segmentDS           : dataStore(apiUrl + "segments"),
        segItemDS           : dataStore(apiUrl + "segments/item"),
        segmentItemDS       : dataStore(apiUrl + "segments/item"),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "Sale_Order" }
        }),
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        referenceDS         : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "transactions",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:{ field: "type", value: "Quote" },
            sort:{ field:"issued_date", dir:"desc" },
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 30
        }),
        categoryDS          : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: [
                { field:"item_type_id", value: 1 },
                { field:"id", operator:"neq", value: 5 },
                { field:"id", operator:"neq", value: 6 }
            ]
        }),
        itemGroupDS         : banhji.source.itemGroupDS,
        employeeDS          : banhji.source.employeeDS,
        contactDS           : banhji.source.customerDS,
        statusObj           : banhji.source.statusObj,
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthOptionList     : banhji.source.monthOptionList,
        monthList           : banhji.source.monthList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        isEdit              : false,
        saveDraft           : false,
        saveClose           : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        notDuplicateNumber  : true,
        recurring           : "",
        recurring_validate  : false,
        enableRef           : false,
        balance             : 0,
        total               : 0,
        reference_id        : "",
        segment_id          : "",
        segmentitem_id      : "",
        barcode             : "",
        barcodeVisible      : false,
        category_id         : 0,
        item_group_id       : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Barcode
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                category_id = this.get("category_id"),
                item_group_id = this.get("item_group_id");

            if(item_group_id>0){
                para.push({ field:"number", value:item_group_id });
            }else{
                if(category_id>0){
                    para.push({ field:"category_id", value:category_id });
                }
            }

            this.itemDS.query({
                filter: para,
                page:1,
                pageSize: 10
            });

            this.set("category_id", 0);
            this.set("item_group_id", 0);
        },
        searchByBarcode     : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                barcode = this.get("barcode");

            if(barcode!==""){
                this.itemDS.query({
                    filter: { field: "barcode", value: barcode },
                    page:1,
                    pageSize: 1
                }).then(function(){
                    var view = self.itemDS.view();

                    if(view.length>0){
                        self.insertItem(view[0]);
                    }
                });

                this.set("barcode", "");
            }
        },
        addSearchItem       : function(e){
            var data = e.data;

            this.insertItem(data);
        },
        openBarcodeWindow   : function(){
            this.set("barcodeVisible", true);
        },
        closeBarcodeWindow  : function(){
            this.set("barcodeVisible", false);
        },
        insertItem      : function(data){
            var self = this,
                obj = this.get("obj"),
                rate = obj.rate / banhji.source.getRate(data.locale, new Date(obj.issued_date));

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: data.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();

                var item_price = {
                    measurement_id  : data.measurement_id,
                    price           : kendo.parseFloat(data.price),
                    conversion_ratio: 1,
                    measurement     : data.measurement.name
                };

                self.lineDS.insert(0, {
                    transaction_id      : obj.id,
                    tax_item_id         : 0,
                    item_id             : data.id,
                    assembly_id         : 0,
                    measurement_id      : data.measurement_id,
                    description         : data.sale_description,
                    quantity            : 1,
                    conversion_ratio    : 1,
                    cost                : wac[0].cost * rate,
                    price               : data.price,
                    amount              : data.price,
                    discount            : 0,
                    discount_percentage : 0,
                    tax                 : 0,
                    rate                : rate,
                    locale              : data.locale,
                    movement            : 0,
                    reference_no        : "",

                    item                : data,
                    item_price          : item_price,
                    tax_item            : { id:"", name:"" }
                });
            });
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Contact
        setContact          : function(contact){
            var obj = this.get("obj");

            obj.set("contact", contact);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
                obj.set("locale", contact.locale);
                obj.set("bill_to", contact.bill_to);
                obj.set("ship_to", contact.ship_to);

                this.setRate();
                this.loadBalance();
                this.loadReference();
                this.jobDS.filter({ field:"contact_id", value: contact.id });
            }

            this.changes();
        },
        employeeChanges         : function(){
            var obj = this.get("obj");

            if(obj.employee){
                var employee = obj.employee;

                obj.set("employee_id", employee.id);
            }else{
                obj.set("employee_id", 0);
            }
        },
        loadBalance         : function(){
            var self = this, obj = this.get("obj");

            this.balanceDS.query({
                filter:[
                    { field:"contact_id", value:obj.contact_id },
                    { field:"type", operator:"where_in", value:["Commercial_Invoice", "Vat_Invoice", "Invoice"] }
                ]
            }).then(function(){
                var view = self.balanceDS.view(),
                    contact = obj.contact,
                    balance = view[0].amount,
                    creditAllowed = 0;

                if(contact.credit_limit > balance){
                    creditAllowed = contact.credit_limit - balance;
                }

                self.set("balance", kendo.toString(balance, "c", obj.locale));
                obj.set("credit_allowed", creditAllowed);
            });
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            //Item Lines
            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });

            //Assembly Lines
            $.each(this.assemblyLineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });
        },
        //Segment
        addSegmentItem      : function(){
            var obj = this.get("obj"),
                notExisting = true,
                segment_id = this.get("segment_id"),
                segmentitem_id = this.get("segmentitem_id");

            if(segment_id && segmentitem_id){
                $.each(this.segmentItemDS.data(), function(index, value){
                    if(value.segment_id==segment_id){
                        notExisting = false;

                        return false;
                    }
                });

                if(notExisting){
                    var segments = this.segmentDS.get(segment_id),
                        segmentitems = this.segItemDS.get(segmentitem_id);

                    this.segmentItemDS.add({
                        id : segmentitems.id,
                        segment_id: segment_id,
                        code: segmentitems.code,
                        name: segmentitems.name,
                        segment: { id : segment_id, name : segments.name}
                    });
                }else{
                    $("#ntf1").data("kendoNotification").warning("This segment is already selected!");
                }
            }

            this.set("segment_id", ""),
            this.set("segmentitem_id", "");
        },
        //Item
        addItem             : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Item base price
            var item_price = {
                measurement_id  : item.measurement_id,
                price           : kendo.parseFloat(item.price),
                conversion_ratio: 1,
                measurement     : item.measurement.name
            };
            row.set("item_price", item_price);

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: item.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();
                row.set("cost", wac[0].cost * rate);
            });
        },
        addItemCatalog      : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : catalogItem.cost * rate,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : 0,
                        discount_percentage : 0,
                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" },
                        tax_item            : { id:"", name:"" }
                    });
                }
            });
        },
        addItemAssembly     : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            var notExist = true;
            $.each(this.assemblyLineDS.data(), function(index, value){
                if(value.assembly_id==item.id){
                    notExist = false;

                    return false;
                }
            });

            if(notExist){
                row.set("item_id", item.id);
                row.set("measurement_id", item.measurement_id);
                row.set("description", item.sale_description);
                row.set("conversion_ratio", 1);
                row.set("cost", item.cost * rate);
                row.set("price", item.price * rate);
                row.set("rate", rate);
                row.set("locale", item.locale);

                this.assemblyDS.query({
                    filter:{ field:"assembly_id", value:row.item_id }
                }).then(function(){
                    var view = self.assemblyDS.view();

                    $.each(view, function(index, value){
                        var itemAssembly = banhji.source.itemDS.get(value.item_id),
                            itemAssemblyRate = obj.rate / banhji.source.getRate(itemAssembly.locale, new Date(obj.issued_date));

                        self.assemblyLineDS.add({
                            transaction_id      : obj.id,
                            item_id             : value.item_id,
                            assembly_id         : value.assembly_id,
                            measurement_id      : value.measurement_id,
                            description         : itemAssembly.sale_description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : itemAssembly.cost * rate,
                            price               : value.price * itemAssemblyRate,
                            amount              : value.price * itemAssemblyRate,
                            rate                : itemAssemblyRate,
                            locale              : value.locale,
                            movement            : 0,

                            item                : itemAssembly
                        });
                    });
                });
            }else{
                alert("Duplicate Item Assembly!");
                row.set("item_id", 0);
                row.set("item", { id:"", name:"" });
            }
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
                total = 0, subTotal = 0, discount =0, tax = 0, remaining = 0, amount_due = 0, itemIds = [];

            $.each(this.lineDS.data(), function(index, value) {
                var amt = value.quantity * value.price;
                subTotal += amt;

                //Discount by line
                if(value.discount>0){
                    amt -= value.discount;
                    discount += value.discount;
                }

                //Tax by line
                if(value.tax_item_id>0){
                    var taxAmount = amt * value.tax_item.rate;
                    tax += taxAmount;
                    value.set("tax", taxAmount);
                }else{
                    value.set("tax", 0);
                }

                value.set("amount", amt);

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            //Total
            total = (subTotal + tax) - discount;

            //Warning over credit allowed
            if(obj.credit_allowed>0 && total>obj.credit_allowed){
                this.set("amtDueColor", "Gold");
            }else{
                this.set("amtDueColor", banhji.source.amtDueColor);
            }

            obj.set("sub_total", subTotal);
            obj.set("discount", discount);
            obj.set("tax", tax);
            obj.set("amount", total);

            this.set("total", kendo.toString(total, "c", obj.locale));

            //Remove Assembly Item List
            var raw = this.assemblyLineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (jQuery.inArray(kendo.parseInt(item.assembly_id), itemIds)==-1) {
                    this.assemblyLineDS.remove(item);
                }
            }
        },
        lineDSChanges       : function(arg){
            var self = banhji.saleOrder;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else if(item.is_assembly=="1"){
                        self.addItemAssembly(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity" || arg.field=="price" || arg.field=="discount"){
                    self.changes();
                }else if(arg.field=="item_price"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.item_price.measurement_id);
                    dataRow.set("price", dataRow.item_price.price * dataRow.rate);
                    dataRow.set("conversion_ratio", dataRow.item_price.conversion_ratio);
                }else if(arg.field=="discount_percentage"){
                    var dataRow = arg.items[0],
                        percentageAmount = dataRow.quantity * dataRow.price * dataRow.discount_percentage;

                    dataRow.set("discount", percentageAmount);
                }else if(arg.field=="tax_item"){
                    var dataRow = arg.items[0];

                    dataRow.set("tax_item_id", dataRow.tax_item.id);
                    dataRow.set("tax", 0);

                    self.changes();
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        setStatus           : function(){
            var self = this,
                obj = this.get("obj"),
                statusObj = this.get("statusObj");

            statusObj.set("text", "");
            statusObj.set("date", "");
            statusObj.set("number", "");
            statusObj.set("url", "");

            switch(obj.status) {
                case 0:
                    statusObj.set("text", "open");
                    break;
                case 1:
                    statusObj.set("text", "used");

                    this.txnDS.query({
                        filter:{ field:"reference_id", value: obj.id },
                        sort: { field:"issued_date", dir:"desc" },
                        page:1,
                        pageSize:1
                    }).then(function(){
                        var view = self.txnDS.view();

                        if(view.length>0){
                            statusObj.set("date", kendo.toString(new Date(view[0].issued_date), "dd-MM-yyyy h:mm:ss tt"));
                            statusObj.set("number", view[0].number);

                            var url = "#/" + view[0].type.toLowerCase() + "/" + view[0].id;
                            statusObj.set("url", url);
                        }
                    });
                    break;
                case 2:
                    statusObj.set("text", "partialy used");
                    break;
                case 4:
                    statusObj.set("text", "draft");
                    break;
                default:
                    //Default here
            }
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [], referenceIds = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 100
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    self.set("total", kendo.toString(view[0].amount, "c2", view[0].locale));
                    self.setStatus();

                    self.lineDS.query({
                        filter: [
                            { field: "transaction_id", value: id },
                            { field: "assembly_id", value: 0 }
                        ]
                    });

                    self.assemblyLineDS.query({
                        filter:[
                            { field: "transaction_id", value: id },
                            { field: "assembly_id >", value: 0 }
                        ]
                    });

                    self.attachmentDS.filter({ field: "transaction_id", value: id });
                    self.loadReference();

                    //Segment
                    var segments = [];
                    $.each(view[0].segments, function(index, value){
                        segments.push(value);
                    });
                    self.segmentItemDS.filter({ field: "id", operator:"where_in", value: segments });
                });
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);
            this.set("amtDueColor", banhji.source.amtDueColor);

            //Set Date
            var duedate = new Date();
            duedate.setDate(duedate.getDate() + 30);

            this.dataSource.insert(0, {
                contact_id          : "",
                transaction_template_id : 2,
                reference_id        : "",
                recurring_id        : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                employee_id         : "",
                type                : "Sale_Order",//Required
                number              : "",
                sub_total           : 0,
                amount              : 0,
                credit_allowed      : 0,
                discount            : 0,
                tax                 : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                due_date            : duedate,
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                reuse               : 0,
                status              : 0,
                segments            : [],
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:"", name:"" },
                references          : []
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.setRate();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                item_id             : "",
                assembly_id         : 0,
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio    : 0,
                price               : 0,
                amount              : 0,
                discount            : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : 0,
                required_date       : "",
                reference_no        : "",

                discount_percentage : 0,
                item                : { id:"", name:"" },
                item_price          : { measurement_id:"", measurement:"" },
                tax_item            : { id:"", name:"" }
            });
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        removeRow           : function(e){
            var data = e.data;
            if(this.lineDS.total()>1){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj"), segments = [];

            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));
            obj.set("due_date", kendo.toString(new Date(obj.due_date), "yyyy-MM-dd"));

            //Warning over credit allowed
            if(obj.credit_limit>0 && obj.amount>obj.credit_allowed){
                alert("Over credit allowed!");
            }

            this.removeEmptyRow();

            //Segment
            $.each(this.segmentItemDS.data(), function(index, value){
                segments.push(value.id);
            });
            obj.set("segments", segments);

            //Save Draft
            if(this.get("saveDraft")){
                obj.set("status", 4); //In progress
                obj.set("progress", "Draft");
                obj.set("is_journal", 0);//No Journal
            }

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Edit Mode
            if(obj.isNew()==false){
                //Use draft
                if(obj.status==4){
                    obj.set("status", 0);//Open
                    obj.set("progress", "");
                    obj.set("is_journal", 1);//Add Journal
                }
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Assembly Item line
                    $.each(self.assemblyLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                self.lineDS.sync();
                self.assemblyLineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveDraft") || self.get("saveClose")){
                    //Save Draft or Save Close
                    self.set("saveDraft", false);
                    self.set("saveClose", false);
                    self.cancel();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.clear();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear               : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.assemblyLineDS.cancelChanges();
            this.segmentItemDS.cancelChanges();
            this.attachmentDS.cancelChanges();
            this.referenceDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.segmentItemDS.data([]);
            this.attachmentDS.data([]);
            this.referenceDS.data([]);

            banhji.userManagement.removeMultiTask("sale_order");
        },
        cancel              : function(){
            this.clear();
            window.history.back();
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id },
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);

                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            banhji.router.navigate("/lease_unit_center");
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        validating          : function(){
            var result = true, nonItem = true;

            //Check select non item
            $.each(this.lineDS.data(), function(index, value){
                if(value.item_id>0){
                    nonItem = false;
                }
            });

            if(nonItem){
                $("#ntf1").data("kendoNotification").error("Please select at least one item!");

                result = false;
            }

            return result;
        },
        //Reference
        loadReference       : function(){
            var obj = this.get("obj");

            if(obj.contact_id>0){
                this.referenceDS.filter([
                    { field: "contact_id", value: obj.contact_id },
                    { field: "type", value: "Quote" },
                    { field: "due_date >=", value: kendo.toString(obj.issued_date, "yyyy-MM-dd") }
                ]);
            }
        },
        referenceChanges    : function(e){
            var self = this,
                isExisting = false,
                obj = this.get("obj"),
                reference_id = this.get("reference_id");

            $.each(obj.references, function(index, value){
                if(value.id==reference_id){
                    isExisting = true;

                    return false;
                }
            });

            if(reference_id && isExisting==false){
                var reference = this.referenceDS.get(reference_id),
                    deposit = kendo.parseFloat(reference.deposit) + kendo.parseFloat(obj.deposit);

                obj.set("deposit", deposit);
                obj.references.push(reference);

                this.referenceLineDS.query({
                    filter:[
                        { field:"transaction_id", value: reference_id },
                        { field: "assembly_id", value: 0 }
                    ]
                }).then(function(){
                    var view = self.referenceLineDS.view();

                    $.each(view, function(index, value){
                        self.lineDS.insert(0, {
                            transaction_id      : 0,
                            reference_id        : reference.id,
                            item_id             : value.item_id,
                            tax_item_id         : value.tax_item_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            cost                : value.cost,
                            price               : value.price,
                            amount              : value.amount,
                            discount            : value.discount,
                            conversion_ratio    : value.conversion_ratio,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : 0,
                            required_date       : value.required_date,
                            reference_no        : reference.number,

                            item                : value.item,
                            item_price          : value.item_price,
                            tax_item            : value.tax_item
                        });
                    });

                    self.changes();
                });
            }

            this.set("reference_id", "");
        },
        referenceRemoveRow  : function(e){
            var data = e.data,
                obj = this.get("obj"),
                index = obj.references.indexOf(data),
                deposit = kendo.parseFloat(obj.deposit) - kendo.parseFloat(data.deposit);

            obj.set("deposit", deposit);

            obj.references.splice(index, 1);
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("contact", view[0].contact);
                obj.set("contact_id", view[0].contact.id);
                obj.set("recurring_id", id);
                obj.set("employee_id", view[0].employee_id);//Sale Rep
                obj.set("job_id", view[0].job_id);
                obj.set("segments", view[0].segments);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
                obj.set("bill_to", view[0].bill_to);
                obj.set("ship_to", view[0].ship_to);
                obj.set("reuse", view[0].reuse);

                // self.setContact(view[0].contact);
            });

            this.recurringLineDS.query({
                filter:[
                    { field: "transaction_id", value: id },
                    { field: "assembly_id", value: 0 }
                ]
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        tax_item_id         : value.tax_item_id,
                        item_id             : value.item_id,
                        measurement_id      : value.measurement_id,
                        description         : value.description,
                        quantity            : value.quantity,
                        cost                : value.cost,
                        price               : value.price,
                        amount              : value.amount,
                        discount            : value.discount,
                        rate                : value.rate,
                        locale              : value.locale,
                        movement            : 0,
                        required_date       : value.required_date,

                        item                : value.item,
                        item_price          : value.item_price,
                        tax_item            : value.tax_item
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.customerDeposit =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        lineDS              : dataStore(apiUrl + "account_lines"),
        referenceDS         : dataStore(apiUrl + "transactions"),
        referenceLineDS     : dataStore(apiUrl + "account_lines"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "account_lines"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "Deposit" }
        }),
        accountDS           : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 10 },//Cash
                    { field: "account_type_id", value: 34 },//Retained Earning
                    { field: "account_type_id", value: 36 },//Expense
                    { field: "account_type_id", value: 37 },
                    { field: "account_type_id", value: 38 },
                    { field: "account_type_id", value: 40 },
                    { field: "account_type_id", value: 41 },
                    { field: "account_type_id", value: 42 },
                    { field: "account_type_id", value: 43 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        depositAccountDS    : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 25 },
                    { field: "account_type_id", value: 30 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        employeeDS          : banhji.source.employeeDS,
        contactDS           : banhji.source.customerDS,
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthList           : banhji.source.monthList,
        monthOptionList     : banhji.source.monthOptionList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        isEdit              : false,
        saveClose           : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        notDuplicateNumber  : true,
        statusSrc           : "",
        recurring           : "",
        recurring_validate  : false,
        enableRef           : false,
        total               : 0,
        original_total      : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Contact
        setContact          : function(contact){
            var obj = this.get("obj");

            obj.set("contact", contact);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
                obj.set("account_id", contact.deposit_account_id);
                obj.set("locale", contact.locale);

                this.setRate();
                this.loadReference();
                this.jobDS.filter({ field:"contact_id", value: contact.id });
            }

            this.changes();
        },
        employeeChanges         : function(){
            var obj = this.get("obj");

            if(obj.employee){
                var employee = obj.employee;

                obj.set("employee_id", employee.id);
            }else{
                obj.set("employee_id", 0);
            }
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            $.each(this.lineDS.data(), function(index, value){
                value.set("rate", rate);
                value.set("locale", obj.locale);
            });
        },
        //Segment
        segmentChanges      : function(e) {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    self.set("original_total", view[0].amount);
                    self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));

                    self.lineDS.query({
                        filter: { field: "transaction_id", value: id }
                    });

                    self.journalLineDS.query({
                        filter: { field: "transaction_id", value: id }
                    });

                    self.referenceDS.filter({ field: "id", value: view[0].reference_id });
                });
            }
        },
        changes             : function(){
            var obj = this.get("obj");

            if(this.lineDS.total()>0){
                var sum = 0;

                $.each(this.lineDS.data(), function(index, value) {
                    sum += value.amount;
                });

                this.set("total", kendo.toString(sum, "c", obj.locale));
                obj.set("amount", sum);
            }else{
                this.set("total", 0);
                obj.set("amount", 0);
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.attachmentDS.data([]);
            this.journalLineDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);

            this.dataSource.insert(0, {
                contact_id              : "",
                transaction_template_id : 7,
                recurring_id            : "",
                reference_id            : "",
                account_id              : "",
                employee_id             : "",
                user_id                 : this.get("uer_id"),
                type                    : "Customer_Deposit", //required
                number                  : "",
                amount                  : 0,
                rate                    : 1,
                locale                  : banhji.locale,
                issued_date             : new Date(),
                memo                    : "",
                memo2                   : "",
                segments                : [],
                is_journal              : 1,
                //Recurring
                recurring_name          : "",
                start_date              : new Date(),
                frequency               : "Daily",
                month_option            : "Day",
                interval                : 1,
                day                     : 1,
                week                    : 0,
                month                   : 0,
                is_recurring            : 0,

                contact                 : { id:"", name:"" }
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);

            this.setRate();
            this.addRow();
            this.generateNumber();
        },
        addRow              : function(){
            var obj = this.get("obj");
            this.lineDS.add({
                transaction_id      : obj.id,
                account_id          : "",
                description         : "",
                reference_no        : "",
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale
            });
        },
        removeRow           : function(e){
            var data = e.data;
            if(this.lineDS.total()>1){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");
            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Reference
            if(obj.reference_id>0){
                var ref = this.referenceDS.get(obj.reference_id);
                ref.set("deposit", obj.amount);
                this.referenceDS.sync();
            }else{
                obj.set("reference_id", 0);
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                //Journal
                if(data[0].is_recurring==0 && data[0].is_journal==1){
                    self.addJournal(data[0].id);
                }

                self.lineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.cancel();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel              : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("customer_deposit");
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id }
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);

                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        validating          : function(){
            var result = true, nonItem = true;

            //Check select non item
            $.each(this.lineDS.data(), function(index, value){
                if(value.account_id>0){
                    nonItem = false;
                }
            });

            if(nonItem){
                $("#ntf1").data("kendoNotification").error("Please select at least one account!");

                result = false;
            }

            return result;
        },
        //Journal
        addJournal          : function(transaction_id){
            var self = this,
            sum = 0,
            obj = this.get("obj");

            //Edit Mode
            if(obj.isNew()==false){
                //Delete previous journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });
            }

            //Cash account on DR
            $.each(this.lineDS.data(), function(index, value){
                sum += value.amount;

                self.journalLineDS.add({
                    transaction_id      : transaction_id,
                    account_id          : value.account_id,
                    contact_id          : value.contact_id,
                    description         : "",
                    reference_no        : value.reference_no,
                    segments            : obj.segments,
                    dr                  : value.amount,
                    cr                  : 0,
                    rate                : value.rate,
                    locale              : value.locale
                });
            });

            //Deposit on CR
            this.journalLineDS.add({
                transaction_id      : transaction_id,
                account_id          : obj.account_id,
                contact_id          : obj.contact_id,
                description         : "",
                reference_no        : "",
                segments            : obj.segments,
                dr                  : 0,
                cr                  : sum,
                rate                : obj.rate,
                locale              : obj.locale
            });

            this.journalLineDS.sync();
        },
        //Reference
        loadReference       : function(){
            var obj = this.get("obj");

            if(obj.contact_id>0){
                this.set("enableRef", true);

                this.referenceDS.filter([
                    { field: "contact_id", value: obj.contact_id },
                    { field: "status", value: 0 },
                    { field: "deposit", value: 0 },
                    { field: "type", value: "Sale_Order" },
                    { field: "reuse", operator:"or_where", value:1 },
                    { field: "due_date >=", value: kendo.toString(obj.issued_date, "yyyy-MM-dd") }
                ]);
            }else{
                this.set("enableRef", false);
                obj.set("reference_id", "");
            }
        },
        referenceChanges    : function(){
            var obj = this.get("obj");

            if(obj.reference_id>0){
                var reference = this.referenceDS.get(obj.reference_id);

                obj.set("reference_no", reference.number);
                obj.set("segments", reference.segments);
                obj.set("amount", reference.amount);

                this.lineDS.data([]);
                this.lineDS.add({
                    transaction_id      : obj.id,
                    reference_id        : reference.id,
                    account_id          : "",
                    description         : "",
                    reference_no        : reference.number,
                    amount              : reference.amount,
                    conversion_ratio    : reference.conversion_ratio,
                    rate                : reference.rate,
                    locale              : reference.locale
                });
                this.set("total", kendo.toString(reference.amount, "c", reference.locale));
            }
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("contact", view[0].contact);
                obj.set("contact_id", view[0].contact.id);
                obj.set("recurring_id", id);
                obj.set("employee_id", view[0].employee_id);//Sale Rep
                obj.set("job_id", view[0].job_id);
                obj.set("segments", view[0].segments);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
                obj.set("bill_to", view[0].bill_to);
                obj.set("ship_to", view[0].ship_to);

                // self.setContact(view[0].contact);
            });

            this.recurringLineDS.query({
                filter: { field:"transaction_id", value:id },
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        account_id          : value.account_id,
                        description         : value.description,
                        reference_no        : value.reference_no,
                        amount              : value.amount,
                        rate                : value.rate,
                        locale              : value.locale
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.cashSale =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        assemblyLineDS      : dataStore(apiUrl + "item_lines"),
        txnDS               : dataStore(apiUrl + "transactions"),
        amountSumDS         : dataStore(apiUrl + "transactions/amount_sum"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        balanceDS           : dataStore(apiUrl + "transactions/balance"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "item_lines"),
        referenceDS         : dataStore(apiUrl + "transactions"),
        referenceLineDS     : dataStore(apiUrl + "item_lines"),
        depositDS           : dataStore(apiUrl + "transactions"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        itemDS              : dataStore(apiUrl + "items"),
        itemPriceDS         : dataStore(apiUrl + "item_prices"),
        assemblyDS          : dataStore(apiUrl + "item_assemblies"),
        wacDS               : dataStore(apiUrl + "items/weighted_average_costing"),
        segmentDS           : dataStore(apiUrl + "segments"),
        segItemDS           : dataStore(apiUrl + "segments/item"),
        segmentItemDS       : dataStore(apiUrl + "segments/item"),
        typeList            : new kendo.data.DataSource({
            data: banhji.source.prefixList,
            filter:{
                logic: "or",
                filters: [
                    { field: "type", value: "Commercial_Cash_Sale" },
                    { field: "type", value: "Vat_Cash_Sale" },
                    { field: "type", value: "Cash_Sale" }
                ]
            }
        }),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{
                logic: "or",
                filters: [
                    { field: "type", value: "Commercial_Cash_Sale" },
                    { field: "type", value: "Vat_Cash_Sale" },
                    { field: "type", value: "Cash_Sale" }
                ]
            }
        }),
        cashAccountDS       : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 10 },
            sort: { field:"number", dir:"asc" }
        }),
        discountAccountDS   : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: { field:"id", value: 72 },
            sort: { field:"number", dir:"asc" }
        }),
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        categoryDS          : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: [
                { field:"item_type_id", value: 1 },
                { field:"id", operator:"neq", value: 5 },
                { field:"id", operator:"neq", value: 6 }
            ]
        }),
        itemGroupDS         : banhji.source.itemGroupDS,
        employeeDS          : banhji.source.employeeDS,
        contactDS           : banhji.source.customerDS,
        statusObj           : banhji.source.statusObj,
        paymentMethodDS     : banhji.source.paymentMethodDS,
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthOptionList     : banhji.source.monthOptionList,
        monthList           : banhji.source.monthList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        isEdit              : false,
        saveDraft           : false,
        saveClose           : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        notDuplicateNumber  : true,
        recurring           : "",
        recurring_validate  : false,
        reference_id        : 0,
        balance             : 0,
        total_deposit       : 0,
        total               : 0,
        amount_due          : 0,
        barcode             : "",
        barcodeVisible      : false,
        category_id         : 0,
        item_group_id       : 0,
        segment_id          : "",
        segmentitem_id      : "",
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        loadData            : function(){
            var obj = this.get("obj");

            this.setRate();
            this.loadDeposit();
            this.loadBalance();
            this.loadReference();
        },
        //Barcode
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                category_id = this.get("category_id"),
                item_group_id = this.get("item_group_id");

            if(item_group_id>0){
                para.push({ field:"number", value:item_group_id });
            }else{
                if(category_id>0){
                    para.push({ field:"category_id", value:category_id });
                }
            }

            this.itemDS.query({
                filter: para,
                page:1,
                pageSize: 10
            });

            this.set("category_id", 0);
            this.set("item_group_id", 0);
        },
        searchByBarcode     : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                barcode = this.get("barcode");

            if(barcode!==""){
                this.itemDS.query({
                    filter: { field: "barcode", value: barcode },
                    page:1,
                    pageSize: 1
                }).then(function(){
                    var view = self.itemDS.view();

                    if(view.length>0){
                        self.insertItem(view[0]);
                    }
                });

                this.set("barcode", "");
            }
        },
        addSearchItem       : function(e){
            var data = e.data;

            this.insertItem(data);
        },
        openBarcodeWindow   : function(){
            this.set("barcodeVisible", true);
        },
        closeBarcodeWindow  : function(){
            this.set("barcodeVisible", false);
        },
        insertItem      : function(data){
            var self = this,
                obj = this.get("obj"),
                rate = obj.rate / banhji.source.getRate(data.locale, new Date(obj.issued_date));

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: data.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();

                var item_price = {
                    measurement_id  : data.measurement_id,
                    price           : kendo.parseFloat(data.price),
                    conversion_ratio: 1,
                    measurement     : data.measurement.name
                };

                self.lineDS.insert(0, {
                    transaction_id      : obj.id,
                    tax_item_id         : 0,
                    item_id             : data.id,
                    assembly_id         : 0,
                    measurement_id      : data.measurement_id,
                    description         : data.sale_description,
                    quantity            : 1,
                    conversion_ratio    : 1,
                    cost                : wac[0].cost * rate,
                    price               : data.price,
                    amount              : data.price,
                    discount            : 0,
                    discount_percentage : 0,
                    tax                 : 0,
                    rate                : rate,
                    locale              : data.locale,
                    movement            : -1,
                    reference_no        : "",

                    item                : data,
                    item_price          : item_price,
                    tax_item            : { id:"", name:"" }
                });
            });
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Deposit
        loadDeposit         : function(){
            var self = this, obj = this.get("obj");

            //Deposits on Edit Mode
            if(this.get("isEdit")){
                this.depositDS.filter([
                    { field:"type", value:"Customer_Deposit" },
                    { field:"reference_id", value:obj.id }
                ]);
            }

            if(obj.contact_id>0){
                this.amountSumDS.query({
                    filter:[
                        { field:"contact_id", value: obj.contact_id },
                        { field:"type", value: "Customer_Deposit" }
                    ]
                }).then(function(){
                    var view = self.amountSumDS.view();

                    self.set("total_deposit", view[0].amount + obj.deposit);
                });
            }
        },
        addDeposit          : function(id){
            var obj = this.get("obj");

            this.depositDS.data([]);

            if(obj.deposit>0){
                this.depositDS.add({
                    contact_id          : obj.contact_id,
                    reference_id        : id,
                    user_id             : this.get("user_id"),
                    type                : "Customer_Deposit",
                    amount              : obj.deposit*-1,
                    rate                : obj.rate,
                    locale              : obj.locale,
                    issued_date         : obj.issued_date
                });
            }
        },
        saveDeposit         : function(id){
            var obj = this.get("obj");

            if(this.get("isEdit")){
                if(this.depositDS.total()>0){
                    var deposit = this.depositDS.at(0);
                    deposit.set("amount", obj.deposit*-1);
                }else{
                    this.addDeposit(id);
                }
            }else{
                this.addDeposit(id);
            }

            this.depositDS.sync();
        },
        //Contact
        setContact      : function(contact){
            var obj = this.get("obj");

            obj.set("contact", contact);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
                obj.set("discount_account_id", contact.trade_discount_id);
                obj.set("payment_method_id", contact.payment_method_id);
                obj.set("locale", contact.locale);
                obj.set("bill_to", contact.bill_to);
                obj.set("ship_to", contact.ship_to);

                this.loadData();
                this.jobDS.filter({ field:"contact_id", value: contact.id });
            }

            this.changes();
        },
        employeeChanges         : function(){
            var obj = this.get("obj");

            if(obj.employee){
                var employee = obj.employee;

                obj.set("employee_id", employee.id);
            }else{
                obj.set("employee_id", 0);
            }
        },
        loadBalance         : function(){
            var self = this, obj = this.get("obj");

            this.balanceDS.query({
                filter:[
                    { field:"contact_id", value:obj.contact_id },
                    { field:"type", operator:"where_in", value:["Commercial_Invoice", "Vat_Invoice", "Invoice"] }
                ]
            }).then(function(){
                var view = self.balanceDS.view(),
                    contact = obj.contact,
                    balance = view[0].amount,
                    creditAllowed = 0;

                if(contact.credit_limit > balance){
                    creditAllowed = contact.credit_limit - balance;
                }

                self.set("balance", kendo.toString(balance, "c", obj.locale));
                obj.set("credit_allowed", creditAllowed);
            });
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            //Item Lines
            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });

            //Assembly Lines
            $.each(this.assemblyLineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });

            //Deposit
            $.each(this.depositDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });
        },
        //Segment
        addSegmentItem      : function(){
            var obj = this.get("obj"),
                notExisting = true,
                segment_id = this.get("segment_id"),
                segmentitem_id = this.get("segmentitem_id");

            if(segment_id && segmentitem_id){
                $.each(this.segmentItemDS.data(), function(index, value){
                    if(value.segment_id==segment_id){
                        notExisting = false;

                        return false;
                    }
                });

                if(notExisting){
                    var segments = this.segmentDS.get(segment_id),
                        segmentitems = this.segItemDS.get(segmentitem_id);

                    this.segmentItemDS.add({
                        id : segmentitems.id,
                        segment_id: segment_id,
                        code: segmentitems.code,
                        name: segmentitems.name,
                        segment: { id : segment_id, name : segments.name}
                    });
                }else{
                    $("#ntf1").data("kendoNotification").warning("This segment is already selected!");
                }
            }

            this.set("segment_id", ""),
            this.set("segmentitem_id", "");
        },
        //Item
        addItem             : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Item base price
            var item_price = {
                measurement_id  : item.measurement_id,
                price           : kendo.parseFloat(item.price),
                conversion_ratio: 1,
                measurement     : item.measurement.name
            };
            row.set("item_price", item_price);

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: item.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();
                row.set("cost", wac[0].cost * rate);
            });
        },
        addItemCatalog      : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : catalogItem.cost * rate,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : -1,

                        discount_percentage : 0,
                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" },
                        tax_item            : { id:"", name:"" }
                    });
                }
            });
        },
        addItemAssembly     : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            var notExist = true;
            $.each(this.assemblyLineDS.data(), function(index, value){
                if(value.assembly_id==item.id){
                    notExist = false;

                    return false;
                }
            });

            if(notExist){
                row.set("item_id", item.id);
                row.set("description", item.sale_description);
                row.set("rate", rate);
                row.set("locale", item.locale);

                var measurement = {
                    measurement_id  : item.measurement_id,
                    price           : kendo.parseFloat(item.price * rate),
                    conversion_ratio: 1,
                    measurement     : item.measurement.name
                };
                row.set("measurement", measurement);

                this.assemblyDS.query({
                    filter:{ field:"assembly_id", value:row.item_id }
                }).then(function(){
                    var view = self.assemblyDS.view();

                    $.each(view, function(index, value){
                        var itemAssembly = value.item,
                            itemAssemblyRate = obj.rate / banhji.source.getRate(itemAssembly.locale, new Date(obj.issued_date));

                        self.assemblyLineDS.add({
                            transaction_id      : obj.id,
                            item_id             : value.item_id,
                            assembly_id         : value.assembly_id,
                            measurement_id      : value.measurement_id,
                            description         : itemAssembly.sale_description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : value.cost,
                            rate                : itemAssemblyRate,
                            locale              : itemAssembly.locale,
                            movement            : -1,

                            item                : itemAssembly
                        });
                    });
                });
            }else{
                alert("Duplicate Item Assembly!");
                row.set("item_id", 0);
                row.set("item", { id:"", name:"" });
            }
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
                total = 0, subTotal = 0, discount =0, tax = 0, remaining = 0, amount_due = 0, itemIds = [];

            $.each(this.lineDS.data(), function(index, value) {
                var amt = value.quantity * value.price;
                subTotal += amt;

                //Discount by line
                if(value.discount>0){
                    amt -= value.discount;
                    discount += value.discount;
                }

                //Tax by line
                if(value.tax_item_id>0){
                    var taxAmount = amt * value.tax_item.rate;
                    tax += taxAmount;
                    value.set("tax", taxAmount);
                }else{
                    value.set("tax", 0);
                }

                value.set("amount", amt);

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            //Total
            total = (subTotal + tax) - discount;

            //Apply Deposit
            if(obj.deposit>0){
                if(obj.deposit <= this.get("total_deposit")){
                    if(obj.deposit <= total){
                        remaining = total - obj.deposit;
                    }else{
                        obj.set("deposit", total);
                    }
                }else{
                    obj.set("deposit", 0);
                    alert("Over deposit to apply!");
                }

                //Status
                if(remaining==0){
                    obj.set("status", 1);
                }else if(remaining==total){
                    obj.set("status", 0);
                }else{
                    obj.set("status", 2);
                }
            }

            //Warning over credit allowed
            if(obj.credit_allowed>0 && total>obj.credit_allowed){
                this.set("amtDueColor", "Gold");
            }else{
                this.set("amtDueColor", banhji.source.amtDueColor);
            }

            amount_due = total - obj.deposit;

            obj.set("sub_total", subTotal);
            obj.set("discount", discount);
            obj.set("tax", tax);
            obj.set("amount", total);
            obj.set("remaining", remaining);

            this.set("total", kendo.toString(total, "c", obj.locale));
            this.set("amount_due", kendo.toString(amount_due, "c", obj.locale));

            //Remove Assembly Item List
            var raw = this.assemblyLineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (jQuery.inArray(kendo.parseInt(item.assembly_id), itemIds)==-1) {
                    this.assemblyLineDS.remove(item);
                }
            }
        },
        lineDSChanges       : function(arg){
            var self = banhji.cashSale;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else if(item.is_assembly=="1"){
                        self.addItemAssembly(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity" || arg.field=="price" || arg.field=="discount"){
                    self.changes();
                }else if(arg.field=="item_price"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.item_price.measurement_id);
                    dataRow.set("price", dataRow.item_price.price * dataRow.rate);
                    dataRow.set("conversion_ratio", dataRow.item_price.conversion_ratio);
                }else if(arg.field=="discount_percentage"){
                    var dataRow = arg.items[0],
                        percentageAmount = dataRow.quantity * dataRow.price * dataRow.discount_percentage;

                    dataRow.set("discount", percentageAmount);
                }else if(arg.field=="tax_item"){
                    var dataRow = arg.items[0];

                    dataRow.set("tax_item_id", dataRow.tax_item.id);
                    dataRow.set("tax", 0);

                    self.changes();
                }
            }
        },
        typeChanges         : function(){
            var obj = this.get("obj");

            $.each(this.txnTemplateDS.data(), function(index, value){
                if(value.type==obj.type){
                    obj.set("transaction_template_id", value.id);

                    return false;
                }
            });
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        setStatus           : function(){
            var self = this,
                obj = this.get("obj"),
                statusObj = this.get("statusObj");

            statusObj.set("text", "");
            statusObj.set("date", "");
            statusObj.set("number", "");
            statusObj.set("url", "");

            switch(obj.status) {
                case 3:
                    statusObj.set("text", "return");
                    break;
                case 4:
                    statusObj.set("text", "draft");
                    break;
                default:
                    statusObj.set("text", "paid");
            }
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [], referenceIds = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 100
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    self.set("total", kendo.toString(view[0].amount, "c2", view[0].locale));
                    self.set("amount_due", kendo.toString(view[0].amount - view[0].deposit, "c2", view[0].locale));
                    self.setStatus();
                    self.loadDeposit();

                    self.lineDS.query({
                        filter: [
                            { field: "transaction_id", value: id },
                            { field: "assembly_id", value: 0 }
                        ]
                    });

                    self.assemblyLineDS.query({
                        filter:[
                            { field: "transaction_id", value: id },
                            { field: "assembly_id >", value: 0 }
                        ]
                    });

                    self.journalLineDS.query({
                        filter: { field: "transaction_id", value: id }
                    });

                    self.attachmentDS.filter({ field: "transaction_id", value: id });

                    //Segment
                    var segments = [];
                    $.each(view[0].segments, function(index, value){
                        segments.push(value);
                    });
                    self.segmentItemDS.filter({ field: "id", operator:"where_in", value: segments });

                    self.loadReference();
                });
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.depositDS.data([]);
            this.journalLineDS.data([]);
            this.attachmentDS.data([]);
            this.referenceDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);
            this.set("total_deposit", 0);
            this.set("amount_due", 0);
            this.set("amtDueColor", banhji.source.amtDueColor);

            this.dataSource.insert(0, {
                transaction_template_id: 10,
                contact_id          : "",//Customer
                payment_method_id   : 0,
                reference_id        : "",
                recurring_id        : "",
                account_id          : 1,
                discount_account_id : 0,
                job_id              : 0,
                user_id             : this.get("user_id"),
                employee_id         : "",//Sale Rep
                type                : "Commercial_Cash_Sale",//Required
                number              : "",
                sub_total           : 0,
                discount            : 0,
                tax                 : 0,
                amount              : 0,
                deposit             : 0,
                remaining           : 0,
                credit_allowed      : 0,
                credit              : 0,
                check_no            : "",
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                status              : 0,
                segments            : [],
                is_journal          : 1,
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:"", name:"" },
                references          : []
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.setRate();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                item_id             : "",
                assembly_id         : 0,
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio    : 0,
                price               : 0,
                amount              : 0,
                discount            : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : -1,
                reference_no        : "",

                discount_percentage : 0,
                item                : { id:"", name:"" },
                item_price          : { measurement_id:"", measurement:"" },
                tax_item            : { id:"", name:"" }
            });
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeRow           : function(e){
            var data = e.data;
            if(this.lineDS.total()>1){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj"), segments = [];

            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));
            obj.set("due_date", kendo.toString(new Date(obj.due_date), "yyyy-MM-dd"));

            //Warning over credit allowed
            if(obj.credit_limit>0 && obj.amount>obj.credit_allowed){
                alert("Over credit allowed!");
            }

            this.removeEmptyRow();

            //Segment
            $.each(this.segmentItemDS.data(), function(index, value){
                segments.push(value.id);
            });
            obj.set("segments", segments);

            //Save Draft
            if(this.get("saveDraft")){
                obj.set("status", 4); //In progress
                obj.set("progress", "Draft");
                obj.set("is_journal", 0);//No Journal
            }

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Edit Mode
            if(obj.isNew()==false){
                //Use draft
                if(obj.status==4){
                    obj.set("status", 0);//Open
                    obj.set("progress", "");
                    obj.set("is_journal", 1);//Add Journal
                }
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Assembly Item line
                    $.each(self.assemblyLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                //Journal
                if(data[0].is_recurring==0 && data[0].is_journal==1){
                    self.addJournal(data[0].id);
                    self.saveDeposit(data[0].id);
                }

                self.lineDS.sync();
                self.assemblyLineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveDraft") || self.get("saveClose")){
                    //Save Draft or Save Close
                    self.set("saveDraft", false);
                    self.set("saveClose", false);
                    self.cancel();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.clear();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear               : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.assemblyLineDS.cancelChanges();
            this.segmentItemDS.cancelChanges();
            this.attachmentDS.cancelChanges();
            this.referenceDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.segmentItemDS.data([]);
            this.attachmentDS.data([]);
            this.referenceDS.data([]);

            banhji.userManagement.removeMultiTask("cash_sale");
        },
        cancel              : function(){
            this.clear();
            window.history.back();
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id }
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);

                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        validating          : function(){
            var result = true, nonItem = true;

            //Check select non item
            $.each(this.lineDS.data(), function(index, value){
                if(value.item_id>0){
                    nonItem = false;
                }
            });

            if(nonItem){
                $("#ntf1").data("kendoNotification").error("Please select at least one item!");

                result = false;
            }

            return result;
        },
        //Journal
        addJournal          : function(transaction_id){
            var self = this,
                obj = this.get("obj"),
                contact = obj.contact,
                raw = "", entries = {};

            //Edit Mode
            if(obj.isNew()==false){
                //Delete previous journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });
            }

            //Item lines
            $.each(this.lineDS.data(), function(index, value){
                var item = value.item;

                //COGS on Dr
                if(item.item_type_id==1){
                    var cogsID = kendo.parseInt(item.expense_account_id);
                    if(cogsID>0){
                        raw = "dr"+cogsID;

                        var cogsAmount = value.amount;
                        if(item.item_type_id==1 || item.item_type_id==4){
                            cogsAmount = (value.quantity*value.conversion_ratio)*value.cost;
                        }

                        if(entries[raw]===undefined){
                            entries[raw] = {
                                transaction_id      : transaction_id,
                                account_id          : cogsID,
                                contact_id          : obj.contact_id,
                                description         : value.description,
                                reference_no        : "",
                                segments            : obj.segments,
                                dr                  : cogsAmount * value.rate,
                                cr                  : 0,
                                rate                : value.rate,
                                locale              : item.locale
                            };
                        }else{
                            entries[raw].dr += cogsAmount;
                        }
                    }
                }

                //Inventory on Cr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "cr"+inventoryID;

                    var inventoryAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        inventoryAmount = (value.quantity*value.conversion_ratio)*value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : inventoryAmount * value.rate,
                            rate                : value.rate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].cr += inventoryAmount;
                    }
                }

                //Sale on Cr
                var incomeID = kendo.parseInt(item.income_account_id);
                if(incomeID>0){
                    raw = "cr"+incomeID;

                    var saleAmount = value.quantity * value.price;
                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : incomeID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : saleAmount,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].cr += saleAmount;
                    }
                }

                //Tax on Cr
                if(value.tax_item_id>0){
                    var taxItem = value.tax_item,
                        raw = "cr"+taxItem.account_id;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : taxItem.account_id,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : value.tax,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].cr += value.tax;
                    }
                }
            });

            //Assembly Item
            $.each(this.assemblyLineDS.data(), function(index, value){
                var item = value.item;

                //COGS on Dr
                if(item.item_type_id==1){
                    var cogsID = kendo.parseInt(item.expense_account_id);
                    if(cogsID>0){
                        raw = "dr"+cogsID;

                        var cogsAmount = value.amount;
                        if(item.item_type_id==1 || item.item_type_id==4){
                            cogsAmount = (value.quantity*value.conversion_ratio)*value.cost;
                        }

                        if(entries[raw]===undefined){
                            entries[raw] = {
                                transaction_id      : transaction_id,
                                account_id          : cogsID,
                                contact_id          : obj.contact_id,
                                description         : value.description,
                                reference_no        : "",
                                segments            : obj.segments,
                                dr                  : cogsAmount * value.rate,
                                cr                  : 0,
                                rate                : value.rate,
                                locale              : item.locale
                            };
                        }else{
                            entries[raw].dr += cogsAmount;
                        }
                    }
                }

                //Inventory on Cr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "cr"+inventoryID;

                    var inventoryAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        inventoryAmount = (value.quantity*value.conversion_ratio)*value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : inventoryAmount * value.rate,
                            rate                : value.rate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].cr += inventoryAmount;
                    }
                }
            });

            //Obj Account, Cash on Dr
            var objAccountID = kendo.parseInt(obj.account_id);
            if(objAccountID>0){
                raw = "dr"+objAccountID;

                var objAmount = obj.amount - obj.deposit;
                if(entries[raw]===undefined){
                    entries[raw] = {
                        transaction_id      : transaction_id,
                        account_id          : objAccountID,
                        contact_id          : obj.contact_id,
                        description         : obj.memo,
                        reference_no        : obj.reference_no,
                        segments            : obj.segments,
                        dr                  : objAmount,
                        cr                  : 0,
                        rate                : obj.rate,
                        locale              : obj.locale
                    };
                }else{
                    entries[raw].dr += objAmount;
                }
            }

            //Discount on Dr
            if(obj.discount > 0){
                var discountAccountId = kendo.parseInt(obj.discount_account_id);
                if(discountAccountId>0){
                    raw = "dr"+discountAccountId;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : discountAccountId,
                            contact_id          : obj.contact_id,
                            description         : obj.memo,
                            reference_no        : obj.reference_no,
                            segments            : obj.segments,
                            dr                  : obj.discount,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].dr += obj.discount;
                    }
                }
            }

            //Deposit on Dr
            if(obj.deposit > 0){
                var depositAccountId = kendo.parseInt(contact.deposit_account_id);
                if(depositAccountId>0){
                    raw = "dr"+depositAccountId;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : depositAccountId,
                            contact_id          : obj.contact_id,
                            description         : obj.memo,
                            reference_no        : obj.reference_no,
                            segments            : obj.segments,
                            dr                  : obj.deposit,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].dr += obj.deposit;
                    }
                }
            }

            //Add to journal entry
            if(!jQuery.isEmptyObject(entries)){
                $.each(entries, function(index, value){
                    self.journalLineDS.add(value);
                });
            }

            this.journalLineDS.sync();
        },
        //Reference
        loadReference       : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact_id>0){
                this.referenceDS.query({
                    filter :[
                        { field: "contact_id", value: obj.contact_id },
                        { field: "type", operator:"where_in", value:["Sale_Order", "Quote", "GDN"] },
                        { field: "status", value:0 },
                        { field: "reuse", operator:"or_where", value:1 },
                        { field: "due_date >=", value: kendo.toString(obj.issued_date, "yyyy-MM-dd") }
                    ]
                });
            }
        },
        referenceChanges    : function(e){
            var self = this,
                isExisting = false,
                obj = this.get("obj"),
                reference_id = this.get("reference_id");

            $.each(obj.references, function(index, value){
                if(value.id==reference_id){
                    isExisting = true;

                    return false;
                }
            });

            if(reference_id>0 && isExisting==false){
                var reference = this.referenceDS.get(reference_id),
                    deposit = kendo.parseFloat(reference.deposit) + kendo.parseFloat(obj.deposit);

                obj.set("deposit", deposit);
                obj.references.push(reference);

                this.referenceLineDS.query({
                    filter:[
                        { field:"transaction_id", value: reference_id },
                        { field: "assembly_id", value: 0 }
                    ]
                }).then(function(){
                    var view = self.referenceLineDS.view();

                    $.each(view, function(index, value){
                        self.lineDS.insert(index, {
                            transaction_id      : obj.id,
                            reference_id        : reference.id,
                            tax_item_id         : value.tax_item_id,
                            item_id             : value.item_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            price               : value.price,
                            amount              : value.amount,
                            discount            : value.discount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : -1,
                            reference_no        : reference.number,

                            item                : value.item,
                            item_price          : value.item_price,
                            tax_item            : value.tax_item
                        });
                    });

                    self.changes();
                });
            }

            this.set("reference_id", 0);
        },
        referenceRemoveRow  : function(e){
            var data = e.data,
                obj = this.get("obj"),
                index = obj.references.indexOf(data),
                deposit = kendo.parseFloat(obj.deposit) - kendo.parseFloat(data.deposit);

            obj.set("deposit", deposit);

            obj.references.splice(index, 1);
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("contact", view[0].contact);
                obj.set("contact_id", view[0].contact.id);
                obj.set("recurring_id", id);
                obj.set("payment_method_id", view[0].payment_method_id);
                obj.set("account_id", view[0].account_id);
                obj.set("employee_id", view[0].employee_id);//Sale Rep
                obj.set("job_id", view[0].job_id);
                obj.set("segments", view[0].segments);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
                obj.set("bill_to", view[0].bill_to);
                obj.set("ship_to", view[0].ship_to);

                // self.setContact(view[0].contact);
            });

            this.recurringLineDS.query({
                filter:[
                    { field: "transaction_id", value: id },
                    { field: "assembly_id", value: 0 }
                ]
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        tax_item_id         : value.tax_item_id,
                        item_id             : value.item_id,
                        measurement_id      : value.measurement_id,
                        description         : value.description,
                        quantity            : value.quantity,
                        price               : value.price,
                        amount              : value.amount,
                        discount            : value.discount,
                        rate                : value.rate,
                        locale              : value.locale,
                        movement            : -1,

                        item                : value.item,
                        item_price          : value.item_price,
                        tax_item            : value.tax_item
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.invoice =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        assemblyLineDS      : dataStore(apiUrl + "item_lines"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        balanceDS           : dataStore(apiUrl + "transactions/balance"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "item_lines"),
        referenceDS         : dataStore(apiUrl + "transactions"),
        referenceLineDS     : dataStore(apiUrl + "item_lines"),
        depositDS           : dataStore(apiUrl + "transactions"),
        wacDS               : dataStore(apiUrl + "items/weighted_average_costing"),
        itemDS              : dataStore(apiUrl + "items"),
        itemPriceDS         : dataStore(apiUrl + "item_prices"),
        assemblyDS          : dataStore(apiUrl + "item_assemblies"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        segmentDS           : dataStore(apiUrl + "segments"),
        segItemDS           : dataStore(apiUrl + "segments/item"),
        segmentItemDS       : dataStore(apiUrl + "segments/item"),
        typeList            : new kendo.data.DataSource({
            data: banhji.source.prefixList,
            filter:{
                logic: "or",
                filters: [
                    { field: "type", value: "Commercial_Invoice" },
                    { field: "type", value: "Vat_Invoice" },
                    { field: "type", value: "Invoice" }
                ]
            }
        }),
        discountAccountDS   : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: { field:"id", value: 72 },
            sort: { field:"number", dir:"asc" }
        }),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{
                logic: "or",
                filters: [
                    { field: "type", value: "Commercial_Invoice" },
                    { field: "type", value: "Vat_Invoice" },
                    { field: "type", value: "Invoice" }
                ]
            }
        }),
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        categoryDS          : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: [
                { field:"item_type_id", value: 1 },
                { field:"id", operator:"neq", value: 5 },
                { field:"id", operator:"neq", value: 6 }
            ]
        }),
        itemGroupDS         : banhji.source.itemGroupDS,
        contactDS           : banhji.source.customerDS,
        employeeDS          : banhji.source.employeeDS,
        statusObj           : banhji.source.statusObj,
        paymentTermDS       : banhji.source.paymentTermDS,
        paymentMethodDS     : banhji.source.paymentMethodDS,
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthOptionList     : banhji.source.monthOptionList,
        monthList           : banhji.source.monthList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        isEdit              : false,
        saveDraft           : false,
        saveClose           : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        notDuplicateNumber  : true,
        recurring           : "",
        recurring_validate  : false,
        reference_id        : 0,
        balance             : 0,
        total_deposit       : 0,
        total               : 0,
        amount_due          : 0,
        segment_id          : "",
        segmentitem_id      : "",
        barcode             : "",
        barcodeVisible      : false,
        category_id         : 0,
        item_group_id       : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        loadData            : function(){
            this.setRate();
            this.setTerm();
            this.loadBalance();
            this.loadDeposit();
            this.loadReference();
        },
        //Barcode
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                category_id = this.get("category_id"),
                item_group_id = this.get("item_group_id");

            if(item_group_id>0){
                para.push({ field:"number", value:item_group_id });
            }else{
                if(category_id>0){
                    para.push({ field:"category_id", value:category_id });
                }
            }

            this.itemDS.query({
                filter: para,
                page:1,
                pageSize: 10
            });

            this.set("category_id", 0);
            this.set("item_group_id", 0);
        },
        searchByBarcode     : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                barcode = this.get("barcode");

            if(barcode!==""){
                this.itemDS.query({
                    filter: { field: "barcode", value: barcode },
                    page:1,
                    pageSize: 1
                }).then(function(){
                    var view = self.itemDS.view();

                    if(view.length>0){
                        self.insertItem(view[0]);
                    }
                });

                this.set("barcode", "");
            }
        },
        addSearchItem       : function(e){
            var data = e.data;

            this.insertItem(data);
        },
        openBarcodeWindow   : function(){
            this.set("barcodeVisible", true);
        },
        closeBarcodeWindow  : function(){
            this.set("barcodeVisible", false);
        },
        insertItem          : function(data){
            var self = this,
                obj = this.get("obj"),
                rate = obj.rate / banhji.source.getRate(data.locale, new Date(obj.issued_date));

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: data.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();

                var item_price = {
                    measurement_id  : data.measurement_id,
                    price           : kendo.parseFloat(data.price),
                    conversion_ratio: 1,
                    measurement     : data.measurement.name
                };

                self.lineDS.insert(0, {
                    transaction_id      : obj.id,
                    tax_item_id         : 0,
                    item_id             : data.id,
                    assembly_id         : 0,
                    measurement_id      : data.measurement_id,
                    description         : data.sale_description,
                    quantity            : 1,
                    conversion_ratio    : 1,
                    cost                : wac[0].cost * rate,
                    price               : data.price,
                    amount              : data.price,
                    discount            : 0,
                    discount_percentage : 0,
                    tax                 : 0,
                    rate                : rate,
                    locale              : data.locale,
                    movement            : -1,
                    reference_no        : "",

                    item                : data,
                    item_price          : item_price,
                    tax_item            : { id:"", name:"" }
                });
            });
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        onRemove            : function(e){
            // Array with information about the uploaded files
            var self = this, files = e.files;
            $.each(this.attachmentDS.data(), function(index, value){
                if(value.name==files[0].name){
                    self.attachmentDS.remove(value);

                    return false;
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm("Are you sure, you want to delete it?")) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            var self = this;

            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                if(e.type=="destroy"){
                    if(saved==false){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var paramz = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(paramz, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });

            //Clear upload files
            $(".k-upload-files").remove();
        },
        //Deposit
        loadDeposit         : function(){
            var self = this, obj = this.get("obj");

            //Deposits on Edit Mode
            if(this.get("isEdit")){
                this.depositDS.filter([
                    { field:"type", value:"Customer_Deposit" },
                    { field:"reference_id", value:obj.id }
                ]);
            }

            if(obj.contact_id>0){
                this.txnDS.query({
                    filter:[
                        { field:"amount", operator:"select_sum", value:"amount" },
                        { field:"contact_id", value: obj.contact_id },
                        { field:"type", value: "Customer_Deposit" }
                    ]
                }).then(function(){
                    var view = self.txnDS.view();

                    self.set("total_deposit", view[0].amount + obj.deposit);
                });
            }
        },
        addDeposit          : function(id){
            var obj = this.get("obj");

            this.depositDS.data([]);

            if(obj.deposit>0){
                this.depositDS.add({
                    contact_id          : obj.contact_id,
                    reference_id        : id,
                    user_id             : this.get("user_id"),
                    type                : "Customer_Deposit",
                    amount              : obj.deposit*-1,
                    rate                : obj.rate,
                    locale              : obj.locale,
                    issued_date         : obj.issued_date
                });
            }
        },
        saveDeposit         : function(id){
            var obj = this.get("obj");

            if(this.get("isEdit")){
                if(this.depositDS.total()>0){
                    var deposit = this.depositDS.at(0);
                    deposit.set("amount", obj.deposit*-1);
                }else{
                    this.addDeposit(id);
                }
            }else{
                this.addDeposit(id);
            }

            this.depositDS.sync();
        },
        //Contact
        setContact          : function(contact){
            var obj = this.get("obj");

            obj.set("contact", contact);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
                obj.set("discount_account_id", contact.trade_discount_id);
                obj.set("payment_term_id", contact.payment_term_id);
                obj.set("payment_method_id", contact.payment_method_id);
                obj.set("locale", contact.locale);
                obj.set("bill_to", contact.bill_to);
                obj.set("ship_to", contact.ship_to);
                obj.set("note", contact.invoice_note);

                this.loadData();
                this.jobDS.filter({ field:"contact_id", value: contact.id });
            }

            this.changes();
        },
        employeeChanges     : function(){
            var obj = this.get("obj");

            if(obj.employee){
                var employee = obj.employee;

                obj.set("employee_id", employee.id);
            }else{
                obj.set("employee_id", 0);
            }
        },
        loadBalance         : function(){
            var self = this, obj = this.get("obj");

            this.balanceDS.query({
                filter:[
                    { field:"contact_id", value:obj.contact_id },
                    { field:"type", operator:"where_in", value:["Commercial_Invoice", "Vat_Invoice", "Invoice"] }
                ]
            }).then(function(){
                var view = self.balanceDS.view(),
                    contact = obj.contact,
                    balance = view[0].amount,
                    creditAllowed = 0;

                if(contact.credit_limit > balance){
                    creditAllowed = contact.credit_limit - balance;
                }

                self.set("balance", kendo.toString(balance, "c", obj.locale));
                obj.set("credit_allowed", creditAllowed);
            });
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            //Item Lines
            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });

            //Assembly Lines
            $.each(this.assemblyLineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });

            //Deposit
            $.each(this.depositDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });
        },
        //Payment Term
        setTerm             : function(){
            var duedate = new Date(), obj = this.get("obj");

            if(obj.payment_term_id>0){
                var term = this.paymentTermDS.get(obj.payment_term_id);

                duedate.setDate(duedate.getDate() + term.net_due);

                obj.set("due_date", duedate);
            }else{
                obj.set("due_date", new Date());
            }
        },
        //Segments
        addSegmentItem      : function(){
            var obj = this.get("obj"),
                notExisting = true,
                segment_id = this.get("segment_id"),
                segmentitem_id = this.get("segmentitem_id");

            if(segment_id && segmentitem_id){
                $.each(this.segmentItemDS.data(), function(index, value){
                    if(value.segment_id==segment_id){
                        notExisting = false;

                        return false;
                    }
                });

                if(notExisting){
                    var segments = this.segmentDS.get(segment_id),
                        segmentitems = this.segItemDS.get(segmentitem_id);

                    this.segmentItemDS.add({
                        id : segmentitems.id,
                        segment_id: segment_id,
                        code: segmentitems.code,
                        name: segmentitems.name,
                        segment: { id : segment_id, name : segments.name}
                    });
                }else{
                    $("#ntf1").data("kendoNotification").warning("This segment is already selected!");
                }
            }

            this.set("segment_id", ""),
            this.set("segmentitem_id", "");
        },
        //Item
        addItem             : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Item base price
            var item_price = {
                measurement_id  : item.measurement_id,
                price           : kendo.parseFloat(item.price),
                conversion_ratio: 1,
                measurement     : item.measurement.name
            };
            row.set("item_price", item_price);

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: item.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();
                row.set("cost", wac[0].cost * rate);
            });
        },
        addItemCatalog      : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : catalogItem.cost * rate,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : -1,

                        discount_percentage : 0,
                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" },
                        tax_item            : { id:"", name:"" }
                    });
                }
            });
        },
        addItemAssembly     : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            var notExist = true;
            $.each(this.assemblyLineDS.data(), function(index, value){
                if(value.assembly_id==item.id){
                    notExist = false;

                    return false;
                }
            });

            if(notExist){
                row.set("item_id", item.id);
                row.set("description", item.sale_description);
                row.set("rate", rate);
                row.set("locale", item.locale);

                var measurement = {
                    measurement_id  : item.measurement_id,
                    price           : kendo.parseFloat(item.price * rate),
                    conversion_ratio: 1,
                    measurement     : item.measurement.name
                };
                row.set("measurement", measurement);

                this.assemblyDS.query({
                    filter:{ field:"assembly_id", value:row.item_id }
                }).then(function(){
                    var view = self.assemblyDS.view();

                    $.each(view, function(index, value){
                        var itemAssembly = value.item,
                            itemAssemblyRate = obj.rate / banhji.source.getRate(itemAssembly.locale, new Date(obj.issued_date));

                        self.assemblyLineDS.add({
                            transaction_id      : obj.id,
                            item_id             : value.item_id,
                            assembly_id         : value.assembly_id,
                            measurement_id      : value.measurement_id,
                            description         : itemAssembly.sale_description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : value.cost,
                            rate                : itemAssemblyRate,
                            locale              : itemAssembly.locale,
                            movement            : -1,

                            item                : itemAssembly
                        });
                    });
                });
            }else{
                alert("Duplicate Item Assembly!");
                row.set("item_id", 0);
                row.set("item", { id:"", name:"" });
            }
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
                total = 0, subTotal = 0, discount =0, tax = 0, remaining = 0, amount_due = 0, itemIds = [];

            $.each(this.lineDS.data(), function(index, value) {
                var amt = value.quantity * value.price;
                subTotal += amt;

                //Discount by line
                if(value.discount>0){
                    amt -= value.discount;
                    discount += value.discount;
                }

                //Tax by line
                if(value.tax_item_id>0){
                    var taxAmount = amt * value.tax_item.rate;
                    tax += taxAmount;
                    value.set("tax", taxAmount);
                }else{
                    value.set("tax", 0);
                }

                value.set("amount", amt);

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            //Total
            total = (subTotal + tax) - discount;

            //Apply Deposit
            if(obj.deposit>0){
                if(obj.deposit <= this.get("total_deposit")){
                    if(obj.deposit <= total){
                        remaining = total - obj.deposit;
                    }else{
                        obj.set("deposit", total);
                    }
                }else{
                    obj.set("deposit", 0);
                    alert("Over deposit to apply!");
                }

                //Status
                if(remaining==0){
                    obj.set("status", 1);
                }else if(remaining==total){
                    obj.set("status", 0);
                }else{
                    obj.set("status", 2);
                }
            }

            //Warning over credit allowed
            if(obj.credit_allowed>0 && total>obj.credit_allowed){
                this.set("amtDueColor", "Gold");
            }else{
                this.set("amtDueColor", banhji.source.amtDueColor);
            }

            amount_due = total - obj.deposit;

            obj.set("sub_total", subTotal);
            obj.set("discount", discount);
            obj.set("tax", tax);
            obj.set("amount", total);
            obj.set("remaining", remaining);

            this.set("total", kendo.toString(total, "c", obj.locale));
            this.set("amount_due", kendo.toString(amount_due, "c", obj.locale));

            //Remove Assembly Item List
            var raw = this.assemblyLineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (jQuery.inArray(kendo.parseInt(item.assembly_id), itemIds)==-1) {
                    this.assemblyLineDS.remove(item);
                }
            }

            //Check invoice paid
            if(obj.status=="1" && this.lineDS.hasChanges()){
                this.lineDS.cancelChanges();

                $("#ntf1").data("kendoNotification").warning(banhji.source.noChangeInvoicePaidMessage);
            }
        },
        lineDSChanges       : function(arg){
            var self = banhji.invoice;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else if(item.is_assembly=="1"){
                        self.addItemAssembly(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity" || arg.field=="price" || arg.field=="discount"){
                    self.changes();
                }else if(arg.field=="item_price"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.item_price.measurement_id);
                    dataRow.set("price", dataRow.item_price.price * dataRow.rate);
                    dataRow.set("conversion_ratio", dataRow.item_price.conversion_ratio);
                }else if(arg.field=="discount_percentage"){
                    var dataRow = arg.items[0],
                        percentageAmount = dataRow.quantity * dataRow.price * dataRow.discount_percentage;

                    dataRow.set("discount", percentageAmount);
                }else if(arg.field=="tax_item"){
                    var dataRow = arg.items[0];

                    dataRow.set("tax_item_id", dataRow.tax_item.id);
                    dataRow.set("tax", 0);

                    self.changes();
                }
            }
        },
        typeChanges         : function(){
            var obj = this.get("obj");

            $.each(this.txnTemplateDS.data(), function(index, value){
                if(value.type==obj.type){
                    obj.set("transaction_template_id", value.id);

                    return false;
                }
            });
        },
        //Number
        checkExistingNumber : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                    number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        setStatus           : function(){
            var self = this,
                obj = this.get("obj"),
                statusObj = this.get("statusObj");

            statusObj.set("text", "");
            statusObj.set("date", "");
            statusObj.set("number", "");
            statusObj.set("url", "");

            switch(obj.status) {
                case 0:
                    statusObj.set("text", "open");
                    break;
                case 1:
                    statusObj.set("text", "paid");

                    this.txnDS.query({
                        filter:[
                            { field:"reference_id", value: obj.id },
                            { field:"type", operator:"where_in", value: ["Cash_Receipt", "Offset_Invoice"] }
                        ],
                        sort: { field:"issued_date", dir:"desc" },
                        page:1,
                        pageSize:1
                    }).then(function(){
                        var view = self.txnDS.view();

                        if(view.length>0){
                            statusObj.set("date", kendo.toString(new Date(view[0].issued_date), "dd-MM-yyyy h:mm:ss tt"));
                            statusObj.set("number", view[0].number);

                            if(view[0].type=="Cash_Receipt"){
                                var url = "#/" + view[0].type.toLowerCase() + "/" + view[0].id;
                                statusObj.set("url", url);
                            }
                        }
                    });
                    break;
                case 2:
                    statusObj.set("text", "partialy paid");
                    break;
                case 3:
                    statusObj.set("text", "return");
                    break;
                case 4:
                    statusObj.set("text", "draft");
                    break;
                default:
                    //Default here
            }
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [], referenceIds = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 100
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    self.set("total", kendo.toString(view[0].amount, "c2", view[0].locale));
                    self.set("amount_due", kendo.toString(view[0].amount - view[0].deposit, "c2", view[0].locale));
                    self.setStatus();
                    self.loadDeposit();

                    self.lineDS.query({
                        filter: [
                            { field: "transaction_id", value: id },
                            { field: "assembly_id", value: 0 }
                        ]
                    });

                    self.assemblyLineDS.query({
                        filter:[
                            { field: "transaction_id", value: id },
                            { field: "assembly_id >", value: 0 }
                        ]
                    });

                    self.journalLineDS.query({
                        filter: { field: "transaction_id", value: id }
                    });

                    self.attachmentDS.filter({ field: "transaction_id", value: id });

                    //Segment
                    var segments = [];
                    $.each(view[0].segments, function(index, value){
                        segments.push(value);
                    });
                    self.segmentItemDS.query({
                        filter: { field: "id", operator:"where_in", value: segments }
                    });

                    self.loadReference();
                });
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.depositDS.data([]);
            this.journalLineDS.data([]);
            this.attachmentDS.data([]);
            this.referenceDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total_deposit", 0);
            this.set("total", 0);
            this.set("amount_due", 0);
            this.set("amtDueColor", banhji.source.amtDueColor);

            //Set Date
            var duedate = new Date();
            duedate.setDate(duedate.getDate() + 30);

            this.dataSource.insert(0, {
                contact_id          : "",//Customer
                transaction_template_id : 3,
                discount_account_id : 0,
                payment_term_id     : 0,
                payment_method_id   : 0,
                reference_id        : "",
                recurring_id        : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                employee_id         : "",//Sale Rep
                type                : "Commercial_Invoice",//Required
                number              : "",
                sub_total           : 0,
                discount            : 0,
                tax                 : 0,
                deposit             : 0,
                amount              : 0,
                remaining           : 0,
                credit_allowed      : 0,
                rate                : 1,//Required
                locale              : banhji.locale,//Required
                issued_date         : new Date(),//Required
                due_date            : duedate,
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                note                : "",
                status              : 0,
                progress            : "",
                references          : [],
                segments            : [],
                is_journal          : 1,//Required
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:"", name:"" }
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.setRate();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : 0,
                item_id             : 0,
                assembly_id         : 0,
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio    : 1,
                cost                : 0,
                price               : 0,
                amount              : 0,
                discount            : 0,
                discount_percentage : 0,
                tax                 : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : -1,
                reference_no        : "",
                item                : { id:"", name:"" },
                item_price          : { measurement_id:"", measurement:"" },
                tax_item            : { id:"", name:"" }
            });
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeRow           : function(e){
            var data = e.data;
            if(this.lineDS.total()>1){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj"), segments = [];

            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));
            obj.set("due_date", kendo.toString(new Date(obj.due_date), "yyyy-MM-dd"));

            //Warning over credit allowed
            if(obj.credit_limit>0 && obj.amount>obj.credit_allowed){
                alert("Over credit allowed!");
            }

            this.removeEmptyRow();

            //Segment
            $.each(this.segmentItemDS.data(), function(index, value){
                segments.push(value.id);
            });
            obj.set("segments", segments);

            //Save Draft
            if(this.get("saveDraft")){
                obj.set("status", 4); //In progress
                obj.set("progress", "Draft");
                obj.set("is_journal", 0);//No Journal
            }

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Edit Mode
            if(obj.isNew()==false){
                //Use draft
                if(obj.status==4){
                    obj.set("status", 0);//Open
                    obj.set("progress", "");
                    obj.set("is_journal", 1);//Add Journal
                }
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Assembly Item line
                    $.each(self.assemblyLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                //Journal
                if(data[0].is_recurring==0 && data[0].is_journal==1){
                    self.addJournal(data[0].id);
                    self.saveDeposit(data[0].id);
                }

                self.lineDS.sync();
                self.assemblyLineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveDraft") || self.get("saveClose")){
                    //Save Draft or Save Close
                    self.set("saveDraft", false);
                    self.set("saveClose", false);
                    self.cancel();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.clear();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear               : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.assemblyLineDS.cancelChanges();
            this.segmentItemDS.cancelChanges();
            this.attachmentDS.cancelChanges();
            this.referenceDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.segmentItemDS.data([]);
            this.attachmentDS.data([]);
            this.referenceDS.data([]);

            banhji.userManagement.removeMultiTask("invoice");
        },
        cancel              : function(){
            this.clear();
            window.history.back();
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id }
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);

                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        validating          : function(){
            var result = true, nonItem = true;

            //Check select non item
            $.each(this.lineDS.data(), function(index, value){
                if(value.item_id>0){
                    nonItem = false;
                }
            });

            if(nonItem){
                $("#ntf1").data("kendoNotification").error("Please select at least one item!");

                result = false;
            }

            return result;
        },
        //Journal
        addJournal          : function(transaction_id){
            var self = this,
                obj = this.get("obj"),
                contact = obj.contact,
                raw = "", entries = {};

            //Edit Mode
            if(obj.isNew()==false){
                //Delete previous journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });
            }

            //Item lines
            $.each(this.lineDS.data(), function(index, value){
                var item = value.item;

                //COGS on Dr
                if(item.item_type_id==1){
                    var cogsID = kendo.parseInt(item.expense_account_id);
                    if(cogsID>0){
                        raw = "dr"+cogsID;

                        var cogsAmount = value.amount;
                        if(item.item_type_id==1 || item.item_type_id==4){
                            cogsAmount = (value.quantity*value.conversion_ratio)*value.cost;
                        }

                        if(entries[raw]===undefined){
                            entries[raw] = {
                                transaction_id      : transaction_id,
                                account_id          : cogsID,
                                contact_id          : obj.contact_id,
                                description         : value.description,
                                reference_no        : "",
                                segments            : obj.segments,
                                dr                  : cogsAmount * value.rate,
                                cr                  : 0,
                                rate                : value.rate,
                                locale              : item.locale
                            };
                        }else{
                            entries[raw].dr += cogsAmount;
                        }
                    }
                }

                //Inventory on Cr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "cr"+inventoryID;

                    var inventoryAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        inventoryAmount = (value.quantity*value.conversion_ratio)*value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : inventoryAmount * value.rate,
                            rate                : value.rate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].cr += inventoryAmount;
                    }
                }

                //Sale on Cr
                var incomeID = kendo.parseInt(item.income_account_id);
                if(incomeID>0){
                    raw = "cr"+incomeID;

                    var saleAmount = value.quantity * value.price;
                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : incomeID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : saleAmount,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].cr += saleAmount;
                    }
                }

                //Tax on Cr
                if(value.tax_item_id>0){
                    var taxItem = value.tax_item,
                        raw = "cr"+taxItem.account_id;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : taxItem.account_id,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : value.tax,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].cr += value.tax;
                    }
                }
            });

            //Assembly Item
            $.each(this.assemblyLineDS.data(), function(index, value){
                var item = value.item;

                //COGS on Dr
                if(item.item_type_id==1){
                    var cogsID = kendo.parseInt(item.expense_account_id);
                    if(cogsID>0){
                        raw = "dr"+cogsID;

                        var cogsAmount = value.amount;
                        if(item.item_type_id==1 || item.item_type_id==4){
                            cogsAmount = (value.quantity*value.conversion_ratio)*value.cost;
                        }

                        if(entries[raw]===undefined){
                            entries[raw] = {
                                transaction_id      : transaction_id,
                                account_id          : cogsID,
                                contact_id          : obj.contact_id,
                                description         : value.description,
                                reference_no        : "",
                                segments            : obj.segments,
                                dr                  : cogsAmount * value.rate,
                                cr                  : 0,
                                rate                : value.rate,
                                locale              : item.locale
                            };
                        }else{
                            entries[raw].dr += cogsAmount;
                        }
                    }
                }

                //Inventory on Cr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "cr"+inventoryID;

                    var inventoryAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        inventoryAmount = (value.quantity*value.conversion_ratio)*value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : inventoryAmount * value.rate,
                            rate                : value.rate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].cr += inventoryAmount;
                    }
                }
            });

            // A/R on Dr
            var arID = kendo.parseInt(contact.account_id);
            if(arID>0){
                raw = "dr"+arID;

                var arAmount = obj.amount - obj.deposit;
                if(entries[raw]===undefined){
                    entries[raw] = {
                        transaction_id      : transaction_id,
                        account_id          : arID,
                        contact_id          : obj.contact_id,
                        description         : obj.memo,
                        reference_no        : obj.reference_no,
                        segments            : obj.segments,
                        dr                  : arAmount,
                        cr                  : 0,
                        rate                : obj.rate,
                        locale              : obj.locale
                    };
                }else{
                    entries[raw].dr += arAmount;
                }
            }

            //Discount on Dr
            if(obj.discount > 0){
                var discountAccountId = kendo.parseInt(obj.discount_account_id);
                if(discountAccountId>0){
                    raw = "dr"+discountAccountId;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : discountAccountId,
                            contact_id          : obj.contact_id,
                            description         : obj.memo,
                            reference_no        : obj.reference_no,
                            segments            : obj.segments,
                            dr                  : obj.discount,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].dr += obj.discount;
                    }
                }
            }

            //Deposit on Dr
            if(obj.deposit > 0){
                var depositAccountId = kendo.parseInt(contact.deposit_account_id);
                if(depositAccountId>0){
                    raw = "dr"+depositAccountId;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : depositAccountId,
                            contact_id          : obj.contact_id,
                            description         : obj.memo,
                            reference_no        : obj.reference_no,
                            segments            : obj.segments,
                            dr                  : obj.deposit,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].dr += obj.deposit;
                    }
                }
            }

            //Add to journal entry
            if(!jQuery.isEmptyObject(entries)){
                $.each(entries, function(index, value){
                    self.journalLineDS.add(value);
                });
            }

            this.journalLineDS.sync();
        },
        //Reference
        loadReference       : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact_id>0){
                this.referenceDS.query({
                    filter :[
                        { field: "contact_id", value: obj.contact_id },
                        { field: "type", operator:"where_in", value:["Sale_Order", "Quote", "GDN"] },
                        { field: "status", value:0 },
                        { field: "reuse", operator:"or_where", value:1 },
                        { field: "due_date >=", value: kendo.toString(obj.issued_date, "yyyy-MM-dd") }
                    ]
                });
            }
        },
        referenceChanges    : function(e){
            var self = this,
                isExisting = false,
                obj = this.get("obj"),
                reference_id = this.get("reference_id");

            $.each(obj.references, function(index, value){
                if(value.id==reference_id){
                    isExisting = true;

                    return false;
                }
            });

            if(reference_id>0 && isExisting==false){
                var reference = this.referenceDS.get(reference_id),
                    deposit = kendo.parseFloat(reference.deposit) + kendo.parseFloat(obj.deposit);

                //Segment
                // var segments = [];
                // $.each(reference.segments, function(index, value){
                //  segments.push(value);
                // });
                // if(segments.length>0){
                //  this.segmentItemDS.filter({ field: "id", operator:"where_in", value: segments });
                // }

                obj.set("deposit", deposit);
                obj.references.push(reference);

                this.referenceLineDS.query({
                    filter:[
                        { field:"transaction_id", value: reference_id },
                        { field: "assembly_id", value: 0 }
                    ]
                }).then(function(){
                    var view = self.referenceLineDS.view();

                    $.each(view, function(index, value){
                        self.lineDS.insert(0, {
                            transaction_id      : obj.id,
                            reference_id        : reference.id,
                            tax_item_id         : value.tax_item_id,
                            item_id             : value.item_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            price               : value.price,
                            amount              : value.amount,
                            discount            : value.discount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : -1,
                            reference_no        : reference.number,

                            item                : value.item,
                            item_price          : value.item_price,
                            tax_item            : value.tax_item
                        });
                    });

                    self.changes();
                });
            }

            this.set("reference_id", 0);
        },
        referenceRemoveRow  : function(e){
            var data = e.data,
                obj = this.get("obj"),
                index = obj.references.indexOf(data),
                deposit = kendo.parseFloat(obj.deposit) - kendo.parseFloat(data.deposit);

            obj.set("deposit", deposit);

            obj.references.splice(index, 1);
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("contact", view[0].contact);
                obj.set("contact_id", view[0].contact.id);
                obj.set("recurring_id", id);
                obj.set("payment_term_id", view[0].payment_term_id);
                obj.set("payment_method_id", view[0].payment_method_id);
                obj.set("employee_id", view[0].employee_id);//Sale Rep
                obj.set("job_id", view[0].job_id);
                obj.set("segments", view[0].segments);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("note", view[0].note);
                obj.set("bill_to", view[0].bill_to);
                obj.set("ship_to", view[0].ship_to);

                // self.setContact(view[0].contact);
            });

            this.recurringLineDS.query({
                filter:[
                    { field: "transaction_id", value: id },
                    { field: "assembly_id", value: 0 }
                ]
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        tax_item_id         : value.tax_item_id,
                        item_id             : value.item_id,
                        measurement_id      : value.measurement_id,
                        description         : value.description,
                        quantity            : value.quantity,
                        price               : value.price,
                        amount              : value.amount,
                        discount            : value.discount,
                        rate                : value.rate,
                        locale              : value.locale,
                        movement            : -1,

                        item                : value.item,
                        item_price          : value.item_price,
                        tax_item            : value.tax_item
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        validateRecurring   : function(){
            var result = true, obj = this.get("obj");

            if(obj.recurring_name!==""){
                //Check existing name
                $.each(this.recurringDS.data(), function(index, value){
                    if(value.recurring_name==obj.recurring_name){
                        result = false;
                        alert("This is name is taken.");

                        return false;
                    }
                });
            }
            else{
                result = false;
                alert("Recurring name is required.");
            }

            return result;
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.invoiceBatch =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        itemLineDS          : dataStore(apiUrl + "item_lines"),
        assemblyLineDS      : dataStore(apiUrl + "item_lines"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "item_lines"),
        assemblyDS          : dataStore(apiUrl + "item_prices"),
        wacDS               : dataStore(apiUrl + "items/weighted_average_costing"),
        segmentDS           : dataStore(apiUrl + "segments"),
        segItemDS           : dataStore(apiUrl + "segments/item"),
        segmentItemDS       : dataStore(apiUrl + "segments/item"),
        contactGroupDS      : dataStore(apiUrl + "contacts/group"),
        typeList            : new kendo.data.DataSource({
            data: banhji.source.prefixList,
            filter:{
                logic: "or",
                filters: [
                    { field: "type", value: "Commercial_Invoice" },
                    { field: "type", value: "Vat_Invoice" },
                    { field: "type", value: "Invoice" }
                ]
            }
        }),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{
                logic: "or",
                filters: [
                    { field: "type", value: "Commercial_Invoice" },
                    { field: "type", value: "Vat_Invoice" },
                    { field: "type", value: "Invoice" }
                ]
            }
        }),
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        contactDS           : banhji.source.customerDS,
        employeeDS          : banhji.source.employeeDS,
        statusObj           : banhji.source.statusObj,
        paymentTermDS       : banhji.source.paymentTermDS,
        paymentMethodDS     : banhji.source.paymentMethodDS,
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthOptionList     : banhji.source.monthOptionList,
        monthList           : banhji.source.monthList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        isEdit              : false,
        saveDraft           : false,
        saveClose           : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        notDuplicateNumber  : true,
        recurring           : "",
        recurring_validate  : false,
        total               : 0,
        amount_due          : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(){},
        //Payment Term
        setTerm             : function(){
            var duedate = new Date(), obj = this.get("obj");

            if(obj.payment_term_id>0){
                var term = this.paymentTermDS.get(obj.payment_term_id);

                duedate.setDate(duedate.getDate() + term.net_due);

                obj.set("due_date", duedate);
            }else{
                obj.set("due_date", new Date());
            }
        },
        //Segments
        addSegmentItem      : function(){
            var obj = this.get("obj"),
                notExisting = true,
                segment_id = this.get("segment_id"),
                segmentitem_id = this.get("segmentitem_id");

            if(segment_id && segmentitem_id){
                $.each(this.segmentItemDS.data(), function(index, value){
                    if(value.segment_id==segment_id){
                        notExisting = false;

                        return false;
                    }
                });

                if(notExisting){
                    var segments = this.segmentDS.get(segment_id),
                        segmentitems = this.segItemDS.get(segmentitem_id);

                    this.segmentItemDS.add({
                        id : segmentitems.id,
                        segment_id: segment_id,
                        code: segmentitems.code,
                        name: segmentitems.name,
                        segment: { id : segment_id, name : segments.name}
                    });
                }else{
                    $("#ntf1").data("kendoNotification").warning("This segment is already selected!");
                }
            }

            this.set("segment_id", ""),
            this.set("segmentitem_id", "");
        },
        //Set Obj
        setObj              : function(){
            this.set("obj", null);

            //Set Date
            var duedate = new Date();
            duedate.setDate(duedate.getDate() + 30);

            this.set("obj", {
                contact_id          : "",//Customer
                transaction_template_id : 3,
                payment_term_id     : 0,
                payment_method_id   : 0,
                reference_id        : "",
                recurring_id        : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                employee_id         : "",//Sale Rep
                type                : "Commercial_Invoice",//Required
                number              : "",
                sub_total           : 0,
                discount            : 0,
                tax                 : 0,
                deposit             : 0,
                amount              : 0,
                remaining           : 0,
                credit_allowed      : 0,
                rate                : 1,//Required
                locale              : banhji.locale,//Required
                issued_date         : new Date(),//Required
                due_date            : duedate,
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                note                : "",
                status              : 0,
                progress            : "",
                segments            : [],
                is_journal          : 1,//Required
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : 0
            });

            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        //Contact
        contactChanges      : function(){
            this.validatingLocale();
        },
        validatingLocale    : function(){
            var obj = this.get("obj"), result = true;

            if(obj.contact){
                var locale = obj.contact.contacts[0].locale,
                    rate = banhji.source.getRate(locale, new Date(obj.issued_date));

                obj.set("rate", rate);
                obj.set("locale", locale);

                $.each(obj.contact.contacts, function(index, value){
                    if(value.locale!==locale){
                        result = false;
                    }
                });

                if(result==false){
                    $("#ntf1").data("kendoNotification").error("This group has different currency");
                }
            }

            return result;
        },
        //Item
        addItem             : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            // row.set("cost", item.cost * rate);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: item.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();
                row.set("cost", wac[0].cost * rate);
            });

            //Get first price
            this.assemblyDS.query({
                filter:[
                    { field:"item_id", value:item.id },
                    { field:"assembly_id", value:0 }
                ],
                page: 1,
                pageSize: 1
            }).then(function(){
                var view = self.assemblyDS.view();

                if(view.length>0){
                    var measurement = {
                        measurement_id  : view[0].measurement_id,
                        price           : kendo.parseFloat(view[0].price),
                        conversion_ratio: view[0].conversion_ratio,
                        measurement     : view[0].measurement
                    };
                    row.set("measurement", measurement);
                }
            });
        },
        addItemCatalog      : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : catalogItem.cost * rate,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : -1,

                        discount_percentage : 0,
                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" },
                        tax_item            : { id:"", name:"" }
                    });
                }
            });
        },
        addItemAssembly     : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            var notExist = true;
            $.each(this.assemblyLineDS.data(), function(index, value){
                if(value.assembly_id==item.id){
                    notExist = false;

                    return false;
                }
            });

            if(notExist){
                row.set("item_id", item.id);
                row.set("measurement_id", item.measurement_id);
                row.set("description", item.sale_description);
                row.set("conversion_ratio", 1);
                row.set("cost", item.cost * rate);
                row.set("price", item.price * rate);
                row.set("rate", rate);
                row.set("locale", item.locale);

                this.assemblyDS.query({
                    filter:{ field:"assembly_id", value:row.item_id }
                }).then(function(){
                    var view = self.assemblyDS.view();

                    $.each(view, function(index, value){
                        var itemAssembly = banhji.source.itemDS.get(value.item_id),
                            itemAssemblyRate = obj.rate / banhji.source.getRate(itemAssembly.locale, new Date(obj.issued_date));

                        self.assemblyLineDS.add({
                            transaction_id      : obj.id,
                            item_id             : value.item_id,
                            assembly_id         : value.assembly_id,
                            measurement_id      : value.measurement_id,
                            description         : itemAssembly.sale_description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : itemAssembly.cost * rate,
                            price               : value.price * itemAssemblyRate,
                            amount              : value.price * itemAssemblyRate,
                            rate                : itemAssemblyRate,
                            locale              : value.locale,
                            movement            : -1,

                            item                : itemAssembly
                        });
                    });
                });
            }else{
                alert("Duplicate Item Assembly!");
                row.set("item_id", 0);
                row.set("item", { id:"", name:"" });
            }
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
                total = 0, subTotal = 0, discount =0, tax = 0, remaining = 0, amount_due = 0, itemIds = [];

            $.each(this.lineDS.data(), function(index, value) {
                var amt = value.quantity * value.price;
                subTotal += amt;

                //Discount by line
                if(value.discount>0){
                    amt -= value.discount;
                    discount += value.discount;
                }

                //Tax by line
                if(value.tax_item_id>0){
                    var taxAmount = amt * value.tax_item.rate;
                    tax += taxAmount;
                    value.set("tax", taxAmount);
                }else{
                    value.set("tax", 0);
                }

                value.set("amount", amt);

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            //Total
            total = (subTotal + tax) - discount;

            //Apply Deposit
            if(obj.deposit>0){
                if(obj.deposit <= this.get("total_deposit")){
                    if(obj.deposit <= total){
                        remaining = total - obj.deposit;
                    }else{
                        obj.set("deposit", total);
                    }
                }else{
                    obj.set("deposit", 0);
                    alert("Over deposit to apply!");
                }

                //Status
                if(remaining==0){
                    obj.set("status", 1);
                }else if(remaining==total){
                    obj.set("status", 0);
                }else{
                    obj.set("status", 2);
                }
            }

            //Warning over credit allowed
            if(obj.credit_allowed>0 && total>obj.credit_allowed){
                this.set("amtDueColor", "Gold");
            }else{
                this.set("amtDueColor", banhji.source.amtDueColor);
            }

            amount_due = total - obj.deposit;

            obj.set("sub_total", subTotal);
            obj.set("discount", discount);
            obj.set("tax", tax);
            obj.set("amount", total);
            obj.set("remaining", remaining);

            this.set("total", kendo.toString(total, "c", obj.locale));
            this.set("amount_due", kendo.toString(amount_due, "c", obj.locale));

            //Remove Assembly Item List
            var raw = this.assemblyLineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (jQuery.inArray(kendo.parseInt(item.assembly_id), itemIds)==-1) {
                    this.assemblyLineDS.remove(item);
                }
            }
        },
        lineDSChanges       : function(arg){
            var self = banhji.invoiceBatch;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else if(item.is_assembly=="1"){
                        self.addItemAssembly(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity" || arg.field=="price" || arg.field=="discount"){
                    self.changes();
                }else if(arg.field=="measurement"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.measurement.measurement_id);
                    dataRow.set("price", dataRow.measurement.price * dataRow.rate);
                    dataRow.set("conversion_ratio", dataRow.measurement.conversion_ratio);
                }else if(arg.field=="discount_percentage"){
                    var dataRow = arg.items[0],
                        percentageAmount = dataRow.quantity * dataRow.price * dataRow.discount_percentage;

                    dataRow.set("discount", percentageAmount);
                }else if(arg.field=="tax_item"){
                    var dataRow = arg.items[0];

                    dataRow.set("tax_item_id", dataRow.tax_item.id);
                    dataRow.set("tax", 0);

                    self.changes();
                }
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        typeChanges         : function(){
            var obj = this.get("obj");

            $.each(this.txnTemplateDS.data(), function(index, value){
                if(value.type==obj.type){
                    obj.set("transaction_template_id", value.id);

                    return false;
                }
            });
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : 0,
                item_id             : 0,
                assembly_id         : 0,
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio    : 1,
                cost                : 0,
                price               : 0,
                amount              : 0,
                discount            : 0,
                tax                 : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : -1,
                reference_no        : "",

                discount_percentage : 0,
                item                : { id:"", name:"" },
                measurement         : { measurement_id:"", measurement:"" },
                tax_item            : { id:"", name:"" }
            });
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeRow           : function(e){
            var data = e.data;
            if(this.lineDS.total()>1){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        txnSelect           : 1,
        checkA              : false,
        checkB              : false,
        tmpData             : "",
        save                : function(){
            $("#loadImport").css("display", "block");
            var self = this, obj = this.get("obj"), segments = [], lines = [];

            if(this.validatingLocale()){
                obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));
                obj.set("due_date", kendo.toString(new Date(obj.due_date), "yyyy-MM-dd"));

                this.removeEmptyRow();

                //Segment
                $.each(this.segmentItemDS.data(), function(index, value){
                    segments.push(value.id);
                });
                obj.set("segments", segments);

                //Recurring
                if(this.get("saveRecurring")){
                    this.set("saveRecurring", false);

                    obj.set("number", "");
                    obj.set("is_recurring", 1);
                }

                //Number
                var number = "", theNumber = 0, theLetter = "";
                if(obj.number){
                    theLetter = obj.number.replace(/[0-9]/g, '');
                    theNumber = obj.number.match(/\d+/)[0];
                }

                $.each(obj.contact.contacts, function(indexC, contact){
                    if(obj.number){
                        number = theLetter + kendo.toString(theNumber, "00000");
                    }

                    self.dataSource.add({
                        contact_id          : contact.id,//Customer
                        transaction_template_id : obj.transaction_template_id,
                        payment_term_id     : obj.payment_term_id,
                        payment_method_id   : obj.payment_method_id,
                        recurring_id        : obj.recurring_id,
                        user_id             : self.get("user_id"),
                        employee_id         : obj.employee_id,//Sale Rep
                        type                : obj.type,//Required
                        number              : number,
                        sub_total           : obj.sub_total,
                        discount            : obj.discount,
                        tax                 : obj.tax,
                        amount              : obj.amount,
                        rate                : obj.rate,//Required
                        locale              : obj.locale,//Required
                        issued_date         : obj.issued_date,//Required
                        due_date            : obj.due_date,
                        bill_to             : contact.bill_to,
                        ship_to             : contact.ship_to,
                        memo                : obj.memo,
                        note                : contact.invoice_note,
                        status              : 0,
                        progress            : "",
                        segments            : segments,
                        is_journal          : 1,//Required
                        is_recurring        : 0,
                        contact             : contact
                    });

                    theNumber++;
                });
            }

            // Save Obj
            this.objSync()
            .then(function(data){ //Success
                banhji.batchInvoicePreview.line = self.lineDS.data();
                $.each(data, function(indexT, txn){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        self.itemLineDS.add({
                            transaction_id      : txn.id,
                            tax_item_id         : value.tax_item_id,
                            item_id             : value.item_id,
                            assembly_id         : value.assembly_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : value.cost,
                            price               : value.price,
                            amount              : value.amount,
                            discount            : value.discount,
                            tax                 : value.tax,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : value.movement,
                            discount_percentage : value.discount_percentage,
                            item                : value.item,
                            measurement         : value.measurement,
                            tax_item            : value.tax_item
                        });
                    });

                    //Assembly Item line
                    $.each(self.assemblyLineDS.data(), function(index, value){
                        self.itemLineDS.add({
                            transaction_id      : txn.id,
                            tax_item_id         : value.tax_item_id,
                            item_id             : value.item_id,
                            assembly_id         : value.assembly_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : value.cost,
                            price               : value.price,
                            amount              : value.amount,
                            discount            : value.discount,
                            tax                 : value.tax,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : value.movement,

                            discount_percentage : value.discount_percentage,
                            item                : value.item,
                            measurement         : value.measurement,
                            tax_item            : value.tax_item
                        });
                    });

                    //Journal
                    self.addJournal(txn.id, txn.contact);
                });

                self.itemLineDS.sync();
                self.journalLineDS.sync();
                self.itemLineDS.bind("requestEnd", function(e){
                    self.set("checkA", true);
                    self.checkDONE();
                });
                self.journalLineDS.bind("requestEnd", function(e){
                    self.set("checkB", true);
                    self.checkDONE();
                });
                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){

                if(self.get("saveClose")){
                    //Save Draft or Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.clear();

                    self.tmpData = result;

                }else{
                    //Save New
                    self.setObj();
                }
            });
        },
        checkDONE           : function(){
            if(this.get("checkA") == true && this.get("checkB") == true){
                banhji.batchInvoicePreview.dataSource = [];
                if(this.get("obj").payment_method_id > 0){
                    banhji.batchInvoicePreview.set("payment_method", banhji.source.paymentMethodDS.data()[this.get("obj").payment_method_id - 1].name);
                }
                banhji.batchInvoicePreview.txnFormID = this.get("txnSelect");
                banhji.batchInvoicePreview.dataSource = this.get("tmpData");
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);
                $("#loadImport").css("display", "none");
                banhji.router.navigate("/batch_invoice_preview");
            }
        },
        clear               : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.assemblyLineDS.cancelChanges();
            this.itemLineDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.itemLineDS.data([]);

            banhji.userManagement.removeMultiTask("invoice_batch");
        },
        cancel              : function(){
            this.clear();
            window.history.back();
        },
        validating          : function(){
            var result = true, nonItem = true;

            //Check select non item
            $.each(this.lineDS.data(), function(index, value){
                if(value.item_id>0){
                    nonItem = false;
                }
            });

            if(nonItem){
                $("#ntf1").data("kendoNotification").error("Please select at least one item!");

                result = false;
            }

            return result;
        },
        //Journal
        addJournal          : function(transaction_id, contact){
            var self = this,
                obj = this.get("obj"),
                raw = "", entries = {};

            //Item lines
            $.each(this.lineDS.data(), function(index, value){
                var item = value.item;

                //COGS on Dr
                if(item.item_type_id==1){
                    var cogsID = kendo.parseInt(item.expense_account_id);
                    if(cogsID>0){
                        raw = "dr"+cogsID;

                        var cogsAmount = value.amount;
                        if(item.item_type_id==1 || item.item_type_id==4){
                            cogsAmount = (value.quantity*value.conversion_ratio)*value.cost;
                        }

                        if(entries[raw]===undefined){
                            entries[raw] = {
                                transaction_id      : transaction_id,
                                account_id          : cogsID,
                                contact_id          : contact.id,
                                description         : value.description,
                                reference_no        : "",
                                segments            : obj.segments,
                                dr                  : cogsAmount * value.rate,
                                cr                  : 0,
                                rate                : value.rate,
                                locale              : item.locale
                            };
                        }else{
                            entries[raw].dr += cogsAmount;
                        }
                    }
                }

                //Inventory on Cr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "cr"+inventoryID;

                    var inventoryAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        inventoryAmount = (value.quantity*value.conversion_ratio)*value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : contact.id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : inventoryAmount * value.rate,
                            rate                : value.rate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].cr += inventoryAmount;
                    }
                }

                //Sale on Cr
                var incomeID = kendo.parseInt(item.income_account_id);
                if(incomeID>0){
                    raw = "cr"+incomeID;

                    var saleAmount = value.quantity * value.price;
                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : incomeID,
                            contact_id          : contact.id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : saleAmount,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].cr += value.amount;
                    }
                }

                //Tax on Cr
                if(value.tax_item_id>0){
                    var taxItem = value.tax_item,
                        raw = "cr"+taxItem.account_id;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : taxItem.account_id,
                            contact_id          : contact.id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : value.tax,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].cr += taxAmt;
                    }
                }
            });

            //Assembly Item
            $.each(this.assemblyLineDS.data(), function(index, value){
                var item = value.item;

                //COGS on Dr
                if(item.item_type_id==1){
                    var cogsID = kendo.parseInt(item.expense_account_id);
                    if(cogsID>0){
                        raw = "dr"+cogsID;

                        var cogsAmount = value.amount;
                        if(item.item_type_id==1 || item.item_type_id==4){
                            cogsAmount = (value.quantity*value.conversion_ratio)*value.cost;
                        }

                        if(entries[raw]===undefined){
                            entries[raw] = {
                                transaction_id      : transaction_id,
                                account_id          : cogsID,
                                contact_id          : contact.id,
                                description         : value.description,
                                reference_no        : "",
                                segments            : obj.segments,
                                dr                  : cogsAmount * value.rate,
                                cr                  : 0,
                                rate                : value.rate,
                                locale              : item.locale
                            };
                        }else{
                            entries[raw].dr += cogsAmount;
                        }
                    }
                }

                //Inventory on Cr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "cr"+inventoryID;

                    var inventoryAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        inventoryAmount = (value.quantity*value.conversion_ratio)*value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : contact.id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : inventoryAmount * value.rate,
                            rate                : value.rate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].cr += inventoryAmount;
                    }
                }
            });

            // A/R on Dr
            var arID = kendo.parseInt(contact.account_id);
            if(arID>0){
                raw = "dr"+arID;

                if(entries[raw]===undefined){
                    entries[raw] = {
                        transaction_id      : transaction_id,
                        account_id          : arID,
                        contact_id          : contact.id,
                        description         : obj.memo,
                        reference_no        : obj.reference_no,
                        segments            : obj.segments,
                        dr                  : obj.amount,
                        cr                  : 0,
                        rate                : obj.rate,
                        locale              : obj.locale
                    };
                }else{
                    entries[raw].dr += obj.amount;
                }
            }

            //Discount on Dr
            if(obj.discount > 0){
                var discountAccountId = kendo.parseInt(contact.trade_discount_id);
                if(discountAccountId>0){
                    raw = "dr"+discountAccountId;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : discountAccountId,
                            contact_id          : contact.id,
                            description         : obj.memo,
                            reference_no        : obj.reference_no,
                            segments            : obj.segments,
                            dr                  : obj.discount,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].dr += obj.discount;
                    }
                }
            }

            //Add to journal entry
            if(!jQuery.isEmptyObject(entries)){
                $.each(entries, function(index, value){
                    self.journalLineDS.add(value);
                });
            }
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("contact", view[0].contact);
                obj.set("contact_id", view[0].contact.id);
                obj.set("recurring_id", id);
                obj.set("payment_term_id", view[0].payment_term_id);
                obj.set("payment_method_id", view[0].payment_method_id);
                obj.set("employee_id", view[0].employee_id);//Sale Rep
                obj.set("job_id", view[0].job_id);
                obj.set("segments", view[0].segments);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("note", view[0].note);
                obj.set("bill_to", view[0].bill_to);
                obj.set("ship_to", view[0].ship_to);

                // self.setContact(view[0].contact);
            });

            this.recurringLineDS.query({
                filter:[
                    { field: "transaction_id", value: id },
                    { field: "assembly_id", value: 0 }
                ]
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        tax_item_id         : value.tax_item_id,
                        item_id             : value.item_id,
                        measurement_id      : value.measurement_id,
                        description         : value.description,
                        quantity            : value.quantity,
                        price               : value.price,
                        amount              : value.amount,
                        discount            : value.discount,
                        rate                : value.rate,
                        locale              : value.locale,
                        movement            : -1,

                        item                : value.item,
                        item_price          : value.item_price,
                        tax_item            : value.tax_item
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        validateRecurring   : function(){
            var result = true, obj = this.get("obj");

            if(obj.recurring_name!==""){
                //Check existing name
                $.each(this.recurringDS.data(), function(index, value){
                    if(value.recurring_name==obj.recurring_name){
                        result = false;
                        alert("This is name is taken.");

                        return false;
                    }
                });
            }
            else{
                result = false;
                alert("Recurring name is required.");
            }

            return result;
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.batchInvoicePreview = kendo.observable({
        lang: langVM,
        dataSource: [],
        line: [],
        isVisible: true,
        company: banhji.institute,
        license: [],
        TemplateSelect: null,
        txnFormID: null,
        formnote: "",
        payment_method: "",
        user_id: banhji.userManagement.getLogin() === null ? '' : banhji.userManagement.getLogin().id,
        formColor: "#355176",
        formVisible: "visibility: visible;",
        formBorder: "border: 1px solid #000!important;",
        pageLoad: function(id) {
            if (this.dataSource.length <= 0) {
                banhji.router.navigate('/invoice_batch');
            }
            var self = this,
                TempForm = "";
            if (this.txnFormID == "2") {
                TempForm = $("#batchVATinvoice").html();
            }else{
                if(this.txnFormID == 17){
                    var text = "<p style='font-weight: 600;'>កំណត់សំគាល់៖ </p><ul><li><b>ជម្រើសនៃការបង់ប្រាក់៖</b>អ្នកអាចបង់ប្រាក់ផ្ទាល់នៅការិយាល័យបង់ប្រាក់របស់ក្រុមហ៊ុន ឬ តាមភ្នាក់ងាររបស់ស្ថាប័នហិរញ្ញវត្ថុដូចមានរាយនាមខាងក្រោម។ ក្នុងករណីអ្នកត្រូវការផ្ទេរសាច់ប្រាក់តាមធនាគារ សូមផ្ទេរមកកាន់គណនី៖<ul><li><b>គណនីឈ្មោះ៖</b> PCG & Partners Co., Ltd </ol><li><b>គណនីលេខ៖</b> 0700-01569868-1-4 </ol><li><b>ធនាគារឈ្មោះ៖</b> ACLEDA Bank Plc. សាខាខេត្ត កំពត</ol></ul></ol><li>កម្រៃសេវាផ្ទេរសាច់ប្រាក់ជាការទទួលខុសត្រូវរបស់អ្នក</li><li>សូមផ្តល់ពត័មានដែលអ្នកបានទូទាត់រួចមកកាន់៖ </br>លេខទូរស័ព្ទ <b>+855 87 719 898 </b> ឬ <b> Email: lalinda@pro-cg.com </b></li></ul>";
                    this.set("formnote", text);
                }else if(this.txnFormID == 20){
                    var text = "<p style='font-weight: 600;'>កំណត់សំគាល់៖ </p><ul><li><b>ជម្រើសនៃការបង់ប្រាក់៖</b>អ្នកអាចបង់ប្រាក់ផ្ទាល់នៅការិយាល័យបង់ប្រាក់របស់ក្រុមហ៊ុន ឬ តាមភ្នាក់ងាររបស់ស្ថាប័នហិរញ្ញវត្ថុដូចមានរាយនាមខាងក្រោម។ ក្នុងករណីអ្នកត្រូវការផ្ទេរសាច់ប្រាក់តាមធនាគារ សូមផ្ទេរមកកាន់គណនី៖<ul><li><b>គណនីឈ្មោះ៖</b> PCG & Partners Co., Ltd </ol><li><b>គណនីលេខ៖</b> 1400-01569868-1-1 </ol><li><b>ធនាគារឈ្មោះ៖</b> ACLEDA Bank Plc. សាខាខេត្ត ព្រៃវែង</ol></ul></ol><li>កម្រៃសេវាផ្ទេរសាច់ប្រាក់ជាការទទួលខុសត្រូវរបស់អ្នក</li><li>សូមផ្តល់ពត័មានដែលអ្នកបានទូទាត់រួចមកកាន់៖ </br>លេខទូរស័ព្ទ <b>+855 87 719 898 </b> ឬ <b> Email: lalinda@pro-cg.com </b></li></ul>";
                    this.set("formnote", text);
                }else if(this.txnFormID == 19){
                    var text = "<p style='font-weight: 600;'>កំណត់សំគាល់៖ </p><ul><li><b>ជម្រើសនៃការបង់ប្រាក់៖</b>អ្នកអាចបង់ប្រាក់ផ្ទាល់នៅការិយាល័យបង់ប្រាក់របស់ក្រុមហ៊ុន ឬ តាមភ្នាក់ងាររបស់ស្ថាប័នហិរញ្ញវត្ថុដូចមានរាយនាមខាងក្រោម។ ក្នុងករណីអ្នកត្រូវការផ្ទេរសាច់ប្រាក់តាមធនាគារ សូមផ្ទេរមកកាន់គណនី៖<ul><li><b>គណនីឈ្មោះ៖</b> PCG & Partners Co., Ltd </ol><li><b>គណនីលេខ៖</b> 2400-01569868-1-3 </ol><li><b>ធនាគារឈ្មោះ៖</b> ACLEDA Bank Plc. សាខាខេត្ត កណ្តាល</ol></ul></ol><li>កម្រៃសេវាផ្ទេរសាច់ប្រាក់ជាការទទួលខុសត្រូវរបស់អ្នក</li><li>សូមផ្តល់ពត័មានដែលអ្នកបានទូទាត់រួចមកកាន់៖ </br>លេខទូរស័ព្ទ <b>+855 87 719 898 </b> ឬ <b> Email: lalinda@pro-cg.com </b></li></ul>";
                    this.set("formnote", text);
                }else if(this.txnFormID == 21){
                    var text = "<p style='font-weight: 600;'>កំណត់សំគាល់៖ </p><ul><li><b>ជម្រើសនៃការបង់ប្រាក់៖</b>អ្នកអាចបង់ប្រាក់ផ្ទាល់នៅការិយាល័យបង់ប្រាក់របស់ក្រុមហ៊ុន ឬ តាមភ្នាក់ងាររបស់ស្ថាប័នហិរញ្ញវត្ថុដូចមានរាយនាមខាងក្រោម។ ក្នុងករណីអ្នកត្រូវការផ្ទេរសាច់ប្រាក់តាមធនាគារ សូមផ្ទេរមកកាន់គណនី៖<ul><li><b>គណនីឈ្មោះ៖</b> PCG & Partners Co., Ltd </ol><li><b>គណនីលេខ៖</b> 1300-01590276-1-2 </ol><li><b>ធនាគារឈ្មោះ៖</b> ACLEDA Bank Plc. សាខាខេត្ត ស្វាយរៀង</ol></ul></ol><li>កម្រៃសេវាផ្ទេរសាច់ប្រាក់ជាការទទួលខុសត្រូវរបស់អ្នក</li><li>សូមផ្តល់ពត័មានដែលអ្នកបានទូទាត់រួចមកកាន់៖ </br>លេខទូរស័ព្ទ <b>+855 87 719 898 </b> ឬ <b> Email: lalinda@pro-cg.com </b></li></ul>";
                    this.set("formnote", text);
                }else if(this.txnFormID == 22){
                    var text = "<p style='font-weight: 600;'>កំណត់សំគាល់៖ </p><ul><li><b>ជម្រើសនៃការបង់ប្រាក់៖</b>អ្នកអាចបង់ប្រាក់ផ្ទាល់នៅការិយាល័យបង់ប្រាក់របស់ក្រុមហ៊ុន ឬ តាមភ្នាក់ងាររបស់ស្ថាប័នហិរញ្ញវត្ថុដូចមានរាយនាមខាងក្រោម។ ក្នុងករណីអ្នកត្រូវការផ្ទេរសាច់ប្រាក់តាមធនាគារ សូមផ្ទេរមកកាន់គណនី៖<ul><li><b>គណនីឈ្មោះ៖</b> PCG & Partners Co., Ltd </ol><li><b>គណនីលេខ៖</b> 0800-01569868-1-1 </ol><li><b>ធនាគារឈ្មោះ៖</b> ACLEDA Bank Plc. សាខាខេត្ត តាកែវ</ol></ul></ol><li>កម្រៃសេវាផ្ទេរសាច់ប្រាក់ជាការទទួលខុសត្រូវរបស់អ្នក</li><li>សូមផ្តល់ពត័មានដែលអ្នកបានទូទាត់រួចមកកាន់៖ </br>លេខទូរស័ព្ទ <b>+855 87 719 898 </b> ឬ <b> Email: lalinda@pro-cg.com </b></li></ul>";
                    this.set("formnote", text);
                }
                TempForm = $("#batchPCGinvoice").html();
            }
            $("#wInvoiceContent").kendoListView({
                dataSource: this.dataSource,
                template: kendo.template(TempForm)
            });
            this.barcod("do");
            this.setQR("do");
        },
        barcod: function(re) {
            var view = this.dataSource;
            for (var i = 0; i < view.length; i++) {
                var d = view[i];
                if (re == "reset") {
                    $("#secondwnumber" + d.id).css("height", "0px").data("kendoBarcode").resize();
                    $("#footwnumber" + d.id).css("height", "0px").data("kendoBarcode").resize();
                } else {
                    $("#secondwnumber" + d.id).kendoBarcode({
                        renderAs: "svg",
                        value: d.number,
                        type: "code128",
                        width: 300,
                        height: 50,
                        text: {
                            visible: false
                        }
                    });
                    $("#footwnumber" + d.id).kendoBarcode({
                        renderAs: "svg",
                        value: d.number,
                        type: "code128",
                        width: 300,
                        height: 50,
                        text: {
                            visible: false
                        }
                    });
                }
                var DataM = [],
                    MonthM = [];
                $.each(d.minusMonth, function(i, v) {
                    DataM.push(v.usage);
                    MonthM.push(v.month);
                });
                $("#monthchart" + d.id).kendoChart({
                    title: {
                        text: ""
                    },
                    series: [{
                        name: "",
                        data: DataM,
                        color: '#236DA4',
                        overlay: {
                            gradient: 'none'
                        }
                    }],
                    categoryAxis: {
                        categories: MonthM
                    }
                });
            }
        },
        printGrid: function() {
            var self = this,
                Win, pHeight, pWidth, ts;
            Win = window.open('', '', 'width=1050, height=900');
            pHeight = "215mm";
            pWidth = "297mm";
            var colorM = this.formColor;
            if (colorM == '#000000' || colorM == '#1f497d' || colorM == null) {
                ts = 'color: #fff!important;';
            } else {
                ts = 'color: #333;';
            }
            console.log(colorM);
            banhji.invoice.dataSource.sync();
            var gridElement = $('#grid'),
                printableContent = '',
                win = Win,
                doc = win.document.open();
            var htmlStart =
                '<!DOCTYPE html>' +
                '<html>' +
                '<head>' +
                '<meta charset="utf-8" />' +
                '<title></title>' +
                '<link rel="stylesheet" href="<?php echo base_url(); ?>resources/js/kendoui/styles/kendo.bootstrap.min.css">' +
                '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                '<link href="<?php echo base_url(); ?>assets/water/water.css" rel="stylesheet" />' +
                '<link href="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/components/js/kendoui/styles/kendo.common.min.css" rel="stylesheet" />' +
                '<link href="<?php echo base_url(); ?>assets/water/winvoice-print.css" rel="stylesheet" />' +
                '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />' +
                '<link href="<?php echo base_url(); ?>assets/responsive.css" rel="stylesheet" />' +
                '<link href="https://fonts.googleapis.com/css?family=Preahvihear" rel="stylesheet" />' +
                '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                '<link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Battambang&amp;subset=khmer" media="all">' +
                '<style type="text/css" media="print">' +
                '@page { size: portrait; margin:0.1cm;' +
                'size: A4;' +
                '} ' +
                '* {font-weight: lighter!important;}' +
                '@media print {' +
                'html, body {' +
                'max-width: ' + pWidth + ';' +
                'max-height: ' + pHeight + ';' +
                'min-width: ' + pWidth + ';' +
                'min-height: ' + pHeight + ';' +
                '}' +
                '.main-color {' +
                'background-color: ' + colorM + '!important; ' + ts +
                '-webkit-print-color-adjust:exact; ' +
                '} ' +
                '}' +
                '.main-color {' +
                'background-color: ' + colorM + '!important; ' + ts +
                '-webkit-print-color-adjust:exact; ' +
                '} ' +
                '.inv1 .light-blue-td { ' +
                'background-color: #c6d9f1!important;' +
                'text-align: left;' +
                'padding-left: 5px;' +
                '-webkit-print-color-adjust:exact; ' +
                '}' +
                '.logoP{ max-height 50px;max-width100px}' +
                '.inv1 thead tr {' +
                'background-color: rgb(242, 242, 242)!important;' +
                '-webkit-print-color-adjust:exact; ' +
                '}' +
                '.pcg .mid-title div {}' +
                '.pcg .mid-header {' +
                'background-color: #dce6f2!important; ' +
                '-webkit-print-color-adjust:exact; ' +
                '}' +
                '.winvoice-print table thead .darkbblue, .winvoice-print table tbody td.darkbblue { ' +
                'background-color: #355176!important;' +
                'color: #fff!important;' +
                '-webkit-print-color-adjust:exact; ' +
                '}' +
                '.winvoice-print table td.greyy {' +
                'background-color: #ccc!important;-webkit-print-color-adjust:exact;' +
                '}' +
                '.inv1 span.total-amount { ' +
                'color:#fff!important;' +
                '}</style>' +
                '</head>' +
                '<body style="background: #fff;"><div class="row-fluid" ><div id="example" class="k-content" style="width: 1000px;overflow: hidden">';
            var htmlEnd =
                '</div></div></body>' +
                '</html>';
            printableContent = $('#wInvoiceContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function() {
                win.print();
                //win.close();
            }, 2000);
        },
        hideFrameInvoice: function(e) {
            var printBtn = e.target;
            if (printBtn.checked) {
                $(".hiddenPrint").css("visibility", "hidden");
            } else {
                $(".hiddenPrint").css("visibility", "visible");
            }
        },
        setQR           :function(re){
            var view = this.dataSource;
            for (var i = 0; i < view.length; i++) {
                var d = view[i];
                if (re == "reset") {
                    $("#invQR" + d.id).css("height", "0px").data("kendoQRCode").resize();
                } else {
                    $("#invQR" + d.id).kendoQRCode({
                        value: "inv_num:"+d.number+"\ninv_amount:"+d.amount+"\ninv_date:"+d.issued_date+"\ncus_id:"+d.contact.id+"\ncus_name:"+d.contact.name+"\nstatus:"+d.status,
                        size: 180,
                        color: "#10253f",
                        encoding: "UTF_8",
                        background: "transparent"
                    });
                }
            }
        },
        cancel: function() {
            this.dataSource = [];
            this.barcod("reset");
            this.setQR("reset");
            var listview = $("#wInvoiceContent").data("kendoListView");
            listview.refresh();
            banhji.router.navigate("/customer_center");
        }
    });
    banhji.gdn =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        assemblyLineDS      : dataStore(apiUrl + "item_lines"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "item_lines"),
        referenceLineDS     : dataStore(apiUrl + "item_lines"),
        itemDS              : dataStore(apiUrl + "items"),
        itemPriceDS         : dataStore(apiUrl + "item_prices"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "GDN" }
        }),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:{ field:"item_type_id <>", value:3 },
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        referenceDS         : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "transactions",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:{ field: "type", operator:"where_in", value:["Quote", "Sale_Order", "Commercial_Invoice", "Vat_Invoice", "Invoice"] },
            sort:{ field:"issued_date", dir:"desc" },
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 30
        }),
        categoryDS          : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: [
                { field:"item_type_id", value: 1 },
                { field:"id", operator:"neq", value: 5 },
                { field:"id", operator:"neq", value: 6 }
            ]
        }),
        itemGroupDS         : banhji.source.itemGroupDS,
        contactDS           : banhji.source.customerDS,
        employeeDS          : banhji.source.employeeDS,
        statusObj           : banhji.source.statusObj,
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthOptionList     : banhji.source.monthOptionList,
        monthList           : banhji.source.monthList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        isEdit              : false,
        saveClose           : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        notDuplicateNumber  : true,
        statusSrc           : "",
        recurring           : "",
        recurring_validate  : false,
        reference_id        : "",
        total               : 0,
        barcode             : "",
        barcodeVisible      : false,
        category_id         : 0,
        item_group_id       : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Barcode
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                category_id = this.get("category_id"),
                item_group_id = this.get("item_group_id");

            if(item_group_id>0){
                para.push({ field:"number", value:item_group_id });
            }else{
                if(category_id>0){
                    para.push({ field:"category_id", value:category_id });
                }
            }

            this.itemDS.query({
                filter: para,
                page:1,
                pageSize: 10
            });

            this.set("category_id", 0);
            this.set("item_group_id", 0);
        },
        searchByBarcode     : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                barcode = this.get("barcode");

            if(barcode!==""){
                this.itemDS.query({
                    filter: { field: "barcode", value: barcode },
                    page:1,
                    pageSize: 1
                }).then(function(){
                    var view = self.itemDS.view();

                    if(view.length>0){
                        self.insertItem(view[0]);
                    }
                });

                this.set("barcode", "");
            }
        },
        addSearchItem       : function(e){
            var data = e.data;

            this.insertItem(data);
        },
        openBarcodeWindow   : function(){
            this.set("barcodeVisible", true);
        },
        closeBarcodeWindow  : function(){
            this.set("barcodeVisible", false);
        },
        insertItem      : function(data){
            var obj = this.get("obj"),
                rate = obj.rate / banhji.source.getRate(data.locale, new Date(obj.issued_date));

            var item_price = {
                measurement_id  : data.measurement_id,
                price           : kendo.parseFloat(data.price),
                conversion_ratio: 1,
                measurement     : data.measurement.name
            };

            this.lineDS.insert(0, {
                transaction_id      : obj.id,
                tax_item_id         : "",
                item_id             : data.id,
                assembly_id         : 0,
                measurement_id      : data.measurement_id,
                description         : data.sale_description,
                quantity            : 0,
                conversion_ratio    : 1,
                price               : data.price,
                amount              : 0,
                rate                : rate,
                locale              : data.locale,
                movement            : 0,

                item                : data,
                item_price          : data.measurement,
                bin_locations       : { id:0, number:"" },
                new_bin_locations   : { id:0, number:"" }
            });
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        onRemove            : function(e){
            // Array with information about the uploaded files
            var self = this, files = e.files;
            $.each(this.attachmentDS.data(), function(index, value){
                if(value.name==files[0].name){
                    self.attachmentDS.remove(value);

                    return false;
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm("Are you sure, you want to delete it?")) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            var self = this;

            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                if(e.type=="destroy"){
                    if(saved==false){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var paramz = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(paramz, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });

            //Clear upload files
            $(".k-upload-files").remove();
        },
        //Contact
        setContact          : function(contact){
            var obj = this.get("obj");

            obj.set("contact", contact);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
                obj.set("locale", contact.locale);
                obj.set("bill_to", contact.bill_to);
                obj.set("ship_to", contact.ship_to);

                this.setRate();
                this.loadReference();
            }

            this.changes();
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });
        },
        //Item
        addItem             : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Item base price
            var item_price = {
                measurement_id  : item.measurement_id,
                price           : kendo.parseFloat(item.price),
                conversion_ratio: 1,
                measurement     : item.measurement.name
            };
            row.set("item_price", item_price);
        },
        addItemCatalog      : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : 0,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : 0,

                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" }
                    });
                }
            });
        },
        lineDSChanges       : function(arg){
            var self = banhji.gdn;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity"){
                    self.changes();
                }else if(arg.field=="item_price"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.item_price.measurement_id);
                    dataRow.set("conversion_ratio", dataRow.item_price.conversion_ratio);
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        setStatus           : function(){
            var self = this,
                obj = this.get("obj"),
                statusObj = this.get("statusObj");

            statusObj.set("text", "");
            statusObj.set("date", "");
            statusObj.set("number", "");
            statusObj.set("url", "");

            switch(obj.status) {
                case 0:
                    statusObj.set("text", "open");
                    break;
                case 1:
                    statusObj.set("text", "Received");

                    this.txnDS.query({
                        filter:{ field:"reference_id", value: obj.id },
                        sort: { field:"issued_date", dir:"desc" },
                        page:1,
                        pageSize:1
                    }).then(function(){
                        var view = self.txnDS.view();

                        if(view.length>0){
                            statusObj.set("date", kendo.toString(new Date(view[0].issued_date), "dd-MM-yyyy h:mm:ss tt"));
                            statusObj.set("number", view[0].number);

                            var url = "#/" + view[0].type.toLowerCase() + "/" + view[0].id;
                            statusObj.set("url", url);
                        }
                    });
                    break;
                case 4:
                    statusObj.set("text", "draft");
                    break;
                default:
                    //Default here
            }
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 100
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    self.set("total", kendo.toString(view[0].amount, "n0"));
                    self.setStatus();

                    self.lineDS.query({
                        filter: [
                            { field: "transaction_id", value: id },
                            { field: "assembly_id", value: 0 }
                        ],
                    });
                    self.attachmentDS.filter({ field: "transaction_id", value: id });

                    self.assemblyLineDS.filter([
                        { field: "transaction_id", value: id },
                        { field: "assembly_id >", value: 0 }
                    ]);
                });
            }
        },
        changes             : function(){
            var self = this, obj = this.get("obj"), total = 0, itemIds = [];

            $.each(this.lineDS.data(), function(index, value) {
                total += value.quantity;

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            this.set("total", kendo.toString(total, "n0"));
            obj.set("amount", total);

            //Remove Assembly Item List
            var raw = this.assemblyLineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (jQuery.inArray(kendo.parseInt(item.assembly_id), itemIds)==-1) {
                    this.assemblyLineDS.remove(item);
                }
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);

            //Set Date
            var duedate = new Date();
            duedate.setDate(duedate.getDate() + 7);

            this.dataSource.insert(0, {
                contact_id          : "",
                transaction_template_id : 4,
                reference_id        : "",
                recurring_id        : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                employee_id         : "",
                type                : "GDN",//Required
                number              : "",
                amount              : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                due_date            : duedate,//Delivery Date
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                status              : 0,
                //Concrete
                truck_number        : "",
                driver_id           : 0,
                time_batched        : "",
                time_of_discharge   : "",
                time_of_completion  : "",
                cubic_meter         : "",
                total_batch         : "",
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:0, name:"" },
                driver              : { id:0, name:"" },
                references          : []
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);

            this.setRate();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                item_id             : "",
                assembly_id         : 0,
                measurement_id      : 0,
                description         : "",
                quantity            : 0,
                conversion_ratio    : 1,
                price               : 0,
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : 0,

                item                : { id:"", name:"" },
                item_price          : { measurement_id:"", measurement:"" },
                bin_locations       : { id:0, number:"" },
                new_bin_locations   : { id:0, number:"" }
            });
        },
        removeRow           : function(e){
            var data = e.data;
            if(this.lineDS.total()>1){
                //Remove Assembly Item List
                if(data.item_id>0){
                    var raw = this.assemblyLineDS.data();

                    var item, i;
                    for(i=raw.length-1; i>=0; i--){
                        item = raw[i];
                        if (item.assembly_id==data.item_id){
                            this.assemblyLineDS.remove(item);
                        }

                    }
                }

                this.lineDS.remove(data);
                this.changes();
            }
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");
            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));
            obj.set("time_batched", kendo.toString(new Date(obj.time_batched), "HH:mm:ss"));
            obj.set("time_of_discharge", kendo.toString(new Date(obj.time_of_discharge), "HH:mm:ss"));
            obj.set("time_of_completion", kendo.toString(new Date(obj.time_of_completion), "HH:mm:ss"));

            this.removeEmptyRow();

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Assembly Item line
                    $.each(self.assemblyLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                self.lineDS.sync();
                self.assemblyLineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.cancel();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel              : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.assemblyLineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("gdn");
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id },
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);

                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        validating          : function(){
            var result = true, nonItem = true;

            //Check select non item
            $.each(this.lineDS.data(), function(index, value){
                if(value.item_id>0){
                    nonItem = false;
                }
            });

            if(nonItem){
                $("#ntf1").data("kendoNotification").error("Please select at least one item!");

                result = false;
            }

            return result;
        },
        //Reference
        loadReference       : function(){
            var obj = this.get("obj");

            if(obj.contact_id>0){
                this.referenceDS.filter([
                    { field: "contact_id", value: obj.contact_id },
                    { field: "type", operator:"where_in", value:["Quote", "Sale_Order", "Commercial_Invoice", "Vat_Invoice", "Invoice"] },
                    { field: "status", value:0 },
                    { field: "reuse", operator:"or_where", value:1 },
                    { field: "due_date >=", value: kendo.toString(obj.issued_date, "yyyy-MM-dd") }
                ]);
            }
        },
        referenceChanges    : function(e){
            var self = this,
                isExisting = false,
                obj = this.get("obj"),
                reference_id = this.get("reference_id");

            $.each(obj.references, function(index, value){
                if(value.id==reference_id){
                    isExisting = true;

                    return false;
                }
            });

            if(reference_id && isExisting==false){
                var reference = this.referenceDS.get(reference_id);

                obj.references.push(reference);

                this.referenceLineDS.query({
                    filter:[
                        { field:"transaction_id", value: reference_id },
                        { field: "assembly_id", value: 0 }
                    ]
                }).then(function(){
                    var view = self.referenceLineDS.view();

                    $.each(view, function(index, value){
                        self.lineDS.insert(0, {
                            transaction_id      : obj.id,
                            reference_id        : reference.id,
                            tax_item_id         : value.tax_item_id,
                            item_id             : value.item_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            price               : value.price,
                            amount              : value.amount,
                            discount            : value.discount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : 0,
                            reference_no        : reference.number,

                            item                : value.item,
                            item_price          : value.item_price,
                            bin_locations       : { id:0, number:"" },
                            new_bin_locations   : { id:0, number:"" }
                        });
                    });

                    self.changes();
                });
            }

            this.set("reference_id", "");
        },
        referenceRemoveRow  : function(e){
            var data = e.data,
                obj = this.get("obj"),
                index = obj.references.indexOf(data);

            obj.references.splice(index, 1);
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("contact", view[0].contact);
                obj.set("contact_id", view[0].contact.id);
                obj.set("recurring_id", id);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
                obj.set("bill_to", view[0].bill_to);
                obj.set("ship_to", view[0].ship_to);

                // self.setContact(view[0].contact);
            });

            this.recurringLineDS.query({
                filter: { field:"transaction_id", value:id }
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        tax_item_id         : value.tax_item_id,
                        item_id             : value.item_id,
                        measurement_id      : value.measurement_id,
                        description         : value.description,
                        quantity            : value.quantity,
                        price               : value.price,
                        amount              : value.amount,
                        discount            : value.discount,
                        rate                : value.rate,
                        locale              : value.locale,
                        movement            : 0,

                        item                : value.item,
                        item_price          : value.item_price,
                        bin_locations       : { id:0, number:"" },
                        new_bin_locations   : { id:0, number:"" }
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.saleReturn =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        referenceDS         : dataStore(apiUrl + "transactions"),
        returnDS            : dataStore(apiUrl + "transactions"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        assemblyLineDS      : dataStore(apiUrl + "item_lines"),
        accountLineDS       : dataStore(apiUrl + "account_lines"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        assemblyDS          : dataStore(apiUrl + "item_prices"),
        wacDS               : dataStore(apiUrl + "items/weighted_average_costing"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "Sale_Return" }
        }),
        depositAccountDS    : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 25 },
                    { field: "account_type_id", value: 30 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        contactDS           : banhji.source.customerDS,
        amtDueColor         : banhji.source.amtDueColor,
        obj                 : null,
        returnObj           : null,
        isEdit              : false,
        saveClose           : false,
        savePrint           : false,
        statusSrc           : "",
        showRef             : false,
        showSegment         : false,
        windowVisible       : false,
        isOffsetInvoice     : false,
        notDuplicateNumber  : true,
        total               : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        onRemove            : function(e){
            // Array with information about the uploaded files
            var self = this, files = e.files;
            $.each(this.attachmentDS.data(), function(index, value){
                if(value.name==files[0].name){
                    self.attachmentDS.remove(value);

                    return false;
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm("Are you sure, you want to delete it?")) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            var self = this;

            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                if(e.type=="destroy"){
                    if(saved==false){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var paramz = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(paramz, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });

            //Clear upload files
            $(".k-upload-files").remove();
        },
        //Contact
        setContact          : function(contact){
            var obj = this.get("obj");

            obj.set("contact", contact);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
                obj.set("locale", contact.locale);
                obj.set("bill_to", contact.bill_to);
                obj.set("ship_to", contact.ship_to);

                this.setRate();
                this.jobDS.filter({ field:"contact_id", value: contact.id });
            }

            this.changes();
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });
        },
        //Segment
        segmentChanges      : function(e) {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //Item
        addRow              : function(){
            var obj = this.get("obj");
            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                item_id             : "",
                assembly_id         : 0,
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio    : 0,
                price               : 0,
                amount              : 0,
                discount            : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : 1,
                reference_no        : "",

                item                : { id:"", name:"" },
                measurement         : { measurement_id:"", measurement:"" },
                tax_item            : { id:"", name:"" }
            });
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        removeRow           : function(e){
            var data = e.data;

            //Remove Assembly Item List
            if(data.item_id>0){
                var raw = this.assemblyLineDS.data();

                var item, i;
                for(i=raw.length-1; i>=0; i--){
                    item = raw[i];
                    if (item.assembly_id==data.item_id){
                        this.assemblyLineDS.remove(item);
                    }

                }
            }

            this.lineDS.remove(data);
            this.changes();
        },
        addItem             : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            // row.set("cost", item.cost * rate);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: item.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();
                row.set("cost", wac[0].cost * rate);
            });

            //Get first price
            this.assemblyDS.query({
                filter:[
                    { field:"item_id", value:item.id },
                    { field:"assembly_id", value:0 }
                ],
                page: 1,
                pageSize: 1
            }).then(function(){
                var view = self.assemblyDS.view();

                if(view.length>0){
                    var measurement = {
                        measurement_id  : view[0].measurement_id,
                        price           : kendo.parseFloat(view[0].price),
                        conversion_ratio: view[0].conversion_ratio,
                        measurement     : view[0].measurement
                    };
                    row.set("measurement", measurement);
                }
            });
        },
        addItemCatalog      : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : catalogItem.cost * rate,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : -1,

                        discount_percentage : 0,
                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" },
                        tax_item            : { id:"", name:"" }
                    });
                }
            });
        },
        addItemAssembly     : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            var notExist = true;
            $.each(this.assemblyLineDS.data(), function(index, value){
                if(value.assembly_id==item.id){
                    notExist = false;

                    return false;
                }
            });

            if(notExist){
                row.set("item_id", item.id);
                row.set("measurement_id", item.measurement_id);
                row.set("description", item.sale_description);
                row.set("conversion_ratio", 1);
                row.set("cost", item.cost * rate);
                row.set("price", item.price * rate);
                row.set("rate", rate);
                row.set("locale", item.locale);

                this.assemblyDS.query({
                    filter:{ field:"assembly_id", value:row.item_id }
                }).then(function(){
                    var view = self.assemblyDS.view();

                    $.each(view, function(index, value){
                        var itemAssembly = banhji.source.itemDS.get(value.item_id),
                            itemAssemblyRate = obj.rate / banhji.source.getRate(itemAssembly.locale, new Date(obj.issued_date));

                        self.assemblyLineDS.add({
                            transaction_id      : obj.id,
                            item_id             : value.item_id,
                            assembly_id         : value.assembly_id,
                            measurement_id      : value.measurement_id,
                            description         : itemAssembly.sale_description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : itemAssembly.cost * rate,
                            price               : value.price * itemAssemblyRate,
                            amount              : value.price * itemAssemblyRate,
                            rate                : itemAssemblyRate,
                            locale              : value.locale,
                            movement            : -1,

                            item                : itemAssembly
                        });
                    });
                });
            }else{
                alert("Duplicate Item Assembly!");
                row.set("item_id", 0);
                row.set("item", { id:"", name:"" });
            }
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
                total = 0, subTotal = 0, discount =0, tax = 0, remaining = 0, amount_due = 0, itemIds = [];

            $.each(this.lineDS.data(), function(index, value) {
                var amt = value.quantity * value.price;
                subTotal += amt;

                //Tax by line
                if(value.tax_item_id>0){
                    var taxAmount = amt * value.tax_item.rate;
                    tax += taxAmount;
                    value.set("tax", taxAmount);
                }else{
                    value.set("tax", 0);
                }

                value.set("amount", amt);

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            //Total
            total = subTotal + tax;

            obj.set("sub_total", subTotal);
            obj.set("tax", tax);
            obj.set("amount", total);
            obj.set("remaining", remaining);

            this.set("total", kendo.toString(total, "c", obj.locale));
            this.set("amount_due", kendo.toString(total, "c", obj.locale));

            //Remove Assembly Item List
            var raw = this.assemblyLineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (jQuery.inArray(kendo.parseInt(item.assembly_id), itemIds)==-1) {
                    this.assemblyLineDS.remove(item);
                }
            }
        },
        lineDSChanges       : function(arg){
            var self = banhji.saleReturn;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else if(item.is_assembly=="1"){
                        self.addItemAssembly(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity" || arg.field=="price"){
                    self.changes();
                }else if(arg.field=="measurement"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.measurement.measurement_id);
                    dataRow.set("price", dataRow.measurement.price * dataRow.rate);
                    dataRow.set("conversion_ratio", dataRow.measurement.conversion_ratio);
                }else if(arg.field=="tax_item"){
                    var dataRow = arg.items[0];

                    dataRow.set("tax_item_id", dataRow.tax_item.id);
                    dataRow.set("tax", 0);

                    self.changes();
                }
            }
        },
        //Account
        addRowAccount           : function(){
            var obj = this.get("obj");

            this.accountLineDS.add({
                transaction_id      : obj.id,
                account_id          : "",
                description         : "",
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : -1, //From Account

                account             : { id:"", name:"" }
            });
        },
        addExtraRowAccount      : function(uid){
            var row = this.accountLineDS.getByUid(uid),
                index = this.accountLineDS.indexOf(row);

            if(index==this.accountLineDS.total()-1){
                this.addRowAccount();
            }
        },
        removeRowAccount        : function(e){
            var d = e.data;

            this.accountLineDS.remove(d);
            this.changes();
        },
        accountLineDSChanges    : function(arg){
            var self = banhji.saleReturn;

            if(arg.field){
                if(arg.field=="account"){
                    var dataRow = arg.items[0],
                        account = dataRow.account;

                    dataRow.set("account_id", account.id);

                    self.addExtraRowAccount(dataRow.uid);
                }else if(arg.field=="amount"){
                    self.changes();
                }
            }
        },
        //Number
        checkExistingNumber : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            this.dataSource.query({
                filter: para,
                page: 1,
                pageSize: 100
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
                self.set("statusSrc", banhji.source.usedSrc);
                self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));

                self.lineDS.query({
                    filter: [
                        { field: "transaction_id", value: id },
                        { field: "assembly_id", value: 0 }
                    ]
                });

                self.assemblyLineDS.query({
                    filter:[
                        { field: "transaction_id", value: id },
                        { field: "assembly_id >", value: 0 }
                    ]
                });

                self.accountLineDS.query({
                    filter: { field: "transaction_id", value: id }
                });
                self.journalLineDS.query({
                    filter: { field: "transaction_id", value: id }
                });
                self.returnDS.query({
                    filter: { field: "return_id", value: id }
                });

                self.attachmentDS.filter({ field: "transaction_id", value: id });
            });
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
            subTotal = 0, tax = 0, returnAmount = 0, remaining = 0, itemIds = [];

            //Item lines
            $.each(this.lineDS.data(), function(index, value) {
                var amt = value.quantity * value.price;

                //Tax by line
                if(value.tax_item_id>0){
                    var taxAmount = amt * value.tax_item.rate;
                    tax += taxAmount;
                    value.set("tax", taxAmount);
                }else{
                    value.set("tax", 0);
                }

                value.set("amount", amt);
                subTotal += amt;

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            //Account lines
            $.each(this.accountLineDS.data(), function(index, value) {
                subTotal += value.amount;
            });

            //Total
            total = subTotal + tax;

            //Return lines
            $.each(this.returnDS.data(), function(index, value) {
                if(value.type=="Offset_Invoice" && value.amount>value.sub_total){
                    value.set("amount", value.sub_total);
                }
                returnAmount += value.amount;
            });

            remaining = total - returnAmount;

            obj.set("sub_total", subTotal);
            obj.set("tax", tax);
            obj.set("amount", total);
            obj.set("deposit", returnAmount);
            obj.set("remaining", remaining);

            this.set("total", kendo.toString(total, "c", obj.locale));

            //Remove Assembly Item List
            var raw = this.assemblyLineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (jQuery.inArray(kendo.parseInt(item.assembly_id), itemIds)==-1) {
                    this.assemblyLineDS.remove(item);
                }
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.accountLineDS.data([]);
            this.assemblyLineDS.data([]);
            this.journalLineDS.data([]);
            this.attachmentDS.data([]);
            this.returnDS.data([]);
            this.referenceDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);

            this.dataSource.insert(0, {
                contact_id          : "",
                reference_id        : "",
                recurring_id        : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                type                : "Sale_Return", //Require
                number              : "",
                sub_total           : 0,
                discount            : 0,
                tax                 : 0,
                amount              : 0,
                deposit             : 0,
                remaining           : 0,
                amount_paid         : 0,
                credit_allowed      : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                status              : 0,
                segments            : [],
                is_journal          : 1,
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:0, name:"" }
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.setRate();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
                this.addRowAccount();
            }
        },
        removeEmptyRow          : function(){
            var row, i;

            //Item
            var item = this.lineDS.data();
            for(i=item.length-1; i>=0; i--){
                row = item[i];

                if (row.item_id==0) {
                    this.lineDS.remove(row);
                }
            }

            //Account
            var account = this.accountLineDS.data();
            for(i=account.length-1; i>=0; i--){
                row = account[i];

                if (row.account_id==0) {
                    this.accountLineDS.remove(row);
                }
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");
            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

            this.removeEmptyRow();

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Account line
                    $.each(self.accountLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Assembly Item line
                    $.each(self.assemblyLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                //Journal
                if(data[0].is_recurring==0 && data[0].is_journal==1){
                    self.addJournal(data[0].id);
                }

                self.lineDS.sync();
                self.accountLineDS.sync();
                self.assemblyLineDS.sync();
                self.uploadFile();

                //Return
                var ids = [];
                $.each(self.returnDS.data(), function(index, value){
                    if(value.type=="Offset_Invoice" && value.reference_id>0){
                        ids.push(value.reference_id);
                    }
                    value.set("return_id", data[0].id);
                    value.set("issued_date", kendo.toString(new Date(data[0].issued_date), "s"));
                });

                self.returnDS.sync();
                var saved = false;
                self.returnDS.bind("requestEnd", function(e){
                    if(e.type=="create" && saved==false){
                        saved = true;

                        self.updateTxnStatus(ids);
                    }
                });

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.cancel();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel              : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.accountLineDS.cancelChanges();
            this.assemblyLineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.accountLineDS.data([]);
            this.assemblyLineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("sale_return");
        },
        validating          : function(){
            var result = true, obj = this.get("obj");

            if(kendo.toString(obj.amount, "n3")!=kendo.toString(obj.deposit, "n3")){
                $("#ntf1").data("kendoNotification").error("Remaining must be Zero!");

                result = false;
            }

            if(this.lineDS.total()==0 && this.accountLineDS.total()==0){
                $("#ntf1").data("kendoNotification").error("Please select an item or account.");

                result = false;
            }

            if(this.returnDS.total()==0){
                $("#ntf1").data("kendoNotification").error("Please make an offset invoice or add to deposit.");

                result = false;
            }

            return result;
        },
        updateTxnStatus     : function(ids){
            var self = this;

            if(ids.length>0){
                this.txnDS.query({
                    filter:{ field:"id", operator:"where_in", value:ids }
                }).then(function(){
                    var view = self.txnDS.view();

                    $.each(view, function(index, value){
                        if(value.amount_paid == 0){
                            value.set("status", 0);
                        }else if(value.amount_paid >= value.amount){
                            value.set("status", 1);
                        }else{
                            value.set("status", 2);
                        }
                    });

                    self.txnDS.sync();
                });
            }
        },
        //Return
        addRowReturn        : function(type){
            var obj = this.get("obj"), account_id = 0;

            if(type=="Customer_Deposit" && obj.contact_id>0){
                var contact = obj.contact;
                account_id = contact.deposit_account_id;
            }

            this.returnDS.insert(0, {
                return_id       : obj.id,
                account_id      : account_id,
                contact_id      : obj.contact_id,
                reference_id    : "",
                reference_no    : "",
                number          : "",
                type            : type,
                amount          : 0,
                rate            : obj.rate,
                locale          : obj.locale,
                issued_date     : obj.issued_date
            });

            var raw = this.returnDS.at(0);
            this.set("returnObj", raw);
        },
        selectedRow         : function(e){
            var data = e.data, para = [], ids = [], obj = this.get("obj");

            this.set("returnObj", data);

            if(data.type=="Offset_Invoice"){
                this.set("isOffsetInvoice", true);

                if(this.returnDS.total()>0){
                    $.each(this.returnDS.data(), function(index, value){
                        if(value.reference_id!==data.reference_id){
                            ids.push(value.reference_id);
                        }
                    });
                    para.push({field: "id", operator:"where_not_in", value: ids});
                }
                para.push({field: "contact_id", value: obj.contact_id});
                para.push({field: "status", operator:"where_in", value: [0,2]});
                para.push({field: "type", operator:"where_in", value:["Commercial_Invoice", "Vat_Invoice", "Invoice"]});
                this.referenceDS.filter(para);
            }else{
                this.set("isOffsetInvoice", false);
            }

            this.set("windowVisible", true);
        },
        removeRowReturn     : function(e){
            var d = e.data;

            if(this.returnDS.total()>1){
                this.returnDS.remove(d);
                this.changes();
            }
        },
        returnChanges       : function(e){
            e.preventDefault();

            this.closeWindow();
        },
        referenceChanges    : function(){
            var returnObj = this.get("returnObj");

            if(returnObj.reference_id>0){
                var txn = this.referenceDS.get(returnObj.reference_id),
                amount = txn.amount - (txn.amount_paid + txn.deposit);

                returnObj.set("account_id", txn.account_id);
                returnObj.set("reference_no", txn.number);
                returnObj.set("sub_total", amount);
                returnObj.set("amount", amount);
            }else{
                returnObj.set("account_id", 0);
                returnObj.set("reference_no", "");
                returnObj.set("sub_total", 0);
                returnObj.set("amount", 0);
            }

            this.changes();
        },
        openOffsetInvoiceWindow : function(){
            this.openWindow("Offset_Invoice");
        },
        openDepositWindow   : function(){
            this.openWindow("Customer_Deposit");
        },
        openWindow          : function(type){
            var para = [], ids = [],
            obj = this.get("obj");

            if(obj.contact_id>0){
                this.addRowReturn(type);

                if(type=="Offset_Invoice"){
                    this.set("isOffsetInvoice", true);

                    if(this.returnDS.total()>0){
                        $.each(this.returnDS.data(), function(index, value){
                            ids.push(value.reference_id);
                        });
                        para.push({field: "id", operator:"where_not_in", value: ids});
                    }
                    para.push({field: "contact_id", value: obj.contact_id});
                    para.push({field: "status", operator:"where_in", value: [0,2]});
                    para.push({field: "type", operator:"where_in", value:["Commercial_Invoice", "Vat_Invoice", "Invoice"]});
                    this.referenceDS.filter(para);
                }else{
                    this.set("isOffsetInvoice", false);
                }

                this.set("windowVisible", true);
            }else{
                alert("Please select a customer.");
            }
        },
        closeWindow         : function(){
            this.changes();
            this.set("windowVisible", false);
        },
        cancelWindow        : function(){
            var returnObj = this.get("returnObj"),
            indexReturnObj = this.returnDS.indexOf(returnObj),
            selectedReturnObj = this.returnDS.at(indexReturnObj);

            this.returnDS.remove(selectedReturnObj);
            this.changes();

            this.set("windowVisible", false);
        },
        //Journal
        addJournal          : function(transaction_id){
            var self = this,
                obj = this.get("obj"),
                contact = obj.contact,
                raw = "", entries = {};

            //Edit Mode
            if(obj.isNew()==false){
                //Delete previous journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });
            }

            //Item lines
            $.each(this.lineDS.data(), function(index, value){
                var item = value.item,
                    itemRate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

                //COGS on Cr
                var cogsID = kendo.parseInt(item.expense_account_id);
                if(cogsID>0){
                    raw = "cr"+cogsID;

                    var cogsAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        cogsAmount = (value.quantity*value.conversion_ratio)*value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : cogsID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : cogsAmount * itemRate,
                            rate                : itemRate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].cr += cogsAmount;
                    }
                }

                //Inventory on Dr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "dr"+inventoryID;

                    var inventoryAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        inventoryAmount = (value.quantity*value.conversion_ratio)*value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : inventoryAmount * itemRate,
                            cr                  : 0,
                            rate                : itemRate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].dr += inventoryAmount;
                    }
                }

                //Sale on Dr
                var incomeID = kendo.parseInt(item.income_account_id);
                if(incomeID>0){
                    raw = "dr"+incomeID;

                    var saleAmount = value.quantity * value.price;
                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : incomeID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : saleAmount,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].dr += value.amount;
                    }
                }

                //Tax on Dr
                if(value.tax_item_id>0){
                    var taxItem = value.tax_item,
                        raw = "dr"+taxItem.account_id,
                        taxAmt = value.amount * taxItem.rate;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : taxItem.account_id,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : taxAmt,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].dr += taxAmt;
                    }
                }
            });

            //Assembly Item
            $.each(this.assemblyLineDS.data(), function(index, value){
                var item = value.item,
                    itemRate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

                //COGS on Cr
                var cogsID = kendo.parseInt(item.expense_account_id);
                if(cogsID>0){
                    raw = "cr"+cogsID;

                    var cogsAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        cogsAmount = (value.quantity*value.conversion_ratio)*value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : cogsID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : cogsAmount * itemRate,
                            rate                : itemRate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].cr += cogsAmount;
                    }
                }

                //Inventory on Dr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "dr"+inventoryID;

                    var inventoryAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        inventoryAmount = (value.quantity*value.conversion_ratio)*value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : inventoryAmount * itemRate,
                            cr                  : 0,
                            rate                : itemRate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].dr += inventoryAmount;
                    }
                }
            });

            //Return Lines
            $.each(this.returnDS.data(), function(index, value){
                //Add Offset Invoice and Deposit list
                var returnID = kendo.parseInt(value.account_id);
                if(value.type=="Offset_Invoice"){
                    returnID = contact.account_id;
                }

                //A/R and Deposit on Cr
                if(returnID>0){
                    raw = "cr"+returnID;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : returnID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : value.amount,
                            rate                : value.rate,
                            locale              : value.locale
                        };
                    }else{
                        entries[raw].cr += value.amount;
                    }
                }
            });

            //Rebate Account on Dr
            $.each(this.accountLineDS.data(), function(index, value){
                var accountID = kendo.parseInt(value.account_id);
                if(accountID>0){
                    raw = "dr"+accountID;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : accountID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : value.segments,
                            dr                  : value.amount,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].dr += value.amount;
                    }
                }
            });

            //Add to journal entry
            if(!jQuery.isEmptyObject(entries)){
                $.each(entries, function(index, value){
                    self.journalLineDS.add(value);
                });
            }

            this.journalLineDS.sync();
        }
    });
    banhji.cashRefund =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        referenceDS         : dataStore(apiUrl + "transactions"),
        returnDS            : dataStore(apiUrl + "transactions"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        assemblyLineDS      : dataStore(apiUrl + "item_lines"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        assemblyDS          : dataStore(apiUrl + "item_prices"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        wacDS               : dataStore(apiUrl + "items/weighted_average_costing"),
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        taxItemDS           : new kendo.data.DataSource({
            data: banhji.source.taxList,
            filter:{
                logic: "or",
                filters: [
                    { field: "tax_type_id", value: 3 },//Customer Tax
                    { field: "tax_type_id", value: 9 }
                ]
            },
            sort: [
                { field: "tax_type_id", dir: "asc" },
                { field: "name", dir: "asc" }
            ]
        }),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "Cash_Refund" }
        }),
        accountDS           : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 10 },
            sort: { field:"number", dir:"asc" }
        }),
        contactDS           : banhji.source.customerDS,
        amtDueColor         : banhji.source.amtDueColor,
        obj                 : null,
        isEdit              : false,
        saveClose           : false,
        savePrint           : false,
        notDuplicateNumber  : true,
        total               : 0,
        total_deposit       : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        onRemove            : function(e){
            // Array with information about the uploaded files
            var self = this, files = e.files;
            $.each(this.attachmentDS.data(), function(index, value){
                if(value.name==files[0].name){
                    self.attachmentDS.remove(value);

                    return false;
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm("Are you sure, you want to delete it?")) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            var self = this;

            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                if(e.type=="destroy"){
                    if(saved==false){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var paramz = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(paramz, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });

            //Clear upload files
            $(".k-upload-files").remove();
        },
        //Deposit
        loadDeposit         : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact_id>0){
                this.txnDS.query({
                    filter:[
                        { field:"amount", operator:"select_sum", value:"amount" },
                        { field:"contact_id", value: obj.contact_id },
                        { field:"type", value: "Customer_Deposit" }
                    ]
                }).then(function(){
                    var view = self.txnDS.view();

                    self.set("total_deposit", view[0].amount + obj.deposit);
                });
            }
        },
        //Contact
        setContact          : function(contact){
            var obj = this.get("obj");

            obj.set("contact", contact);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
                obj.set("locale", contact.locale);
                obj.set("bill_to", contact.bill_to);
                obj.set("ship_to", contact.ship_to);

                this.setRate();
                this.loadDeposit();
                this.loadReference();
                this.jobDS.filter({ field:"contact_id", value: contact.id });
            }

            this.changes();
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });
        },
        //Segment
        segmentChanges      : function(e) {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //Item
        addRow              : function(){
            var obj = this.get("obj");
            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                item_id             : "",
                assembly_id         : 0,
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio    : 0,
                price               : 0,
                amount              : 0,
                discount            : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : 1,
                reference_no        : "",

                item                : { id:"", name:"" },
                measurement         : { measurement_id:"", measurement:"" },
                tax_item            : { id:"", name:"" }
            });
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        removeRow           : function(e){
            var data = e.data;

            //Remove Assembly Item List
            if(data.item_id>0){
                var raw = this.assemblyLineDS.data();

                var item, i;
                for(i=raw.length-1; i>=0; i--){
                    item = raw[i];
                    if (item.assembly_id==data.item_id){
                        this.assemblyLineDS.remove(item);
                    }

                }
            }

            this.lineDS.remove(data);
            this.changes();
        },
        addItem             : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            // row.set("cost", item.cost * rate);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: item.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();
                row.set("cost", wac[0].cost * rate);
            });

            //Get first price
            this.assemblyDS.query({
                filter:[
                    { field:"item_id", value:item.id },
                    { field:"assembly_id", value:0 }
                ],
                page: 1,
                pageSize: 1
            }).then(function(){
                var view = self.assemblyDS.view();

                if(view.length>0){
                    var measurement = {
                        measurement_id  : view[0].measurement_id,
                        price           : kendo.parseFloat(view[0].price),
                        conversion_ratio: view[0].conversion_ratio,
                        measurement     : view[0].measurement
                    };
                    row.set("measurement", measurement);
                }
            });
        },
        addItemCatalog      : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : catalogItem.cost * rate,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : -1,

                        discount_percentage : 0,
                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" },
                        tax_item            : { id:"", name:"" }
                    });
                }
            });
        },
        addItemAssembly     : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            var notExist = true;
            $.each(this.assemblyLineDS.data(), function(index, value){
                if(value.assembly_id==item.id){
                    notExist = false;

                    return false;
                }
            });

            if(notExist){
                row.set("item_id", item.id);
                row.set("measurement_id", item.measurement_id);
                row.set("description", item.sale_description);
                row.set("conversion_ratio", 1);
                row.set("cost", item.cost * rate);
                row.set("price", item.price * rate);
                row.set("rate", rate);
                row.set("locale", item.locale);

                this.assemblyDS.query({
                    filter:{ field:"assembly_id", value:row.item_id }
                }).then(function(){
                    var view = self.assemblyDS.view();

                    $.each(view, function(index, value){
                        var itemAssembly = banhji.source.itemDS.get(value.item_id),
                            itemAssemblyRate = obj.rate / banhji.source.getRate(itemAssembly.locale, new Date(obj.issued_date));

                        self.assemblyLineDS.add({
                            transaction_id      : obj.id,
                            item_id             : value.item_id,
                            assembly_id         : value.assembly_id,
                            measurement_id      : value.measurement_id,
                            description         : itemAssembly.sale_description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : itemAssembly.cost * rate,
                            price               : value.price * itemAssemblyRate,
                            amount              : value.price * itemAssemblyRate,
                            rate                : itemAssemblyRate,
                            locale              : value.locale,
                            movement            : -1,

                            item                : itemAssembly
                        });
                    });
                });
            }else{
                alert("Duplicate Item Assembly!");
                row.set("item_id", 0);
                row.set("item", { id:"", name:"" });
            }
        },
        lineDSChanges       : function(arg){
            var self = banhji.cashRefund;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else if(item.is_assembly=="1"){
                        self.addItemAssembly(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity" || arg.field=="price"){
                    self.changes();
                }else if(arg.field=="measurement"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.measurement.measurement_id);
                    dataRow.set("price", dataRow.measurement.price * dataRow.rate);
                    dataRow.set("conversion_ratio", dataRow.measurement.conversion_ratio);
                }else if(arg.field=="tax_item"){
                    var dataRow = arg.items[0];

                    dataRow.set("tax_item_id", dataRow.tax_item.id);
                    dataRow.set("tax", 0);

                    self.changes();
                }
            }
        },
        //Number
        checkExistingNumber : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            this.dataSource.query({
                filter: para
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
                self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));

                self.lineDS.query({
                    filter: [
                        { field: "transaction_id", value: id },
                        { field: "assembly_id", value: 0 }
                    ],
                });

                self.assemblyLineDS.query({
                    filter:[
                        { field: "transaction_id", value: id },
                        { field: "assembly_id >", value: 0 }
                    ]
                });

                self.journalLineDS.query({
                    filter:{ field: "transaction_id", value: id }
                });

                self.referenceDS.query({
                    filter:[
                        { field: "contact_id", value: view[0].contact_id },
                        { field: "amount >", value: 0 },
                        { field: "type", value:"Customer_Deposit" }
                    ]
                });

                self.returnDS.query({
                    filter:{ field: "return_id", value: id }
                }).then(function(){
                    var reInvoice = self.returnDS.view();

                    $.each(reInvoice, function(index, value){
                        value.set("amount", Math.abs(value.amount));
                    });
                });

                self.attachmentDS.filter({ field: "transaction_id", value: id });
                self.loadDeposit();
            });
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
            subTotal = 0, tax = 0, returnAmount = 0, itemIds = [];

            $.each(this.lineDS.data(), function(index, value) {
                var amt = value.quantity * value.price;

                //Tax by line
                if(value.tax_item_id>0){
                    var taxItem = value.tax_item;
                    tax += amt * taxItem.rate;
                }

                value.set("amount", amt);
                subTotal += amt;

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            //Return
            $.each(this.returnDS.data(), function(index, value) {
                if(value.amount>value.sub_total){
                    value.set("amount", value.sub_total);
                }
                returnAmount += value.amount;
            });

            total = subTotal + tax + returnAmount;

            obj.set("sub_total", subTotal);
            obj.set("tax", tax);
            obj.set("deposit", returnAmount);
            obj.set("amount", total);

            this.set("total", kendo.toString(total, "c", obj.locale));

            //Remove Assembly Item List
            var raw = this.assemblyLineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (jQuery.inArray(kendo.parseInt(item.assembly_id), itemIds)==-1) {
                    this.assemblyLineDS.remove(item);
                }
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.journalLineDS.data([]);
            this.attachmentDS.data([]);
            this.returnDS.data([]);
            this.referenceDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);

            this.dataSource.insert(0, {
                contact_id          : "",
                reference_id        : "",
                recurring_id        : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                type                : "Cash_Refund", //Require
                number              : "",
                sub_total           : 0,
                discount            : 0,
                tax                 : 0,
                amount              : 0,
                deposit             : 0,
                remaining           : 0,
                amount_paid         : 0,
                credit_allowed      : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                status              : 0,
                segments            : [],
                is_journal          : 1,
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:0, name:"" }
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.setRate();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");
            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Assembly Item line
                    $.each(self.assemblyLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                //Journal
                if(data[0].is_recurring==0 && data[0].is_journal==1){
                    self.addJournal(data[0].id);
                }

                self.lineDS.sync();
                self.assemblyLineDS.sync();
                self.uploadFile();

                //Return
                var ids = [];
                $.each(self.returnDS.data(), function(index, value){
                    if(value.reference_id>0){
                        ids.push(value.reference_id);
                    }
                    value.set("return_id", data[0].id);
                    value.set("amount", value.amount*-1);
                    value.set("issued_date", kendo.toString(new Date(data[0].issued_date), "s"));
                });
                self.returnDS.sync();
                self.updateTxnStatus(ids);

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.cancel();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel              : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.returnDS.cancelChanges();
            this.assemblyLineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.returnDS.data([]);
            this.assemblyLineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("cash_refund");
        },
        validating          : function(){
            var result = true, obj = this.get("obj"),
            total_deposit = this.get("total_deposit");

            if(obj.deposit>total_deposit){
                $("#ntf1").data("kendoNotification").error("Over deposit amount to refund!");

                result = false;
            }

            if(this.lineDS.total()==0 && this.returnDS.total()==0){
                $("#ntf1").data("kendoNotification").error("Please select an item or deposit.");

                result = false;
            }

            return result;
        },
        updateTxnStatus     : function(ids){
            var self = this;

            if(ids.length>0){
                this.txnDS.query({
                    filter:{ field:"id", operator:"where_in", value:ids }
                }).then(function(){
                    var view = self.txnDS.view();

                    $.each(view, function(index, value){
                        value.set("status", 3);//Status 3 = refund
                    });

                    self.txnDS.sync();
                });
            }
        },
        //Return
        addRowReturn        : function(){
            var obj = this.get("obj"), account_id = 0;

            if(obj.contact_id>0){
                var contact = obj.contact;
                account_id = contact.deposit_account_id;
            }

            this.returnDS.add({
                return_id       : obj.id,
                account_id      : account_id,
                contact_id      : obj.contact_id,
                reference_id    : "",
                reference_no    : "",
                number          : "",
                type            : "Customer_Deposit",
                amount          : 0,
                rate            : obj.rate,
                locale          : obj.locale,
                issued_date     : obj.issued_date
            });
        },
        removeRowReturn     : function(e){
            var data = e.data;

            this.returnDS.remove(data);
            this.changes();
        },
        loadReference       : function(){
            var obj = this.get("obj");

            if(obj.contact_id>0){
                this.referenceDS.filter([
                    { field: "contact_id", value: obj.contact_id },
                    { field: "amount >", value: 0 },
                    { field: "status <>", value: 3 },
                    { field: "type", value:"Customer_Deposit" }
                ]);
            }
        },
        referenceChanges    : function(e){
            var data = e.data;

            if(data.reference_id>0){
                var txn = this.referenceDS.get(data.reference_id);

                data.set("account_id", txn.account_id);
                data.set("reference_no", txn.number);
                data.set("sub_total", txn.amount);
                data.set("amount", txn.amount);
            }else{
                data.set("account_id", 0);
                data.set("reference_no", "");
                data.set("sub_total", 0);
                data.set("amount", 0);
            }

            this.changes();
        },
        //Journal
        addJournal          : function(transaction_id){
            var self = this,
                obj = this.get("obj"),
                contact = obj.contact,
                raw = "", entries = {};

            //Edit Mode
            if(obj.isNew()==false){
                //Delete previous journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });
            }

            //Item lines
            $.each(this.lineDS.data(), function(index, value){
                var item = value.item,
                    itemRate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

                //COGS on Cr
                var cogsID = kendo.parseInt(item.expense_account_id);
                if(cogsID>0){
                    raw = "cr"+cogsID;

                    var cogsAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        cogsAmount = (value.quantity*value.conversion_ratio)*value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : cogsID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : cogsAmount * itemRate,
                            rate                : itemRate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].cr += cogsAmount;
                    }
                }

                //Inventory on Dr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "dr"+inventoryID;

                    var inventoryAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        inventoryAmount = (value.quantity*value.conversion_ratio)*value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : inventoryAmount * itemRate,
                            cr                  : 0,
                            rate                : itemRate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].dr += inventoryAmount;
                    }
                }

                //Sale on Dr
                var incomeID = kendo.parseInt(item.income_account_id);
                if(incomeID>0){
                    raw = "dr"+incomeID;

                    var saleAmount = value.quantity * value.price;
                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : incomeID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : saleAmount,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].dr += value.amount;
                    }
                }

                //Tax on Dr
                if(value.tax_item_id>0){
                    var taxItem = value.tax_item,
                        raw = "dr"+taxItem.account_id,
                        taxAmt = value.amount * taxItem.rate;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : taxItem.account_id,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : taxAmt,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].dr += taxAmt;
                    }
                }
            });

            //Assembly Item
            $.each(this.assemblyLineDS.data(), function(index, value){
                var item = value.item,
                    itemRate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

                //COGS on Cr
                var cogsID = kendo.parseInt(item.expense_account_id);
                if(cogsID>0){
                    raw = "cr"+cogsID;

                    var cogsAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        inventoryAmount = (value.quantity*value.conversion_ratio)*value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : cogsID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : cogsAmount * itemRate,
                            rate                : itemRate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].cr += cogsAmount;
                    }
                }

                //Inventory on Dr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "dr"+inventoryID;

                    var inventoryAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        inventoryAmount = (value.quantity*value.conversion_ratio)*value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : inventoryAmount * itemRate,
                            cr                  : 0,
                            rate                : itemRate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].dr += inventoryAmount;
                    }
                }
            });

            //Return Lines
            $.each(this.returnDS.data(), function(index, value){
                //Deposit on Dr
                var depositID = kendo.parseInt(value.account_id);
                if(depositID>0){
                    raw = "dr"+depositID;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : depositID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : value.amount,
                            cr                  : 0,
                            rate                : value.rate,
                            locale              : value.locale
                        };
                    }else{
                        entries[raw].dr += value.amount;
                    }
                }
            });

            //Cash on Cr
            var cashID = kendo.parseInt(obj.account_id);
            if(cashID>0){
                raw = "cr"+cashID;

                if(entries[raw]===undefined){
                    entries[raw] = {
                        transaction_id      : transaction_id,
                        account_id          : cashID,
                        contact_id          : obj.contact_id,
                        description         : obj.memo,
                        reference_no        : "",
                        segments            : obj.segments,
                        dr                  : 0,
                        cr                  : obj.amount,
                        rate                : obj.rate,
                        locale              : obj.locale
                    };
                }else{
                    entries[raw].cr += obj.amount;
                }
            }

            //Add to journal entry
            if(!jQuery.isEmptyObject(entries)){
                $.each(entries, function(index, value){
                    self.journalLineDS.add(value);
                });
            }

            this.journalLineDS.sync();
        }
    });
    banhji.customerRecurring = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        contactDS           : banhji.source.customerDS,
        contact_id          : "",
        name                : "",
        pageLoad            : function(){
            this.search();
        },
        search              : function(){
            var para = [],
            contact_id = this.get("contact_id"),
            name = this.get("name");

            if(contact_id){
                para.push({ field:"contact_id", value: contact_id });
            }

            if(name){
                para.push({ field:"recurring_name", operator:"startswith", value: name });
            }

            para.push({ field:"type", operator:"where_in", value:["Quote","Sale_Order","Customer_Deposit", "Commercial_Cash_Sale","Vat_Cash_Sale", "Cash_Sale", "Commercial_Invoice", "Vat_Invoice", "Invoice","GDN"] });
            para.push({ field:"is_recurring", value: 1 });

            this.dataSource.filter(para);

            this.set("contact_id", "");
            this.set("name", "");
        },
        edit                : function(e){
            var data = e.data;

            switch(data.type) {
                case "Quote":
                    banhji.quote.set("recurring", "edit");
                    banhji.router.navigate('/quote/' + data.id);
                    break;
                case "Sale_Order":
                    banhji.saleOrder.set("recurring", "edit");
                    banhji.router.navigate('/sale_order/' + data.id);

                    break;
                case "Customer_Deposit":
                    banhji.customerDeposit.set("recurring", "edit");
                    banhji.router.navigate('/customer_deposit/' + data.id);

                    break;
                case "Commercial_Cash_Sale":
                    banhji.cashSale.set("recurring", "edit");
                    banhji.router.navigate('/cash_sale/' + data.id);

                    break;
                case "Vat_Cash_Sale":
                    banhji.cashSale.set("recurring", "edit");
                    banhji.router.navigate('/cash_sale/' + data.id);

                    break;
                case "Cash_Sale":
                    banhji.cashSale.set("recurring", "edit");
                    banhji.router.navigate('/cash_sale/' + data.id);

                    break;
                case "Commercial_Invoice":
                    banhji.invoice.set("recurring", "edit");
                    banhji.router.navigate('/invoice/' + data.id);

                    break;
                case "Vat_Invoice":
                    banhji.invoice.set("recurring", "edit");
                    banhji.router.navigate('/invoice/' + data.id);

                    break;
                case "Invoice":
                    banhji.invoice.set("recurring", "edit");
                    banhji.router.navigate('/invoice/' + data.id);

                    break;
                case "GDN":
                    banhji.gdn.set("recurring", "edit");
                    banhji.router.navigate('/gdn/' + data.id);

                    break;
                default:
                    // default code block
            }
        },
        use                 : function(e){
            var data = e.data;

            switch(data.type) {
                case "Quote":
                    banhji.quote.set("recurring", "use");
                    banhji.router.navigate('/quote/' + data.id);
                    break;
                case "Sale_Order":
                    banhji.saleOrder.set("recurring", "use");
                    banhji.router.navigate('/sale_order/' + data.id);
                    break;
                case "Customer_Deposit":
                    banhji.customerDeposit.set("recurring", "use");
                    banhji.router.navigate('/customer_deposit/' + data.id);

                    break;
                case "Commercial_Cash_Sale":
                    banhji.cashSale.set("recurring", "use");
                    banhji.router.navigate('/cash_sale/' + data.id);

                    break;
                case "Vat_Cash_Sale":
                    banhji.cashSale.set("recurring", "use");
                    banhji.router.navigate('/cash_sale/' + data.id);

                    break;
                case "Cash_Sale":
                    banhji.cashSale.set("recurring", "use");
                    banhji.router.navigate('/cash_sale/' + data.id);

                    break;
                case "Commercial_Invoice":
                    banhji.invoice.set("recurring", "use");
                    banhji.router.navigate('/invoice/' + data.id);

                    break;
                case "Vat_Invoice":
                    banhji.invoice.set("recurring", "use");
                    banhji.router.navigate('/invoice/' + data.id);

                    break;
                case "Invoice":
                    banhji.invoice.set("recurring", "use");
                    banhji.router.navigate('/invoice/' + data.id);

                    break;
                case "GDN":
                    banhji.gdn.set("recurring", "use");
                    banhji.router.navigate('/gdn/' + data.id);

                    break;
                default:
                    // default code block
            }
        },
        getContactName      : function(id){
            var raw = banhji.source.customerDS.get(id);
            if(raw){
                return raw.name;
            }else{
                return "";
            }
        }
    });
    // CUSTOMER REPORTS
    banhji.customerReportCenter = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "customer_modules/dashboard"),
        graphDS             : dataStore(apiUrl + "customer_modules/monthly_sale"),
        obj                 : {},
        pageLoad            : function(){
            this.loadData();
        },
        setObj              : function(){
            this.set("obj", {
                //Sale
                sale            : 0,
                sale_customer   : 0,
                sale_product    : 0,
                sale_ordered    : 0,
                //AR
                ar              : 0,
                ar_open         : 0,
                ar_customer     : 0,
                ar_overdue      : 0,
                collection_day  : 0
            });
        },
        pageLoad            : function(){
            var self = this, obj = this.get("obj");

            this.graphDS.read();

            this.dataSource.query({
                filter: []
            }).then(function(){
                var view = self.dataSource.view();

                obj.set("sale", kendo.toString(view[0].sale, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
                obj.set("sale_customer", kendo.toString(view[0].sale_customer, "n0"));
                obj.set("sale_product", kendo.toString(view[0].sale_product, "n0"));
                obj.set("sale_ordered", kendo.toString(view[0].sale_ordered, "n0"));

                obj.set("ar", kendo.toString(view[0].ar, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
                obj.set("ar_open", kendo.toString(view[0].ar_open, "n0"));
                obj.set("ar_customer", kendo.toString(view[0].ar_customer, "n0"));
                obj.set("ar_overdue", kendo.toString(view[0].ar_overdue, "n0"));

                obj.set("collection_day", kendo.toString(view[0].collection_day, "n0"));
            });
        }
    });
    banhji.customerBalance = kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl+"contact_reports/balance"),
        totalDS                 : dataStore(apiUrl+"contact_reports/balance_total"),
        contactTypeDS           : new kendo.data.DataSource({
            data: banhji.source.contactTypeList,
            filter: { field:"parent_id", value: 1 }//Customer
        }),
        statusList              : banhji.source.statusList,
        contact_type_id         : null,
        status                  : null,
        date                    : new Date(),
        total                   : 0,
        pageLoad                : function(){
        },
        search                  : function(){
            var self = this, para = [],
            status = this.get("status"),
            date = this.get("date"),
            contact_type_id = this.get("contact_type_id");

            if(status!==null){
                para.push({ field:"status", value: status });
            }

            if(date){
                para.push({ field:"issued_date", operator:"transaction_date", value: kendo.toString(date, "yyyy-MM-dd") });
            }

            if(contact_type_id){
                para.push({ field:"contact_type_id", value: contact_type_id });
            }

            this.dataSource.filter(para);
            this.totalDS.query({
                filter: para,
                page:1,
                pageSize:100
            }).then(function(){
                var view = self.totalDS.view();
                self.set("total", kendo.toString(view[0].total, "c0", banhji.locale));
            });
            this.set("status", null);
            this.set("contact_type_id", null);
        }
    });
    banhji.statement = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions/statement"),
        agingDS             : dataStore(apiUrl + "transactions/statement_aging"),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        company             : banhji.institute,
        companyName         : null,
        companyLogo         : banhji.institute.logo.url,
        obj                 : null,
        displayDate         : "",
        statusList          : [
            { "text": "All Transactions", "value": "all" },
            { "text": "Open Invoices", "value": "open" }
        ],
        status              : "open",
        exArray             : [],
        exArrayA            : [],
        pageLoad            : function(){
        },
        getLogo             : function() {
            banhji.companyDS.fetch(function(){
                if(banhji.companyDS.data().length > 0) {
                    banhji.statement.set('companyLogo', banhji.companyDS.data()[0].logo);
                }
            });
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                status = this.get("status"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "",
                typeList = ["Commercial_Invoice", "Vat_Invoice", "Invoice", "Commercial_Cash_Sale", "Vat_Cash_Sale", "Cash_Sale", "Deposit", "Cash_Receipt", "Sale_Return", "Cash_Refund"];

            this.set("haveEX", false);

            if(obj){
                para.push({ field:"contact_id", value: obj.id });

                if(status=="open"){
                    para.push({ field:"status", operator:"where_in", value: [0,2] });
                    para.push({ field:"type",  operator:"where_in", value: ["Commercial_Invoice", "Vat_Invoice", "Invoice"] });
                }else{
                    para.push({ field:"type",  operator:"where_in", value: typeList });
                }
            }
                //Dates
                if(start && end){
                    start = new Date(start);
                    end = new Date(end);
                    displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                    end.setDate(end.getDate()+1);

                    para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                    para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
                }else if(start){
                    start = new Date(start);
                    displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                    para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
                }else if(end){
                    end = new Date(end);
                    displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                    end.setDate(end.getDate()+1);

                    para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
                }else{}
                this.set("displayDate", displayDate);

                this.dataSource.query({
                    filter:para,
                    page: 1,
                    pageSize : 50,
                }).then(function(){
                    var view = self.dataSource.view();

                    var amount = 0, total = 0;
                    $.each(view, function(index, value){
                        amount += value.amount;
                        total += value.total;
                    });

                    self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
                    self.set("totalDue", kendo.toString(total, "c2", banhji.locale));
                });
                this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response;
                    var amount = 0, total = 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 7 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Statement",bold: true, fontSize: 20, textAlign: "center", colSpan: 7 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 7}
                            ]
                        });
                    };
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 7}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Number",bold: true, textAlign: "left", colSpan: 2 },
                            { value: self.obj.abbr + self.obj.number,bold: true,  colSpan: 5},
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Name",bold: true, textAlign: "left", colSpan: 2 },
                            { value: self.obj.name,bold: true,  colSpan: 5},
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Billed Address",bold: true, textAlign: "left", colSpan: 2 },
                            { value: self.obj.address,bold: true,  colSpan: 5},
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Phone",bold: true, textAlign: "left", colSpan: 2 },
                            { value: self.obj.phone,bold: true,  colSpan: 5},
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 7}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Date", background: "#496cad", color: "#ffffff" },
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "Transaction", background: "#496cad", color: "#ffffff" },
                            { value: "Status", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                            { value: "Balance", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                            var reference = "", ref = response.results[i];
                            if (ref.type == "Commercial_Invoice" || ref.type == "Vat_Invoice" || ref.type == "Invoice"){
                                if(ref.status== 0 || ref.status== 2){
                                    var date = new Date(), dueDates = new Date(ref.due_date).getTime(),overDue, toDay = new Date(date).getTime();
                                    if(dueDates < toDay) {
                                        status = "Over Due "+Math.floor((toDay - dueDates)/(1000*60*60*24))+"days";
                                    } else {
                                        status = Math.floor((dueDates - toDay)/(1000*60*60*24))+"days to pay";
                                    }
                                } else if(ref.status== 1){
                                    status = "Paid";
                                } else if (ref.status== 3){
                                    status = "Returned";
                                }
                            }
                            for (var e=0; e<ref.reference_no.length; e++){
                                reference += kendo.toString(ref.reference_no[e].number) + ', ';
                            }
                            amount += ref.amount;
                            total += ref.total;
                            self.exArray.push({
                                cells: [
                                    { value: kendo.toString(new Date(ref.issued_date), "d/M/yyyy" )},
                                    { value: ref.type },
                                    { value: reference},
                                    { value: ref.number },
                                    { value: status },
                                    { value: ref.amount },
                                    { value: ref.balance },
                                ]
                            });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "Total",bold: true, textAlign: "left", colSpan: 5 },
                            { value: total,bold: true,  colSpan: 1 },
                            { value: amount,bold: true,  colSpan: 1 },
                        ]
                    });
                }
            });


        },
        setContact      : function(contact){
            this.set("obj", contact);
            this.search();
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +
                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block>.span4 * {color: #fff!important;}' +
                        '.journal_block>.span4:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block>.span4:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block>.span4 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.pcg .mid-header {' +
                            'background-color: #dce6f2!important; ' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}'+
                        '.inv1 span.total-amount { ' +
                            'color:#fff!important;' +
                        '}</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent1').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        haveEX              : false,
        agingQuery          : function(para){
            var self = this;
            this.agingDS.data([]);
            this.agingDS.filter(para);
            this.agingDS.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var responses = e.response.results[0];

                    self.set("total", kendo.toString(responses.amount, "c", responses.locale));
                    var response = e.response, totalAD = responses.amount;

                    self.set("haveEX", true);
                }
            });
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Statement",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "statement.xlsx"});
        },
        savePDF: function() {
            var self = this,
                Win, pHeight, pWidth, ts;
            if (this.txnFormID == "45") {
                Win = window.open('', '', 'width=1050, height=900');
                pHeight = "215mm";
                pWidth = "297mm";
                var colorM = this.formColor;
                if (colorM == '#000000' || colorM == '#1f497d' || colorM == null) {
                    ts = 'color: #fff!important;';
                } else {
                    ts = 'color: #333;';
                }
                console.log(colorM);
                banhji.invoice.dataSource.sync();
                var gridElement = $('#grid'),
                    printableContent = '',
                    win = Win,
                    doc = win.document.open();
                var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>resources/js/kendoui/styles/kendo.bootstrap.min.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link href="<?php echo base_url(); ?>assets/water/water.css" rel="stylesheet" />' +
                    '<link href="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/components/js/kendoui/styles/kendo.common.min.css" rel="stylesheet" />' +
                    '<link href="<?php echo base_url(); ?>assets/water/winvoice-print.css" rel="stylesheet" />' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />' +
                    '<link href="<?php echo base_url(); ?>assets/responsive.css" rel="stylesheet" />' +
                    '<link href="https://fonts.googleapis.com/css?family=Preahvihear" rel="stylesheet" />' +
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Battambang&amp;subset=khmer" media="all">' +
                    '<style type="text/css" media="print">' +
                    '@page { size: portrait; margin:0.1cm;' +
                    'size: A4;' +
                    '} ' +
                    '* {font-weight: lighter!important;}' +
                    '@media print {' +
                    'html, body {' +
                    'max-width: ' + pWidth + ';' +
                    'max-height: ' + pHeight + ';' +
                    'min-width: ' + pWidth + ';' +
                    'min-height: ' + pHeight + ';' +
                    '}' +
                    '.main-color {' +
                    'background-color: ' + colorM + '!important; ' + ts +
                    '-webkit-print-color-adjust:exact; ' +
                    '} ' +
                    '}' +
                    '.main-color {' +
                    'background-color: ' + colorM + '!important; ' + ts +
                    '-webkit-print-color-adjust:exact; ' +
                    '} ' +
                    '.inv1 .light-blue-td { ' +
                    'background-color: #c6d9f1!important;' +
                    'text-align: left;' +
                    'padding-left: 5px;' +
                    '-webkit-print-color-adjust:exact; ' +
                    '}' +
                    '.logoP{ max-height 50px;max-width100px}' +
                    '.inv1 thead tr {' +
                    'background-color: rgb(242, 242, 242)!important;' +
                    '-webkit-print-color-adjust:exact; ' +
                    '}' +
                    '.pcg .mid-title div {}' +
                    '.pcg .mid-header {' +
                    'background-color: #dce6f2!important; ' +
                    '-webkit-print-color-adjust:exact; ' +
                    '}' +
                    '.winvoice-print table thead .darkbblue, .winvoice-print table tbody td.darkbblue { ' +
                    'background-color: #355176!important;' +
                    'color: #fff!important;' +
                    '-webkit-print-color-adjust:exact; ' +
                    '}' +
                    '.winvoice-print table td.greyy {' +
                    'background-color: #ccc!important;-webkit-print-color-adjust:exact;' +
                    '}' +
                    '.inv1 span.total-amount { ' +
                    'color:#fff!important;' +
                    '}</style>' +
                    '</head>' +
                    '<body style="background: #fff;"><div class="row-fluid" style="overflow: hidden"><div id="example" class="k-content" style="width: 1000px;overflow: hidden">';
                var htmlEnd =
                    '</div></div></body>' +
                    '</html>';
                printableContent = $('#invFormContent').html();
                endSide = $('#endSide').html();
                doc.write(htmlStart + printableContent + htmlEnd + endSide);
                doc.close();
                setTimeout(function() {
                    win.print();
                    //win.close();
                }, 2000);
            } else {
                Win = window.open('', '', 'width=1000, height=900');
                pHeight = "210mm";
                pWidth = "150mm";
                var colorM = this.formColor;
                if (colorM == '#000000' || colorM == '#1f497d' || colorM == null) {
                    ts = 'color: #fff!important;';
                } else {
                    ts = 'color: #333;';
                }
                console.log(colorM);
                banhji.invoice.dataSource.sync();
                var gridElement = $('#grid'),
                    printableContent = '',
                    win = Win,
                    doc = win.document.open();
                var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>resources/js/kendoui/styles/kendo.bootstrap.min.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link href="<?php echo base_url(); ?>assets/water/water.css" rel="stylesheet" />' +
                    '<link href="<?php echo base_url(); ?>assets/water/winvoice-print.css" rel="stylesheet" />' +
                    '<link href="<?php echo base_url(); ?>resources/common/theme/css/style-default-menus-dark.css" rel="stylesheet" />' +
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<link rel="stylesheet" href="http://fonts.googleapis.com/css?family=Battambang&amp;subset=khmer" media="all">' +
                    '<style type="text/css" media="print">' +
                    '@page { size: portrait; margin:0.2cm;' +
                    'size: A5;' +
                    '} ' +
                    '@media print {' +
                    'html, body {' +
                    '}' +
                    '.main-color {' +
                    'background-color: ' + colorM + '!important; ' + ts +
                    '-webkit-print-color-adjust:exact; ' +
                    '} ' +
                    '}' +
                    '.main-color {' +
                    'background-color: ' + colorM + '!important; ' + ts +
                    '-webkit-print-color-adjust:exact; ' +
                    '} ' +
                    '.inv1 .light-blue-td { ' +
                    'background-color: #c6d9f1!important;' +
                    'text-align: left;' +
                    'padding-left: 5px;' +
                    '-webkit-print-color-adjust:exact; ' +
                    '}' +
                    '.logoP{ max-height 50px;max-width100px}' +
                    '.inv1 thead tr {' +
                    'background-color: rgb(242, 242, 242)!important;' +
                    '-webkit-print-color-adjust:exact; ' +
                    '}' +
                    '.pcg .mid-title div {}' +
                    '.pcg .mid-header {' +
                    'background-color: #dce6f2!important; ' +
                    '-webkit-print-color-adjust:exact; ' +
                    '}' +
                    '.winvoice-print table thead .darkbblue, .winvoice-print table tbody td.darkbblue { ' +
                    'background-color: #355176!important;' +
                    'color: #fff!important;' +
                    '-webkit-print-color-adjust:exact; ' +
                    '}' +
                    '.winvoice-print table td.greyy {' +
                    'background-color: #ccc!important;-webkit-print-color-adjust:exact;' +
                    '}' +
                    '.inv1 span.total-amount { ' +
                    'color:#fff!important;' +
                    '}</style>' +
                    '</head>' +
                    '<body style="background: #fff;"><div class="row-fluid" style="overflow: hidden; padding: 40px; width: 1000px"><div id="example" class="k-content">';
                var htmlEnd =
                    '</div></div></body>' +
                    '</html>';
                printableContent = $('#invFormContent').html();
                endSide = $('#endSide').html();
                doc.write(htmlStart + printableContent  + htmlEnd + endSide);
                doc.close();
                setTimeout(function() {
                    win.print();
                    //win.close();
                }, 2000);
            }
        },
    });
    banhji.statementDetail =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/statement"),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        contact_id          : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){

        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                contact_id = this.get("contact_id"),
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            if(contact_id>0){
                var contact = this.contactDS.get(contact_id);
                this.set("obj", contact);

                para.push({ field:"contact_id", value: contact_id });
                //Dates
                if(start && end){
                    start = new Date(start);
                    end = new Date(end);
                    displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                    end.setDate(end.getDate()+1);

                    para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                    para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
                }else if(start){
                    start = new Date(start);
                    displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                    para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
                }else if(end){
                    end = new Date(end);
                    displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                    end.setDate(end.getDate()+1);

                    para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
                }else{

                }
                this.set("displayDate", displayDate);

                this.dataSource.query({
                    filter:para,
                    page: 1,
                    pageSize : 50,
                }).then(function(){
                    var view = self.dataSource.view();

                    var amount = 0;
                    $.each(view, function(index, value){
                        $.each(value.line, function(ind, val){
                            amount += val.amount;
                        });
                    });

                    self.set("totalAmount1", kendo.toString(amount, "c2", banhji.locale));
                });
                this.dataSource.bind("requestEnd", function(e){
                    if(e.type=="read"){
                        var response = e.response, balanceCal = 0, balance= 0;
                        self.exArray = [];

                        self.exArray.push({
                            cells: [
                                { value: self.company.name, textAlign: "center", colSpan: 7}
                            ]
                        });
                        self.exArray.push({
                            cells: [
                                { value: "STATEMENT",bold: true, fontSize: 20, textAlign: "center", colSpan: 7 }
                            ]
                        });
                        if(self.displayDate){
                            self.exArray.push({
                                cells: [
                                    { value: self.displayDate, textAlign: "center", colSpan: 7 }
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 4 }
                            ]
                        });
                        self.exArray.push({
                            cells: [
                                { value: "Date", background: "#496cad", color: "#ffffff" },
                                { value: "Type", background: "#496cad", color: "#ffffff" },
                                { value: "Job", background: "#496cad", color: "#ffffff" },
                                { value: "Number", background: "#496cad", color: "#ffffff" },
                                { value: "Status", background: "#496cad", color: "#ffffff" },
                                { value: "Amount", background: "#496cad", color: "#ffffff" },
                                { value: "Balance", background: "#496cad", color: "#ffffff" },
                            ]
                        });
                        for (var i = 0; i < response.results.length; i++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].name, bold: true, },
                                    { value: response.results[i].address, bold: true, colSpan: 3},
                                    { value: response.results[i].phone, bold: true, colSpan: 2},
                                    { value: response.results[i].balance_forward, bold: true, },

                                ]

                            });
                            balanceCal = response.results[i].balance_forward;
                            for(var j = 0; j < response.results[i].line.length; j++){
                                var status = response.results[i].line[j].status, statusShow;
                                    if(status == 1) {
                                        statusShow = "Paid";
                                    } else if (status == 2){
                                        statusShow = "Partialy Paid";
                                    } else{
                                        statusShow = "Open";
                                    }
                                var type = response.results[i].line[j].type;
                                if (type == "Cash_Sale"){
                                    balanceCal += 0;
                                }else{
                                    balanceCal += response.results[i].line[j].amount;
                                }
                                self.exArray.push({
                                    cells: [
                                        { value: response.results[i].line[j].date },
                                        { value: response.results[i].line[j].type },
                                        { value: response.results[i].line[j].job},
                                        { value: response.results[i].line[j].number},
                                        { value: statusShow},
                                        { value: response.results[i].line[j].amount},
                                        { value: balanceCal },
                                    ]
                                });
                            }
                            self.exArray.push({
                                cells: [
                                    { value: "", colSpan: 4 }
                                ]
                            });
                        }
                    }
                });
            }
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                  ],
                  title: "statement detail",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "statementDetail.xlsx"});
        }
    });
    banhji.stamentSummary = kendo.observable({
        lang                : langVM,
        dataSource      : dataStore(apiUrl + "sales/statement"),
        filterDB            : [
            {id: 'customer', name: 'Customer'},
            {id: 'segment', name: 'Segment'}
        ],
        filteredBy          : "customer",
        sortDB              : [
            {id: 'date', name: 'Date'}
        ],
        search  : function() {

            banhji.stamentSummary.dataSource.filter({
                logic: banhji.stamentSummary.get('filteredBy'),
                filters: [
                    {field: "issued_date >=", value: kendo.toString(this.startDate, "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(this.endDate, "yyyy-MM-dd")}
                ]
            });
        },
        filterChange  : function(e){
            banhji.stamentSummary.set("filteredBy", e.sender.dataSource.at(e.sender.selectedIndex-1).id);
        }
    });
    banhji.saleSummaryByCustomer =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/sale_summary_by_customer"),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para,
                page: 1,
                pageSize: 100,
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0;
                $.each(view, function(index, value){
                    amount += value.amount;
                });

                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 4 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Sale Summary by Customer",bold: true, fontSize: 20, textAlign: "center", colSpan: 4 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 4 }
                            ]
                        });
                    };
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 4 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Customer", background: "#496cad", color: "#ffffff" },
                            { value: "Number of Invoice", background: "#496cad", color: "#ffffff" },
                            { value: "Number of Cash Sale", background: "#496cad", color: "#ffffff" },
                            { value: "Total Sale", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].name },
                                    { value: response.results[i].invoice_count },
                                    { value: response.results[i].cash_sale_count },
                                    { value: kendo.parseFloat(response.results[i].amount)},
                                ]
                            });
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 7 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Sale Summary Customer",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "saleSummaryCustomer.xlsx"});
        }
    });
    banhji.saleDetailByCustomer =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/sale_detail_by_customer"),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para,
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        amount += val.amount;
                    });
                });

                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 4}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Sale Detail by Customer",bold: true, fontSize: 20, textAlign: "center", colSpan: 4 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 4 }
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 4 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Date", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            balance += response.results[i].line[j].amount;
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].type },
                                    { value: response.results[i].line[j].issued_date },
                                    { value: response.results[i].line[j].number},
                                    { value: response.results[i].line[j].amount },
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 4 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                  ],
                  title: "Sale Detail by Customer",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "saleDetailCustomer.xlsx"});
        }
    });
    banhji.customerTransactionList =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/customer_transaction_list"),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalCustomer       : 0,
        totalSale           : 0,
        totalBalance        : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.filter(para);
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 4}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Customer Transaction List",bold: true, fontSize: 20, textAlign: "center", colSpan: 4 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 4}
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 4}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Date", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            var aaa = response.results[i].line[j].quantity + response.results[i].line[j].measurement;
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].type },
                                    { value: response.results[i].line[j].issued_date },
                                    { value: response.results[i].line[j].number},
                                    { value: response.results[i].line[j].amount},
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 4}
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                  ],
                  title: "Customer Transaction List",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "customerTransaction.xlsx"});
        }
    });
    banhji.depositDetailByCustomer =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/deposit_detail_by_customer"),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Contact
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        amount += val.amount;
                    });
                });

                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 6}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Deposit Detail by Customer",bold: true, fontSize: 20, textAlign: "center", colSpan: 6}
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 6}
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 6}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Date", background: "#496cad", color: "#ffffff" },
                            { value: "Number", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                            { value: "Balance", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        var balance = response.results[i].balance_forward;
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: balance, bold: true, },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            balance += response.results[i].line[j].amount;
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].type },
                                    { value: response.results[i].line[j].issued_date },
                                    { value: response.results[i].line[j].number},
                                    { value: response.results[i].line[j].reference},
                                    { value: response.results[i].line[j].amount},
                                    { value: balance},
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 4}
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Deposit Detail Customer",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "depositDetailCustomer.xlsx"});
        }
    });
    banhji.saleSummaryByProduct =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/sale_summary_by_product"),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field: "is_catalog <>", value: 1 },
                { field: "is_assembly <>", value: 1 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { itemIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        avg_sale            : 0,
        total_sale          : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.itemIds.length>0){
                var itemIds = [];
                $.each(obj.itemIds, function(index, value){
                    itemIds.push(value);
                });
                para.push({ field:"item_id", operator:"where_in", value:itemIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para,
                page: 1,
                pageSize : 20,
            }).then(function(){
                var view = self.dataSource.view();

                var txnCount = 0, amount = 0;
                $.each(view, function(index, value){
                    txnCount += value.txn_count;
                    amount += value.amount;
                });

                var avgSale = 0;
                if(txnCount>0){
                    avgSale = amount/txnCount;
                }

                self.set("avg_sale", kendo.toString(avgSale, "c2", banhji.locale));
                self.set("total_sale", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 6 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Sale Summary by Product/Service",bold: true, fontSize: 20, textAlign: "center", colSpan: 6 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 6 }
                            ]
                        });
                    };
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 6 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Item", background: "#496cad", color: "#ffffff" },
                            { value: "QTY", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                            { value: "AVG Price", background: "#496cad", color: "#ffffff" },
                            { value: "AVG Cost", background: "#496cad", color: "#ffffff" },
                            { value: "Gross Profit Margin", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].name },
                                    { value: kendo.parseFloat(response.results[i].quantity)},
                                    { value: kendo.parseFloat(response.results[i].amount)},
                                    { value: kendo.parseFloat(response.results[i].avg_price)},
                                    { value: kendo.parseFloat(response.results[i].avg_cost)},
                                    { value: kendo.parseFloat(response.results[i].gpm)},
                                ]
                            });
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 6 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Sale Summary Product",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "saleSummaryProduct.xlsx"});
        }
    });
    banhji.saleDetailByProduct =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/sale_detail_by_product"),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field: "is_catalog <>", value: 1 },
                { field: "is_assembly <>", value: 1 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { itemIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        product_sale        : 0,
        total_sale          : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Items
            if(obj.itemIds.length>0){
                var itemIds = [];
                $.each(obj.itemIds, function(index, value){
                    itemIds.push(value);
                });
                para.push({ field:"item_id", operator:"where_in", value:itemIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para,
                page: 1,
                pageSize : 50,
            }).then(function(){
                var view = self.dataSource.view();

                var txnCount = 0, amount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        txnCount++;
                        amount += val.amount;
                    });
                });

                var avgSale = 0;
                if(txnCount>0){
                    avgSale = amount/txnCount;
                }

                self.set("product_sale", kendo.toString(avgSale, "c2", banhji.locale));
                self.set("total_sale", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 7}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Sale Detail by Product/Service",bold: true, fontSize: 20, textAlign: "center", colSpan: 7 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 7 }
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 7 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Customer", background: "#496cad", color: "#ffffff" },
                            { value: "Invoice Date", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "QTY", background: "#496cad", color: "#ffffff" },
                            { value: "Price", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            var aaa = response.results[i].line[j].quantity + response.results[i].line[j].measurement;
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].type },
                                    { value: response.results[i].line[j].customer },
                                    { value: response.results[i].line[j].issued_date},
                                    { value: response.results[i].line[j].number },
                                    { value: aaa},
                                    { value: response.results[i].line[j].price },
                                    { value: response.results[i].line[j].amount },
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 7}
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Sale Detail by Product/Service",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "saleDetailProduct.xlsx"});
        }
    });
    banhji.saleSummaryByBrand =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/sale_summary_by_brand"),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field: "is_catalog <>", value: 1 },
                { field: "is_assembly <>", value: 1 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { itemIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        avg_sale            : 0,
        total_sale          : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.itemIds.length>0){
                var itemIds = [];
                $.each(obj.itemIds, function(index, value){
                    itemIds.push(value);
                });
                para.push({ field:"item_id", operator:"where_in", value:itemIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var txnCount = 0, amount = 0;
                $.each(view, function(index, value){
                    txnCount += value.txn_count;
                    amount += value.amount;
                });

                var avgSale = 0;
                if(txnCount>0){
                    avgSale = amount/txnCount;
                }

                self.set("avg_sale", kendo.toString(avgSale, "c2", banhji.locale));
                self.set("total_sale", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 6 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Sale Summary by Product/Service",bold: true, fontSize: 20, textAlign: "center", colSpan: 6 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 6 }
                            ]
                        });
                    };
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 6 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Item", background: "#496cad", color: "#ffffff" },
                            { value: "QTY", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                            { value: "AVG Price", background: "#496cad", color: "#ffffff" },
                            { value: "AVG Cost", background: "#496cad", color: "#ffffff" },
                            { value: "Gross Profit Margin", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].name },
                                    { value: kendo.parseFloat(response.results[i].quantity)},
                                    { value: kendo.parseFloat(response.results[i].amount)},
                                    { value: kendo.parseFloat(response.results[i].avg_price)},
                                    { value: kendo.parseFloat(response.results[i].avg_cost)},
                                    { value: kendo.parseFloat(response.results[i].gpm)},
                                ]
                            });
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 6 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Sale Summary Product",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "saleSummaryProduct.xlsx"});
        }
    });
    banhji.saleDetailByBrand =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/sale_detail_by_brand"),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field: "is_catalog <>", value: 1 },
                { field: "is_assembly <>", value: 1 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { itemIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        product_sale        : 0,
        total_sale          : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Items
            if(obj.itemIds.length>0){
                var itemIds = [];
                $.each(obj.itemIds, function(index, value){
                    itemIds.push(value);
                });
                para.push({ field:"item_id", operator:"where_in", value:itemIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var txnCount = 0, amount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        txnCount++;
                        amount += val.amount;
                    });
                });

                var avgSale = 0;
                if(txnCount>0){
                    avgSale = amount/txnCount;
                }

                self.set("product_sale", kendo.toString(avgSale, "c2", banhji.locale));
                self.set("total_sale", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 7}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Sale Detail by Product/Service",bold: true, fontSize: 20, textAlign: "center", colSpan: 7 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 7 }
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 7 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Customer", background: "#496cad", color: "#ffffff" },
                            { value: "Invoice Date", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "QTY", background: "#496cad", color: "#ffffff" },
                            { value: "Price", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            var aaa = response.results[i].line[j].quantity + response.results[i].line[j].measurement;
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].type },
                                    { value: response.results[i].line[j].customer },
                                    { value: response.results[i].line[j].issued_date},
                                    { value: response.results[i].line[j].number },
                                    { value: aaa},
                                    { value: response.results[i].line[j].price },
                                    { value: response.results[i].line[j].amount },
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 7}
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Sale Detail by Product/Service",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "saleDetailProduct.xlsx"});
        }
    });
    banhji.cashSaleSummaryByCustomer =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/cashSale_summary_by_customer"),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0;
                $.each(view, function(index, value){
                    amount += value.amount;
                });

                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 3}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Cash Sale Summary by Customer",bold: true, fontSize: 20, textAlign: "center", colSpan: 3}
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 3}
                            ]
                        });
                    };
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 3}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Customer", background: "#496cad", color: "#ffffff" },
                            { value: "Number of Cash Sale", background: "#496cad", color: "#ffffff" },
                            { value: "Total", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].name },
                                    { value: response.results[i].cash_sale_count },
                                    { value: kendo.parseFloat(response.results[i].amount)},
                                ]
                            });
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 3 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                  ],
                  title: "Cash Sale Summary by Customer",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "cashSaleSummaryCustomer.xlsx"});
        }
    });
    banhji.cashSaleDetailByCustomer =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/cashSale_detail_by_customer"),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        amount += val.amount;
                    });
                });

                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 4}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Cash Sale Detail by Customer",bold: true, fontSize: 20, textAlign: "center", colSpan: 4 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 4 }
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 4 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Date", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            balance += response.results[i].line[j].amount;
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].type },
                                    { value: response.results[i].line[j].issued_date },
                                    { value: response.results[i].line[j].number},
                                    { value: response.results[i].line[j].amount },
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 4 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                  ],
                  title: "Cash Sale Detail by Customer",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "cashSaleDetailCustomer.xlsx"});
        }
    });
    banhji.cashSaleSummaryByProduct =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/cashSale_summary_by_product"),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field: "is_catalog <>", value: 1 },
                { field: "is_assembly <>", value: 1 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { itemIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        avg_sale            : 0,
        total_sale          : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.itemIds.length>0){
                var itemIds = [];
                $.each(obj.itemIds, function(index, value){
                    itemIds.push(value);
                });
                para.push({ field:"item_id", operator:"where_in", value:itemIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var txnCount = 0, amount = 0;
                $.each(view, function(index, value){
                    txnCount += value.txn_count;
                    amount += value.amount;
                });

                var avgSale = 0;
                if(txnCount>0){
                    avgSale = amount/txnCount;
                }

                self.set("avg_sale", kendo.toString(avgSale, "c2", banhji.locale));
                self.set("total_sale", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 6}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Cash Sale Summary by Product/Service",bold: true, fontSize: 20, textAlign: "center", colSpan: 6}
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 6}
                            ]
                        });
                    };
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 6}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Item", background: "#496cad", color: "#ffffff" },
                            { value: "QTY", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                            { value: "AVG Price", background: "#496cad", color: "#ffffff" },
                            { value: "AVG Cost", background: "#496cad", color: "#ffffff" },
                            { value: "Gross Profit Margin", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].name },
                                    { value: response.results[i].quantity },
                                    { value: kendo.parseFloat(response.results[i].amount)},
                                    { value: response.results[i].avg_price },
                                    { value: response.results[i].avg_cost },
                                    { value: response.results[i].gpm },

                                ]
                            });
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 6}
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Cash Sale Summary Product",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "cashSaleSummaryProduct.xlsx"});
        }
    });
    banhji.cashSaleDetailByProduct =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/cashSale_detail_by_product"),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field: "is_catalog <>", value: 1 },
                { field: "is_assembly <>", value: 1 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { itemIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        product_sale        : 0,
        total_sale          : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Items
            if(obj.itemIds.length>0){
                var itemIds = [];
                $.each(obj.itemIds, function(index, value){
                    itemIds.push(value);
                });
                para.push({ field:"item_id", operator:"where_in", value:itemIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var txnCount = 0, amount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        txnCount++;
                        amount += val.amount;
                    });
                });

                var avgSale = 0;
                if(txnCount>0){
                    avgSale = amount/txnCount;
                }

                self.set("product_sale", kendo.toString(avgSale, "c2", banhji.locale));
                self.set("total_sale", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 4}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Sale Detail by Employee",bold: true, fontSize: 20, textAlign: "center", colSpan: 4}
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 4}
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 4}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Date", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            balance += response.results[i].line[j].amount;
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].type },
                                    { value: response.results[i].line[j].issued_date },
                                    { value: response.results[i].line[j].number},
                                    { value: response.results[i].line[j].amount},
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 7}
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                  ],
                  title: "Sale Detail by Employee",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "saleDetailEmployee.xlsx"});
        }
    });
    banhji.saleSummaryByEmployee =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/sale_summary_by_employee"),
        contactDS           : banhji.source.employeeDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0;
                $.each(view, function(index, value){
                    amount += value.amount;
                });

                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 4 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Sale Summary by Employee",bold: true, fontSize: 20, textAlign: "center", colSpan: 4 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 4 }
                            ]
                        });
                    };
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 4 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Employee", background: "#496cad", color: "#ffffff" },
                            { value: "Number of Invoice", background: "#496cad", color: "#ffffff" },
                            { value: "Number of Cash Sale", background: "#496cad", color: "#ffffff" },
                            { value: "Total Sale", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].name },
                                    { value: response.results[i].invoice_count },
                                    { value: response.results[i].cash_sale_count },
                                    { value: kendo.parseFloat(response.results[i].amount)},
                                ]
                            });
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 4}
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Sale Summary Employee",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "saleSummaryEmployee.xlsx"});
        }
    });
    banhji.saleDetailByEmployee =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/sale_detail_by_employee"),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        amount += val.amount;
                    });
                });

                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 4}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Sale Detail by Employee",bold: true, fontSize: 20, textAlign: "center", colSpan: 4 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 4 }
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 4 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Date", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            balance += response.results[i].line[j].amount;
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].type },
                                    { value: response.results[i].line[j].issued_date },
                                    { value: response.results[i].line[j].number},
                                    { value: response.results[i].line[j].amount },
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 4 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                  ],
                  title: "Sale Detail by Customer",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "saleDetailCustomer.xlsx"});
        }
    });
    banhji.saleProductDetailByEmployee =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/salesProduct_detail_by_employee"),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        amount += val.amount;
                    });
                });

                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 4}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Sale Detail by Employee",bold: true, fontSize: 20, textAlign: "center", colSpan: 4 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 4 }
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 4 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Date", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            balance += response.results[i].line[j].amount;
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].type },
                                    { value: response.results[i].line[j].issued_date },
                                    { value: response.results[i].line[j].number},
                                    { value: response.results[i].line[j].amount },
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 4 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                  ],
                  title: "Sale Detail by Customer",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "saleDetailCustomer.xlsx"});
        }
    });
    banhji.customerBalanceSummary =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/balance_summary"),
        obj                 : null,
        company             : banhji.institute,
        as_of               : new Date(),
        displayDate         : "",
        totalTxn            : 0,
        totalBalance        : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        search              : function(){
            var self = this, para = [],
                as_of = this.get("as_of"),
                displayDate = "";

            if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);
                as_of.setDate(as_of.getDate()+1);

                para.push({ field:"issued_date <", value:kendo.toString(as_of, "yyyy-MM-dd") });
            }

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var balance = 0, txnCount = 0;
                $.each(view, function(index, value){
                    txnCount += value.txn_count;
                    balance += value.amount;
                });

                self.set("total_txn", kendo.toString(txnCount, "n0"));
                self.set("total_balance", kendo.toString(balance, "c2", banhji.locale));
            });
                        this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 3}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Cash Sale Summary by Customer",bold: true, fontSize: 20, textAlign: "center", colSpan: 3}
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 3}
                            ]
                        });
                    };
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 3}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Customer", background: "#496cad", color: "#ffffff" },
                            { value: "No. OF Transaction", background: "#496cad", color: "#ffffff" },
                            { value: "Balance", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].name },
                                    { value: response.results[i].txn_count },
                                    { value: kendo.parseFloat(response.results[i].amount)},
                                ]
                            });
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 3 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                  ],
                  title: "Customer Balance Summary",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "customerBalanceSummary.xlsx"});
        }
    });
    banhji.customerBalanceDetail =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/balance_detail"),
        obj                 : null,
        company             : banhji.institute,
        contactDS           : banhji.source.customerDS,
        as_of               : new Date(),
        displayDate         : "",
        obj                 : { contactIds: [] },
        totalTxn            : 0,
        totalBalance        : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                as_of = this.get("as_of"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);
                as_of.setDate(as_of.getDate()+1);

                para.push({ field:"issued_date <", value:kendo.toString(as_of, "yyyy-MM-dd") });
            }

            this.dataSource.query({
                filter:para,
                sort:[
                    { field:"issued_date", dir:"asc" },
                    { field:"number", operator:"order_by_related_contact", dir:"asc" }
                ]
            }).then(function(){
                var view = self.dataSource.view();

                var balance = 0, txnCount = 0;
                $.each(view, function(index, value){
                    txnCount += value.line.length;
                    $.each(value.line, function(ind, val){
                        balance += val.amount;
                    });
                });

                self.set("total_txn", kendo.toString(txnCount, "n0"));
                self.set("total_balance", kendo.toString(balance, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 4}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Customer Balance Summary",bold: true, fontSize: 20, textAlign: "center", colSpan: 4 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 4 }
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 4 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Invoice Date", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "Balance", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].type },
                                    { value: response.results[i].line[j].issued_date },
                                    { value: response.results[i].line[j].number},
                                    { value: response.results[i].line[j].amount },
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 4 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                  ],
                  title: "Customer Balance Detail",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "customerBalanceDetail.xlsx"});
        }
    });
    banhji.receivableAgingSummary =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/aging_summary"),
        contactDS           : banhji.source.customerDS,
        obj                 : null,
        company             : banhji.institute,
        as_of               : new Date(),
        displayDate         : "",
        totalBalance        : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        search              : function(){
            var self = this, para = [],
                as_of = this.get("as_of"),
                displayDate = "";

            if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);
                as_of.setDate(as_of.getDate()+1);

                para.push({ field:"issued_date <", value:kendo.toString(as_of, "yyyy-MM-dd") });
            }

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var balance = 0;
                $.each(view, function(index, value){
                    balance += value.total;
                });

                self.set("totalBalance", kendo.toString(balance, "c2", banhji.locale));
            });
                        this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 7}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Receivable Aging Summary",bold: true, fontSize: 20, textAlign: "center", colSpan: 7}
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 7}
                            ]
                        });
                    };
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 7}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Name", background: "#496cad", color: "#ffffff" },
                            { value: "Current", background: "#496cad", color: "#ffffff" },
                            { value: "1-30", background: "#496cad", color: "#ffffff" },
                            { value: "31-60", background: "#496cad", color: "#ffffff" },
                            { value: "61-90", background: "#496cad", color: "#ffffff" },
                            { value: "Over 90", background: "#496cad", color: "#ffffff" },
                            { value: "Total", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].name },
                                    { value: response.results[i].current },
                                    { value: response.results[i].in30 },
                                    { value: response.results[i].in60 },
                                    { value: response.results[i].in90 },
                                    { value: response.results[i].over90 },
                                    { value: kendo.parseFloat(response.results[i].total)},
                                ]
                            });
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 7 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Receivable Aging Summary",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "receivableAgingSummary.xlsx"});
        }
    });
    banhji.receivableAgingDetail =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/aging_detail"),
        contactDS           : banhji.source.customerDS,
        obj                 : { customers: [] },
        company             : banhji.institute,
        as_of               : new Date(),
        displayDate         : "",
        totalBalance        : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                as_of = this.get("as_of"),
                displayDate = "";

            //Customer
            if(obj.customers.length>0){
                var customers = [];
                $.each(obj.customers, function(index, value){
                    customers.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:customers });
            }

            if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);
                as_of.setDate(as_of.getDate()+1);

                para.push({ field:"issued_date <", value:kendo.toString(as_of, "yyyy-MM-dd") });
            }

            this.dataSource.query({
                filter:para,
                sort:[
                    { field:"issued_date", dir:"asc" },
                    { field:"number", operator:"order_by_related_contact", dir:"asc" }
                ]
            }).then(function(){
                var view = self.dataSource.view();

                var balance = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        balance += val.amount;
                    });
                });

                self.set("totalBalance", kendo.toString(balance, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 7}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Receivable Aging Detail",bold: true, fontSize: 20, textAlign: "center", colSpan: 7 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 7 }
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 7 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Invoice Date", background: "#496cad", color: "#ffffff" },
                            { value: "Due Date", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "Status", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                            { value: "Balance", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            var date = new Date(), dueDates = new Date(response.results[i].line[j].due_date).getTime(),overDue, toDay = new Date(date).getTime();
                            if(dueDates < toDay) {
                                overDue = "Over Due "+Math.floor((toDay - dueDates)/(1000*60*60*24))+"days";
                            } else {
                                overDue = Math.floor((dueDates - toDay)/(1000*60*60*24))+"days to pay";
                            }
                            balance =+ response.results[i].line[j].amount ;
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].type },
                                    { value: response.results[i].line[j].issued_date },
                                    { value: response.results[i].line[j].due_date},
                                    { value: response.results[i].line[j].number },
                                    { value: overDue},
                                    { value: response.results[i].line[j].amount },
                                    { value: balance},
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 7}
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Receivable Aging Detail",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "receivableAgingDetail.xlsx"});
        }
    });
    banhji.collectInvoice =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/collect_invoice"),
        contactDS           : banhji.source.customerDS,
        obj                 : { customers: [] },
        company             : banhji.institute,
        as_of               : new Date(),
        displayDate         : "",
        total_txn           : 0,
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                as_of = this.get("as_of"),
                displayDate = "";

            //Customer
            if(obj.customers.length>0){
                var customers = [];
                $.each(obj.customers, function(index, value){
                    customers.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:customers });
            }

            if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);
                as_of.setDate(as_of.getDate()+1);

                para.push({ field:"issued_date <", value:kendo.toString(as_of, "yyyy-MM-dd") });
            }

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0, txn_count = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        txn_count++;
                        amount += val.amount;
                    });
                });

                self.set("total_txn", kendo.toString(txn_count, "n0"));
                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.collectionReport =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/collection_report"),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { customers: [] },
        company             : banhji.institute,
        displayDate         : "",
        total_txn           : 0,
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.customers.length>0){
                var customers = [];
                $.each(obj.customers, function(index, value){
                    customers.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:customers });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0, txn_count = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        txn_count++;
                        amount += val.amount;
                    });
                });

                self.set("total_txn", kendo.toString(txn_count, "n0"));
                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.saleOrderList =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/transaction_list"),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        orderCount          : 0,
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            para.push({ field:"type", value:"Sale_Order" });

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0, orderCount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        orderCount++;
                        amount += val.amount;
                    });
                });

                self.set("orderCount", kendo.toString(orderCount, "n0"));
                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 5}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Sale Order List",bold: true, fontSize: 20, textAlign: "center", colSpan: 5 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 5 }
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 4 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Number", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "Date", background: "#496cad", color: "#ffffff" },
                            { value: "Status", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            var status = response.results[i].line[j].status
                            if (status==0){
                                status = "Open"
                            }else{
                                status = "Used"
                            }
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].number },
                                    { value: response.results[i].line[j].number },
                                    { value: response.results[i].line[j].issued_date},
                                    { value: status },
                                    { value: response.results[i].line[j].amount},
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 4 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                  ],
                  title: "Sale Order List",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "saleOrderList.xlsx"});
        }
    });
    banhji.saleOrderDetailByProduct =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/saleOrder_detail_by_product"),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field: "is_catalog <>", value: 1 },
                { field: "is_assembly <>", value: 1 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { itemIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        product_sale        : 0,
        total_sale          : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Items
            if(obj.itemIds.length>0){
                var itemIds = [];
                $.each(obj.itemIds, function(index, value){
                    itemIds.push(value);
                });
                para.push({ field:"item_id", operator:"where_in", value:itemIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var txnCount = 0, amount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        txnCount++;
                        amount += val.amount;
                    });
                });

                var avgSale = 0;
                if(txnCount>0){
                    avgSale = amount/txnCount;
                }

                self.set("product_sale", kendo.toString(avgSale, "c2", banhji.locale));
                self.set("total_sale", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 7}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Sale Detail by Product/Service",bold: true, fontSize: 20, textAlign: "center", colSpan: 7 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 7 }
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 7 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Customer", background: "#496cad", color: "#ffffff" },
                            { value: "Invoice Date", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "QTY", background: "#496cad", color: "#ffffff" },
                            { value: "Price", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            var aaa = response.results[i].line[j].quantity + response.results[i].line[j].measurement;
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].type },
                                    { value: response.results[i].line[j].customer },
                                    { value: response.results[i].line[j].issued_date},
                                    { value: response.results[i].line[j].number },
                                    { value: aaa},
                                    { value: response.results[i].line[j].price },
                                    { value: response.results[i].line[j].amount },
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 7}
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Sale Detail by Product/Service",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "saleDetailProduct.xlsx"});
        }
    });
    banhji.invoiceList =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/invoice_list"),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        typeList            : [
            { "text": "--- All ---", "value": "all" },
            { "text": "GDN", "value": "GDN" },
            { "text": "Quote", "value": "Quote" },
            { "text": "Sale Order", "value": "Sale_Order" }
        ],
        type                : "all",
        company             : banhji.institute,
        displayDate         : "",
        invoiceCount        : 0,
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                type = this.get("type"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Reference Type
            if(type=="all"){}else{
                para.push({ field:"type", operator:"type", value:type });
            }

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0, invoiceCount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        invoiceCount++;
                        amount += val.amount;
                    });
                });

                self.set("invoiceCount", kendo.toString(invoiceCount, "n0"));
                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.customerSale = kendo.observable({
        institute           : banhji.institute,
        lang                : langVM,
        locale              : banhji.locale,
        statementDB         : dataStore(apiUrl + "sales/statement"),
        count               : 0,
        total_avg           : 0,
        saleNumber          : 0,
        gpm                 : 0,
        total_sale          : 0,
        companyName         : null,
        startDate           : "<?php echo date("d-m-y"); ?>",
        endDate             : new Date(),
        sorter              : '',
        openInvoice         : 0,
        company             : banhji.institute,
        sortList            : banhji.source.sortList,
        //line to sale summary
        saleSummary         : banhji.saleSummaryCustomer,
        detailSummary       : banhji.saleDetailCustomer,
        customerTransaction : banhji.customerTransactionList,
        depositDetail       : banhji.depositDetailCustomer,
        summaryProductSale  : banhji.saleSummaryProduct,
        detailCustomerSale  : banhji.saleDetailProduct,
        saleJob             : banhji.saleJob,
        saleOrderDB         : banhji.saleOrderReport,
        saleDetail          : banhji.saleDetail,
        receivableAging     : banhji.receivableAging,
        receivableDetail    : banhji.receivableDetail,
        listInvoicesCollect : banhji.listInvoicesCollect,
        collectReportDB     : banhji.collectReport,
        invoiceListDB       : banhji.invoiceList,
        stamentSummary      : banhji.stamentSummary,
        // search button
        saleDetailSearch    : function() {
            this.detailSale.filter({
                logic: 'segment',
                filters: [
                    {field: "id", "operator": "segment", value: 9},
                    {field: "issued_date >=", value: kendo.toString(this.startDate, "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(this.endDate, "yyyy-MM-dd")}
                ]
            });
        },
        displayDateStart    : function() {
            return kendo.toString(new Date(this.get('startDate')), 'dd-MM-yyyy');
        },
        displayDateEnd    : function() {
            return kendo.toString(new Date(this.get('endDate')), 'dd-MM-yyyy');
        },
        trnxSearch          : function() {},
        depositDetailSearch : function() {},
        summaryProductSearch: function() {},
        detailProductSearch : function() {},
        saleJobSearch       : function() {},
        saleOrderSearch     : function() {},
        balanaceSearch      : function() {},
        balanceDetailSearch : function() {},
        agingSummarySearch  : function() {},
        agingDetailSearch   : function() {},
        collectingInvSearch : function() {},
        collectedInvSearch  : function() {},
        invoiceListSearch   : function() {},
        customerListSearch  : function() {},
        dateMax             : function(e) {
            $('#edate').css('width', '160px');
            var edate = $('#edate').kendoDatePicker().data("kendoDatePicker");
            edate.min(e.sender.value());
        },
        dateMin             : function(e) {
            $('#sdate').css('width', '160px');
            var sdate = $('#sdate').kendoDatePicker().data("kendoDatePicker");
            sdate.max(e.sender.value());
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=900, height=700'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="<?php echo base_url(); ?>assets/responsive.css" rel="stylesheet" >' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    '*{  } html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> '+
                    '@page { size: landscape; margin:0mm; }'+
                    '.saleSummaryCustomer .total-customer, .saleSummaryCustomer .total-sale { '+
                        'background-color: #DDEBF7!important; -webkit-print-color-adjust:exact; }'+
                    '.saleSummaryCustomer .table.table-borderless.table-condensed  tr th { '+
                        'background-color: #1E4E78!important;-webkit-print-color-adjust:exact;}'+
                    '.saleSummaryCustomer .table.table-borderless.table-condensed  tr th span{ '+
                        'color: #fff!important; }'+
                    '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td {'+
                        'background-color: #fff!important; -webkit-print-color-adjust:exact;} '+
                    '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { '+
                        'background-color: #F2F2F2!important;-webkit-print-color-adjust:exact; }'+
                    '.saleSummaryCustomer .table.table-borderless.table-condensed  tr th span{ '+
                        'color: #fff!important; }'+
                    '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td {'+
                        'background-color: #fff!important; -webkit-print-color-adjust:exact;} '+
                    '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { '+
                        'background-color: #F2F2F2!important;-webkit-print-color-adjust:exact; }'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed  tr th span{ '+
                        'color: #fff!important; }'+
                    '</style>' +
                    '</head>' +
                    '<body><div id="example" class="k-content saleSummaryCustomer" style="padding: 30px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';
            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcelSSC      : function(){
            console.log(banhji.saleSummaryCustomer.exArray);
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Sale Summary by Customer",
                  rows: banhji.saleSummaryCustomer.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "SaleSummaryCustomer.xlsx"});
        },
        ExportExcelSDC      : function(){
            console.log(banhji.saleDetailCustomer.exArray);
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Sale Detail by Customer",
                  rows: banhji.saleDetailCustomer.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "SaleDetailCustomer.xlsx"});
        },
        ExportExcelLIC      : function(){
            console.log(banhji.saleDetailCustomer.exArray);
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "List of Invoices to be Collected",
                  rows: banhji.listInvoicesCollect.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "ListInvoicesCollect.xlsx"});
        },
        ExportExcelSSP      : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Sale Summary by Products/Services",
                  rows: banhji.saleSummaryProduct.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "saleSummaryProduct.xlsx"});
        },
        dateChange          : function(){
            // var strDate = "";

            //  if(this.startDate && this.endDate){
            //      strDate = "From " + kendo.toString(this.startDate, "dd-MM-yyyy") + " To " + kendo.toString(this.endDate, "dd-MM-yyyy");
            //  }else if(this.startDate){
            //      strDate = "On " + kendo.toString(this.startDate,"dd-MM-yyyy");
            //  }else if(this.endDate){
            //      strDate = "As Of " + kendo.toString(this.endDate,"dd-MM-yyyy");
            //  }else{
            //      strDate = "";
            //  }

            var today = new Date(),
            day = today.getDate();
            sdate = "",
            edate = "",
            value = this.get('sorter');

            switch(value){
            case "today":
                sdate = today;

                break;
            case "week":
                var first = new Date(today.getTime() - 60*60*24* day*1000),
                last = new Date(today.getTime() + 60*60*24* day*1000);

                sdate = first;
                edate = last;

                break;
            case "month":
                var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
                edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                break;
            case "year":
                var sdate = new Date(today.getFullYear(), 0, 1),
                edate = new Date(today.getFullYear(), 11, 31);

                break;
            default:

            }

            this.set("startDate", sdate);
            this.set("endDate", edate);
            // start.value(sdate);
            // end.value(edate);

            // start.max(end.value());
           //       end.min(start.value());

           //       dateChanges();
           //          });

           //          start.max(end.value());
           //          end.min(start.value());
        }
    });
    banhji.draftTransaction =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/draft_list"),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        amount += val.amount;
                    });
                });

                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 5}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Draft List",bold: true, fontSize: 20, textAlign: "center", colSpan: 5}
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 5}
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 5}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Date", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "Action", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            balance += response.results[i].line[j].amount;
                            var action = "Use";
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].type },
                                    { value: response.results[i].line[j].issued_date },
                                    { value: response.results[i].line[j].number},
                                    { value: action},
                                    { value: response.results[i].line[j].amount },
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 4 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                  ],
                  title: "Draft List",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "draftList.xlsx"});
        }
    });
    banhji.customerList = kendo.observable({
        lang                    : langVM,
        institute               : banhji.institute,
        dataSource              : dataStore(apiUrl + "sales/customer"),
        statusList              : banhji.source.statusList,
        contact_type_id         : null,
        status                  : null,
        exArray             : [],
        pageLoad                : function(){
            this.search();
        },
        search                  : function(){
            // var para = [],
            // status = this.get("status"),
            // contact_type_id = this.get("contact_type_id");

            // if(status!==null){
            //  para.push({ field:"status", value: status });
            // }

            // if(contact_type_id){
            //  para.push({ field:"contact_type_id", value: contact_type_id });
            // }

            // this.dataSource.filter(para);
            // this.dataSource.query({
        //              filter:para
        //          });

            // this.set("status", null);
            // this.set("contact_type_id", null);
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: "Customer List",bold: true, fontSize: 20, textAlign: "center", colSpan: 6 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 6 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "CusttomerID", background: "#496cad", color: "#ffffff" },
                            { value: "Customer Name", background: "#496cad", color: "#ffffff" },
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Address", background: "#496cad", color: "#ffffff" },
                            { value: "Phone", background: "#496cad", color: "#ffffff" },
                            { value: "Email", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].number},
                                    { value: response.results[i].name },
                                    { value: response.results[i].contact_type },
                                    { value: response.results[i].address },
                                    { value: response.results[i].phone },
                                    { value: response.results[i].email },

                                ]
                            });
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 6 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Cusotmer List",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "customerList.xlsx"});
        }
    });
    // CUSTOMER SETTINGS
    banhji.customerSetting =  kendo.observable({
        lang                : langVM,
        contactTypeDS       : dataStore(apiUrl + "contacts/type"),
        patternDS           : dataStore(apiUrl + "contacts"),
        paymentMethodDS     : banhji.source.paymentMethodDS,
        paymentTermDS       : banhji.source.paymentTermDS,
        txnTemplateDS       : dataStore(apiUrl + "transaction_templates"),
        customFieldDS       : dataStore(apiUrl + "custom_fields"),
        membershipTypeDS    : dataStore(apiUrl + "membership_types"),
        contactTypeName     : "",
        contactTypeAbbr     : "",
        contactTypeCompany  : 0,
        paymentMethodName   : "",
        paymentTermName     : "",
        paymentTermNetDue   : "",
        paymentTermPeriod   : "",
        paymentTermPercentage   : "",
        prefixDS            : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "prefixes",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                create  : {
                    url: apiUrl + "prefixes",
                    type: "POST",
                    headers: banhji.header,
                    dataType: 'json'
                },
                update  : {
                    url: apiUrl + "prefixes",
                    type: "PUT",
                    headers: banhji.header,
                    dataType: 'json'
                },
                destroy     : {
                    url: apiUrl + "prefixes",
                    type: "DELETE",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter: { field:"type", operator:"where_in", value:["Quote", "Sale_Order", "Deposit","Commercial_Cash_Sale", "Vat_Cash_Sale", "Cash_Sale","Commercial_Invoice","Vat_Invoice", "Invoice", "Cash_Receipt", "GDN", "Sale_Return"] },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        pageLoad            : function() {
            this.txnTemplateDS.filter({ field: "moduls", value : "customer_mg" });
        },
        addContactType      : function(){
            var self = this, name = this.get("contactTypeName");

            if(name!==""){
                this.contactTypeDS.add({
                    parent_id   : 1,
                    name        : name,
                    abbr        : this.get("contactTypeAbbr"),
                    description : "",
                    is_company  : this.get("contactTypeCompany"),
                    is_system   : 0
                });

                this.contactTypeDS.sync();
                this.contactTypeDS.bind("requestEnd", function(e){
                    if(e.type==="create"){
                        var response = e.response.results[0];
                        self.addPattern(response.id);
                        banhji.source.loadContactTypes();
                    }
                });

                this.set("contactTypeName", "");
                this.set("contactTypeAbbr", "");
                this.set("contactTypeCompany", 0);
            }
        },
        addPattern          : function(id){
            this.patternDS.insert(0, {
                "contact_type_id"       : id,
                "number"                : "",
                "locale"                : banhji.locale,
                "is_pattern"            : 1,
                "status"                : 1
            });
            this.patternDS.sync();
        },
        addPaymentMethod    : function(){
            var name = this.get("paymentMethodName");

            if(name!==""){
                this.paymentMethodDS.add({
                    name        : name,
                    description : "",
                    is_system   : 0
                });

                this.paymentMethodDS.sync();

                this.set("paymentMethodName", "");
            }
        },
        addPaymentTerm      : function(){
            var name = this.get("paymentTermName");

            if(name!==""){
                this.paymentTermDS.add({
                    name                : name,
                    net_due             : this.get("paymentTermNetDue"),
                    discount_period     : this.get("paymentTermPeriod"),
                    discount_percentage : this.get("paymentTermPercentage"),
                    is_system           : 0
                });

                this.paymentTermDS.sync();

                this.set("paymentTermName", "");
                this.set("paymentTermNetDue", "");
                this.set("paymentTermPeriod", "");
                this.set("paymentTermPercentage", "");
            }
        },
        deleteForm          : function(e){
            var data = e.data;
            if(confirm("Do you want to delete it?") == true) {
                this.txnTemplateDS.remove(data);
                this.txnTemplateDS.sync();
            }
        },
        goInvoiceCustom     : function(){
            banhji.router.navigate('/invoice_custom');
        }
    });
    banhji.job = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "jobs"),
        contactDS           : banhji.source.customerDS,
        obj                 : null,
        isVisible           : false,
        pageLoad            : function() {
        },
        addObj          : function(){
            this.dataSource.add({
                number              : "",
                name                : "",
                description         : "",
                contact_id          : "",
                contact             : []
            });
            var data = this.dataSource.data();
            var obj = data[data.length-1];
            this.set("obj", obj);
        },
        openWindow          : function(){
            this.addObj();
            this.set("isVisible", true);
        },
        closeWindow         : function(){
            this.dataSource.cancelChanges();

            this.set("isVisible", false);
        },
        save                : function(){
            var self = this, obj = this.get("obj");

            if(obj.name!=="" && obj.contact_id>0){
                this.dataSource.sync();
                this.dataSource.bind("requestEnd", function(e){
                    if( e.type == "create" || e.type == "update"){
                        self.set("isVisible", false);
                        banhji.source.loadJobs();
                    }
                });
            }else{
                alert("Name and Customer are required.");
            }
        },
        edit                : function(e){
            var data = e.data;
            this.set("obj", data);

            this.set("isVisible", true);
        },
        delete              : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var data = e.data;
                this.dataSource.remove(data);
                this.dataSource.sync();
                this.dataSource.bind("requestEnd", function(e){
                    if(e.type=="destroy"){
                        banhji.source.loadJobs();
                    }
                });
            }
        },
        cancel          : function(){
            this.dataSource.cancelChanges();
            window.history.back();
        }
    });
    banhji.invoiceCustom =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transaction_templates"),
        txnFormDS           : dataStore(apiUrl + "transaction_forms"),
        contactDS           : new kendo.data.DataSource({
            data: { name: "", address: "", phone: ""},
            sort: { field:"number", dir:"asc" }
        }),
        obj                 : {type: "Quote", amount: "$500,000.00",title: "Quotation"},
        objForm             : null,
        formShow            : null,
        formTitle           : "Quotation",
        formType            : "Quote",
        company             : banhji.institute,
        saveClose           : false,
        selectTypeList      : banhji.source.customerFormList,
        selectCustom        : "customer_mg",
        isEdit              : false,
        onChange            : function(e) {
            var obj = this.get("obj"), self = this;
            this.txnFormDS.query({
                filter: [{ field:"type", value: obj.type }, {field:"moduls", value: obj.moduls }],
                page: 1,
                take: 100
            }).then(function(e){
                var view = self.txnFormDS.view();
                if(view.length > 0){
                    banhji.invoiceForm.set("obj", view[0]);
                    var obj = self.get("obj");
                    obj.set("type", view[0].type);
                    obj.set("title", view[0].title);
                    obj.set("note", view[0].note);
                }
            });
            setTimeout(function(e){ $('#formStyle a').eq(0).click(); },2000);
        },
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                var obj = this.get("obj"), self = this;
                if(this.formShow === null){
                    this.formShow = banhji.view.invoiceForm10;
                }
                banhji.view.invoiceCustom.showIn('#invFormContent', this.formShow);
                this.addRowLineDS();
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                    this.txnFormDS.query({
                        filter: { field:"type", value: obj.type },
                        page: 1,
                        take: 100
                    }).then(function(e){
                        var view = self.txnFormDS.view();
                        var obj = self.get("obj");
                        obj.set("type", view[0].type);
                        obj.set("title", view[0].title);
                        obj.set("note", view[0].note);

                    });
                }
                var name = banhji.invoiceForm.get("obj");
                name.set("title", this.formTitle);
                banhji.invoiceForm.contactDS.filter({field: "id", value: 1});
            }
        },
        addRowLineDS            : function(e){
            banhji.invoiceForm.lineDS.data([]);
            for (var i = 0; i < 15; i++) {
                banhji.invoiceForm.lineDS.add({
                    id          : i,
                    transaction_id      : i,
                    tax_item_id         : 0,
                    item_id             : 0,
                    assembly_id         : 0,
                    measurement_id      : 0,
                    description         : "",
                    quantity            : 1,
                    conversion_ratio    : 1,
                    cost                : 0,
                    price               : 0,
                    amount              : 0,
                    discount            : 0,
                    discount_percentage : 0,
                    tax                 : 0,
                    rate                : 1,
                    locale              : "",
                    movement            : -1,
                    reference_no        : "",
                    item                : { id:"", name:"" },
                    measurement         : { measurement_id:"", measurement:"" },
                    tax_item            : { id:"", name:"" },
                    variant             : [],
                    item_prices             : { measurement_id:"", measurement:"" },
                });
            }
        },
        activeInvoiceTmp        : function(e){
            var Active;
            switch(e) {
                case 1: Active = banhji.view.invoiceForm1; break;
                case 2: Active = banhji.view.invoiceForm2; break;
                //case 3: Active = banhji.view.invoiceForm3; break;
                //case 4: Active = banhji.view.invoiceForm4; break;
                //case 5: Active = banhji.view.invoiceForm5; break;
                case 6: Active = banhji.view.invoiceForm6; break;
                case 7: Active = banhji.view.invoiceForm7; break;
                case 8: Active = banhji.view.invoiceForm8; break;
                case 9: Active = banhji.view.invoiceForm9; break;
                case 10: Active = banhji.view.invoiceForm10; break;
                case 11: Active = banhji.view.invoiceForm11; break;
                case 12: Active = banhji.view.invoiceForm12; break;
                case 13: Active = banhji.view.invoiceForm13; break;
                case 14: Active = banhji.view.invoiceForm31; break;
                case 15: Active = banhji.view.invoiceForm15; break;
                case 16: Active = banhji.view.invoiceForm25; break;
                case 17: Active = banhji.view.invoiceForm17; break;
                case 18: Active = banhji.view.invoiceForm18; break;
                case 19: Active = banhji.view.invoiceForm19; break;
                case 20: Active = banhji.view.invoiceForm20; break;
                case 21: Active = banhji.view.invoiceForm21; break;
                case 22: Active = banhji.view.invoiceForm22; break;
                case 23: Active = banhji.view.invoiceForm28; break;
                case 24: Active = banhji.view.invoiceForm29; break;
                case 25: Active = banhji.view.invoiceForm35; break;
                case 26: Active = banhji.view.invoiceForm39; break;
                case 27: Active = banhji.view.invoiceForm19; break;
                case 28: Active = banhji.view.invoiceForm23; break; //old form 25 change Form
                case 29: Active = banhji.view.invoiceForm26; break;
                case 30: Active = banhji.view.invoiceForm25; break;
                case 31: Active = banhji.view.invoiceForm43; break; //old form 25 change Form
                case 32: Active = banhji.view.invoiceForm27; break;
                case 33: Active = banhji.view.invoiceForm30; break;
                case 34: Active = banhji.view.invoiceForm32; break;
                case 35: Active = banhji.view.invoiceForm33; break;
                case 36: Active = banhji.view.invoiceForm34; break;
                case 37: Active = banhji.view.invoiceForm36; break;
                case 38: Active = banhji.view.invoiceForm37; break;
                case 39: Active = banhji.view.invoiceForm38; break;
                case 40: Active = banhji.view.invoiceForm40; break;
                case 41: Active = banhji.view.invoiceForm41; break;
                case 42: Active = banhji.view.invoiceForm42; break;
                case 43: Active = banhji.view.formCaritasExpense; break;
                case 46: Active = banhji.view.purchaseSampleService; break;
                case 47: Active = banhji.view.invoiceTaxMekong; break;
                case 48: Active = banhji.view.invoiceMsp; break;
                case 50: Active = banhji.view.invoicePCGPADEE; break;
                case 51: Active = banhji.view.invoiceHDCom; break;
                case 52: Active = banhji.view.invoiceMAXConcrete; break;
                case 53: Active = banhji.view.invoiceVATMAXConcrete; break;
                case 54: Active = banhji.view.invoiceHeritageWalk; break;
                case 55: Active = banhji.view.invoiceVATHeritageWalk; break;
                case 56: Active = banhji.view.invoiceREACHS; break;
                case 57: Active = banhji.view.invoiceVATREACHS; break;
                case 58: Active = banhji.view.invoicePCG; break;
                case 59: Active = banhji.view.invoiceVATPCG; break;
                case 60: Active = banhji.view.normalInvoicePCG; break;
                case 61: Active = banhji.view.normalInvoiceREACHS; break;
                case 62: Active = banhji.view.recieptNoteRicemill; break;
                case 63: Active = banhji.view.depositHeritageWalk; break;
                case 64: Active = banhji.view.receiptHeritageWalk; break;
                case 65: Active = banhji.view.advanceVoucherPCG; break;
                case 68: Active = banhji.view.normalInvoiceKSLM; break;
                case 69: Active = banhji.view.commercialInvoiceKSLM; break;
                case 70: Active = banhji.view.vatInvoiceKSLM; break;
                case 71: Active = banhji.view.defaultCashAdvance; break;
                case 72: Active = banhji.view.defaultPurchase; break;
                case 73: Active = banhji.view.defaultSaleReturn; break;
                case 74: Active = banhji.view.defaultCashRefund; break;
                case 75: Active = banhji.view.invoiceHaveBalance; break;
                case 76: Active = banhji.view.normalInvoiceHeritageWalk; break;
            }
            banhji.view.invoiceCustom.showIn('#invFormContent', Active);
        },
        colorCC             : function(e){
            var Color = e.value;
            var tS = '';
            if(Color == '#000000' || Color =='#1f497d') tS = '#fff';
            else tS = '#333';
            $('.main-color').css({'background-color': e.value, 'color': tS});
            $('.main-color div').css({'color': tS});
            $('.main-color p').css({'color': tS});
            $('.main-color span').css({'color': tS});
            $('.main-color th').css({'color': tS});
        },
        selectedForm        : function(e){
            var Index = e.data.id;
            this.activeInvoiceTmp(Index);
            this.addRowLineDS();

            var data = e.data, obj = this.get("obj");
            obj.set("transaction_form_id", data.id);
        },
        loadObj             : function(id){
            var self = this;
            this.dataSource.query({
                filter: { field:"id", value: id },
                page: 1,
            }).then(function(e){
                var view = self.dataSource.view();
                self.set("obj", view[0]);

                banhji.invoiceForm.set("obj", view[0]);
                var Index = parseInt(view[0].transaction_form_id);
                self.activeInvoiceTmp(Index);
                self.addRowLineDS();

                self.txnFormDS.filter([
                    { field:"type", value: view[0].type },
                    { field:"moduls", value: view[0].moduls }
                ]);

                if(view[0].moduls == "customer_mg"){
                    self.set("selectTypeList", banhji.source.customerFormList);
                }else if(view[0].moduls == "vendor_mg"){
                    self.set("selectTypeList", banhji.source.vendorFormList);
                }
            });
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.set("obj", null);
            this.set("isEdit", false);
            this.dataSource.insert(0,{
                user_id         : banhji.source.user_id,
                transaction_form_id : 0,
                type            : this.formType,
                name            : "",
                title           : "Quotation",
                note            : "",
                color           : null,
                moduls          : this.selectCustom,
                item_id         : '',
                status          : 0
            });
            var obj = this.dataSource.at(0);
            this.set("obj", obj);
        },
        save                : function(){
            var self = this,obj = this.get("obj");
            var dfd = $.Deferred();
            //Save Obj
            if(obj.name){
                this.dataSource.sync();
                this.dataSource.bind("requestEnd", function(e){
                    if(e.type != 'read' && e.response.results) {
                        self.cancel();
                        var notificat = $("#ntf1").data("kendoNotification");
                        notificat.hide();
                        notificat.success(self.lang.lang.success_message);
                    }
                });
                this.dataSource.bind("error", function(e){
                    dfd.reject(e.errorThrown);
                });
            }else{
                alert("Please Fill Name of Form!");
            }
        },
        cancel              : function(){
            this.dataSource.cancelChanges();
            window.history.back();
        }
    });
    banhji.invoiceForm =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        referenceDS         : dataStore(apiUrl + "transactions"),
        txnTemplateDS       : dataStore(apiUrl + "transaction_templates"),
        obj                 : {title: "Quotation", issued_date : "<?php echo date('d/M/Y'); ?>", number : "QO123456", type : "Quote", amount: "$500,000.00", contact: []},
        company             : banhji.institute,
        paymentMethodDS     : banhji.source.paymentMethodDS,
        lineDS              : dataStore(apiUrl + "item_lines"),
        accountLineDS       : dataStore(apiUrl + "account_lines"),
        proaccountLineDS    : null,
        accountLine         : null,
        user_id             : banhji.source.user_id,
        selectForm          : null,
        contactDS           : dataStore(apiUrl + "contacts"),
        contactT            : null,
        paymentS            : null,
        accountDS           : null,
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        segmentItemDS       : banhji.source.segmentItemDS,
        totalCR             : 0,
        totalDR             : 0,
        netAmountDUE        : 0,
        isFalse             : false,
        numberToString      : '',
        numToWords          : function(number) {

            //Validates the number input and makes it a string
            if (typeof number === 'string') {
                number = parseInt(number, 10);
            }
            if (typeof number === 'number' && isFinite(number)) {
                number = number.toString(10);
            } else {
                return 'This is not a valid number';
            }

            //Creates an array with the number's digits and
            //adds the necessary amount of 0 to make it fully
            //divisible by 3
            var digits = number.split('');
            while (digits.length % 3 !== 0) {
                digits.unshift('0');
            }

            //Groups the digits in groups of three
            var digitsGroup = [];
            var numberOfGroups = digits.length / 3;
            for (var i = 0; i < numberOfGroups; i++) {
                digitsGroup[i] = digits.splice(0, 3);
            }
            //console.log(digitsGroup); //debug

            //Change the group's numerical values to text
            var digitsGroupLen = digitsGroup.length;
            var numTxt = [
                [null, 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'], //hundreds
                [null, 'ten', 'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety'], //tens
                [null, 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'] //ones
                ];
            var tenthsDifferent = ['ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen'];

            // j maps the groups in the digitsGroup
            // k maps the element's position in the group to the numTxt equivalent
            // k values: 0 = hundreds, 1 = tens, 2 = ones
            for (var j = 0; j < digitsGroupLen; j++) {
                for (var k = 0; k < 3; k++) {
                    var currentValue = digitsGroup[j][k];
                    digitsGroup[j][k] = numTxt[k][currentValue];
                    if (k === 0 && currentValue !== '0') { // !==0 avoids creating a string "null hundred"
                        digitsGroup[j][k] += ' hundred ';
                    } else if (k === 1 && currentValue === '1') { //Changes the value in the tens place and erases the value in the ones place
                        digitsGroup[j][k] = tenthsDifferent[digitsGroup[j][2]];
                        digitsGroup[j][2] = 0; //Sets to null. Because it sets the next k to be evaluated, setting this to null doesn't work.
                    }
                }
            }

            //Adds '-' for gramar, cleans all null values, joins the group's elements into a string
            for (var l = 0; l < digitsGroupLen; l++) {
                if (digitsGroup[l][1] && digitsGroup[l][2]) {
                    digitsGroup[l][1] += '-';
                }
                digitsGroup[l].filter(function (e) {return e !== null});
                digitsGroup[l] = digitsGroup[l].join('');
            }

            //Adds thousand, millions, billion and etc to the respective string.
            var posfix = [null, 'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion', 'sextillion'];
            if (digitsGroupLen > 1) {
                var posfixRange = posfix.splice(0, digitsGroupLen).reverse();
                for (var m = 0; m < digitsGroupLen - 1; m++) { //'-1' prevents adding a null posfix to the last group
                    if (digitsGroup[m]) {
                        digitsGroup[m] += ' ' + posfixRange[m];
                    }
                }
            }
            var word = digitsGroup.join(' ');
            if(this.get("obj").locale == 'en-US'){
                word = word + " USD only.";
            }else if(this.get("obj").locale == 'km-KH'){
                word = word + " Riel only.";
            }
            //Joins all the string into one and returns it
            this.set("numberToString", word.toUpperCase());
        },
        amountTotal         : "",
        offsetnumber        : "",
        offsetamount        : 0,
        balanceDS           : dataStore(apiUrl + "transactions"),
        pageLoad            : function(id, is_recurring){
            var self = this;
            this.dataSource.query({
                filter: { field:"id", value: id },
                page: 1,
                take: 1
            }).then(function(e){
                var view = self.dataSource.view();
                view[0].set("sub_total", kendo.toString(view[0].sub_total, "c", view[0].locale));
                view[0].set("tax", kendo.toString(view[0].tax, "c", view[0].locale));
                view[0].set("discount", kendo.toString(view[0].discount, "c", view[0].locale));
                self.set("amountTotal", view[0].amount);
                view[0].set("cash_receipt", kendo.toString(view[0].amount - view[0].deposit, "c", view[0].locale));
                //Get Customer ballance
                self.balanceDS.query({
                    filter: [
                        {field: "id <>", value: view[0].id},
                        {field: "contact_id", value: view[0].contact_id},
                        {field: "status <>", value: 1}
                    ]
                }).then(function(e){
                    var b = self.balanceDS.view();
                    if(b.length > 0){
                        self.calContactBalance(b);
                    }
                });
                view[0].set("deposit", kendo.toString(view[0].deposit, "c", view[0].locale));
                view[0].set("issued_date", kendo.toString(new Date(view[0].issued_date), 'D'));
                view[0].set("due_date", kendo.toString(new Date(view[0].due_date), "dd MMM yyyy"));
                view[0].set("amount", kendo.toString(view[0].amount, "c", view[0].locale));
                if(view[0].description == "null"){
                    view[0].set("description", "No Description");
                }
                if(view[0].payment_method_id){
                    self.paymentMethodDS.filter({field: "id", value: view[0].payment_method_id});
                }else{
                    self.paymentMethodDS.add({
                        name: 'Cash'
                    });
                }
                if(view[0].offset_invoice.length > 0){
                  var offamount = 0;
                  $.each(view[0].offset_invoice, function(i,v){
                    self.set("offsetnumber", self.get("offsetnumber") + " " + v.number);
                    offamount += kendo.parseFloat(v.amount);
                  });
                  self.set("offsetamount", kendo.toString(offamount, "c", view[0].locale));
                }
                self.set("obj", view[0]);
                var amountDue = kendo.parseFloat(view[0].amount) - kendo.parseFloat(view[0].deposit);
                self.get("obj").set("amount_due", kendo.toString(amountDue, "c", view[0].locale))
                self.loadObjTemplate(view[0].transaction_template_id, id);
                self.contactDS.filter({field: "id", value: view[0].contact_id});
                //give id
                var d = view[0];
                self.get("obj").set("qrcodevalue", "inv_num:"+d.number+"\ninv_amount:"+d.amount+"\ninv_date:"+d.issued_date+"\ncus_id:"+d.contact.id+"\ncus_name:"+d.contact.name+"\nstatus:"+d.status);
                if(self.get("obj").type == 'Direct_Expense'){
                    self.get("obj").set("title", "PAYMENT VOUCHER");
                }else if(self.get("obj").type == 'Reimbursement'){
                    self.get("obj").set("title", "REIMBURSEMENT VOUCHER");
                }else if(self.get("obj").type == 'Advance_Settlement'){
                    self.get("obj").set("title", "ADVANCE SETTLEMENT VOUCHER");
                }
                //get job
                if(view[0].job_id){
                    self.jobDS.filter({field: "id", value: view[0].job_id});
                }
            });
        },
        old_remain          : 0,
        amount_owed         : 0,
        calContactBalance   : function(data){
            var oldremain = 0;
            var obj = this.get("obj");
            $.each(data, function(i,v){
                var ba = v.amount - v.amount_paid;
                oldremain += ba;
            });
            this.set("old_remain", kendo.toString(oldremain, "c", obj.locale));
            this.set("amount_owed", kendo.toString(this.get("amountTotal") + oldremain, "c", obj.locale));
            $("#loading-inv").remove();
        },
        printGrid           : function() {
            var obj = this.get('obj'), colorM, ts;
            if(obj.color == null){
                colorM = "#10253f";
            }else{
                colorM = obj.color;
            }
            if(obj.color == '#000000' || obj.color =='#1f497d' || obj.color == null){
                ts = 'color: #fff!important;';
            } else { ts = 'color: #333;'; }
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=800, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Preahvihear" rel="stylesheet">' +
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<link href="https://fonts.googleapis.com/css?family=Preahvihear" rel="stylesheet" />' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:0mm;margin-top: 1mm; }'+
                        '.inv1 .main-color {' +
                            'background-color: '+colorM+'!important; ' + ts +
                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.inv1 .main-color th{' +
                            'background-color: '+colorM+'!important; ' + ts +
                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.inv1 thead tr {'+
                            'background-color: rgb(242, 242, 242)!important;'+
                            '-webkit-print-color-adjust:exact; ' +
                        '}'+
                        '.pcg .mid-title div {' + ts + '}' +
                        '.pcg .mid-header {' +
                            'background-color: #dce6f2!important; ' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}'+
                        '.inv1 span.total-amount { ' +
                            'color:#fff!important;' +
                        '}</style>' +
                    '</head>' +
                    '<body>';
            var htmlEnd =
                    '</body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                //win.close();
            },2000);
        },
        activeInvoiceTmp        : function(e){
            var Active;
            switch(e) {
                case 1: Active = banhji.view.invoiceForm1; break;
                case 2: Active = banhji.view.invoiceForm2; break;
                //case 3: Active = banhji.view.invoiceForm3; break;
                //case 4: Active = banhji.view.invoiceForm4; break;
                //case 5: Active = banhji.view.invoiceForm5; break;
                case 6: Active = banhji.view.invoiceForm6; break;
                case 7: Active = banhji.view.invoiceForm7; break;
                case 8: Active = banhji.view.invoiceForm8; break;
                case 9: Active = banhji.view.invoiceForm9; break;
                case 10: Active = banhji.view.invoiceForm10; break;
                case 11: Active = banhji.view.invoiceForm11; break;
                case 12: Active = banhji.view.invoiceForm12; break;
                case 13: Active = banhji.view.invoiceForm13; break;
                case 14: Active = banhji.view.invoiceForm31; break;
                case 15: Active = banhji.view.invoiceForm15; break;
                case 16: Active = banhji.view.invoiceForm25; break;
                case 17: Active = banhji.view.invoiceForm17; break;
                case 18: Active = banhji.view.invoiceForm18; break;
                case 19: Active = banhji.view.invoiceForm19; break;
                case 20: Active = banhji.view.invoiceForm20; break;
                case 21: Active = banhji.view.invoiceForm21; break;
                case 22: Active = banhji.view.invoiceForm22; break;
                case 23: Active = banhji.view.invoiceForm28; break;
                case 24: Active = banhji.view.invoiceForm29; break;
                case 25: Active = banhji.view.invoiceForm35; break;
                case 26: Active = banhji.view.invoiceForm39; break;
                case 27: Active = banhji.view.invoiceForm19; break;
                case 28: Active = banhji.view.invoiceForm25; break;
                case 29: Active = banhji.view.invoiceForm26; break;
                case 30: Active = banhji.view.invoiceForm25; break;
                case 31: Active = banhji.view.invoiceForm25; break;
                case 32: Active = banhji.view.invoiceForm27; break;
                case 33: Active = banhji.view.invoiceForm30; break;
                case 34: Active = banhji.view.invoiceForm32; break;
                case 35: Active = banhji.view.invoiceForm33; break;
                case 36: Active = banhji.view.invoiceForm34; break;
                case 37: Active = banhji.view.invoiceForm36; break;
                case 38: Active = banhji.view.invoiceForm37; break;
                case 39: Active = banhji.view.invoiceForm38; break;
                case 40: Active = banhji.view.invoiceForm40; break;
                case 41: Active = banhji.view.invoiceForm41; break;
                case 42: Active = banhji.view.invoiceForm42; break;
                case 43: Active = banhji.view.formCaritasExpense; break;
                case 44: Active = banhji.view.formCaritasJournal; break;
                case 50: Active = banhji.view.invoicePCGPADEE; break;
                case 51: Active = banhji.view.invoiceHDCom; break;
                case 52: Active = banhji.view.invoiceMAXConcrete; break;
                case 53: Active = banhji.view.invoiceVATMAXConcrete; break;
                case 54: Active = banhji.view.invoiceHeritageWalk; break;
                case 55: Active = banhji.view.invoiceVATHeritageWalk; break;
                case 56: Active = banhji.view.invoiceREACHS; break;
                case 57: Active = banhji.view.invoiceVATREACHS; break;
                case 58: Active = banhji.view.invoicePCG; break;
                case 59: Active = banhji.view.invoiceVATPCG; break;
                case 60: Active = banhji.view.normalInvoicePCG; break;
                case 61: Active = banhji.view.normalInvoiceREACHS; break;
                case 62: Active = banhji.view.recieptNoteRicemill; break;
                case 63: Active = banhji.view.depositHeritageWalk; break;
                case 64: Active = banhji.view.receiptHeritageWalk; break;
                case 65: Active = banhji.view.advanceVoucherPCG; break;
                case 68: Active = banhji.view.normalInvoiceKSLM; break;
                case 69: Active = banhji.view.commercialInvoiceKSLM; break;
                case 70: Active = banhji.view.vatInvoiceKSLM; break;
                case 71: Active = banhji.view.defaultCashAdvance; break;
                case 72: Active = banhji.view.defaultPurchase; break;
                case 73: Active = banhji.view.defaultSaleReturn; break;
                case 74: Active = banhji.view.defaultCashRefund; break;
                case 75: Active = banhji.view.invoiceHaveBalance; break;
                case 76: Active = banhji.view.normalInvoiceHeritageWalk; break;
            }
            banhji.view.invoiceForm.showIn('#invFormContent', Active);
        },
        segmentItemDS       : dataStore(apiUrl + "segments/item"),
        jobDS               : dataStore(apiUrl + "jobs"),
        haveAccount         : false,
        amountOfAccLine     : 0,
        loadObjTemplate     : function(id, transaction_id){
            var self = this, obj = this.get('obj');
            this.txnTemplateDS.query({
                filter: { field:"id", value: id },
                page: 1,
                take: 100
            }).then(function(e){
                var view = self.txnTemplateDS.view(), Index = parseInt(view[0].transaction_form_id), Active;
                obj.set("color", view[0].color);
                if(obj.type == "Advance_Settlement"){
                    obj.set("title", "Advance Settlement");
                }else{
                    obj.set("title", view[0].title);
                }
                self.activeInvoiceTmp(Index);
                self.lineDS.query({
                    filter: { field:"transaction_id", value: transaction_id }
                })
                .then(function(e){
                    var CountItemsRow = parseInt(self.lineDS.data().length);
                    var TotalRow = 10 - CountItemsRow;
                    if(banhji.institute.id != 1021){
                        if(TotalRow > 0){
                            if(view[0].transaction_form_id != '73' && view[0].transaction_form_id != '74'){
                                for (var i = 1; i < TotalRow; i++) {
                                    self.lineDS.add({
                                        id          : i,
                                        transaction_id      : i,
                                        tax_item_id         : 0,
                                        item_id             : 0,
                                        assembly_id         : 0,
                                        measurement_id      : 0,
                                        description         : "",
                                        quantity            : "",
                                        conversion_ratio    : 1,
                                        cost                : 0,
                                        price               : 0,
                                        amount              : "",
                                        discount            : 0,
                                        discount_percentage : 0,
                                        tax                 : 0,
                                        rate                : 1,
                                        locale              : "",
                                        movement            : -1,
                                        reference_no        : "",
                                        item                : { id:"", name:"" },
                                        measurement         : { measurement_id:"", measurement:"" },
                                        tax_item            : { id:"", name:"" },
                                        variant             : [],
                                        item_prices             : { measurement_id:"", measurement:"" },
                                    });
                                }
                            }
                        }
                    }
                    
                });
                self.accountLineDS.query({
                    filter: { field:"transaction_id", value: transaction_id }
                }).then(function(e){
                    if(banhji.invoiceForm.accountLineDS.data().length > 0){
                        $.each(banhji.source.accountList, function(i,v){
                            if(v.id == banhji.invoiceForm.accountLineDS.data()[0].account_id){
                                self.set("proaccountLineDS", v);
                                return false;
                            }
                        });
                        self.set("haveAccount", true);
                        self.set("amountOfAccLine", 0);
                        var amountOfAcc = 0;
                        $.each(self.accountLineDS.data(), function(i,v){
                            amountOfAcc += v.amount;
                        });
                        self.set("amountOfAccLine", kendo.toString(amountOfAcc, self.accountLineDS.data()[0].locale == 'km-KH'?'c':'c2', self.accountLineDS.data()[0].locale));
                    }else{
                        self.set("haveAccount", false);
                    }
                });
                if(self.get("obj").account_id){
                    $.each(banhji.source.accountList, function(i,v){
                        if(v.id == self.get("obj").account_id){
                            self.set("accountDS", v);
                            return false;
                        }
                    });
                }
                var SegMentID = '';
                self.journalLineDS.query({
                    filter:{field: "transaction_id", value: transaction_id}
                }).then(function(e){
                    if(self.journalLineDS.data().length > 0){
                        var DR = 0, CR = 0;
                        var that = self;
                        $.each(self.journalLineDS.data(),function(i,v){
                            //Calculate DR/CR
                            DR += v.dr;
                            CR += v.cr;
                        });
                        var journalLocale = banhji.invoiceForm.journalLineDS.data()[0].locale;
                        banhji.invoiceForm.set("totalCR", kendo.toString(CR, journalLocale == 'km-KH'?'c':'c2', journalLocale));
                        banhji.invoiceForm.set("totalDR", kendo.toString(DR, journalLocale == 'km-KH'?'c':'c2', journalLocale));
                        var D = kendo.parseFloat(banhji.invoiceForm.get("obj").deposit);
                        var NumToStr = banhji.invoiceForm.numToWords(DR - D);
                        // banhji.invoiceForm.set("numberToString", NumToStr.toUpperCase());
                        banhji.invoiceForm.set("netAmountDUE", kendo.toString(DR - D, journalLocale == 'km-KH'?'c':'c2', journalLocale));
                        var CountLineRow = parseInt(self.journalLineDS.data().length);
                        var TotalRow = 12 - CountLineRow;
                        if(TotalRow > 0){
                            self.setQR();
                        }
                    }
                });
                self.currencyDS.filter({field: "locale", value: obj.locale});
            });
        },
        setQR           :function(){
            var obj = this.get("obj");
            // var qrCode = $("#invQR").data("kendoQRCode");
            //  qrCode.destroy();
            $("#invQR").kendoQRCode({
                value: "inv_num:"+obj.number+"\ninv_amount:"+obj.amount+"\ninv_date:"+obj.issued_date+"\ncus_id:"+obj.contact.id+"\ncus_name:"+obj.contact.name+"\nstatus:"+obj.status,
                size: 120,
                color: "#10253f",
                encoding: "UTF_8",
                background: "transparent"
            });
        },
        refreshJournalDatasource : function(){
            var ListVW = $("#formListView").data("kendoListView");
            ListVW.refresh();
        },
        cancel              : function(){
            this.dataSource.cancelChanges();
            window.history.back();
        },
        totalDr: function() {
            var sum = 0;

            $.each(this.journalLineDS.data(), function(index, value) {
                sum += value.dr;
            });

            return sum;
        },
        totalCr: function() {
            var sum = 0;

            $.each(this.journalLineDS.data(), function(index, value) {
                sum += value.cr;
            });

            return sum;
        },
        currencyDS          : banhji.source.currencyDS,
    });
    banhji.customerGroup =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "contacts/group"),
        contactDS           : dataStore(apiUrl + "contacts"),
        contactTypeDS       : dataStore(apiUrl + "contacts/type"),
        textSearch          : "",
        contact_type_id     : 0,
        editMode            : false,
        obj                 : [],
        pageLoad            : function(){
        },
        search              : function(){
            var textSearch = this.get("textSearch"),
                contact_type_id = this.get("contact_type_id"),
                para = [];

            if(textSearch){
                var textParts = textSearch.replace(/([a-z]+)/i, "$1 ").split(/[^0-9a-z]+/ig);

                para.push({ field:"abbr", value:textParts[0] });
                if(textParts[1]){
                    para.push({ field:"number", value:textParts[1] });
                }
                para.push({ field:"name", operator:"or_like", value:textSearch });
            }

            if(contact_type_id){
                para.push({ field: "contact_type_id", value: contact_type_id });
            }else{
                para.push({ field: "parent_id", operator:"where_related_contact_type", value: 1 });
            }

            this.contactDS.filter(para);

            this.set("textSearch", "");
            this.set("contact_type_id", 0);
        },
        setObj              : function(){
            this.set("editMode", false);
            this.set("obj", { name:"", description:"", contacts:[] });
        },
        edit                : function(e){
            var data = e.data;

            this.set("editMode", true);
            this.set("obj", data);
        },
        save                : function(){
            var self = this, obj = this.get("obj");

            if(obj.name){
                if(this.get("editMode")==false){
                    this.dataSource.insert(0, {
                        type        : "Customer",
                        name        : obj.name,
                        description : "",

                        contacts    : obj.contacts
                    });
                }

                this.dataSource.sync();
                this.dataSource.bind("requestEnd", function(){
                    self.setObj();
                });
            }else{
                $("#ntf1").data("kendoNotification").error("Group Name is required!");
            }
        },
        cancel              : function(){
            this.setObj();
            this.dataSource.cancelChanges();
        }
    });
    banhji.contactAssignee =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "contact_assignees/summary"),
        contactAssigneeDS   : dataStore(apiUrl + "contact_assignees"),
        contactDS           : dataStore(apiUrl + "contacts"),
        contactTypeDS       : dataStore(apiUrl + "contacts/type"),
        employeeDS          : dataStore(apiUrl + "contacts"),
        textSearch          : "",
        contact_type_id     : 0,
        editMode            : false,
        obj                 : [],
        pageLoad            : function(){
        },
        search              : function(){
            var textSearch = this.get("textSearch"),
                contact_type_id = this.get("contact_type_id"),
                para = [];

            if(textSearch){
                var textParts = textSearch.replace(/([a-z]+)/i, "$1 ").split(/[^0-9a-z]+/ig);

                para.push({ field:"abbr", value:textParts[0] });
                if(textParts[1]){
                    para.push({ field:"number", value:textParts[1] });
                }
                para.push({ field:"name", operator:"or_like", value:textSearch });
            }

            if(contact_type_id){
                para.push({ field: "contact_type_id", value: contact_type_id });
            }else{
                para.push({ field: "parent_id", operator:"where_related_contact_type", value: 1 });
            }

            this.contactDS.filter(para);

            this.set("textSearch", "");
            this.set("contact_type_id", 0);
        },
        setObj              : function(){
            this.set("editMode", false);
            this.set("obj", { assignee:null, contacts:[] });
        },
        edit                : function(e){
            var data = e.data;

            this.set("editMode", true);
            this.set("obj", data);

            this.contactAssigneeDS.query({
                filter:{ field:"assignee_id", value: data.assignee_id }
            });
        },
        save                : function(){
            var self = this, obj = this.get("obj");

            if(obj.assignee && obj.contacts.length>0){
                //Remove previous List
                var raw = this.contactAssigneeDS.data();
                var item, i;
                for(i=raw.length-1; i>=0; i--){
                    item = raw[i];

                    this.contactAssigneeDS.remove(item);
                }

                var ids = [];
                $.each(obj.contacts, function(index, value){
                    ids.push(kendo.parseInt(value.id));
                });
                ids = jQuery.unique( ids );

                $.each(ids, function(index, value){
                    self.contactAssigneeDS.add({
                        assignee_id : obj.assignee.id,
                        contact_id  : value
                    });
                });

                this.contactAssigneeDS.sync();
                this.contactAssigneeDS.bind("requestEnd", function(e){
                    if(e.type!=="read"){
                        self.cancel();
                        self.dataSource.fetch();
                    }
                });
            }else{
                $("#ntf1").data("kendoNotification").error("Please select employee and customers");
            }
        },
        cancel              : function(){
            this.contactAssigneeDS.data([]);
            this.contactAssigneeDS.cancelChanges();
            this.setObj();
        }
    });





    /*************************************************
    *   MEMBERSHIP MVVM                             *
    *************************************************/
    banhji.membershipDashboard = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "customer_modules/dashboard"),
        graphDS             : dataStore(apiUrl + "customer_modules/monthly_sale"),
        obj                 : {},
        pageLoad            : function(){
            var self = this;

            this.graphDS.read();

            this.dataSource.query({
                filter: []
            }).then(function(){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
            });
        }
    });
    banhji.membershipCenter = kendo.observable({
        lang                : langVM,
        transactionDS       : dataStore(apiUrl + 'transactions'),
        noteDS              : dataStore(apiUrl + 'notes'),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        txnDS               : dataStore(apiUrl + "transactions"),
        membershipDS        : dataStore(apiUrl + "memberships"),
        cpdRecordDS         : dataStore(apiUrl + "cpd_records"),
        currencyDS          : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        contactTypeDS       : new kendo.data.DataSource({
            data: banhji.source.contactTypeList,
            filter: { field:"parent_id", value: 1 }//Customer
        }),
        contactDS           : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "contacts",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:{ field:"parent_id", operator:"where_related_contact_type", value:1 },
            sort:{ field:"number", dir:"asc" },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        sortList            : banhji.source.sortList,
        sorter              : "all",
        sdate               : "",
        edate               : "",
        obj                 : null,
        objMembership       : [],
        note                : "",
        searchText          : "",
        contact_type_id     : null,
        currency_id         : 0,
        balance             : 0,
        deposit             : 0,
        outInvoice          : 0,
        overInvoice         : 0,
        currencyCode        : "",
        isUpgradeMembership : false,
        isNewCPDRecord      : false,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.loadObj(id);
            }

            //Refresh
            if(this.contactDS.total()>0){
                this.contactDS.fetch();
                this.membershipDS.fetch();
                this.cpdRecordDS.fetch();
                this.searchTransaction();
                this.loadSummary();
            }
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");
                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));
                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        setCurrencyCode     : function(){
            var code = "", obj = this.get("obj");

            $.each(banhji.source.currencyDS.data(), function(index, value){
                if(value.locale == obj.locale){
                    code = value.code;

                    return false;
                }
            });

            this.set("currencyCode", code);
        },
        //Obj
        loadObj             : function(id){
            var self = this;

            this.contactDS.query({
                filter: { field:"id", value:id},
                page:1,
                pageSize:100
            }).then(function(){
                var view = self.contactDS.view();

                if(view.length>0){
                    self.set("obj", view[0]);
                    self.loadData();
                }
            });
        },
        loadData            : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.searchTransaction();
                this.loadSummary();
                this.setCurrencyCode();

                this.membershipDS.filter({ field:"contact_id", value: obj.id });
                this.cpdRecordDS.filter({ field:"contact_id", value: obj.id });

                this.attachmentDS.query({
                    filter:{ field:"contact_id", value: obj.id },
                    page: 1,
                    pageSize:10
                });
                this.noteDS.query({
                    filter: { field:"contact_id", value: obj.id },
                    sort: { field:"noted_date", dir:"desc" },
                    page: 1,
                    pageSize: 10
                });
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            if(obj!==null){
                // Check the extension of each file and abort the upload if it is not .jpg
                $.each(files, function(index, value){
                    if (value.extension.toLowerCase() === ".jpg"
                        || value.extension.toLowerCase() === ".jpeg"
                        || value.extension.toLowerCase() === ".tiff"
                        || value.extension.toLowerCase() === ".png"
                        || value.extension.toLowerCase() === ".gif"
                        || value.extension.toLowerCase() === ".pdf"){

                        var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                        self.attachmentDS.add({
                            user_id         : self.get("user_id"),
                            contact_id      : obj.id,
                            type            : "Contact",
                            name            : value.name,
                            description     : "",
                            key             : key,
                            url             : banhji.s3 + key,
                            size            : value.size,
                            created_at      : new Date(),

                            file            : value.rawFile
                        });
                    }else{
                        alert("This type of file is not allowed to attach.");
                    }
                });
            }
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
                this.attachmentDS.sync();
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Summary
        loadContact         : function(id){
            var self = this;

            this.contactDS.query({
                filter:[
                    { field:"id", value:id }
                ],
                page: 1,
                pageSize: 50
            }).then(function(e) {
                var view = self.contactDS.data();

                if(view.length>0){
                    self.set("obj", view[0]);
                    self.loadData();
                }
            });
        },
        loadSummary         : function(){
            var self = this, obj = this.get("obj");

            if(obj!==null){
                this.txnDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", operator:"where_in", value: ["Customer_Deposit", "Commercial_Invoice", "Vat_Invoice", "Invoice"] },
                        { field:"status", operator:"where_in", value: [0,2] }
                    ],
                    sort: { field: "issued_date", dir: "desc" },
                    page: 1,
                    pageSize: 1000
                }).then(function(){
                    var view = self.txnDS.view(),
                    deposit = 0, open = 0, over = 0, balance = 0, today = new Date();

                    $.each(view, function(index, value){
                        if(value.type=="Customer_Deposit"){
                            deposit += kendo.parseFloat(value.amount);
                        }else{
                            balance += kendo.parseFloat(value.amount) - (kendo.parseFloat(value.deposit) + value.amount_paid);
                            open++;

                            if(new Date(value.due_date)<today){
                                over++;
                            }
                        }
                    });

                    self.set("deposit", kendo.toString(deposit, obj.locale=="km-KH"?"c0":"c", obj.locale));
                    self.set("outInvoice", kendo.toString(open, "n0"));
                    self.set("overInvoice", kendo.toString(over, "n0"));
                    self.set("balance", kendo.toString(balance, obj.locale=="km-KH"?"c0":"c", obj.locale));
                });
            }
        },
        loadBalance         : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.transactionDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", operator:"where_in", value:["Commercial_Invoice", "Vat_Invoice", "Invoice"] },
                        { field:"status", operator:"where_in", value: [0,2] }
                    ],
                    sort: [
                        { field: "issued_date", dir: "desc" },
                        { field: "id", dir: "desc" }
                    ],
                    page: 1,
                    pageSize: 10
                });
            }
        },
        loadDeposit         : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.transactionDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", value:"Customer_Deposit" }
                    ],
                    sort: [
                        { field: "issued_date", dir: "desc" },
                        { field: "id", dir: "desc" }
                    ],
                    page: 1,
                    pageSize: 10
                });
            }
        },
        loadOverInvoice     : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.transactionDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", operator:"where_in", value: ["Commercial_Invoice", "Vat_Invoice", "Invoice"] },
                        { field:"status", operator:"where_in", value: [0,2] },
                        { field:"due_date <", value: kendo.toString(new Date(), "yyyy-MM-dd") }
                    ],
                    sort: [
                        { field: "issued_date", dir: "desc" },
                        { field: "id", dir: "desc" }
                    ],
                    page: 1,
                    pageSize: 10
                });
            }
        },
        selectedRow         : function(e){
            var data = e.data;

            this.set("obj", data);
            this.loadData();
        },
        //Search
        enterSearch         : function(e){
            e.preventDefault();

            this.search();
        },
        search              : function(){
            var self = this,
            para = [],
            searchText = this.get("searchText"),
            contact_type_id = this.get("contact_type_id");

            if(searchText){
                //Phone
                if(this.phonenumber(searchText)){
                    para.push({ field: "phone", operator: "contains", value: searchText });
                }else{
                    var textParts = searchText.replace(/([a-z]+)/i, "$1 ").split(/[^0-9a-z]+/ig);
                    if(textParts.length===2){
                        if(textParts[0]!=="" && textParts[1]!==""){
                            para.push({ field: "abbr", value: textParts[0] });
                            para.push({ field: "number", value: textParts[1] });
                        }else{
                            para.push({ field: "name", operator: "contains", value: searchText });
                        }
                    }else{
                        para.push({ field: "name", operator: "contains", value: searchText });
                    }
                }
            }

            if(contact_type_id){
                para.push({ field: "contact_type_id", value: contact_type_id });
            }else{
                para.push({ field: "parent_id", operator:"where_related_contact_type", value: 1 });
            }

            this.contactDS.filter(para);

            //Clear search filters
            self.set("searchText", "");
            self.set("contact_type_id", 0);
        },
        phonenumber         : function (inputtxt){
            var phoneno = /^[+]*[(]{0,1}[0-9]{1,3}[)]{0,1}[-\s\./0-9]*$/g;
            if(inputtxt.match(phoneno)){
                return true;
            }else{
                return false;
            }
        },
        searchTransaction   : function(){
            var self = this,
                start = this.get("sdate"),
                end = this.get("edate"),
                para = [], obj = this.get("obj");

            if(obj!==null){
                para.push({ field:"contact_id", value: obj.id });

                //Dates
                if(start && end){
                    start = new Date(start);
                    end = new Date(end);
                    end.setDate(end.getDate()+1);

                    para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                    para.push({ field:"issued_date <=", value: kendo.toString(end, "yyyy-MM-dd") });
                }else if(start){
                    start = new Date(start);
                    para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
                }else if(end){
                    end = new Date(end);
                    end.setDate(end.getDate()+1);
                    para.push({ field:"issued_date <=", value: kendo.toString(end, "yyyy-MM-dd") });
                }else{}

                this.transactionDS.query({
                    filter: para,
                    sort: { field: "issued_date", dir: "desc" },
                    page: 1,
                    pageSize: 10
                });
            }
        },
        //Links
        goEdit              : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/customer/'+obj.id);
            }
        },
        goReference         : function(e){
            var self = this, data = e.data;

            this.txnDS.query({
                filter:{ field:"id", value:data.reference_id}
            }).then(function(){
                var view = self.txnDS.view();

                banhji.router.navigate('/' + view[0].type.toLowerCase() +'/'+ data.reference_id);
            });
        },
        goQuote             : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/quote');
                banhji.quote.setContact(obj);
            }
        },
        goDeposit           : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/customer_deposit');
                banhji.customerDeposit.setContact(obj);
            }
        },
        goSaleOrder         : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/sale_order');
                banhji.saleOrder.setContact(obj);
            }
        },
        goCashSale          : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/cash_sale');
                banhji.cashSale.setContact(obj);
            }
        },
        goInvoice           : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/invoice');
                banhji.invoice.setContact(obj);
            }
        },
        goGDN               : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/gdn');
                banhji.gdn.setContact(obj);
            }
        },
        goSaleReturn        : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/sale_return');
                banhji.saleReturn.setContact(obj);
            }
        },
        goStatement         : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/statement');
                banhji.statement.setContact(obj);
            }
        },
        goCashRefound       : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/cash_refund');
                banhji.cashRefund.setContact(obj);
            }
        },
        goCashReceipt       : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/cash_receipt');
                banhji.cashReceipt.loadContact(obj.id);
            }
        },
        payInvoice          : function(e){
            var data = e.data;

            if(obj!==null){
                banhji.router.navigate('/cash_receipt');
                banhji.cashReceipt.loadInvoice(data.id);
            }
        },
        goNewMembership     : function(){
            var obj = this.get("obj");
            this.set("isUpgradeMembership", false);

            if(obj!==null){
                banhji.router.navigate('/membership');
                // banhji.membership.setContact(obj);
            }
        },
        goMembership        : function(e){
            var obj = this.get("obj"),
                data = e.data;

            this.set("isUpgradeMembership", false);

            if(obj!==null){
                banhji.router.navigate('/membership/'+data.id);
            }
        },
        upgradeMembership   : function(e){
            var obj = this.get("obj"),
                data = e.data;

            if(obj!==null){
                banhji.router.navigate('/membership');
                this.set("isUpgradeMembership", true);
                this.set("objMembership", data);
            }
        },
        goCPDRecord         : function(e){
            var obj = this.get("obj"),
                data = e.data;

            if(obj!==null){
                banhji.router.navigate('/cpd_record/'+data.id);
            }
        },
        addCPDRecord        : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/cpd_record');
                this.set("isNewCPDRecord", true);
            }
        },
        //Note
        saveNoteEnter       : function(e){
            e.preventDefault();
            this.saveNote();
        },
        saveNote            : function(){
            var obj = this.get("obj");

            if(obj!==null && this.get("note")!==""){
                this.noteDS.insert(0, {
                    contact_id  : obj.id,
                    note        : this.get("note"),
                    noted_date  : new Date(),
                    created_by  : this.get("user_id"),

                    creator     : ""
                });

                this.noteDS.sync();
                this.set("note", "");
            }else{
                alert("Please select a customer and Memo is required");
            }
        }
    });
    banhji.membership = kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "memberships"),
        transactionDS           : dataStore(apiUrl + "transactions"),
        lineDS                  : dataStore(apiUrl + "item_lines"),
        recurringDS             : dataStore(apiUrl + "transactions"),
        recurringLineDS         : dataStore(apiUrl + "item_lines"),
        membershipTypeDS        : dataStore(apiUrl + "membership_types"),
        fieldValueDS            : dataStore(apiUrl + "field_values"),
        fieldValueRecurringDS   : dataStore(apiUrl + "field_values"),
        itemDS                  : dataStore(apiUrl + "items"),
        itemPriceDS             : dataStore(apiUrl + "item_prices"),
        assemblyDS              : dataStore(apiUrl + "item_assemblies"),
        assemblyLineDS          : dataStore(apiUrl + "item_lines"),
        attachmentDS            : dataStore(apiUrl + "attachments"),
        paymentTermDS           : banhji.source.paymentTermDS,
        paymentMethodDS         : banhji.source.paymentMethodDS,
        statusList              : banhji.source.statusList,
        applicationStatusList   : banhji.source.applicationStatusList,
        confirmMessage          : banhji.source.confirmMessage,
        frequencyList           : banhji.source.frequencyList,
        monthOptionList         : banhji.source.monthOptionList,
        monthList               : banhji.source.monthList,
        weekDayList             : banhji.source.weekDayList,
        dayList                 : banhji.source.dayList,
        showMonthOption         : false,
        showMonth               : false,
        showWeek                : false,
        showDay                 : false,
        isEdit                  : false,
        obj                     : [],
        objRecurring            : [],
        saveClose               : false,
        showConfirm             : false,
        notDuplicateNumber      : true,
        title                   : "Add Membership",
        phFullname              : "Customer Name ...",
        pageLoad                : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }

            if(banhji.membershipCenter.get("isUpgradeMembership")){
                this.set("title", "Upgrade Membership");
            }else{
                this.set("title", "Add Membership");
            }
        },
        //Upload
        onSelect                : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        reference_id    : obj.id,
                        type            : "memberships",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        onRemove                : function(e){
            // Array with information about the uploaded files
            var self = this, files = e.files;
            $.each(this.attachmentDS.data(), function(index, value){
                if(value.name==files[0].name){
                    self.attachmentDS.remove(value);

                    return false;
                }
            });
        },
        removeFile              : function(e){
            var data = e.data;

            if (confirm("Are you sure, you want to delete it?")) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile              : function(){
            var self = this;

            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                if(e.type=="destroy"){
                    if(saved==false){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var paramz = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(paramz, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });

            //Clear upload files
            $(".k-upload-files").remove();
        },
        //Custom Fields
        addCustomField          : function(){
            var obj = this.get("obj");

            this.fieldValueDS.add({
                reference_id    : obj.id,
                custom_field_id : 0,
                field_value     : "",
                type            : "memberships",
                custom_fields   : { id: 0, name:"" }
            });
        },
        //Contact
        setContact              : function(contacts){
            var obj = this.get("obj");

            obj.set("contacts", banhji.customerCenter.get("obj"));
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"abbr", value: obj.abbr });
                para.push({ field:"number", value: obj.number });
                para.push({ field:"contact_type_id", value: obj.contact_type_id });

                this.existingDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.existingDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber          : function(){
            var self = this, obj = this.get("obj");

            this.numberDS.query({
                filter:[
                    { field:"contact_type_id", value:obj.contact_type_id }
                ],
                sort: { field:"number", dir:"desc" },
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.numberDS.view();

                var lastNo = 0;
                if(view.length>0){
                    lastNo = kendo.parseInt(view[0].number);
                }
                lastNo++;
                obj.set("number",kendo.toString(lastNo, "00000"));
            });
        },
        checkExistingTxn        : function(){
            var self = this, obj = this.get("obj");

            this.deleteDS.query({
                filter: { field:"contact_id", value: obj.id },
                page: 1,
                pageSize: 1
            }).then(function(e){
                var view = self.deleteDS.view();

                if(view.length>0){
                    self.set("isProtected", true);
                }else{
                    self.set("isProtected", false);
                }
            });
        },
        //Item
        addItem                 : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("objRecurring"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Item base price
            var item_price = {
                measurement_id  : item.measurement_id,
                price           : kendo.parseFloat(item.price),
                conversion_ratio: 1,
                measurement     : item.measurement.name
            };
            row.set("item_price", item_price);
        },
        addItemCatalog          : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : catalogItem.cost * rate,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : -1,

                        discount_percentage : 0,
                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" },
                        tax_item            : { id:"", name:"" }
                    });
                }
            });
        },
        addItemAssembly         : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            var notExist = true;
            $.each(this.assemblyLineDS.data(), function(index, value){
                if(value.assembly_id==item.id){
                    notExist = false;

                    return false;
                }
            });

            if(notExist){
                row.set("item_id", item.id);
                row.set("description", item.sale_description);
                row.set("rate", rate);
                row.set("locale", item.locale);

                var measurement = {
                    measurement_id  : item.measurement_id,
                    price           : kendo.parseFloat(item.price * rate),
                    conversion_ratio: 1,
                    measurement     : item.measurement.name
                };
                row.set("measurement", measurement);

                this.assemblyDS.query({
                    filter:{ field:"assembly_id", value:row.item_id }
                }).then(function(){
                    var view = self.assemblyDS.view();

                    $.each(view, function(index, value){
                        var itemAssembly = value.item,
                            itemAssemblyRate = obj.rate / banhji.source.getRate(itemAssembly.locale, new Date(obj.issued_date));

                        self.assemblyLineDS.add({
                            transaction_id      : obj.id,
                            item_id             : value.item_id,
                            assembly_id         : value.assembly_id,
                            measurement_id      : value.measurement_id,
                            description         : itemAssembly.sale_description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : value.cost,
                            rate                : itemAssemblyRate,
                            locale              : itemAssembly.locale,
                            movement            : -1,

                            item                : itemAssembly
                        });
                    });
                });
            }else{
                alert("Duplicate Item Assembly!");
                row.set("item_id", 0);
                row.set("item", { id:"", name:"" });
            }
        },
        membershipTypeChanges   : function(e){
            var index = e.sender._old,
                data = this.membershipTypeDS.get(index);

            this.loadRecurring(data.membership_id);
        },
        changes                 : function(){
            var self = this, obj = this.get("objRecurring"),
                total = 0, subTotal = 0, discount =0, tax = 0, remaining = 0, amount_due = 0, itemIds = [];

            $.each(this.lineDS.data(), function(index, value) {
                var amt = value.quantity * value.price;
                subTotal += amt;

                //Discount by line
                if(value.discount>0){
                    amt -= value.discount;
                    discount += value.discount;
                }

                //Tax by line
                if(value.tax_item_id>0){
                    var taxAmount = amt * value.tax_item.rate;
                    tax += taxAmount;
                    value.set("tax", taxAmount);
                }else{
                    value.set("tax", 0);
                }

                value.set("amount", amt);

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            //Total
            total = (subTotal + tax) - discount;

            amount_due = total - obj.deposit;

            obj.set("sub_total", subTotal);
            obj.set("discount", discount);
            obj.set("tax", tax);
            obj.set("amount", total);
            obj.set("remaining", remaining);

            //this.set("total", kendo.toString(total, "c", obj.locale));
            //this.set("amount_due", kendo.toString(amount_due, "c", obj.locale));

            //Remove Assembly Item List
            var raw = this.assemblyLineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (jQuery.inArray(kendo.parseInt(item.assembly_id), itemIds)==-1) {
                    this.assemblyLineDS.remove(item);
                }
            }
        },
        lineDSChanges           : function(arg){
            var self = banhji.membership;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else if(item.is_assembly=="1"){
                        self.addItemAssembly(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity" || arg.field=="price" || arg.field=="discount"){
                    self.changes();
                }else if(arg.field=="item_price"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.item_price.measurement_id);
                    dataRow.set("price", dataRow.item_price.price * dataRow.rate);
                    dataRow.set("conversion_ratio", dataRow.item_price.conversion_ratio);
                }else if(arg.field=="discount_percentage"){
                    var dataRow = arg.items[0],
                        percentageAmount = dataRow.quantity * dataRow.price * dataRow.discount_percentage;

                    dataRow.set("discount", percentageAmount);
                }else if(arg.field=="tax_item"){
                    var dataRow = arg.items[0];

                    dataRow.set("tax_item_id", dataRow.tax_item.id);
                    dataRow.set("tax", 0);

                    self.changes();
                }
            }
        },
        addRow                  : function(){
            var obj = this.get("objRecurring");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : 0,
                item_id             : 0,
                assembly_id         : 0,
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio    : 1,
                cost                : 0,
                price               : 0,
                amount              : 0,
                discount            : 0,
                discount_percentage : 0,
                tax                 : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : -1,
                reference_no        : "",
                item                : { id:"", name:"" },
                item_price          : { measurement_id:"", measurement:"" },
                tax_item            : { id:"", name:"" }
            });
        },
        addExtraRow             : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeRow               : function(e){
            var data = e.data;
            if(this.lineDS.total()>1){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        removeEmptyRow          : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        //Obj
        loadObj                 : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            if(banhji.membershipSetting.get("isMembershipPattern")){
                banhji.membershipSetting.set("isMembershipPattern", false);
                para.push({ field:"is_pattern", value: 1 });
            }

            this.dataSource.query({
                filter: para,
                page: 1,
                pageSize: 1
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);

                self.fieldValueDS.filter([
                    { "field":"type", value: "memberships" },
                    { "field":"reference_id", value: view[0].id }
                ]);

                self.attachmentDS.filter([
                    { "field":"type", value: "memberships" },
                    { "field":"reference_id", value: view[0].id }
                ]);

                self.recurringDS.query({
                    filter: [
                        { "field":"is_recurring", value: 1 },
                        { "field":"reference_id", value: view[0].id },
                        { "field":"contact_id", value: view[0].contact_id }
                    ],
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view1 = self.recurringDS.view();

                    self.set("objRecurring", view1[0]);

                    self.lineDS.filter({ "field":"transaction_id", value: view1[0].id });
                });
            });
        },
        addEmpty                : function(){
            this.set("isEdit", false);
            this.set("isUpgrade", false);

            this.dataSource.insert(0, {
                "contact_id"                : banhji.membershipCenter.get("obj").id,
                "membership_type_id"        : 1,
                "membership_date"           : new Date(),
                "status"                    : 1,
                "expiry_date"               : "",

                "contacts"                  : banhji.membershipCenter.get("obj")
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.addRecurring();
        },
        objSync                 : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, obj = this.get("obj"), objRecurring = this.get("objRecurring");

            if(obj.membership_date!==""){
                obj.set("membership_date", kendo.toString(new Date(obj.membership_date), "yyyy-MM-dd"));
            }
            if(obj.expiry_date!==""){
                obj.set("expiry_date", kendo.toString(new Date(obj.expiry_date), "yyyy-MM-dd"));
            }

            this.removeEmptyRow();

            if(banhji.membershipCenter.get("isUpgradeMembership")){
                banhji.membershipCenter.set("isUpgradeMembership", false);
                banhji.membershipCenter.objMembership.set("status", 0);
                banhji.membershipCenter.membershipDS.sync();
            }

            //Edit mode
            if(self.get("isEdit")){
                self.recurringDS.sync();
                self.lineDS.sync();
                self.assemblyLineDS.sync();
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Custom Field
                    $.each(self.fieldValueDS.data(), function(index, value) {
                        value.set("reference_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("reference_id", data[0].id);
                    });

                    //Recurring
                    objRecurring.set("reference_id", data[0].id);
                    self.saveRecurring();
                }

                self.fieldValueDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(data){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear                   : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.fieldValueDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.fieldValueDS.data([]);

            this.set("isEdit", false);
            this.set("notDuplicateNumber", true);
        },
        cancel                  : function(){
            this.clear();

            banhji.userManagement.removeMultiTask("membership");

            history.back();
        },
        openConfirm             : function(){
            this.set("showConfirm", true);
        },
        closeConfirm            : function(){
            this.set("showConfirm", false);
        },
        delete                  : function(){
            var obj = this.get("obj");
            this.set("showConfirm",false);

            obj.set("deleted", 1);
            this.dataSource.sync();

            window.history.back();
        },
        //Recurring
        addRecurring            : function(){
            this.transactionDS.data([]);
            this.lineDS.data([]);

            this.transactionDS.insert(0, {
                contact_id          : banhji.membershipCenter.get("obj").id,//Customer
                account_id          : banhji.membershipCenter.get("obj").account_id,
                transaction_template_id : 3,
                discount_account_id : 0,
                payment_term_id     : 0,
                payment_method_id   : 0,
                reference_id        : 0,
                recurring_id        : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                employee_id         : "",//Sale Rep
                type                : "Invoice",//Required
                number              : "",
                sub_total           : 0,
                discount            : 0,
                tax                 : 0,
                deposit             : 0,
                amount              : 0,
                remaining           : 0,
                credit_allowed      : 0,
                rate                : 1,//Required
                locale              : banhji.locale,//Required
                issued_date         : new Date(),//Required
                due_date            : "",
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                note                : "",
                status              : 0,
                progress            : "",
                references          : [],
                segments            : [],
                is_journal          : 0,//Required
                //Recurring
                recurring_name      : "Subcription Recurring",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 1
            });

            var obj = this.transactionDS.at(0);
            this.set("objRecurring", obj);

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        loadRecurring           : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"reference_id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("objRecurring");

                obj.set("contact", view[0].contact);
                obj.set("contact_id", view[0].contact.id);
                obj.set("recurring_id", id);
                obj.set("payment_term_id", view[0].payment_term_id);
                obj.set("payment_method_id", view[0].payment_method_id);
                obj.set("employee_id", view[0].employee_id);//Sale Rep
                obj.set("job_id", view[0].job_id);
                obj.set("segments", view[0].segments);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("note", view[0].note);
                obj.set("bill_to", view[0].bill_to);
                obj.set("ship_to", view[0].ship_to);

                //Item lines
                self.recurringLineDS.query({
                    filter:[
                        { field: "transaction_id", value: view[0].id },
                        { field: "assembly_id", value: 0 }
                    ]
                }).then(function(){
                    var view1 = self.recurringLineDS.view();
                    self.lineDS.data([]);

                    $.each(view1, function(index, value){
                        self.lineDS.add({
                            transaction_id      : 0,
                            tax_item_id         : value.tax_item_id,
                            item_id             : value.item_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            price               : value.price,
                            amount              : value.amount,
                            discount            : value.discount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : -1,

                            item                : value.item,
                            item_price          : value.item_price,
                            tax_item            : value.tax_item
                        });
                    });

                    self.changes();
                });

                //Field value
                self.fieldValueRecurringDS.query({
                    filter:[
                        { "field":"type", value: "memberships" },
                        { "field":"reference_id", value: id }
                    ]
                }).then(function(){
                    var view1 = self.fieldValueRecurringDS.view();
                    self.fieldValueDS.data([]);

                    $.each(view1, function(index, value){
                        self.fieldValueDS.add({
                            reference_id    : view[0].id,
                            custom_field_id : value.custom_field_id,
                            field_value     : value.field_value,
                            type            : "memberships",
                            custom_fields   : value.custom_fields
                        });
                    });

                    self.changes();
                });
            });
        },
        frequencyChanges        : function(){
            var obj = this.get("objRecurring");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges      : function(){
            var obj = this.get("objRecurring");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync           : function(){
            var dfd = $.Deferred();

            this.transactionDS.sync();
            this.transactionDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.transactionDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        saveRecurring           : function(){
            var self = this;

            //Save Obj
            this.recurringSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Assembly Item line
                    $.each(self.assemblyLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                self.lineDS.sync();
                self.assemblyLineDS.sync();
            });
        }
    });
    banhji.cpdRecord = kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "cpd_records"),
        membershipDS            : dataStore(apiUrl + "memberships"),
        contactDS               : banhji.source.customerDS,
        isEdit                  : false,
        obj                     : [],
        pageLoad                : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        contactChanges          : function(){
            var obj = this.get("obj");

            this.membershipDS.filter({ field:"contact_id", value:obj.contacts.id });
        },
        //Obj
        loadObj                 : function(id){
            var self = this;

            this.dataSource.query({
                filter: { field:"id", value: id },
                page: 1,
                pageSize: 1
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
            });
        },
        addEmpty                : function(){
            this.set("isEdit", false);

            var contacts = { id:0, name:"" };
            if(banhji.membershipCenter.get("isNewCPDRecord")){
                contacts = banhji.membershipCenter.get("obj");
            }

            this.dataSource.add({
                contact_id      : 0,
                membership_id   : 0,
                subjecgt        : "",
                credit          : 0,
                period          : new Date(),
                record_date     : new Date(),

                contacts        : contacts,
                memberships     : { id:0, membership_type:"" }
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.contactChanges();
        },
        objSync                 : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, obj = this.get("obj");

            obj.set("period", kendo.toString(new Date(obj.period), "yyyy-MM-dd"));
            obj.set("record_date", kendo.toString(new Date(obj.record_date), "yyyy-MM-dd"));

            //Save Obj
            this.objSync()
            .then(function(data){ //Success

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear                   : function(){
            this.dataSource.cancelChanges();

            this.set("isEdit", false);
        },
        cancel                  : function(){
            this.clear();

            banhji.userManagement.removeMultiTask("cpd_record");

            history.back();
        },
        openConfirm             : function(){
            this.set("showConfirm", true);
        },
        closeConfirm            : function(){
            this.set("showConfirm", false);
        },
        delete                  : function(){
            var obj = this.get("obj");
            this.set("showConfirm",false);

            obj.set("deleted", 1);
            this.dataSource.sync();

            window.history.back();
        }
    });
    banhji.invoiceBatchMembership =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        itemLineDS          : dataStore(apiUrl + "item_lines"),
        assemblyLineDS      : dataStore(apiUrl + "item_lines"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        batchNumberDS       : dataStore(apiUrl + "transactions/batch_number"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "item_lines"),
        assemblyDS          : dataStore(apiUrl + "item_prices"),
        wacDS               : dataStore(apiUrl + "items/weighted_average_costing"),
        segmentDS           : dataStore(apiUrl + "segments"),
        segItemDS           : dataStore(apiUrl + "segments/item"),
        segmentItemDS       : dataStore(apiUrl + "segments/item"),
        membershipTypeDS    : dataStore(apiUrl + "membership_types"),
        membershipDS        : dataStore(apiUrl + "memberships"),
        membershipTxnDS     : dataStore(apiUrl + "transactions/by_membership"),
        typeList            : new kendo.data.DataSource({
            data: banhji.source.prefixList,
            filter:{
                logic: "or",
                filters: [
                    { field: "type", value: "Commercial_Invoice" },
                    { field: "type", value: "Vat_Invoice" },
                    { field: "type", value: "Invoice" }
                ]
            }
        }),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{
                logic: "or",
                filters: [
                    { field: "type", value: "Commercial_Invoice" },
                    { field: "type", value: "Vat_Invoice" },
                    { field: "type", value: "Invoice" }
                ]
            }
        }),
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        contactDS           : banhji.source.customerDS,
        employeeDS          : banhji.source.employeeDS,
        statusObj           : banhji.source.statusObj,
        paymentTermDS       : banhji.source.paymentTermDS,
        paymentMethodDS     : banhji.source.paymentMethodDS,
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        selectList          : [],
        obj                 : null,
        isEdit              : false,
        saveDraft           : false,
        saveClose           : false,
        savePrint           : false,
        showConfirm         : false,
        notDuplicateNumber  : true,
        total               : 0,
        amount_due          : 0,
        membership_type_id  : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(){
            if(this.dataSource.total()==0){
                this.setObj();
            }
        },
        //Payment Term
        getTerm             : function(payment_term_id){
            var obj = this.get("obj"),
                duedate = new Date(obj.issued_date);

            if(payment_term_id>0){
                var term = this.paymentTermDS.get(payment_term_id);

                if(term){
                    duedate.setDate(duedate.getDate() + term.net_due);
                }
            }

            return duedate;
        },
        //Segments
        addSegmentItem      : function(){
            var obj = this.get("obj"),
                notExisting = true,
                segment_id = this.get("segment_id"),
                segmentitem_id = this.get("segmentitem_id");

            if(segment_id && segmentitem_id){
                $.each(this.segmentItemDS.data(), function(index, value){
                    if(value.segment_id==segment_id){
                        notExisting = false;

                        return false;
                    }
                });

                if(notExisting){
                    var segments = this.segmentDS.get(segment_id),
                        segmentitems = this.segItemDS.get(segmentitem_id);

                    this.segmentItemDS.add({
                        id : segmentitems.id,
                        segment_id: segment_id,
                        code: segmentitems.code,
                        name: segmentitems.name,
                        segment: { id : segment_id, name : segments.name}
                    });
                }else{
                    $("#ntf1").data("kendoNotification").warning("This segment is already selected!");
                }
            }

            this.set("segment_id", ""),
            this.set("segmentitem_id", "");
        },
        //Set Obj
        setObj              : function(){
            this.set("obj", null);

            $("#loadImport").css("display", "none");

            this.set("obj", {
                contact_id          : "",//Customer
                transaction_template_id : 3,
                payment_term_id     : 0,
                payment_method_id   : 0,
                reference_id        : "",
                recurring_id        : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                employee_id         : "",//Sale Rep
                type                : "Commercial_Invoice",//Required
                number              : "",
                sub_total           : 0,
                discount            : 0,
                tax                 : 0,
                deposit             : 0,
                amount              : 0,
                remaining           : 0,
                credit_allowed      : 0,
                rate                : 1,//Required
                locale              : banhji.locale,//Required
                issued_date         : new Date(),//Required
                due_date            : new Date(),
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                note                : "",
                status              : 0,
                progress            : "",
                segments            : [],
                is_journal          : 1,//Required
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : 0
            });

            this.generateBatchNumber();
        },
        //Membership
        membershipTypeChanges : function(){
            var self = this, membership_type_id = this.get("membership_type_id");

            this.membershipTxnDS.query({
                filter:{ field:"membership_type_id", operator:"memberships", value:membership_type_id }
            }).then(function(){
                self.generateNumber();
            });
        },
        //Item
        addItem             : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            // row.set("cost", item.cost * rate);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: item.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();
                row.set("cost", wac[0].cost * rate);
            });

            //Get first price
            this.assemblyDS.query({
                filter:[
                    { field:"item_id", value:item.id },
                    { field:"assembly_id", value:0 }
                ],
                page: 1,
                pageSize: 1
            }).then(function(){
                var view = self.assemblyDS.view();

                if(view.length>0){
                    var measurement = {
                        measurement_id  : view[0].measurement_id,
                        price           : kendo.parseFloat(view[0].price),
                        conversion_ratio: view[0].conversion_ratio,
                        measurement     : view[0].measurement
                    };
                    row.set("measurement", measurement);
                }
            });
        },
        addItemCatalog      : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : catalogItem.cost * rate,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : -1,

                        discount_percentage : 0,
                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" },
                        tax_item            : { id:"", name:"" }
                    });
                }
            });
        },
        addItemAssembly     : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            var notExist = true;
            $.each(this.assemblyLineDS.data(), function(index, value){
                if(value.assembly_id==item.id){
                    notExist = false;

                    return false;
                }
            });

            if(notExist){
                row.set("item_id", item.id);
                row.set("measurement_id", item.measurement_id);
                row.set("description", item.sale_description);
                row.set("conversion_ratio", 1);
                row.set("cost", item.cost * rate);
                row.set("price", item.price * rate);
                row.set("rate", rate);
                row.set("locale", item.locale);

                this.assemblyDS.query({
                    filter:{ field:"assembly_id", value:row.item_id }
                }).then(function(){
                    var view = self.assemblyDS.view();

                    $.each(view, function(index, value){
                        var itemAssembly = banhji.source.itemDS.get(value.item_id),
                            itemAssemblyRate = obj.rate / banhji.source.getRate(itemAssembly.locale, new Date(obj.issued_date));

                        self.assemblyLineDS.add({
                            transaction_id      : obj.id,
                            item_id             : value.item_id,
                            assembly_id         : value.assembly_id,
                            measurement_id      : value.measurement_id,
                            description         : itemAssembly.sale_description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : itemAssembly.cost * rate,
                            price               : value.price * itemAssemblyRate,
                            amount              : value.price * itemAssemblyRate,
                            rate                : itemAssemblyRate,
                            locale              : value.locale,
                            movement            : -1,

                            item                : itemAssembly
                        });
                    });
                });
            }else{
                alert("Duplicate Item Assembly!");
                row.set("item_id", 0);
                row.set("item", { id:"", name:"" });
            }
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
                total = 0, subTotal = 0, discount =0, tax = 0, remaining = 0, amount_due = 0, itemIds = [];

            $.each(this.lineDS.data(), function(index, value) {
                var amt = value.quantity * value.price;
                subTotal += amt;

                //Discount by line
                if(value.discount>0){
                    amt -= value.discount;
                    discount += value.discount;
                }

                //Tax by line
                if(value.tax_item_id>0){
                    var taxAmount = amt * value.tax_item.rate;
                    tax += taxAmount;
                    value.set("tax", taxAmount);
                }else{
                    value.set("tax", 0);
                }

                value.set("amount", amt);

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            //Total
            total = (subTotal + tax) - discount;

            //Apply Deposit
            if(obj.deposit>0){
                if(obj.deposit <= this.get("total_deposit")){
                    if(obj.deposit <= total){
                        remaining = total - obj.deposit;
                    }else{
                        obj.set("deposit", total);
                    }
                }else{
                    obj.set("deposit", 0);
                    alert("Over deposit to apply!");
                }

                //Status
                if(remaining==0){
                    obj.set("status", 1);
                }else if(remaining==total){
                    obj.set("status", 0);
                }else{
                    obj.set("status", 2);
                }
            }

            //Warning over credit allowed
            if(obj.credit_allowed>0 && total>obj.credit_allowed){
                this.set("amtDueColor", "Gold");
            }else{
                this.set("amtDueColor", banhji.source.amtDueColor);
            }

            amount_due = total - obj.deposit;

            obj.set("sub_total", subTotal);
            obj.set("discount", discount);
            obj.set("tax", tax);
            obj.set("amount", total);
            obj.set("remaining", remaining);

            this.set("total", kendo.toString(total, "c", obj.locale));
            this.set("amount_due", kendo.toString(amount_due, "c", obj.locale));

            //Remove Assembly Item List
            var raw = this.assemblyLineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (jQuery.inArray(kendo.parseInt(item.assembly_id), itemIds)==-1) {
                    this.assemblyLineDS.remove(item);
                }
            }
        },
        lineDSChanges       : function(arg){
            var self = banhji.invoiceBatchMembership;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else if(item.is_assembly=="1"){
                        self.addItemAssembly(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity" || arg.field=="price" || arg.field=="discount"){
                    self.changes();
                }else if(arg.field=="measurement"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.measurement.measurement_id);
                    dataRow.set("price", dataRow.measurement.price * dataRow.rate);
                    dataRow.set("conversion_ratio", dataRow.measurement.conversion_ratio);
                }else if(arg.field=="discount_percentage"){
                    var dataRow = arg.items[0],
                        percentageAmount = dataRow.quantity * dataRow.price * dataRow.discount_percentage;

                    dataRow.set("discount", percentageAmount);
                }else if(arg.field=="tax_item"){
                    var dataRow = arg.items[0];

                    dataRow.set("tax_item_id", dataRow.tax_item.id);
                    dataRow.set("tax", 0);

                    self.changes();
                }
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                // obj.set("number", str);

                $.each(self.membershipTxnDS.data(), function(index, value){
                    number++;
                    str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                    value.set("number", str);
                });
            });
        },
        generateBatchNumber : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.batchNumberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.batchNumberDS.view(),
                    number = 0, str = "";

                if(view.length>0){
                    if(view[0].batch_number!==""){
                        number = view[0].batch_number.match(/\d+/g).map(Number);
                    }
                }

                number++;
                str = "BATCH" + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("batch_number", str);
            });
        },
        typeChanges         : function(){
            var obj = this.get("obj");

            $.each(this.txnTemplateDS.data(), function(index, value){
                if(value.type==obj.type){
                    obj.set("transaction_template_id", value.id);

                    return false;
                }
            });
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : 0,
                item_id             : 0,
                assembly_id         : 0,
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio    : 1,
                cost                : 0,
                price               : 0,
                amount              : 0,
                discount            : 0,
                tax                 : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : -1,
                reference_no        : "",

                discount_percentage : 0,
                item                : { id:"", name:"" },
                measurement         : { measurement_id:"", measurement:"" },
                tax_item            : { id:"", name:"" }
            });
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeRow           : function(e){
            var data = e.data;
            if(this.lineDS.total()>1){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        txnSelect           : 1,
        checkA              : false,
        checkB              : false,
        tmpData             : "",
        save                : function(){
            // $("#loadImport").css("display", "block");
            var self = this, obj = this.get("obj"),
                segments = [], lines = [], ids = [], counter = 0;

            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

            //Select ids
            $.each(self.get("selectList"), function(index, value){
                ids.push(kendo.parseInt(value));
            });

            //Segment
            $.each(this.segmentItemDS.data(), function(index, value){
                segments.push(value.id);
            });
            obj.set("segments", segments);

            //Txn
            $.each(this.membershipTxnDS.data(), function(index, value){
                if(jQuery.inArray( value.id, ids )!==-1 ){
                    var raw = "", entries = {},
                        duedate = self.getTerm(value.payment_term_id),
                        transaction_id = counter, contact = value.contacts;

                    //Add transactions
                    self.dataSource.add({
                        contact_id          : value.contacts.id,//Customer
                        account_id          : value.account_id,
                        transaction_template_id : obj.transaction_template_id,
                        payment_term_id     : value.contacts.payment_term_id,
                        payment_method_id   : value.contacts.payment_method_id,
                        recurring_id        : value.id,
                        user_id             : self.get("user_id"),
                        employee_id         : obj.employee_id,//Sale Rep
                        type                : obj.type,//Required
                        number              : value.number,
                        sub_total           : value.sub_total,
                        discount            : value.discount,
                        tax                 : value.tax,
                        amount              : value.amount,
                        rate                : value.rate,//Required
                        locale              : value.locale,//Required
                        issued_date         : obj.issued_date,//Required
                        due_date            : duedate,
                        bill_to             : value.contacts.bill_to,
                        ship_to             : value.contacts.ship_to,
                        memo                : value.memo,
                        note                : value.invoice_note,
                        status              : 0,
                        progress            : "",
                        segments            : segments,
                        is_journal          : 1,//Required
                        is_recurring        : 0
                    });

                    $.each(value.lines, function(ind, val){
                        //Lines
                        self.lineDS.add({
                            transaction_id      : transaction_id,
                            tax_item_id         : val.tax_item_id,
                            item_id             : val.item_id,
                            assembly_id         : val.assembly_id,
                            measurement_id      : val.measurement_id,
                            description         : val.description,
                            quantity            : val.quantity,
                            conversion_ratio    : val.conversion_ratio,
                            cost                : val.cost,
                            price               : val.price,
                            amount              : val.amount,
                            discount            : val.discount,
                            tax                 : val.tax,
                            rate                : val.rate,
                            locale              : val.locale,
                            movement            : -1,
                            reference_no        : val.tax_item_id,

                            discount_percentage : val.discount_percentage,
                            item                : val.item,
                            tax_item            : val.tax_item
                        });

                        //Journal
                        var item = val.item;

                        //COGS on Dr
                        if(item.item_type_id==1){
                            var cogsID = kendo.parseInt(item.expense_account_id);
                            if(cogsID>0){
                                raw = "dr"+cogsID;

                                var cogsAmount = val.amount;
                                if(item.item_type_id==1 || item.item_type_id==4){
                                    cogsAmount = (val.quantity*val.conversion_ratio)*val.cost;
                                }

                                if(entries[raw]===undefined){
                                    entries[raw] = {
                                        transaction_id      : transaction_id,
                                        account_id          : cogsID,
                                        contact_id          : contact.id,
                                        description         : val.description,
                                        reference_no        : "",
                                        segments            : obj.segments,
                                        dr                  : cogsAmount * val.rate,
                                        cr                  : 0,
                                        rate                : val.rate,
                                        locale              : item.locale
                                    };
                                }else{
                                    entries[raw].dr += cogsAmount;
                                }
                            }
                        }

                        //Inventory on Cr
                        var inventoryID = kendo.parseInt(item.inventory_account_id);
                        if(inventoryID>0){
                            raw = "cr"+inventoryID;

                            var inventoryAmount = val.amount;
                            if(item.item_type_id==1 || item.item_type_id==4){
                                inventoryAmount = (val.quantity*val.conversion_ratio)*val.cost;
                            }

                            if(entries[raw]===undefined){
                                entries[raw] = {
                                    transaction_id      : transaction_id,
                                    account_id          : inventoryID,
                                    contact_id          : contact.id,
                                    description         : val.description,
                                    reference_no        : "",
                                    segments            : obj.segments,
                                    dr                  : 0,
                                    cr                  : inventoryAmount * val.rate,
                                    rate                : val.rate,
                                    locale              : item.locale
                                };
                            }else{
                                entries[raw].cr += inventoryAmount;
                            }
                        }

                        //Sale on Cr
                        var incomeID = kendo.parseInt(item.income_account_id);
                        if(incomeID>0){
                            raw = "cr"+incomeID;

                            var saleAmount = val.quantity * val.price;
                            if(entries[raw]===undefined){
                                entries[raw] = {
                                    transaction_id      : transaction_id,
                                    account_id          : incomeID,
                                    contact_id          : contact.id,
                                    description         : val.description,
                                    reference_no        : "",
                                    segments            : obj.segments,
                                    dr                  : 0,
                                    cr                  : saleAmount,
                                    rate                : val.rate,
                                    locale              : val.locale
                                };
                            }else{
                                entries[raw].cr += value.amount;
                            }
                        }

                        //Tax on Cr
                        if(value.tax_item_id>0){
                            var taxItem = val.tax_item,
                                raw = "cr"+taxItem.account_id;

                            if(entries[raw]===undefined){
                                entries[raw] = {
                                    transaction_id      : transaction_id,
                                    account_id          : taxItem.account_id,
                                    contact_id          : contact.id,
                                    description         : val.description,
                                    reference_no        : "",
                                    segments            : obj.segments,
                                    dr                  : 0,
                                    cr                  : val.tax,
                                    rate                : val.rate,
                                    locale              : val.locale
                                };
                            }else{
                                entries[raw].cr += taxAmt;
                            }
                        }
                    });

                    // A/R on Dr
                    var arID = kendo.parseInt(contact.account_id);
                    if(arID>0){
                        raw = "dr"+arID;

                        if(entries[raw]===undefined){
                            entries[raw] = {
                                transaction_id      : transaction_id,
                                account_id          : arID,
                                contact_id          : contact.id,
                                description         : value.memo,
                                reference_no        : value.reference_no,
                                segments            : obj.segments,
                                dr                  : value.amount,
                                cr                  : 0,
                                rate                : value.rate,
                                locale              : value.locale
                            };
                        }else{
                            entries[raw].dr += value.amount;
                        }
                    }

                    //Discount on Dr
                    if(value.discount > 0){
                        var discountAccountId = kendo.parseInt(contact.trade_discount_id);
                        if(discountAccountId>0){
                            raw = "dr"+discountAccountId;

                            if(entries[raw]===undefined){
                                entries[raw] = {
                                    transaction_id      : transaction_id,
                                    account_id          : discountAccountId,
                                    contact_id          : contact.id,
                                    description         : value.memo,
                                    reference_no        : value.reference_no,
                                    segments            : obj.segments,
                                    dr                  : value.discount,
                                    cr                  : 0,
                                    rate                : value.rate,
                                    locale              : value.locale
                                };
                            }else{
                                entries[raw].dr += value.discount;
                            }
                        }
                    }

                    //Add to journal entry
                    if(!jQuery.isEmptyObject(entries)){
                        $.each(entries, function(index, value){
                            self.journalLineDS.add(value);
                        });
                    }

                    counter++;
                }
            });

            // Save Obj
            this.objSync()
            .then(function(data){ //Success
                banhji.batchInvoicePreview.line = self.lineDS.data();

                $.each(data, function(index, value){
                    //Item line
                    $.each(self.lineDS.data(), function(ind, val){
                        if(val.transaction_id==index){
                            val.set("transaction_id", value.id);
                        }
                    });

                    //Journal
                    $.each(self.journalLineDS.data(), function(ind, val){
                        if(val.transaction_id==index){
                            val.set("transaction_id", value.id);
                        }
                    });
                });

                self.lineDS.sync();
                self.journalLineDS.sync();

                self.lineDS.bind("requestEnd", function(e){
                    self.set("checkA", true);
                    // self.checkDONE();
                });
                self.journalLineDS.bind("requestEnd", function(e){
                    self.set("checkB", true);
                    // self.checkDONE();
                });
                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){

                if(self.get("saveClose")){
                    //Save Draft or Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    // $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);
                }else if(self.get("savePrint")){
                    self.checkDONE();

                    //Save Print
                    self.set("savePrint", false);
                    self.clear();

                    self.tmpData = result;

                }else{
                    //Save New
                    self.setObj();
                }
            });
        },
        checkDONE           : function(){
            if(this.get("checkA") == true && this.get("checkB") == true){
                banhji.batchInvoicePreview.dataSource = [];
                if(this.get("obj").payment_method_id > 0){
                    banhji.batchInvoicePreview.set("payment_method", banhji.source.paymentMethodDS.data()[this.get("obj").payment_method_id - 1].name);
                }
                banhji.batchInvoicePreview.txnFormID = this.get("txnSelect");
                banhji.batchInvoicePreview.dataSource = this.get("tmpData");
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);
                $("#loadImport").css("display", "none");
                banhji.router.navigate("/batch_invoice_preview");
            }
        },
        clear               : function(){
            this.set("membership_type_id", 0);

            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.assemblyLineDS.cancelChanges();
            this.itemLineDS.cancelChanges();
            this.membershipTxnDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.itemLineDS.data([]);
            this.membershipTxnDS.data([]);

            banhji.userManagement.removeMultiTask("invoice_batch_membership");
        },
        cancel              : function(){
            this.clear();
            window.history.back();
        },
        validating          : function(){
            var result = true, nonItem = true;

            //Check selection
            if(this.get("selectList").length==0){
                $("#ntf1").data("kendoNotification").error("Please select at least one row!");

                result = false;
            }

            return result;
        },
        //Journal
        addJournal          : function(transaction_id, contact, lineList){
            var self = this,
                obj = this.get("obj"),
                raw = "", entries = {};

            //Item lines
            $.each(lineList, function(index, value){
                var item = value.item;

                //COGS on Dr
                if(item.item_type_id==1){
                    var cogsID = kendo.parseInt(item.expense_account_id);
                    if(cogsID>0){
                        raw = "dr"+cogsID;

                        var cogsAmount = value.amount;
                        if(item.item_type_id==1 || item.item_type_id==4){
                            cogsAmount = (value.quantity*value.conversion_ratio)*value.cost;
                        }

                        if(entries[raw]===undefined){
                            entries[raw] = {
                                transaction_id      : transaction_id,
                                account_id          : cogsID,
                                contact_id          : contact.id,
                                description         : value.description,
                                reference_no        : "",
                                segments            : obj.segments,
                                dr                  : cogsAmount * value.rate,
                                cr                  : 0,
                                rate                : value.rate,
                                locale              : item.locale
                            };
                        }else{
                            entries[raw].dr += cogsAmount;
                        }
                    }
                }

                //Inventory on Cr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "cr"+inventoryID;

                    var inventoryAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        inventoryAmount = (value.quantity*value.conversion_ratio)*value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : contact.id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : inventoryAmount * value.rate,
                            rate                : value.rate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].cr += inventoryAmount;
                    }
                }

                //Sale on Cr
                var incomeID = kendo.parseInt(item.income_account_id);
                if(incomeID>0){
                    raw = "cr"+incomeID;

                    var saleAmount = value.quantity * value.price;
                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : incomeID,
                            contact_id          : contact.id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : saleAmount,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].cr += value.amount;
                    }
                }

                //Tax on Cr
                if(value.tax_item_id>0){
                    var taxItem = value.tax_item,
                        raw = "cr"+taxItem.account_id;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : taxItem.account_id,
                            contact_id          : contact.id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : value.tax,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].cr += taxAmt;
                    }
                }
            });

            // A/R on Dr
            var arID = kendo.parseInt(contact.account_id);
            if(arID>0){
                raw = "dr"+arID;

                if(entries[raw]===undefined){
                    entries[raw] = {
                        transaction_id      : transaction_id,
                        account_id          : arID,
                        contact_id          : contact.id,
                        description         : obj.memo,
                        reference_no        : obj.reference_no,
                        segments            : obj.segments,
                        dr                  : obj.amount,
                        cr                  : 0,
                        rate                : obj.rate,
                        locale              : obj.locale
                    };
                }else{
                    entries[raw].dr += obj.amount;
                }
            }

            //Discount on Dr
            if(obj.discount > 0){
                var discountAccountId = kendo.parseInt(contact.trade_discount_id);
                if(discountAccountId>0){
                    raw = "dr"+discountAccountId;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : discountAccountId,
                            contact_id          : contact.id,
                            description         : obj.memo,
                            reference_no        : obj.reference_no,
                            segments            : obj.segments,
                            dr                  : obj.discount,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].dr += obj.discount;
                    }
                }
            }

            //Add to journal entry
            if(!jQuery.isEmptyObject(entries)){
                $.each(entries, function(index, value){
                    self.journalLineDS.add(value);
                });
            }
        }
    });
    banhji.membershipSetting =  kendo.observable({
        lang                : langVM,
        contactTypeDS       : dataStore(apiUrl + "contacts/type"),
        patternDS           : dataStore(apiUrl + "contacts"),
        paymentMethodDS     : banhji.source.paymentMethodDS,
        paymentTermDS       : banhji.source.paymentTermDS,
        txnTemplateDS       : dataStore(apiUrl + "transaction_templates"),
        customFieldDS       : dataStore(apiUrl + "custom_fields"),
        membershipDS        : dataStore(apiUrl + "memberships"),
        membershipTypeDS    : dataStore(apiUrl + "membership_types"),
        contactTypeName     : "",
        contactTypeAbbr     : "",
        contactTypeCompany  : 0,
        paymentMethodName   : "",
        paymentTermName     : "",
        paymentTermNetDue   : "",
        paymentTermPeriod   : "",
        paymentTermPercentage   : "",
        isMembershipPattern : false,
        prefixDS            : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "prefixes",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                create  : {
                    url: apiUrl + "prefixes",
                    type: "POST",
                    headers: banhji.header,
                    dataType: 'json'
                },
                update  : {
                    url: apiUrl + "prefixes",
                    type: "PUT",
                    headers: banhji.header,
                    dataType: 'json'
                },
                destroy     : {
                    url: apiUrl + "prefixes",
                    type: "DELETE",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter: { field:"type", operator:"where_in", value:["Quote", "Sale_Order", "Deposit","Commercial_Cash_Sale", "Vat_Cash_Sale", "Cash_Sale","Commercial_Invoice","Vat_Invoice", "Invoice", "Cash_Receipt", "GDN", "Sale_Return"] },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        pageLoad            : function() {
            this.txnTemplateDS.filter({ field: "moduls", value : "customer_mg" });
        },
        addContactType      : function(){
            var self = this, name = this.get("contactTypeName");

            if(name!==""){
                this.contactTypeDS.add({
                    parent_id   : 1,
                    name        : name,
                    abbr        : this.get("contactTypeAbbr"),
                    description : "",
                    is_company  : this.get("contactTypeCompany"),
                    is_system   : 0
                });

                this.contactTypeDS.sync();
                this.contactTypeDS.bind("requestEnd", function(e){
                    if(e.type==="create"){
                        var response = e.response.results[0];
                        self.addPattern(response.id);
                        banhji.source.loadContactTypes();
                    }
                });

                this.set("contactTypeName", "");
                this.set("contactTypeAbbr", "");
                this.set("contactTypeCompany", 0);
            }
        },
        addPattern          : function(id){
            this.patternDS.insert(0, {
                "contact_type_id"       : id,
                "number"                : "",
                "locale"                : banhji.locale,
                "is_pattern"            : 1,
                "status"                : 1
            });
            this.patternDS.sync();
        },
        addPaymentMethod    : function(){
            var name = this.get("paymentMethodName");

            if(name!==""){
                this.paymentMethodDS.add({
                    name        : name,
                    description : "",
                    is_system   : 0
                });

                this.paymentMethodDS.sync();

                this.set("paymentMethodName", "");
            }
        },
        addPaymentTerm      : function(){
            var name = this.get("paymentTermName");

            if(name!==""){
                this.paymentTermDS.add({
                    name                : name,
                    net_due             : this.get("paymentTermNetDue"),
                    discount_period     : this.get("paymentTermPeriod"),
                    discount_percentage : this.get("paymentTermPercentage"),
                    is_system           : 0
                });

                this.paymentTermDS.sync();

                this.set("paymentTermName", "");
                this.set("paymentTermNetDue", "");
                this.set("paymentTermPeriod", "");
                this.set("paymentTermPercentage", "");
            }
        },
        deleteForm          : function(e){
            var data = e.data;
            if(confirm("Do you want to delete it?") == true) {
                this.txnTemplateDS.remove(data);
                this.txnTemplateDS.sync();
            }
        },
        goInvoiceCustom     : function(){
            banhji.router.navigate('/invoice_custom');
        },
        addNewMembershipType: function(){
            this.membershipTypeDS.insert(0, {
                "name"          : "",
                "description"   : "",
                "membership_id" : 0
            });
        },
        goMembershipPattern : function(e){
            var data = e.data;

            this.set("isMembershipPattern", true);
            banhji.router.navigate('/membership/' + data.membership_id);
        }
    });





    /*************************************************
    *   VENDOR MVVM                                  *
    *************************************************/
    banhji.vendorDashboard = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "vendor_modules/dashboard"),
        graphDS             : dataStore(apiUrl + "vendor_modules/monthly_purchase"),
        obj                 : {},
        pageLoad            : function(){
            this.loadData();
        },
        loadData            : function(){
            var self = this;

            this.graphDS.read();

            this.dataSource.query({
                filter: [],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
            });
        }
    });
    banhji.vendorCenter = kendo.observable({
        lang                : langVM,
        transactionDS       : dataStore(apiUrl + 'transactions'),
        contactDS           : banhji.source.supplierDS,
        contactTypeDS       : new kendo.data.DataSource({
            data: banhji.source.contactTypeList,
            filter: { field:"parent_id", value: 2 }//Supplier
        }),
        noteDS              : dataStore(apiUrl + 'notes'),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        txnDS               : dataStore(apiUrl + "transactions"),
        sortList            : banhji.source.sortList,
        sorter              : "all",
        sdate               : "",
        edate               : "",
        obj                 : null,
        note                : "",
        searchText          : "",
        contact_type_id     : null,
        balance             : 0,
        po                  : 0,
        openInvoice         : 0,
        overInvoice         : 0,
        currencyCode        : "",
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.loadObj(id);
            }

            //Refresh
            if(this.contactDS.total()>0){
                this.contactDS.fetch();
                this.searchTransaction();
                this.loadSummary();
            }
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        setCurrencyCode     : function(){
            var code = "", obj = this.get("obj");

            $.each(banhji.source.currencyDS.data(), function(index, value){
                if(value.locale == obj.locale){
                    code = value.code;

                    return false;
                }
            });

            this.set("currencyCode", code);
        },
        loadObj             : function(id){
            var self = this;

            this.contactDS.query({
                filter: { field:"id", value:id },
                page:1,
                pageSize:100
            }).then(function(){
                var view = self.contactDS.view();

                if(view.length>0){
                    self.set("obj", view[0]);
                    self.loadData();
                }
            });
        },
        loadData            : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.searchTransaction();
                this.loadSummary();
                this.setCurrencyCode();

                this.attachmentDS.query({
                    filter:{ field:"contact_id", value: obj.id },
                    page: 1,
                    pageSize:10
                });
                this.noteDS.query({
                    filter: { field:"contact_id", value: obj.id },
                    sort: { field:"noted_date", dir:"desc" },
                    page: 1,
                    pageSize: 10
                });
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            if(obj!==null){
                // Check the extension of each file and abort the upload if it is not .jpg
                $.each(files, function(index, value){
                    if (value.extension.toLowerCase() === ".jpg"
                        || value.extension.toLowerCase() === ".jpeg"
                        || value.extension.toLowerCase() === ".tiff"
                        || value.extension.toLowerCase() === ".png"
                        || value.extension.toLowerCase() === ".gif"
                        || value.extension.toLowerCase() === ".pdf"){

                        var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                        self.attachmentDS.add({
                            user_id         : self.get("user_id"),
                            contact_id      : obj.id,
                            type            : "Contact",
                            name            : value.name,
                            description     : "",
                            key             : key,
                            url             : banhji.s3 + key,
                            size            : value.size,
                            created_at      : new Date(),

                            file            : value.rawFile
                        });
                    }else{
                        alert("This type of file is not allowed to attach.");
                    }
                });
            }else{
                alert("Please select a supplier!");
            }
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
                this.attachmentDS.sync();
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Obj
        loadContact         : function(id){
            var self = this;

            this.contactDS.query({
                filter:[
                    { field:"id", value:id }
                ],
                page: 1,
                pageSize: 50
            }).then(function(e) {
                var view = self.contactDS.data();

                if(view.length>0){
                    self.set("obj", view[0]);
                    self.loadData();
                }
            });
        },
        loadSummary         : function(){
            var self = this, obj = this.get("obj");

            if(obj!==null){
                this.txnDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", operator:"where_in", value: ["Credit_Purchase", "Purchase_Order"] },
                        { field:"status", operator:"where_in", value: [0,2] }
                    ],
                    sort: { field: "issued_date", dir: "desc" },
                    page: 1,
                    pageSize: 1000
                }).then(function(){
                    var view = self.txnDS.view(),
                    balance = 0, open = 0, over = 0, po = 0, today = new Date();

                    $.each(view, function(index, value){
                        if(value.type=="Purchase_Order"){
                            po++;
                        }else{
                            balance += kendo.parseFloat(value.amount) - (kendo.parseFloat(value.deposit) + value.amount_paid);
                            open++;

                            if(new Date(value.due_date)<today){
                                over++;
                            }
                        }
                    });

                    self.set("balance", kendo.toString(balance, "c", obj.locale));
                    self.set("po", kendo.toString(po, "n0"));
                    self.set("openInvoice", kendo.toString(open, "n0"));
                    self.set("overInvoice", kendo.toString(over, "n0"));
                });
            }
        },
        loadBalance         : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.transactionDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", value:"Credit_Purchase" },
                        { field:"status", operator:"where_in", value: [0,2] }
                    ],
                    sort: [
                        { field: "issued_date", dir: "desc" },
                        { field: "id", dir: "desc" }
                    ],
                    page: 1,
                    pageSize: 10
                });
            }
        },
        loadPO              : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.transactionDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", value:"Purchase_Order" },
                        { field:"status", value: 0 }
                    ],
                    sort: [
                        { field: "issued_date", dir: "desc" },
                        { field: "id", dir: "desc" }
                    ],
                    page: 1,
                    pageSize: 10
                });
            }
        },
        loadOverInvoice     : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.transactionDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", value: "Credit_Purchase" },
                        { field:"status", operator:"where_in", value: [0,2] },
                        { field:"due_date <", value: kendo.toString(new Date(), "yyyy-MM-dd") }
                    ],
                    sort: [
                        { field: "issued_date", dir: "desc" },
                        { field: "id", dir: "desc" }
                    ],
                    page: 1,
                    pageSize: 10
                });
            }
        },
        selectedRow         : function(e){
            var data = e.data;

            this.set("obj", data);
            this.loadData();
        },
        //Search
        enterSearch         : function(e){
            e.preventDefault();

            this.search();
        },
        search              : function(){
            var self = this,
            para = [],
            searchText = this.get("searchText"),
            contact_type_id = this.get("contact_type_id");

            if(searchText){
                //Phone
                if(this.phonenumber(searchText)){
                    para.push({ field: "phone", operator: "contains", value: searchText });
                }else{
                    var textParts = searchText.replace(/([a-z]+)/i, "$1 ").split(/[^0-9a-z]+/ig);
                    if(textParts.length===2){
                        if(textParts[0]!=="" && textParts[1]!==""){
                            para.push({ field: "abbr", value: textParts[0] });
                            para.push({ field: "number", value: textParts[1] });
                        }else{
                            para.push({ field: "name", operator: "contains", value: searchText });
                        }
                    }else{
                        para.push({ field: "name", operator: "contains", value: searchText });
                    }
                }
            }

            if(contact_type_id){
                para.push({ field: "contact_type_id", value: contact_type_id });
            }else{
                para.push({ field: "parent_id", operator:"where_related_contact_type", value: 2 });
            }

            this.contactDS.filter(para);

            //Clear search filters
            self.set("searchText", "");
            self.set("contact_type_id", 0);
        },
        searchTransaction   : function(){
            var self = this,
                start = this.get("sdate"),
                end = this.get("edate"),
                para = [], obj = this.get("obj");

            if(obj!==null){
                para.push({ field:"contact_id", value: obj.id });

                //Dates
                if(start && end){
                    start = new Date(start);
                    end = new Date(end);
                    end.setDate(end.getDate()+1);

                    para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                    para.push({ field:"issued_date <=", value: kendo.toString(end, "yyyy-MM-dd") });
                }else if(start){
                    start = new Date(start);
                    para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
                }else if(end){
                    end = new Date(end);
                    end.setDate(end.getDate()+1);
                    para.push({ field:"issued_date <=", value: kendo.toString(end, "yyyy-MM-dd") });
                }else{}

                this.transactionDS.query({
                    filter: para,
                    sort: [
                        { field: "issued_date", dir: "desc" },
                        { field: "id", dir: "desc" }
                    ],
                    page: 1,
                    pageSize: 10
                });
            }
        },
        phonenumber         : function (inputtxt){
            var phoneno = /^[+]*[(]{0,1}[0-9]{1,3}[)]{0,1}[-\s\./0-9]*$/g;
            if(inputtxt.match(phoneno)){
                return true;
            }else{
                return false;
            }
        },
        //Links
        goEdit              : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/vendor/'+obj.id);
            }
        },
        goReference         : function(e){
            var self = this, data = e.data;

            this.txnDS.query({
                filter:{ field:"id", value:data.reference_id}
            }).then(function(){
                var view = self.txnDS.view();

                banhji.router.navigate('/' + view[0].type.toLowerCase() +'/'+ data.reference_id);
            });
        },
        goPO                : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/purchase_order');
                banhji.purchaseOrder.setContact(obj);
            }
        },
        goDeposit           : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/vendor_deposit');
                banhji.vendorDeposit.setContact(obj);
            }
        },
        goPurchase          : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/purchase');
                banhji.purchase.setContact(obj);
            }
        },
        goPurchaseReturn    : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/purchase_return');
                banhji.purchaseReturn.setContact(obj);
            }
        },
        goGRN               : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/grn');
                banhji.grn.setContact(obj);
            }
        },
        goCashPayment       : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/cash_payment');
                banhji.cashPayment.loadContact(obj.id);
            }
        },
        goPaymentRefund     : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/payment_refund');
                banhji.paymentRefund.setContact(obj);
            }
        },
        payBill             : function(e){
            var data = e.data;

            if(obj!==null){
                banhji.router.navigate('/cash_payment');
                banhji.cashPayment.loadInvoice(data.id);
            }
        },
        //Note
        saveNoteEnter       : function(e){
            e.preventDefault();
            this.saveNote();
        },
        saveNote            : function(){
            var obj = this.get("obj");

            if(obj!==null && this.get("note")!==""){
                this.noteDS.insert(0, {
                    contact_id  : obj.id,
                    note        : this.get("note"),
                    noted_date  : new Date(),
                    created_by  : this.get("user_id"),

                    creator     : ""
                });

                this.noteDS.sync();
                this.set("note", "");
            }else{
                alert("Please select a supplier and Memo is required");
            }
        }
    });
    banhji.vendor = kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "contacts"),
        attachmentDS            : dataStore(apiUrl + "attachments"),
        patternDS               : dataStore(apiUrl + "contacts"),
        numberDS                : dataStore(apiUrl + "contacts"),
        deleteDS                : dataStore(apiUrl + "transactions"),
        existingDS              : dataStore(apiUrl + "contacts"),
        contactPersonDS         : dataStore(apiUrl + "contact_persons"),
        paymentTermDS           : banhji.source.paymentTermDS,
        paymentMethodDS         : banhji.source.paymentMethodDS,
        countryDS               : banhji.source.countryDS,
        currencyDS              : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        contactTypeDS           : new kendo.data.DataSource({
            data: banhji.source.contactTypeList,
            filter: { field:"parent_id", value: 2 }//Supplier
        }),
        apDS                    : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 23 },
                    { field: "account_type_id", value: 24 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        prepaidAccountDS        : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 14 },
                    { field: "account_type_id", value: 21 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        tradeDiscountDS         : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 36 },
                    { field: "account_type_id", value: 37 },
                    { field: "account_type_id", value: 38 },
                    { field: "account_type_id", value: 40 },
                    { field: "account_type_id", value: 41 },
                    { field: "account_type_id", value: 42 },
                    { field: "account_type_id", value: 43 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        settlementDiscountDS    : new kendo.data.DataSource({
            data: banhji.source.accountList,
            // filter:{ field:"id", value: 109 },
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 36 },
                    { field: "account_type_id", value: 37 },
                    { field: "account_type_id", value: 38 },
                    { field: "account_type_id", value: 39 },
                    { field: "account_type_id", value: 40 },
                    { field: "account_type_id", value: 41 },
                    { field: "account_type_id", value: 42 },
                    { field: "account_type_id", value: 43 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        taxItemDS       : new kendo.data.DataSource({
            data: banhji.source.taxList,
            sort: [
                { field: "tax_type_id", dir: "asc" },
                { field: "name", dir: "asc" }
            ]
        }),
        genders                 : banhji.source.genderList,
        statusList              : banhji.source.statusList,
        confirmMessage          : banhji.source.confirmMessage,
        isEdit                  : false,
        isProtected             : false,
        obj                     : null,
        saveClose               : false,
        showConfirm             : false,
        notDuplicateNumber      : true,
        phFullname              : "Supplier Name ...",
        contact_type_id         : 0,
        pageLoad                : function(id, contact_type_id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id, contact_type_id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Contact Person
        addEmptyContactPerson   : function(){
            var obj = this.get("obj");

            this.contactPersonDS.add({
                contact_id          : obj.id,
                prefix              : "",
                name                : "",
                department          : "",
                phone               : "",
                email               : ""
            });
        },
        deleteContactPerson     : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var d = e.data,
                obj = this.contactPersonDS.getByUid(d.uid);

                this.contactPersonDS.remove(obj);
            }
        },
        //Map
        loadMap                 : function(){
            var obj = this.get("obj"), lat = kendo.parseFloat(obj.latitute),
            lng = kendo.parseFloat(obj.longtitute);

            if(lat && lng){
                var myLatLng = {lat:lat, lng:lng};
                var mapOptions = {
                    zoom: 17,
                    center: myLatLng,
                    mapTypeControl: false,
                    zoomControl: false,
                    scaleControl: false,
                    streetViewControl: false
                };
                var map = new google.maps.Map(document.getElementById('map'),mapOptions);
                var marker = new google.maps.Marker({
                    position: myLatLng,
                    map: map,
                    title: obj.number
                });
            }
        },
        copyBillTo              : function(){
            var obj = this.get("obj");

            obj.set("ship_to", obj.bill_to);
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"abbr", value: obj.abbr });
                para.push({ field:"number", value: obj.number });
                para.push({ field:"contact_type_id", value: obj.contact_type_id });

                this.existingDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.existingDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber          : function(){
            var self = this, obj = this.get("obj");

            this.numberDS.query({
                filter:[
                    { field:"contact_type_id", value:obj.contact_type_id }
                ],
                sort: { field:"number", dir:"desc" },
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.numberDS.view();

                var lastNo = 0;
                if(view.length>0){
                    lastNo = kendo.parseInt(view[0].number);
                }
                lastNo++;
                obj.set("number",kendo.toString(lastNo, "00000"));
            });
        },
        checkExistingTxn        : function(){
            var self = this, obj = this.get("obj");

            this.deleteDS.query({
                filter: { field:"contact_id", value: obj.id },
                page: 1,
                pageSize: 1
            }).then(function(e){
                var view = self.deleteDS.view();

                if(view.length>0){
                    self.set("isProtected", true);
                }else{
                    self.set("isProtected", false);
                }
            });
        },
        //Obj
        loadObj                 : function(id, contact_type_id){
            var self = this, para = [];

            if(id>0){
                para.push({ field:"id", value: id });
            }

            if(contact_type_id){
                para.push({ field:"contact_type_id", value: contact_type_id });
                para.push({ field:"is_pattern", value: 1 });
            }

            this.dataSource.query({
                filter: para,
                page: 1,
                pageSize: 100
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
                self.loadMap();
                self.checkExistingTxn();
            });
        },
        //Upload
        onSelect                : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files[0],
            obj = this.get("obj");

            var fileReader = new FileReader();
            fileReader.onload = function (event) {
                var mapImage = event.target.result;
                self.obj.set('image_url', mapImage);
            }
            fileReader.readAsDataURL(files.rawFile);

            // Check the extension of each file and abort the upload if it is not .jpg
            if (files.extension.toLowerCase() === ".jpg"
                || files.extension.toLowerCase() === ".jpeg"
                || files.extension.toLowerCase() === ".tiff"
                || files.extension.toLowerCase() === ".png"
                || files.extension.toLowerCase() === ".gif"){

                if(this.attachmentDS.total()>0){
                    var att = this.attachmentDS.at(0);
                    this.attachmentDS.remove(att);
                }

                var key = 'ITEM_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ files.name;

                this.attachmentDS.add({
                    user_id         : this.get("user_id"),
                    item_id         : obj.id,
                    type            : "Item",
                    name            : files.name,
                    description     : "",
                    key             : key,
                    url             : banhji.s3 + key,
                    size            : files.size,
                    created_at      : new Date(),

                    file            : files.rawFile
                });
            }else{
                alert("This type of file is not allowed to attach.");
            }
        },
        saveAttachment          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        addEmpty                : function(){
            this.dataSource.data([]);
            this.contactPersonDS.data([]);

            this.set("isEdit", false);
            this.set("isProtected", false);
            this.set("notDuplicateNumber", true);
            this.set("obj", null);

            this.dataSource.insert(0, {
                "country_id"            : 0,
                "user_id"               : 0,
                "contact_type_id"       : 6,
                "abbr"                  : "",
                "number"                : "",
                "surname"               : "",
                "name"                  : "",
                "gender"                : "M",
                "dob"                   : "",
                "phone"                 : "",
                "email"                 : "",
                "company"               : "",
                "vat_no"                : "",
                "memo"                  : "",
                "city"                  : "",
                "post_code"             : "",
                "address"               : "",
                "bill_to"               : "",
                "ship_to"               : "",
                "latitute"              : "",
                "longtitute"            : "",
                "credit_limit"          : 0,
                "locale"                : banhji.locale,
                "payment_term_id"       : 0,
                "payment_method_id"     : 0,
                "registered_date"       : new Date(),
                "account_id"            : 0,
                "ra_id"                 : 0,
                "tax_item_id"           : 0,
                "deposit_account_id"    : 0,
                "trade_discount_id"     : 0,
                "settlement_discount_id": 0,
                "is_pattern"            : 0,
                "status"                : 1,
                "image_url"             : banhji.no_image
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.typeChanges();
        },
        objSync                 : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, obj = this.get("obj");

            //Edit Mode
            if(this.get("isEdit")){
                //Contact Person has changes
                if(this.contactPersonDS.hasChanges()){
                    obj.set("dirty", true);
                }
            }

            //Attachment
            if(this.attachmentDS.total()>0){
                var att = this.attachmentDS.at(0);
                obj.set("image_url", att.url);
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Contact Person
                    $.each(self.contactPersonDS.data(), function(index, value) {
                        value.set("contact_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("item_id", data[0].id);
                    });
                }
                self.contactPersonDS.sync();
                self.saveAttachment();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else{
                    //Save New
                    self.addEmpty();
                }

                banhji.source.loadSuppliers();
            });
        },
        cancel                  : function(){
            this.dataSource.cancelChanges();
            this.contactPersonDS.cancelChanges();
            this.dataSource.data([]);
            this.contactPersonDS.data([]);
            this.set("contact_type_id", 0);

            banhji.userManagement.removeMultiTask("vendor");
        },
        delete                  : function(){
            var obj = this.get("obj");
            this.set("showConfirm",false);

            if(!obj.is_system==1){
                if(this.get("isProtected")){
                    alert("Sorry, this data is protected!");
                }else{
                    obj.set("deleted", 1);
                    this.dataSource.sync();

                    window.history.back();
                }
            }
        },
        openConfirm             : function(){
            this.set("showConfirm", true);
        },
        closeConfirm            : function(){
            this.set("showConfirm", false);
        },
        //Pattern
        typeChanges             : function(){
            var obj = this.get("obj");

            if(obj.contact_type_id && obj.isNew()){
                this.applyPattern();
                this.generateNumber();
            }
        },
        applyPattern            : function(){
            var self = this, obj = self.get("obj");

            this.patternDS.query({
                filter: [
                    { field:"contact_type_id", value: obj.contact_type_id },
                    { field:"is_pattern", value: 1 }
                ],
                page: 1,
                pageSize: 1
            }).then(function(data){
                var view = self.patternDS.view(),
                type = self.contactTypeDS.get(view[0].contact_type_id);

                if(view.length>0){
                    obj.set("country_id", view[0].country_id);
                    obj.set("abbr", type.abbr);
                    obj.set("gender", view[0].gender);
                    obj.set("company", view[0].company);
                    obj.set("vat_no", view[0].vat_no);
                    obj.set("memo", view[0].memo);
                    obj.set("city", view[0].city);
                    obj.set("post_code", view[0].post_code);
                    obj.set("address", view[0].address);
                    obj.set("bill_to", view[0].bill_to);
                    obj.set("ship_to", view[0].ship_to);
                    obj.set("payment_term_id", view[0].payment_term_id);
                    obj.set("payment_method_id", view[0].payment_method_id);
                    obj.set("credit_limit", view[0].credit_limit);
                    obj.set("locale", view[0].locale);
                    obj.set("account_id", view[0].account_id);
                    obj.set("ra_id", view[0].ra_id);
                    obj.set("tax_item_id", view[0].tax_item_id);
                    obj.set("deposit_account_id", view[0].deposit_account_id);
                    obj.set("trade_discount_id", view[0].trade_discount_id);
                    obj.set("settlement_discount_id", view[0].settlement_discount_id);
                }
            });
        }
    });
    // VENDOR FUNCTIONS
    banhji.purchaseOrder =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "item_lines"),
        balanceDS           : dataStore(apiUrl + "transactions/balance"),
        itemDS              : dataStore(apiUrl + "items"),
        itemPriceDS         : dataStore(apiUrl + "item_prices"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "Purchase_Order" }
        }),
        contactDS           : banhji.source.supplierDS,
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        categoryDS          : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: [
                { field:"item_type_id", value: 1 },
                { field:"id", operator:"neq", value: 5 },
                { field:"id", operator:"neq", value: 6 }
            ]
        }),
        itemGroupDS         : banhji.source.itemGroupDS,
        statusObj           : banhji.source.statusObj,
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthOptionList     : banhji.source.monthOptionList,
        monthList           : banhji.source.monthList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        isEdit              : false,
        saveDraft           : false,
        saveClose           : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        notDuplicateNumber  : true,
        recurring           : "",
        recurring_validate  : false,
        balance             : 0,
        total               : 0,
        barcode             : "",
        barcodeVisible      : false,
        category_id         : 0,
        item_group_id       : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Barcode
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                category_id = this.get("category_id"),
                item_group_id = this.get("item_group_id");

            if(item_group_id>0){
                para.push({ field:"number", value:item_group_id });
            }else{
                if(category_id>0){
                    para.push({ field:"category_id", value:category_id });
                }
            }

            this.itemDS.query({
                filter: para,
                page:1,
                pageSize: 10
            });

            this.set("category_id", 0);
            this.set("item_group_id", 0);
        },
        searchByBarcode     : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                barcode = this.get("barcode");

            if(barcode!==""){
                this.itemDS.query({
                    filter: { field: "barcode", value: barcode },
                    page:1,
                    pageSize: 1
                }).then(function(){
                    var view = self.itemDS.view();

                    if(view.length>0){
                        self.insertItem(view[0]);
                    }
                });

                this.set("barcode", "");
            }
        },
        addSearchItem       : function(e){
            var data = e.data;

            this.insertItem(data);
        },
        openBarcodeWindow   : function(){
            this.set("barcodeVisible", true);
        },
        closeBarcodeWindow  : function(){
            this.set("barcodeVisible", false);
        },
        insertItem      : function(data){
            var obj = this.get("obj"),
                rate = obj.rate / banhji.source.getRate(data.locale, new Date(obj.issued_date));

            var item_price = {
                measurement_id  : data.measurement_id,
                conversion_ratio: 1,
                measurement     : data.measurement.name
            };

            this.lineDS.insert(0, {
                transaction_id      : obj.id,
                tax_item_id         : 0,
                item_id             : data.id,
                assembly_id         : 0,
                measurement_id      : data.measurement_id,
                description         : data.sale_description,
                quantity            : 1,
                conversion_ratio    : 1,
                cost                : 0,
                price               : 0,
                amount              : 0,
                discount            : 0,
                discount_percentage : 0,
                tax                 : 0,
                rate                : rate,
                locale              : data.locale,
                movement            : 0,
                reference_no        : "",

                item                : data,
                item_price          : item_price,
                tax_item            : { id:"", name:"" },
                wht_account         : { id:"", name:"" }
            });
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");
            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Contact
        setContact          : function(contact){
            var obj = this.get("obj");

            obj.set("contact", contact);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
                obj.set("locale", contact.locale);
                obj.set("bill_to", contact.bill_to);
                obj.set("ship_to", contact.ship_to);

                this.setRate();
                this.loadBalance();
            }

            this.changes();
        },
        loadBalance         : function(){
            var self = this, obj = this.get("obj");

            this.balanceDS.query({
                filter:[
                    { field:"contact_id", value:obj.contact_id },
                    { field:"type", operator:"where_in", value:["Cash_Purchase", "Credit_Purchase"] }
                ]
            }).then(function(){
                var view = self.balanceDS.view(),
                    contact = obj.contact,
                    balance = view[0].amount,
                    creditAllowed = 0;

                if(contact.credit_limit > balance){
                    creditAllowed = contact.credit_limit - balance;
                }

                self.set("balance", kendo.toString(balance, "c", obj.locale));
                obj.set("credit_allowed", creditAllowed);
            });
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            //Item Lines
            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });
        },
        //Item
        addItem             : function(uid){
            var row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.purchase_description);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Item base price
            var item_price = {
                measurement_id  : item.measurement_id,
                conversion_ratio: 1,
                measurement     : item.measurement.name
            };
            row.set("item_price", item_price);
        },
        addItemCatalog      : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : 0,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : 0,

                        discount_percentage : 0,
                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" },
                        tax_item            : { id:"", name:"" }
                    });
                }
            });
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
                total = 0, subTotal = 0, discount =0, tax = 0, remaining = 0, amount_due = 0, itemIds = [];

            $.each(this.lineDS.data(), function(index, value) {
                var amt = value.quantity * value.cost;
                subTotal += amt;

                //Discount by line
                if(value.discount>0){
                    amt -= value.discount;
                    discount += value.discount;
                }

                //Tax by line
                if(value.tax_item_id>0){
                    var taxAmount = amt * value.tax_item.rate;

                    if(banhji.source.checkWHT(value.tax_item.tax_type_id) && value.wht_account_id==0){
                        tax -= taxAmount;
                    }else{
                        tax += taxAmount;
                    }

                    value.set("tax", taxAmount);
                }else{
                    value.set("tax", 0);
                }

                value.set("amount", amt);

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            //Total
            total = (subTotal + tax) - discount;

            //Warning over credit allowed
            if(obj.credit_allowed>0 && total>obj.credit_allowed){
                this.set("amtDueColor", "Gold");
            }else{
                this.set("amtDueColor", banhji.source.amtDueColor);
            }

            obj.set("sub_total", subTotal);
            obj.set("discount", discount);
            obj.set("tax", tax);
            obj.set("amount", total);

            this.set("total", kendo.toString(total, "c", obj.locale));
        },
        lineDSChanges       : function(arg){
            var self = banhji.purchaseOrder;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity" || arg.field=="cost" || arg.field=="discount"){
                    self.changes();
                }else if(arg.field=="item_price"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.item_price.measurement_id);
                    dataRow.set("conversion_ratio", dataRow.item_price.conversion_ratio);
                }else if(arg.field=="discount_percentage"){
                    var dataRow = arg.items[0],
                        percentageAmount = dataRow.quantity * dataRow.cost * dataRow.discount_percentage;

                    dataRow.set("discount", percentageAmount);
                }else if(arg.field=="tax_item"){
                    var dataRow = arg.items[0];

                    dataRow.set("tax_item_id", dataRow.tax_item.id);
                    dataRow.set("tax", 0);

                    self.changes();
                }
            }
        },
        //Segment
        segmentChanges      : function(e) {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        setStatus           : function(){
            var self = this,
                obj = this.get("obj"),
                statusObj = this.get("statusObj");

            statusObj.set("text", "");
            statusObj.set("date", "");
            statusObj.set("number", "");
            statusObj.set("url", "");

            switch(obj.status) {
                case 0:
                    statusObj.set("text", "open");
                    break;
                case 1:
                    statusObj.set("text", "used");

                    this.txnDS.query({
                        filter:{ field:"reference_id", value: obj.id },
                        sort: { field:"issued_date", dir:"desc" },
                        page:1,
                        pageSize:1
                    }).then(function(){
                        var view = self.txnDS.view();

                        if(view.length>0){
                            statusObj.set("date", kendo.toString(new Date(view[0].issued_date), "dd-MM-yyyy h:mm:ss tt"));
                            statusObj.set("number", view[0].number);

                            var url = "#/" + view[0].type.toLowerCase() + "/" + view[0].id;
                            statusObj.set("url", url);
                        }
                    });
                    break;
                case 2:
                    statusObj.set("text", "partialy used");
                    break;
                case 4:
                    statusObj.set("text", "draft");
                    break;
                default:
                    //Default here
            }
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [], referenceIds = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 100
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    self.set("total", kendo.toString(view[0].amount, "c2", view[0].locale));
                    self.setStatus();

                    self.lineDS.query({
                        filter: [
                            { field: "transaction_id", value: id },
                            { field: "assembly_id", value: 0 }
                        ]
                    });

                    self.attachmentDS.filter({ field: "transaction_id", value: id });
                });
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);
            this.set("amtDueColor", banhji.source.amtDueColor);

            //Set Date
            var duedate = new Date();
            duedate.setDate(duedate.getDate() + 30);

            this.dataSource.insert(0, {
                contact_id          : "",
                transaction_template_id : 11,
                reference_id        : "",
                recurring_id        : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                employee_id         : "",
                type                : "Purchase_Order",//Required
                number              : "",
                sub_total           : 0,
                amount              : 0,
                credit_allowed      : 0,
                discount            : 0,
                tax                 : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                due_date            : duedate,
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                reuse               : 0,
                status              : 0,
                segments            : [],
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:0, name:"" }
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.setRate();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                item_id             : "",
                assembly_id         : 0,
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio    : 0,
                cost                : 0,
                price               : 0,
                amount              : 0,
                discount            : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : 0,
                required_date       : "",
                reference_no        : "",

                discount_percentage : 0,
                item                : { id:"", name:"" },
                item_price          : { measurement_id:"", measurement:"" },
                tax_item            : { id:"", name:"" },
                wht_account         : { id:"", name:"" }
            });
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        removeRow           : function(e){
            var data = e.data;
            if(this.lineDS.total()>1){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");

            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));
            obj.set("due_date", kendo.toString(new Date(obj.due_date), "yyyy-MM-dd"));

            //Warning over credit allowed
            if(obj.credit_limit>0 && obj.amount>obj.credit_allowed){
                alert("Over credit allowed!");
            }

            this.removeEmptyRow();

            //Save Draft
            if(this.get("saveDraft")){
                obj.set("status", 4); //In progress
                obj.set("progress", "Draft");
                obj.set("is_journal", 0);//No Journal
            }

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Edit Mode
            if(obj.isNew()==false){
                //Use draft
                if(obj.status==4){
                    obj.set("status", 0);//Open
                    obj.set("progress", "");
                    obj.set("is_journal", 1);//Add Journal
                }
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                self.lineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveDraft") || self.get("saveClose")){
                    //Save Draft or Save Close
                    self.set("saveDraft", false);
                    self.set("saveClose", false);
                    self.cancel();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.clear();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear               : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("purchase_order");
        },
        cancel              : function(){
            this.clear();
            window.history.back();
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id },
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);
                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        validating          : function(){
            var result = true, nonItem = true;

            //Check select non item
            $.each(this.lineDS.data(), function(index, value){
                if(value.item_id>0){
                    nonItem = false;
                }
            });

            if(nonItem){
                $("#ntf1").data("kendoNotification").error("Please select at least one item!");

                result = false;
            }

            return result;
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("contact", view[0].contact);
                obj.set("contact_id", view[0].contact.id);
                obj.set("recurring_id", id);
                obj.set("employee_id", view[0].employee_id);//Sale Rep
                obj.set("job_id", view[0].job_id);
                obj.set("segments", view[0].segments);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
                obj.set("bill_to", view[0].bill_to);
                obj.set("ship_to", view[0].ship_to);

                // self.setContact(view[0].contact);
            });

            this.recurringLineDS.query({
                filter:[
                    { field: "transaction_id", value: id },
                    { field: "assembly_id", value: 0 }
                ]
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        tax_item_id         : value.tax_item_id,
                        item_id             : value.item_id,
                        measurement_id      : value.measurement_id,
                        description         : value.description,
                        quantity            : value.quantity,
                        cost                : value.cost,
                        price               : value.price,
                        amount              : value.amount,
                        discount            : value.discount,
                        rate                : value.rate,
                        locale              : value.locale,
                        movement            : 0,
                        required_date       : value.required_date,

                        item                : value.item,
                        item_price          : value.item_price,
                        tax_item            : value.tax_item,
                        wht_account         : value.wht_account
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.grn =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "item_lines"),
        referenceDS         : dataStore(apiUrl + "transactions"),
        referenceLineDS     : dataStore(apiUrl + "item_lines"),
        itemDS              : dataStore(apiUrl + "items"),
        itemPriceDS         : dataStore(apiUrl + "item_prices"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        categoryDS          : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: [
                { field:"item_type_id", value: 1 },
                { field:"id", operator:"neq", value: 5 },
                { field:"id", operator:"neq", value: 6 }
            ]
        }),
        itemGroupDS         : banhji.source.itemGroupDS,
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "GRN" }
        }),
        contactDS           : banhji.source.supplierDS,
        employeeDS          : banhji.source.employeeDS,
        statusObj           : banhji.source.statusObj,
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthOptionList     : banhji.source.monthOptionList,
        monthList           : banhji.source.monthList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        isEdit              : false,
        saveDraft           : false,
        saveClose           : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        notDuplicateNumber  : true,
        recurring           : "",
        recurring_validate  : false,
        enableRef           : false,
        total               : 0,
        barcode             : "",
        barcodeVisible      : false,
        category_id         : 0,
        item_group_id       : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Barcode
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                category_id = this.get("category_id"),
                item_group_id = this.get("item_group_id");

            if(item_group_id>0){
                para.push({ field:"number", value:item_group_id });
            }else{
                if(category_id>0){
                    para.push({ field:"category_id", value:category_id });
                }
            }

            this.itemDS.query({
                filter: para,
                page:1,
                pageSize: 10
            });

            this.set("category_id", 0);
            this.set("item_group_id", 0);
        },
        searchByBarcode     : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                barcode = this.get("barcode");

            if(barcode!==""){
                this.itemDS.query({
                    filter: { field: "barcode", value: barcode },
                    page:1,
                    pageSize: 1
                }).then(function(){
                    var view = self.itemDS.view();

                    if(view.length>0){
                        self.insertItem(view[0]);
                    }
                });

                this.set("barcode", "");
            }
        },
        addSearchItem       : function(e){
            var data = e.data;

            this.insertItem(data);
        },
        openBarcodeWindow   : function(){
            this.set("barcodeVisible", true);
        },
        closeBarcodeWindow  : function(){
            this.set("barcodeVisible", false);
        },
        insertItem      : function(data){
            var obj = this.get("obj"),
                rate = obj.rate / banhji.source.getRate(data.locale, new Date(obj.issued_date));

            var item_price = {
                measurement_id  : data.measurement_id,
                price           : kendo.parseFloat(data.price),
                conversion_ratio: 1,
                measurement     : data.measurement.name
            };

            this.lineDS.insert(0, {
                transaction_id      : obj.id,
                tax_item_id         : "",
                item_id             : data.id,
                assembly_id         : 0,
                measurement_id      : data.measurement_id,
                description         : data.sale_description,
                quantity            : 0,
                conversion_ratio    : 1,
                price               : data.price,
                amount              : 0,
                rate                : rate,
                locale              : data.locale,
                movement            : 0,

                item                : data,
                item_price          : data.measurement,
                bin_locations       : { id:0, number:"" },
                new_bin_locations   : { id:0, number:"" }
            });
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Contact
        setContact          : function(contact){
            var obj = this.get("obj");

            obj.set("contact", contact);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
                obj.set("locale", contact.locale);
                obj.set("bill_to", contact.bill_to);
                obj.set("ship_to", contact.ship_to);

                this.setRate();
                this.loadReference();
            }

            this.changes();
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            //Item Lines
            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });
        },
        //Item
        addItem             : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Item base price
            var item_price = {
                measurement_id  : item.measurement_id,
                price           : kendo.parseFloat(item.price),
                conversion_ratio: 1,
                measurement     : item.measurement.name
            };
            row.set("item_price", item_price);
        },
        addItemCatalog      : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : 0,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : 0,

                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" }
                    });
                }
            });
        },
        changes             : function(){
            var self = this,
                obj = this.get("obj"),
                total = 0;

            $.each(this.lineDS.data(), function(index, value) {
                total += value.quantity;
            });

            obj.set("amount", total);

            this.set("total", kendo.toString(total, "n0"));
        },
        lineDSChanges       : function(arg){
            var self = banhji.grn;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity"){
                    self.changes();
                }else if(arg.field=="item_price"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.item_price.measurement_id);
                    dataRow.set("conversion_ratio", dataRow.item_price.conversion_ratio);
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        setStatus           : function(){
            var self = this,
                obj = this.get("obj"),
                statusObj = this.get("statusObj");

            statusObj.set("text", "");
            statusObj.set("date", "");
            statusObj.set("number", "");
            statusObj.set("url", "");

            switch(obj.status) {
                case 0:
                    statusObj.set("text", "open");
                    break;
                case 1:
                    statusObj.set("text", "Received");

                    this.txnDS.query({
                        filter:{ field:"reference_id", value: obj.id },
                        sort: { field:"issued_date", dir:"desc" },
                        page:1,
                        pageSize:1
                    }).then(function(){
                        var view = self.txnDS.view();

                        if(view.length>0){
                            statusObj.set("date", kendo.toString(new Date(view[0].issued_date), "dd-MM-yyyy h:mm:ss tt"));
                            statusObj.set("number", view[0].number);

                            var url = "#/" + view[0].type.toLowerCase() + "/" + view[0].id;
                            statusObj.set("url", url);
                        }
                    });
                    break;
                case 4:
                    statusObj.set("text", "draft");
                    break;
                default:
                    //Default here
            }
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 100
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    self.set("total", kendo.toString(view[0].amount, "n0"));
                    self.setStatus();

                    self.lineDS.query({
                        filter: [
                            { field: "transaction_id", value: id },
                            { field: "assembly_id", value: 0 }
                        ]
                    });
                    self.attachmentDS.filter({ field: "transaction_id", value: id });
                    self.loadReference();
                });
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);

            this.dataSource.insert(0, {
                transaction_template_id : 5,
                contact_id          : "",
                reference_id        : "",
                recurring_id        : "",
                user_id             : this.get("user_id"),
                type                : "GRN",//Required
                number              : "",
                sub_total           : 0,
                amount              : 0,
                discount            : 0,
                tax                 : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                due_date            : new Date(),
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                status              : 0,
                segments            : [],
                //Concrete
                driver_id           : 0,
                driver_name         : "",
                truck_number        : "",
                time_batched        : "",
                time_of_discharge   : "",
                time_of_completion  : "",
                cubic_meter         : "",
                total_batch         : "",
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:0, name:"" },
                driver              : { id:0, name:"" },
                references          : []
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.setRate();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                item_id             : "",
                measurement_id      : 0,
                description         : "",
                quantity            : 0,
                conversion_ratio    : 1,
                cost                : 0,
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : 0,

                item                : { id:"", name:"" },
                item_price          : { measurement_id:"", measurement:"" },
                bin_locations       : { id:0, number:"" },
                new_bin_locations   : { id:0, number:"" }
            });
        },
        removeRow           : function(e){
            var d = e.data;
            if(this.lineDS.total()>1){
                this.lineDS.remove(d);
                this.changes();
            }
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");

            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));
            obj.set("due_date", kendo.toString(new Date(obj.due_date), "yyyy-MM-dd"));
            obj.set("time_batched", kendo.toString(new Date(obj.time_batched), "HH:mm:ss"));
            obj.set("time_of_discharge", kendo.toString(new Date(obj.time_of_discharge), "HH:mm:ss"));
            obj.set("time_of_completion", kendo.toString(new Date(obj.time_of_completion), "HH:mm:ss"));

            this.removeEmptyRow();

            //Save Draft
            if(this.get("saveDraft")){
                obj.set("status", 4); //In progress
                obj.set("progress", "Draft");
                obj.set("is_journal", 0);//No Journal
            }

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Edit Mode
            if(obj.isNew()==false){
                //Use draft
                if(obj.status==4){
                    obj.set("status", 0);//Open
                    obj.set("progress", "");
                    obj.set("is_journal", 1);//Add Journal
                }
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                self.lineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveDraft") || self.get("saveClose")){
                    //Save Draft or Save Close
                    self.set("saveDraft", false);
                    self.set("saveClose", false);
                    self.cancel();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.clear();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear               : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("grn");
        },
        cancel              : function(){
            this.clear();
            window.history.back();
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id },
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);
                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        validating          : function(){
            var result = true, nonItem = true;

            //Check select non item
            $.each(this.lineDS.data(), function(index, value){
                if(value.item_id>0){
                    nonItem = false;
                }
            });

            if(nonItem){
                $("#ntf1").data("kendoNotification").error("Please select at least one item!");

                result = false;
            }

            return result;
        },
        //Reference
        loadReference       : function(){
            var obj = this.get("obj");

            if(obj.contact_id>0){
                this.referenceDS.filter([
                    { field: "contact_id", value: obj.contact_id },
                    { field: "type", operator:"where_in", value: ["Purchase_Order", "Cash_Purchase", "Credit_Purchase"] },
                    { field: "status", value:0 },
                    { field: "reuse", operator:"or_where", value:1 },
                    { field: "due_date >=", value: kendo.toString(obj.issued_date, "yyyy-MM-dd") }
                ]);
            }
        },
        referenceChanges    : function(e){
            var self = this,
                isExisting = false,
                obj = this.get("obj"),
                reference_id = this.get("reference_id");

            $.each(obj.references, function(index, value){
                if(value.id==reference_id){
                    isExisting = true;

                    return false;
                }
            });

            if(reference_id>0 && isExisting==false){
                var reference = this.referenceDS.get(reference_id);

                obj.references.push(reference);

                this.referenceLineDS.query({
                    filter:[
                        { field:"transaction_id", value: reference_id },
                        { field: "assembly_id", value: 0 }
                    ]
                }).then(function(){
                    var view = self.referenceLineDS.view();

                    $.each(view, function(index, value){
                        self.lineDS.insert(0, {
                            transaction_id      : 0,
                            reference_id        : reference.id,
                            item_id             : value.item_id,
                            tax_item_id         : value.tax_item_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : value.cost,
                            amount              : value.amount,
                            discount            : value.discount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : 0,
                            reference_no        : reference.number,

                            item                : value.item,
                            item_price          : value.item_price,
                            bin_locations       : { id:0, number:"" },
                            new_bin_locations   : { id:0, number:"" }
                        });
                    });

                    self.changes();
                });
            }

            this.set("reference_id", 0);
        },
        referenceRemoveRow  : function(e){
            var data = e.data,
                obj = this.get("obj"),
                index = obj.references.indexOf(data);

            obj.references.splice(index, 1);
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("contact", view[0].contact);
                obj.set("contact_id", view[0].contact.id);
                obj.set("recurring_id", id);
                obj.set("job_id", view[0].job_id);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
                obj.set("bill_to", view[0].bill_to);
                obj.set("ship_to", view[0].ship_to);

                // self.setContact(view[0].contact);
            });

            this.recurringLineDS.query({
                filter:[
                    { field: "transaction_id", value: id },
                    { field: "assembly_id", value: 0 }
                ]
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        tax_item_id         : value.tax_item_id,
                        item_id             : value.item_id,
                        measurement_id      : value.measurement_id,
                        description         : value.description,
                        quantity            : value.quantity,
                        cost                : value.cost,
                        amount              : value.amount,
                        rate                : value.rate,
                        locale              : value.locale,
                        movement            : 0,

                        item                : value.item,
                        item_price          : value.item_price,
                        bin_locations       : { id:0, number:"" },
                        new_bin_locations   : { id:0, number:"" }
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.vendorDeposit =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        lineDS              : dataStore(apiUrl + "account_lines"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        referenceLineDS     : dataStore(apiUrl + "account_lines"),
        referenceDS         : dataStore(apiUrl + "transactions"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "account_lines"),
        paymentMethodDS     : dataStore(apiUrl + "payment_methods"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "Deposit" }
        }),
        accountDS           : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 10 },//Cash
                    { field: "account_type_id", value: 34 },//Retained Earning
                    { field: "account_type_id", value: 36 },//Expense
                    { field: "account_type_id", value: 37 },
                    { field: "account_type_id", value: 38 },
                    { field: "account_type_id", value: 40 },
                    { field: "account_type_id", value: 41 },
                    { field: "account_type_id", value: 42 },
                    { field: "account_type_id", value: 43 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        depositAccountDS    : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 14 },
                    { field: "account_type_id", value: 21 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        contactDS           : banhji.source.supplierDS,
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthList           : banhji.source.monthList,
        monthOptionList     : banhji.source.monthOptionList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        isEdit              : false,
        saveClose           : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        notDuplicateNumber  : true,
        statusSrc           : "",
        recurring           : "",
        recurring_validate  : false,
        enableRef           : false,
        total               : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Contact
        setContact          : function(contact){
            var obj = this.get("obj");

            obj.set("contact", contact);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
                obj.set("locale", contact.locale);
                obj.set("account_id", contact.deposit_account_id);

                this.setRate();
                this.loadReference();
            }

            this.changes();
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            $.each(this.lineDS.data(), function(index, value){
                value.set("rate", rate);
                value.set("locale", obj.locale);
            });
        },
        //Segment
        segmentChanges      : function(e) {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        //Obj
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.attachmentDS.data([]);
            this.journalLineDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);

            this.dataSource.insert(0, {
                transaction_template_id : 7,
                recurring_id        : "",
                contact_id          : "",
                account_id          : "",
                user_id             : this.get("user_id"),
                reference_id        : "",
                type                : "Vendor_Deposit", //required
                number              : "",
                amount              : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                memo                : "",
                memo2               : "",
                segments            : [],
                is_journal          : 1,
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:0, name:"" }
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);

            this.setRate();
            this.addRow();
            this.generateNumber();
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                payment_method_id   : 0,
                account_id          : "",
                contact_id          : "",
                description         : "",
                reference_no        : "",
                segments            : [],
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale
            });
        },
        remove              : function(e){
            var d = e.data;
            this.lineDS.remove(d);
            this.changes();
        },
        changes             : function(){
            var obj = this.get("obj");

            if(this.lineDS.total()>0){
                var sum = 0;

                $.each(this.lineDS.data(), function(index, value) {
                    sum += value.amount;
                });

                this.set("total", kendo.toString(sum, "c", obj.locale));
                obj.set("amount", sum);
            }else{
                this.set("total", 0);
                obj.set("amount", 0);
            }
        },
        loadObj             : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.dataSource.view();

                    if(view.length>0){
                        self.set("obj", view[0]);
                    }

                    self.lineDS.query({
                        filter:{ field: "transaction_id", value: id }
                    });

                    self.journalLineDS.query({
                        filter:{ field: "transaction_id", value: id }
                    });

                    self.referenceDS.filter({ field: "id", value: view[0].reference_id });
                });
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");
            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Mode
            if(obj.isNew()==false){
                //Line has changed
                if(this.lineDS.hasChanges() && obj.is_recurring==0){
                    $.each(this.journalLineDS.data(), function(index, value){
                        value.set("deleted", 1);
                    });

                    this.addJournal(obj.id);
                }
            }

            //Reference
            if(obj.reference_id>0){
                var ref = this.referenceDS.get(obj.reference_id);
                ref.set("deposit", obj.amount);
                this.referenceDS.sync();
            }else{
                obj.set("reference_id", 0);
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                //Journal
                if(data[0].is_recurring==0 && data[0].is_journal==1){
                    self.addJournal(data[0].id);
                }

                self.lineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.cancel();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel              : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("vendor_deposit");
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id }
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);
                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        validating          : function(){
            var result = true, nonItem = true;

            //Check select non item
            $.each(this.lineDS.data(), function(index, value){
                if(value.account_id>0){
                    nonItem = false;
                }
            });

            if(nonItem){
                $("#ntf1").data("kendoNotification").error("Please select at least one account!");

                result = false;
            }

            return result;
        },
        //Journal
        addJournal          : function(transaction_id){
            var self = this,
            sum =0,
            obj = this.get("obj");

            //Edit Mode
            if(obj.isNew()==false){
                //Delete previous journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });
            }

            //Cash account on CR
            $.each(this.lineDS.data(), function(index, value){
                sum += value.amount;
                self.journalLineDS.add({
                    transaction_id      : transaction_id,
                    account_id          : value.account_id,
                    contact_id          : value.contact_id,
                    description         : "",
                    reference_no        : value.reference_no,
                    segments            : obj.segments,
                    dr                  : 0,
                    cr                  : value.amount,
                    rate                : value.rate,
                    locale              : value.locale
                });
            });

            //Deposit on DR
            this.journalLineDS.add({
                transaction_id      : transaction_id,
                account_id          : obj.account_id,
                contact_id          : obj.contact_id,
                description         : "",
                reference_no        : "",
                segments            : obj.segments,
                dr                  : sum,
                cr                  : 0,
                rate                : obj.rate,
                locale              : obj.locale
            });

            this.journalLineDS.sync();
        },
        //Reference
        loadReference       : function(){
            var obj = this.get("obj");

            if(obj.contact_id>0){
                this.set("enableRef", true);

                this.referenceDS.filter([
                    { field: "contact_id", value: obj.contact_id },
                    { field: "deposit", value: 0 },
                    { field: "type", value: "Purchase_Order" },
                    { field: "status", value:0 },
                    { field: "reuse", operator:"or_where", value:1 },
                    { field: "due_date >=", value: kendo.toString(obj.issued_date, "yyyy-MM-dd") }
                ]);
            }else{
                this.set("enableRef", false);
                obj.set("reference_id", "");
            }
        },
        referenceChanges    : function(){
            var obj = this.get("obj");

            if(obj.reference_id>0){
                var reference = this.referenceDS.get(obj.reference_id);

                obj.set("reference_no", reference.number);
                obj.set("segments", reference.segments);
                obj.set("amount", reference.amount);

                this.lineDS.data([]);
                this.lineDS.add({
                    transaction_id      : obj.id,
                    reference_id        : reference.id,
                    account_id          : "",
                    description         : "",
                    reference_no        : reference.number,
                    amount              : reference.amount,
                    rate                : reference.rate,
                    locale              : reference.locale
                });
                this.set("total", kendo.toString(reference.amount, "c", reference.locale));
            }
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("recurring_id", id);
                obj.set("contact", view[0].contact);
                obj.set("contact_id", view[0].contact.id);
                obj.set("account_id", view[0].account_id);
                obj.set("segments", view[0].segments);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
                obj.set("contact", view[0].contact);

                // self.setContact(view[0].contact);
            });

            this.recurringLineDS.query({
                filter: { field:"transaction_id", value:id },
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        payment_method_id   : value.payment_method_id,
                        account_id          : value.account_id,
                        contact_id          : value.contact_id,
                        description         : value.description,
                        reference_no        : value.reference_no,
                        segments            : value.segments,
                        amount              : value.amount,
                        rate                : value.rate,
                        locale              : value.locale
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.purchase =  kendo.observable({
        lang                        : langVM,
        dataSource                  : dataStore(apiUrl + "transactions"),
        lineDS                      : dataStore(apiUrl + "item_lines"),
        txnDS                       : dataStore(apiUrl + "transactions"),
        numberDS                    : dataStore(apiUrl + "transactions/number"),
        accountLineDS               : dataStore(apiUrl + "account_lines"),
        journalLineDS               : dataStore(apiUrl + "journal_lines"),
        additionalCostDS            : dataStore(apiUrl + "transactions"),
        recurringDS                 : dataStore(apiUrl + "transactions"),
        recurringLineDS             : dataStore(apiUrl + "item_lines"),
        recurringAccountLineDS      : dataStore(apiUrl + "account_lines"),
        recurringAdditionalCostDS   : dataStore(apiUrl + "transactions"),
        referenceDS                 : dataStore(apiUrl + "transactions"),
        referenceLineDS             : dataStore(apiUrl + "item_lines"),
        attachmentDS                : dataStore(apiUrl + "attachments"),
        depositDS                   : dataStore(apiUrl + "transactions"),
        balanceDS                   : dataStore(apiUrl + "transactions/balance"),
        itemDS                      : dataStore(apiUrl + "items"),
        itemPriceDS                 : dataStore(apiUrl + "item_prices"),
        assemblyDS                  : dataStore(apiUrl + "item_assemblies"),
        segmentDS                   : dataStore(apiUrl + "segments"),
        segItemDS                   : dataStore(apiUrl + "segments/item"),
        segmentItemDS               : dataStore(apiUrl + "segments/item"),
        jobDS                       : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        accountDS                   : new kendo.data.DataSource({
            data: banhji.source.accountList
        }),
        whtAccountDS                : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 13 },//Inventory
                    { field: "account_type_id", value: 16 },//Fixed Asset
                    { field: "account_type_id", value: 17 },//Intangible Assets
                    { field: "account_type_id", value: 36 },//Expense
                    { field: "account_type_id", value: 37 },
                    { field: "account_type_id", value: 38 },
                    { field: "account_type_id", value: 40 },
                    { field: "account_type_id", value: 41 },
                    { field: "account_type_id", value: 42 },
                    { field: "account_type_id", value: 43 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        additionalCostAccountDS     : new kendo.data.DataSource({
            data: banhji.source.accountList
        }),
        txnTemplateDS               : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{
                filters: [
                    { field: "type", value: "Purchase" }
                ]
            }
        }),
        taxItemDS                   : new kendo.data.DataSource({
            data: banhji.source.taxList,
            filter:{
                logic: "or",
                filters: [
                    { field: "tax_type_id", value: 1 },//Supplier Tax
                    { field: "tax_type_id", value: 2 },
                    { field: "tax_type_id", value: 3 },
                    { field: "tax_type_id", value: 9 }
                ]
            },
            sort: [
                { field: "tax_type_id", dir: "asc" },
                { field: "name", dir: "asc" }
            ]
        }),
        categoryDS                  : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: [
                { field:"item_type_id", value: 1 },
                { field:"id", operator:"neq", value: 5 },
                { field:"id", operator:"neq", value: 6 }
            ]
        }),
        itemGroupDS                 : banhji.source.itemGroupDS,
        paymentTermDS               : banhji.source.paymentTermDS,
        paymentMethodDS             : banhji.source.paymentMethodDS,
        contactDS                   : banhji.source.supplierDS,
        additionalContactDS         : banhji.source.supplierDS,
        statusObj                   : banhji.source.statusObj,
        amtDueColor                 : banhji.source.amtDueColor,
        confirmMessage              : banhji.source.confirmMessage,
        frequencyList               : banhji.source.frequencyList,
        monthOptionList             : banhji.source.monthOptionList,
        monthList                   : banhji.source.monthList,
        weekDayList                 : banhji.source.weekDayList,
        dayList                     : banhji.source.dayList,
        showMonthOption             : false,
        showMonth                   : false,
        showWeek                    : false,
        showDay                     : false,
        obj                         : null,
        additCostObj                : null,
        isEdit                      : false,
        saveDraft                   : false,
        saveClose                   : false,
        savePrint                   : false,
        saveRecurring               : false,
        showConfirm                 : false,
        notDuplicateNumber          : true,
        recurring                   : "",
        recurring_validate          : false,
        isCash                      : true,
        isAdditCostCash             : true,
        windowVisible               : false,
        balance                     : 0,
        total                       : 0,
        amount_due                  : 0,
        total_deposit               : 0,
        reference_id                : 0,
        additCostCurrency           : "",
        barcode                     : "",
        barcodeVisible              : false,
        category_id                 : 0,
        item_group_id               : 0,
        user_id                     : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Barcode
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                category_id = this.get("category_id"),
                item_group_id = this.get("item_group_id");

            if(item_group_id>0){
                para.push({ field:"number", value:item_group_id });
            }else{
                if(category_id>0){
                    para.push({ field:"category_id", value:category_id });
                }
            }

            this.itemDS.query({
                filter: para,
                page:1,
                pageSize: 10
            });

            this.set("category_id", 0);
            this.set("item_group_id", 0);
        },
        searchByBarcode     : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                barcode = this.get("barcode");

            if(barcode!==""){
                this.itemDS.query({
                    filter: { field: "barcode", value: barcode },
                    page:1,
                    pageSize: 1
                }).then(function(){
                    var view = self.itemDS.view();

                    if(view.length>0){
                        self.insertItem(view[0]);
                    }
                });

                this.set("barcode", "");
            }
        },
        addSearchItem       : function(e){
            var data = e.data;

            this.insertItem(data);
        },
        openBarcodeWindow   : function(){
            this.set("barcodeVisible", true);
        },
        closeBarcodeWindow  : function(){
            this.set("barcodeVisible", false);
        },
        insertItem      : function(data){
            var obj = this.get("obj"),
                rate = obj.rate / banhji.source.getRate(data.locale, new Date(obj.issued_date));

            var item_price = {
                measurement_id  : data.measurement_id,
                conversion_ratio: 1,
                measurement     : data.measurement.name
            };

            this.lineDS.insert(0, {
                transaction_id      : obj.id,
                tax_item_id         : 0,
                item_id             : data.id,
                assembly_id         : 0,
                measurement_id      : data.measurement_id,
                description         : data.purchase_description,
                quantity            : 1,
                conversion_ratio    : 1,
                cost                : 0,
                price               : 0,
                amount              : 0,
                discount            : 0,
                discount_percentage : 0,
                tax                 : 0,
                rate                : rate,
                locale              : data.locale,
                movement            : 1,
                reference_no        : "",

                item                : data,
                item_price          : item_price,
                tax_item            : { id:"", name:"" },
                wht_account         : { id:"", name:"" }
            });
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Deposit
        loadDeposit         : function(){
            var self = this, obj = this.get("obj");

            //Deposits on Edit Mode
            if(this.get("isEdit")){
                this.depositDS.filter([
                    { field:"type", value:"Vendor_Deposit" },
                    { field:"reference_id", value:obj.id }
                ]);
            }

            if(obj.contact_id>0){
                this.txnDS.query({
                    filter:[
                        { field:"amount", operator:"select_sum", value:"amount" },
                        { field:"contact_id", value: obj.contact_id },
                        { field:"type", value: "Vendor_Deposit" }
                    ]
                }).then(function(){
                    var view = self.txnDS.view();

                    self.set("total_deposit", view[0].amount + obj.deposit);
                });
            }
        },
        addDeposit          : function(id){
            var obj = this.get("obj");

            this.depositDS.data([]);

            if(obj.deposit>0){
                this.depositDS.add({
                    contact_id          : obj.contact_id,
                    reference_id        : id,
                    user_id             : this.get("user_id"),
                    type                : "Vendor_Deposit",
                    amount              : obj.deposit*-1,
                    rate                : obj.rate,
                    locale              : obj.locale,
                    issued_date         : obj.issued_date
                });
            }
        },
        saveDeposit         : function(id){
            var obj = this.get("obj");

            if(this.get("isEdit")){
                if(this.depositDS.total()>0){
                    var deposit = this.depositDS.at(0);
                    deposit.set("amount", obj.deposit*-1);
                }else{
                    this.addDeposit(id);
                }
            }else{
                this.addDeposit(id);
            }

            this.depositDS.sync();
        },
        //Contact
        setContact          : function(contact){
            var obj = this.get("obj");

            obj.set("contact", contact);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
                obj.set("account_id", contact.account_id);
                obj.set("payment_term_id", contact.payment_term_id);
                obj.set("payment_method_id", contact.payment_method_id);
                obj.set("locale", contact.locale);
                obj.set("bill_to", contact.bill_to);
                obj.set("ship_to", contact.ship_to);

                this.setRate();
                this.loadDeposit();
                this.loadBalance();
                this.loadReference();
            }

            this.changes();
        },
        loadBalance         : function(){
            var self = this, obj = this.get("obj");

            this.balanceDS.query({
                filter:[
                    { field:"contact_id", value:obj.contact_id },
                    { field:"type", operator:"where_in", value:["Cash_Purchase", "Credit_Purchase"] }
                ]
            }).then(function(){
                var view = self.balanceDS.view(),
                    contact = obj.contact,
                    balance = view[0].amount,
                    creditAllowed = 0;

                if(contact.credit_limit > balance){
                    creditAllowed = contact.credit_limit - balance;
                }

                self.set("balance", kendo.toString(balance, "c", obj.locale));
                obj.set("credit_allowed", creditAllowed);
            });
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            //Item Lines
            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });

            //Account Line
            $.each(this.accountLineDS.data(), function(index, value){
                value.set("rate", rate);
                value.set("locale", obj.locale);
            });
        },
        //Segments
        addSegmentItem      : function(){
            var obj = this.get("obj"),
                notExisting = true,
                segment_id = this.get("segment_id"),
                segmentitem_id = this.get("segmentitem_id");

            if(segment_id && segmentitem_id){
                $.each(this.segmentItemDS.data(), function(index, value){
                    if(value.segment_id==segment_id){
                        notExisting = false;

                        return false;
                    }
                });

                if(notExisting){
                    var segments = this.segmentDS.get(segment_id),
                        segmentitems = this.segItemDS.get(segmentitem_id);

                    this.segmentItemDS.add({
                        id : segmentitems.id,
                        segment_id: segment_id,
                        code: segmentitems.code,
                        name: segmentitems.name,
                        segment: { id : segment_id, name : segments.name}
                    });
                }else{
                    $("#ntf1").data("kendoNotification").warning("This segment is already selected!");
                }
            }

            this.set("segment_id", ""),
            this.set("segmentitem_id", "");
        },
        //Additional Cost
        additCostContactChanges: function(){
            var additCostObj = this.get("additCostObj");

            if(additCostObj.contact){
                var contact = additCostObj.contact,
                    code = banhji.source.getCurrencyCode(contact.locale);

                additCostObj.set("contact_id", contact.id);
                additCostObj.set("locale", contact.locale);
                this.set("additCostCurrency", code);
                this.additCostSetRate();
            }
        },
        additCostTypeChanges: function(){
            var additCostObj = this.get("additCostObj");

            if(additCostObj.type=="Cash_Purchase"){
                this.set("isAdditCostCash", true);

                this.additionalCostAccountDS.filter({ field:"account_type_id", value: 10 });
            }else{
                this.set("isAdditCostCash", false);

                this.additionalCostAccountDS.filter({
                    logic: "or",
                    filters: [
                      { field: "account_type_id", value: 23 },
                      { field: "account_type_id", value: 24 }
                    ]
                });
            }

            additCostObj.set("account_id", 0);
        },
        additCostSetRate: function(){
            var additCostObj = this.get("additCostObj"),
                rate = banhji.source.getRate(additCostObj.locale, new Date(additCostObj.issued_date));

                additCostObj.set("rate", rate);
        },
        windowCreate        : function(){
            var self = this,
                obj = this.get("obj"),
                additCostObj = this.get("additCostObj");

            this.additionalCostAccountDS.filter({ field:"account_type_id", value:10 });

            this.additionalCostDS.insert(0, {
                contact_id          : "",
                account_id          : 1,
                payment_term_id     : 0,
                reference_id        : obj.id,
                recurring_id        : "",
                tax_item_id         : "",
                wht_account_id      : "",
                user_id             : this.get("user_id"),
                reference_no        : "",
                type                : "Cash_Purchase",//Required
                sub_total           : 0,
                amount              : 0,
                tax                 : 0,
                rate                : 1,
                locale              : obj.locale,
                issued_date         : new Date(),
                due_date            : new Date(),
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                status              : 0,
                segments            : [],
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:0, name:"" }
            });

            var additCostObj = this.additionalCostDS.at(0);
            this.set("additCostObj", additCostObj);
            this.additCostSetRate();

            // Apply additional cost to item line
            $.each(this.lineDS.data(), function(index, value) {
                if(value.item_id>0){
                    if(value.item.item_type_id==1){
                        value.set("additional_applied", true);
                    }
                }
            });

            this.set("windowVisible", true);
        },
        windowEdit          : function(e){
            var data = e.data;

            if(data.type=="Cash_Purchase"){
                this.set("isAdditCostCash", true);

                this.additionalCostAccountDS.filter({ field:"account_type_id", value: 10 });
            }else{
                this.set("isAdditCostCash", false);

                this.additionalCostAccountDS.filter({
                    logic: "or",
                    filters: [
                      { field: "account_type_id", value: 23 },
                      { field: "account_type_id", value: 24 }
                    ]
                });
            }

            this.set("additCostObj", data);
            this.set("windowVisible", true);
        },
        windowSave          : function(){
            this.set("windowVisible", false);
        },
        windowDiscard       : function(){
            var additCostObj = this.get("additCostObj"),
                index = this.additionalCostDS.indexOf(additCostObj),
                selected = this.additionalCostDS.at(index);

            this.additionalCostDS.remove(selected);
            this.changes();

            this.set("windowVisible", false);
        },
        windowClose         : function(){
            this.set("windowVisible", false);
        },
        //Item
        addItem             : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Item base price
            var item_price = {
                measurement_id  : item.measurement_id,
                conversion_ratio: 1,
                measurement     : item.measurement.name
            };
            row.set("item_price", item_price);
        },
        addItemCatalog      : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            var catalogList = [];
            $.each(item.catalogs, function(index, value){
                catalogList.push(value);
            });

            this.itemDS.query({
                filter: { field:"id", operator:"where_in", value: catalogList }
            }).then(function(){
                var view = self.itemDS.view();

                $.each(view, function(index, value){
                    var rate = obj.rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : value.id,
                        measurement_id      : 0,
                        description         : value.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : 0,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : value.locale,
                        movement            : 1,

                        discount_percentage : 0,
                        item                : value,
                        measurement         : { measurement_id:"", measurement:"" },
                        tax_item            : { id:"", name:"" },
                        wht_account         : { id:"", name:"" }
                    });
                });

            });
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                wht_account_id      : "",
                item_id             : "",
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio    : 1,
                cost                : 0,
                amount              : 0,
                discount            : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                additional_cost     : 0,
                additional_applied  : false,
                movement            : 1,
                reference_no        : "",

                discount_percentage : 0,
                item                : { id:"", name:"" },
                item_price          : { measurement_id:"", measurement:"" },
                tax_item            : { id:"", name:"" },
                wht_account         : { id:"", name:"" }
            });
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeRow           : function(e){
            var d = e.data;

            this.lineDS.remove(d);
            this.changes();
        },
        removeEmptyRow      : function(){
            var row, i;

            //Item
            var item = this.lineDS.data();
            for(i=item.length-1; i>=0; i--){
                row = item[i];

                if (row.item_id==0) {
                    this.lineDS.remove(row);
                }
            }

            //Account
            var account = this.accountLineDS.data();
            for(i=account.length-1; i>=0; i--){
                row = account[i];

                if (row.account_id==0) {
                    this.accountLineDS.remove(row);
                }
            }
        },
        itemLineDSChanges       : function(arg){
            var self = banhji.purchase;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity" || arg.field=="cost" || arg.field=="discount" || arg.field=="additional_applied"){
                    self.changes();
                }else if(arg.field=="item_price"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.item_price.measurement_id);
                    dataRow.set("conversion_ratio", dataRow.item_price.conversion_ratio);
                }else if(arg.field=="discount_percentage"){
                    var dataRow = arg.items[0],
                        percentageAmount = dataRow.quantity * dataRow.cost * dataRow.discount_percentage;

                    dataRow.set("discount", percentageAmount);
                }else if(arg.field=="tax_item"){
                    var dataRow = arg.items[0];

                    dataRow.set("tax_item_id", dataRow.tax_item.id);
                    dataRow.set("tax", 0);

                    self.changes();
                }else if(arg.field=="wht_account"){
                    var dataRow = arg.items[0];

                    dataRow.set("wht_account_id", dataRow.wht_account.id);

                    self.changes();
                }
            }
        },
        //Account
        addRowAccount       : function(){
            var obj = this.get("obj");

            this.accountLineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                wht_account_id      : "",
                account_id          : "",
                description         : "",
                reference_no        : "",
                segments            : [],
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,

                account             : { id:"", name:"" },
                tax_item            : { id:"", name:"" },
                wht_account         : { id:"", name:"" }
            });
        },
        addExtraRowAccount      : function(uid){
            var row = this.accountLineDS.getByUid(uid),
                index = this.accountLineDS.indexOf(row);

            if(index==this.accountLineDS.total()-1){
                this.addRowAccount();
            }
        },
        removeRowAccount    : function(e){
            var d = e.data;

            this.accountLineDS.remove(d);
            this.changes();
        },
        accountLineDSChanges        : function(arg){
            var self = banhji.purchase;

            if(arg.field){
                if(arg.field=="account"){
                    var dataRow = arg.items[0],
                        account = dataRow.account;

                    dataRow.set("account_id", account.id);

                    self.addExtraRowAccount(dataRow.uid);
                }else if(arg.field=="amount"){
                    self.changes();
                }else if(arg.field=="tax_item"){
                    var dataRow = arg.items[0];

                    dataRow.set("tax_item_id", dataRow.tax_item.id);
                    dataRow.set("tax", 0);

                    self.changes();
                }else if(arg.field=="wht_account"){
                    var dataRow = arg.items[0];

                    dataRow.set("wht_account_id", dataRow.wht_account.id);

                    self.changes();
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        setStatus           : function(){
            var self = this,
                obj = this.get("obj"),
                statusObj = this.get("statusObj");

            statusObj.set("text", "");
            statusObj.set("date", "");
            statusObj.set("number", "");
            statusObj.set("url", "");

            switch(obj.status) {
                case 0:
                    statusObj.set("text", "open");
                    break;
                case 1:
                    statusObj.set("text", "paid");

                    this.txnDS.query({
                        filter:{ field:"reference_id", value: obj.id },
                        sort: { field:"issued_date", dir:"desc" },
                        page:1,
                        pageSize:1
                    }).then(function(){
                        var view = self.txnDS.view();

                        if(view.length>0){
                            statusObj.set("date", kendo.toString(new Date(view[0].issued_date), "dd-MM-yyyy h:mm:ss tt"));
                            statusObj.set("number", view[0].number);

                            var url = "#/" + view[0].type.toLowerCase() + "/" + view[0].id;
                            statusObj.set("url", url);
                        }
                    });
                    break;
                case 2:
                    statusObj.set("text", "partialy paid");
                    break;
                case 4:
                    statusObj.set("text", "draft");
                    break;
                default:
                    //Default here
            }
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [], referenceIds = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 100
                }).then(function(e){
                    var view = self.dataSource.view();

                    if(view[0].type=="Cash_Purchase"){
                        self.set("isCash", true);

                        self.accountDS.filter({ field: "account_type_id", value: 10 });
                    }else{
                        self.set("isCash", false);

                        self.accountDS.filter({ field: "account_type_id", value: 23 });
                    }

                    self.set("obj", view[0]);
                    self.set("total", kendo.toString(view[0].amount, "c2", view[0].locale));
                    self.set("amount_due", kendo.toString(view[0].amount - view[0].deposit, "c", view[0].locale));
                    self.set("additional_cost", kendo.toString(view[0].additional_cost, "c", view[0].locale));
                    self.setStatus();

                    self.lineDS.query({
                        filter: { field: "transaction_id", value: id }
                    });

                    self.accountLineDS.query({
                        filter: { field: "transaction_id", value: id }
                    });

                    self.journalLineDS.query({
                        filter: { field: "transaction_id", value: id }
                    });

                    self.attachmentDS.filter({ field: "transaction_id", value: id });

                    //Additional Cost
                    var additionalCostPara = [];
                    if(view[0].is_recurring=="1"){
                        additionalCostPara.push({ field: "is_recurring", value: 1 });
                    }
                    additionalCostPara.push({ field: "reference_id", value: id });
                    additionalCostPara.push({ field: "type", operator:"where_in", value: ["Cash_Purchase","Credit_Purchase"] });
                    self.additionalCostDS.filter(additionalCostPara);

                    //Segment
                    var segments = [];
                    $.each(view[0].segments, function(index, value){
                        segments.push(value);
                    });
                    self.segmentItemDS.query({
                        filter: { field: "id", operator:"where_in", value: segments }
                    });

                    self.loadDeposit();
                    self.loadReference();
                });
            }
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
                total = 0, subTotal = 0, discount = 0, tax = 0,
                countAdditCheck = 0, amountAdditCheck = 0, additionalCost = 0,
                remaining = 0, amount_due = 0;

            //Item Line
            $.each(this.lineDS.data(), function(index, value) {
                var amt = value.quantity * value.cost;
                subTotal += amt;

                //Discount by line
                if(value.discount>0){
                    amt -= value.discount;
                    discount += value.discount;
                }

                //Tax by line
                if(value.tax_item_id>0){
                    var taxAmount = amt * value.tax_item.rate;

                    if(banhji.source.checkWHT(value.tax_item.tax_type_id) && value.wht_account_id==0){
                        tax -= taxAmount;
                    }else{
                        tax += taxAmount;
                    }

                    value.set("tax", taxAmount);
                }else{
                    value.set("tax", 0);
                }

                //Count additional cost and check
                if(value.additional_applied){
                    amountAdditCheck += amt;
                    countAdditCheck++;
                }

                value.set("amount", amt);
                value.set("additional_cost", 0);//Reset additional cost
            });

            //Account Line
            $.each(this.accountLineDS.data(), function(index, value) {
                subTotal += value.amount;

                //Tax by line
                if(value.tax_item_id>0){
                    var taxAmount = value.amount * value.tax_item.rate;

                    if(banhji.source.checkWHT(value.tax_item.tax_type_id) && value.wht_account_id==0){
                        tax -= taxAmount;
                    }else{
                        tax += taxAmount;
                    }

                    value.set("tax", taxAmount);
                }else{
                    value.set("tax", 0);
                }
            });

            //Additional Cost Line
            $.each(this.additionalCostDS.data(), function(index, value) {
                //Tax by line
                var additionalTax = 0, additionalRate = obj.rate / value.rate;
                if(value.tax_item_id>0){
                    var taxItem = self.taxItemDS.get(value.tax_item_id),
                        additionalTax = value.sub_total * taxItem.rate;

                    if(banhji.source.checkWHT(taxItem.tax_type_id) && value.wht_account_id==0){
                        tax -= additionalTax;
                    }else{
                        tax += additionalTax;
                    }

                    value.set("tax", additionalTax);
                }else{
                    value.set("tax", 0);
                }

                additionalCost += value.sub_total * additionalRate;
                value.set("amount", value.sub_total + additionalTax);
            });

            //Apply additional cost
            if(additionalCost>0){
                // this.set("showAdditionalCost", true);

                if(countAdditCheck>0){
                    $.each(this.lineDS.data(), function(index, value) {
                        if(value.additional_applied){
                            if(obj.additional_apply=="Equal"){
                                //subTotal += singleAdditionalCost;
                                var singleAdditionalCost = additionalCost / countAdditCheck;
                                value.set("additional_cost", singleAdditionalCost);
                            }else{
                                var percentageAdditionalCheck = value.amount / amountAdditCheck;
                                var weightedAdditionalCost = additionalCost * percentageAdditionalCheck;

                                //subTotal += weightedAdditionalCost;
                                value.set("additional_cost", weightedAdditionalCost);
                            }
                        }
                    });
                }

                var grid = $("#grid").data("kendoGrid");
                grid.showColumn("additional_cost");
                grid.showColumn("additional_applied");
                grid.refresh();
            }else{
                // this.set("showAdditionalCost", false);

                $.each(this.lineDS.data(), function(index, value) {
                    value.set("additional_cost", 0);
                    // value.set("additional_applied", false);
                });
            }

            //Total
            total = (subTotal + tax) - discount;

            //Apply Deposit
            if(obj.deposit>0){
                if(obj.deposit <= this.get("total_deposit")){
                    if(obj.deposit <= total){
                        remaining = total - obj.deposit;
                    }else{
                        obj.set("deposit", total);
                    }
                }else{
                    alert("Over deposit to apply!");
                    obj.set("deposit", 0);
                }

                //Status
                if(remaining==0){
                    obj.set("status", 1);
                }else if(remaining==total){
                    obj.set("status", 0);
                }else{
                    obj.set("status", 2);
                }
            }

            //Warning over credit allowed
            if(obj.credit_allowed>0 && total>obj.credit_allowed){
                this.set("amtDueColor", "Gold");
            }else{
                this.set("amtDueColor", banhji.source.amtDueColor);
            }

            amount_due = total - obj.deposit;

            obj.set("sub_total", subTotal);
            obj.set("discount", discount);
            obj.set("tax", tax);
            obj.set("amount", total);
            obj.set("additional_cost", additionalCost);
            obj.set("remaining", remaining);

            this.set("total", kendo.toString(total, "c2", obj.locale));
            this.set("amount_due", kendo.toString(amount_due, "c2", obj.locale));
        },
        typeChanges         : function(){
            var obj = this.get("obj");

            if(obj.type=="Cash_Purchase"){
                this.set("isCash", true);

                this.accountDS.filter({ field:"account_type_id", value: 10 });
                obj.set("account_id", 0);

                var dropdownlist = $("#ddlAccount").data("kendoDropDownList");
                dropdownlist.select(1);
                dropdownlist.trigger("change");
            }else{
                this.set("isCash", false);

                this.accountDS.filter({ field: "account_type_id", value: 23 });
                obj.set("account_id", 0);
                obj.set("account_id", obj.contact.account_id);
            }

            this.generateNumber();
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.accountLineDS.data([]);
            this.journalLineDS.data([]);
            this.additionalCostDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);
            this.set("amount_due", 0);
            this.set("amtDueColor", banhji.source.amtDueColor);

            //Set Date
            var duedate = new Date();
            duedate.setDate(duedate.getDate() + 30);

            this.dataSource.insert(0, {
                transaction_template_id : 0,
                account_id          : 1,
                contact_id          : "",
                payment_term_id     : 0,
                payment_method_id   : 0,
                reference_id        : "",
                recurring_id        : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                type                : "Cash_Purchase", //Required
                number              : "",
                sub_total           : 0,
                discount            : 0,
                tax                 : 0,
                amount              : 0,
                deposit             : 0,
                remaining           : 0,
                credit_allowed      : 0,
                additional_cost     : 0,
                additional_apply    : "Equal",
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                bill_date           : new Date(),
                due_date            : duedate,
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                status              : 0,
                reference_no        : "",
                check_no            : "",
                segments            : [],
                is_journal          : 1,
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:0, name:"" },
                references          : []
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.setRate();
            this.typeChanges();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
                this.addRowAccount();
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj"), segments = [];

            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));
            obj.set("due_date", kendo.toString(new Date(obj.due_date), "yyyy-MM-dd"));
            obj.set("bill_date", kendo.toString(new Date(obj.bill_date), "yyyy-MM-dd"));

            //Warning over credit allowed
            if(obj.credit_limit>0 && obj.amount>obj.credit_allowed){
                alert("Over credit allowed!");
            }

            this.removeEmptyRow();

            //Segment
            $.each(this.segmentItemDS.data(), function(index, value){
                segments.push(value.id);
            });
            obj.set("segments", segments);

            //Save Draft
            if(this.get("saveDraft")){
                obj.set("status", 4); //In progress
                obj.set("progress", "Draft");
                obj.set("is_journal", 0);//No Journal
            }

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Edit Mode
            if(obj.isNew()==false){
                //Use draft
                if(obj.status==4){
                    obj.set("status", 0);//Open
                    obj.set("progress", "");
                    obj.set("is_journal", 1);//Add Journal
                }
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Account line
                    $.each(self.accountLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Additional Cost line
                    $.each(self.additionalCostDS.data(), function(index, value){
                        value.set("reference_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                //Journal
                if(data[0].is_recurring==0 && data[0].is_journal==1){
                    self.addJournal(data[0].id);
                    self.saveDeposit(data[0].id);
                }

                self.lineDS.sync();
                self.accountLineDS.sync();
                self.additionalCostDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveDraft") || self.get("saveClose")){
                    //Save Draft or Save Close
                    self.set("saveDraft", false);
                    self.set("saveClose", false);
                    self.cancel();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.clear();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear               : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.accountLineDS.cancelChanges();
            this.additionalCostDS.cancelChanges();
            this.referenceDS.cancelChanges();
            this.attachmentDS.cancelChanges();
            this.segmentItemDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.accountLineDS.data([]);
            this.additionalCostDS.data([]);
            this.referenceDS.data([]);
            this.attachmentDS.data([]);
            this.segmentItemDS.data([]);

            banhji.userManagement.removeMultiTask("purchase");
        },
        cancel              : function(){
            this.clear();
            window.history.back();
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id },
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);
                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        validating          : function(){
            var result = true, obj = this.get("obj");

            if(obj.contact_id==0){
                $("#ntf1").data("kendoNotification").warning("Please select a supplier.");

                result = false;
            }

            if(this.lineDS.total()==0 && this.accountLineDS.total()==0){
                $("#ntf1").data("kendoNotification").warning("Please select an item or account.");

                result = false;
            }

            return result;
        },
        //Journal
        addJournal          : function(transaction_id){
            var self = this,
                obj = this.get("obj"),
                contact = obj.contact,
                raw = "", entries = {};

            //Edit Mode
            if(obj.isNew()==false){
                //Delete previous journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });
            }

            //Item lines
            $.each(this.lineDS.data(), function(index, value){
                var item = value.item;

                //Service on Dr
                var serviceID = kendo.parseInt(item.expense_account_id);
                if(serviceID>0 && item.item_type_id==4){
                    raw = "dr"+serviceID;

                    var serviceAmount = (value.quantity*value.conversion_ratio*value.cost) + value.additional_cost;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : serviceID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : serviceAmount,
                            cr                  : 0,
                            rate                : value.rate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].dr += serviceAmount;
                    }
                }

                //Inventory on Dr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "dr"+inventoryID;

                    var inventoryAmount = (value.quantity*value.conversion_ratio*value.cost) + value.additional_cost;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : inventoryAmount,
                            cr                  : 0,
                            rate                : value.rate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].dr += inventoryAmount;
                    }
                }

                //Tax on Dr
                if(value.tax_item_id>0){
                    var taxItem = value.tax_item,
                        raw = "dr"+taxItem.account_id,
                        taxAmt = value.amount * taxItem.rate;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : taxItem.account_id,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : taxAmt,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].dr += taxAmt;
                    }
                }
            });

            //Account line
            $.each(this.accountLineDS.data(), function(index, value){
                //Expense Account on Dr
                var accountID = kendo.parseInt(value.account_id);
                if(accountID>0){
                    raw = "dr"+accountID;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : accountID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : value.reference_no,
                            segments            : value.segments,
                            dr                  : value.amount,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].dr += value.amount;
                    }
                }

                //Tax on Dr
                if(value.tax_item_id>0){
                    var taxItem = value.tax_item,
                        raw = "dr"+taxItem.account_id,
                        taxAmt = value.amount * taxItem.rate;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : taxItem.account_id,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : taxAmt,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].dr += taxAmt;
                    }
                }
            });

            //Additional cost line
            $.each(this.additionalCostDS.data(), function(index, value){
                var additionalRate = obj.rate / value.rate,
                    additionalAccountID = value.account_id,
                    additionalAmt = value.sub_total * additionalRate;

                //Cash or A/P on Cr
                if(additionalAccountID>0){
                    raw = "cr"+additionalAccountID;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : additionalAccountID,
                            contact_id          : value.contact_id,
                            description         : value.memo,
                            reference_no        : value.reference_no,
                            segments            : value.segments,
                            dr                  : 0,
                            cr                  : additionalAmt,
                            rate                : additionalRate,
                            locale              : value.locale
                        };
                    }else{
                        entries[raw].cr += additionalAmt;
                    }
                }

                //Tax on Dr
                if(value.tax_item_id>0){
                    var taxItem = self.taxItemDS.get(value.tax_item_id),
                        raw = "dr"+taxItem.account_id,
                        taxAmt = value.sub_total * additionalRate * taxItem.rate;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : taxItem.account_id,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : taxAmt,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].dr += taxAmt;
                    }
                }
            });

            //Obj Account on Cr
            var objAccountID = kendo.parseInt(obj.account_id);
            if(objAccountID>0){
                raw = "cr"+objAccountID;

                var objAmount = obj.amount - obj.deposit;
                if(entries[raw]===undefined){
                    entries[raw] = {
                        transaction_id      : transaction_id,
                        account_id          : objAccountID,
                        contact_id          : obj.contact_id,
                        description         : obj.memo,
                        reference_no        : obj.reference_no,
                        segments            : obj.segments,
                        dr                  : 0,
                        cr                  : objAmount,
                        rate                : obj.rate,
                        locale              : obj.locale
                    };
                }else{
                    entries[raw].cr += objAmount;
                }
            }

            //Discount on Cr
            if(obj.discount > 0){
                var discountAccountId = kendo.parseInt(contact.trade_discount_id);
                if(discountAccountId>0){
                    raw = "cr"+discountAccountId;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : discountAccountId,
                            contact_id          : obj.contact_id,
                            description         : obj.memo,
                            reference_no        : obj.reference_no,
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : obj.discount,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].cr += obj.discount;
                    }
                }
            }

            //Deposit on Cr
            if(obj.deposit > 0){
                var depositAccountId = kendo.parseInt(contact.deposit_account_id);
                if(depositAccountId>0){
                    raw = "cr"+depositAccountId;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : depositAccountId,
                            contact_id          : obj.contact_id,
                            description         : obj.memo,
                            reference_no        : obj.reference_no,
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : obj.deposit,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].cr += obj.deposit;
                    }
                }
            }

            //Add to journal entry
            if(!jQuery.isEmptyObject(entries)){
                $.each(entries, function(index, value){
                    self.journalLineDS.add(value);
                });
            }

            this.journalLineDS.sync();
        },
        //Reference
        loadReference       : function(){
            var obj = this.get("obj");

            if(obj.contact_id>0){
                this.referenceDS.filter([
                    { field: "contact_id", value: obj.contact_id },
                    { field: "status", value:0 },
                    { field: "reuse", operator:"or_where", value:1 },
                    { field: "type", operator:"where_in", value: ["Purchase_Order","GRN","Receipt_Note"] },
                    { field: "due_date >=", value: kendo.toString(obj.issued_date, "yyyy-MM-dd") }
                ]);
            }
        },
        referenceChanges    : function(e){
            var self = this,
                isExisting = false,
                obj = this.get("obj"),
                reference_id = this.get("reference_id");

            $.each(obj.references, function(index, value){
                if(value.id==reference_id){
                    isExisting = true;

                    return false;
                }
            });

            if(reference_id>0 && isExisting==false){
                var reference = this.referenceDS.get(reference_id),
                    deposit = kendo.parseFloat(reference.deposit) + kendo.parseFloat(obj.deposit);

                obj.set("deposit", deposit);
                obj.references.push(reference);

                this.referenceLineDS.query({
                    filter:[
                        { field:"transaction_id", value: reference_id },
                        { field: "assembly_id", value: 0 }
                    ]
                }).then(function(){
                    var view = self.referenceLineDS.view();

                    $.each(view, function(index, value){
                        self.lineDS.insert(0, {
                            transaction_id      : obj.id,
                            reference_id        : reference.id,
                            tax_item_id         : value.tax_item_id,
                            item_id             : value.item_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : value.cost,
                            amount              : value.amount,
                            discount            : value.discount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : 1,
                            additional_cost     : value.additional_cost,
                            additional_applied  : value.additional_applied,
                            reference_no        : reference.number,

                            item                : value.item,
                            item_price          : value.item_price,
                            tax_item            : value.tax_item,
                            wht_account         : value.wht_account
                        });
                    });

                    self.changes();
                });
            }

            this.set("reference_id", 0);
        },
        referenceRemoveRow  : function(e){
            var data = e.data,
                obj = this.get("obj"),
                index = obj.references.indexOf(data),
                deposit = kendo.parseFloat(obj.deposit) - kendo.parseFloat(data.deposit);

            obj.set("deposit", deposit);

            obj.references.splice(index, 1);
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("recurring_id", id);
                obj.set("contact", view[0].contact);
                obj.set("contact_id", view[0].contact.id);
                obj.set("account_id", view[0].account_id);
                obj.set("payment_method_id", view[0].payment_method_id);
                obj.set("job_id", view[0].job_id);
                obj.set("type", view[0].type);
                obj.set("additional_cost", view[0].additional_cost);
                obj.set("additional_apply", view[0].additional_apply);
                obj.set("check_no", view[0].check_no);
                obj.set("segments", view[0].segments);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
                obj.set("bill_to", view[0].bill_to);
                obj.set("ship_to", view[0].ship_to);
                obj.set("contact", view[0].contact);

                self.setContact(view[0].contact);
                self.typeChanges();
            });

            this.recurringLineDS.query({
                filter:{ field: "transaction_id", value: id }
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        tax_item_id         : value.tax_item_id,
                        item_id             : value.item_id,
                        measurement_id      : value.measurement_id,
                        description         : value.description,
                        quantity            : value.quantity,
                        cost                : value.cost,
                        amount              : value.amount,
                        discount            : value.discount,
                        rate                : value.rate,
                        locale              : value.locale,
                        additional_cost     : value.additional_cost,
                        additional_applied  : value.additional_applied,
                        movement            : 1,

                        item                : value.item,
                        item_price          : value.item_price,
                        tax_item            : value.tax_item,
                        wht_account         : value.wht_account
                    });
                });

                self.changes();
            });

            //Account Line
            this.recurringAccountLineDS.query({
                filter: { field:"transaction_id", value:id },
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringAccountLineDS.view();
                self.accountLineDS.data([]);

                $.each(view, function(index, value){
                    self.accountLineDS.add({
                        transaction_id      : 0,
                        tax_item_id         : value.tax_item_id,
                        account_id          : value.account_id,
                        description         : value.description,
                        reference_no        : value.reference_no,
                        segments            : value.segments,
                        amount              : value.amount,
                        rate                : value.rate,
                        locale              : value.locale,

                        tax_item            : value.tax_item,
                        wht_account         : value.wht_account
                    });
                });

                self.changes();
            });

            //Additional Cost Line
            this.recurringAdditionalCostDS.query({
                filter: [
                    { field:"reference_id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringAdditionalCostDS.view();
                self.additionalCostDS.data([]);

                $.each(view, function(index, value){
                    self.additionalCostDS.add({
                        contact_id          : value.contact_id,
                        payment_term_id     : value.payment_term_id,
                        reference_id        : value.reference_id,
                        recurring_id        : value.recurring_id,
                        tax_item_id         : value.tax_item_id,
                        user_id             : value.user_id,
                        reference_no        : value.reference_no,
                        type                : value.type,//Required
                        sub_total           : value.sub_total,
                        amount              : value.amount,
                        tax                 : value.tax,
                        rate                : value.rate,
                        locale              : value.locale,
                        issued_date         : new Date(),
                        due_date            : new Date(),
                        bill_to             : value.bill_to,
                        ship_to             : value.ship_to,
                        memo                : value.memo,
                        memo2               : value.memo2,
                        status              : value.status,
                        segments            : value.segments
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.purchaseReturn =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        referenceDS         : dataStore(apiUrl + "transactions"),
        returnDS            : dataStore(apiUrl + "transactions"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        assemblyLineDS      : dataStore(apiUrl + "item_lines"),
        accountLineDS       : dataStore(apiUrl + "account_lines"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        assemblyDS          : dataStore(apiUrl + "item_prices"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:{ field: "is_assembly <>", value: 1 },
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        taxItemDS           : new kendo.data.DataSource({
            data: banhji.source.taxList,
            filter:{
                logic: "or",
                filters: [
                    { field: "tax_type_id", value: 1 },//Supplier Tax
                    { field: "tax_type_id", value: 2 },
                    { field: "tax_type_id", value: 3 },
                    { field: "tax_type_id", value: 9 }
                ]
            },
            sort: [
                { field: "tax_type_id", dir: "asc" },
                { field: "name", dir: "asc" }
            ]
        }),
        accountDS           : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:[
                { field: "account_type_id", operator:"gte", value: 35 },
                { field: "account_type_id", operator:"lte", value: 43 }
            ],
            sort: { field:"number", dir:"asc" }
        }),
        depositAccountDS    : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 14 },
                    { field: "account_type_id", value: 21 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "Purchase_Return" }
        }),
        contactDS           : banhji.source.supplierDS,
        amtDueColor         : banhji.source.amtDueColor,
        obj                 : null,
        returnObj           : null,
        isEdit              : false,
        saveClose           : false,
        savePrint           : false,
        statusSrc           : "",
        showRef             : false,
        showSegment         : false,
        windowVisible       : false,
        isOffsetInvoice     : false,
        notDuplicateNumber  : true,
        total               : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        onRemove            : function(e){
            // Array with information about the uploaded files
            var self = this, files = e.files;
            $.each(this.attachmentDS.data(), function(index, value){
                if(value.name==files[0].name){
                    self.attachmentDS.remove(value);

                    return false;
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm("Are you sure, you want to delete it?")) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            var self = this;

            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                if(e.type=="destroy"){
                    if(saved==false){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var paramz = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(paramz, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });

            //Clear upload files
            $(".k-upload-files").remove();
        },
        //Contact
        setContact          : function(contact){
            var obj = this.get("obj");

            obj.set("contact", contact);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
                obj.set("locale", contact.locale);
                obj.set("bill_to", contact.bill_to);
                obj.set("ship_to", contact.ship_to);

                this.setRate();
            }

            this.changes();
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));

                value.set("rate", itemRate);
            });
        },
        //Segment
        segmentChanges      : function(e) {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //Item
        itemChanges         : function(e){
            var self = this, data = e.data, obj = this.get("obj");

            if(data.item_id>0){
                var item = this.itemDS.get(data.item_id);

                if(item.is_catalog=="1"){
                    this.lineDS.remove(data);

                    $.each(item.catalogs, function(ind, val){
                        var catalogItem = self.itemDS.get(val);

                        if(catalogItem){
                            var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date)),
                                itemPrices = banhji.source.getPriceList(catalogItem.id);

                            self.lineDS.add({
                                transaction_id      : obj.id,
                                tax_item_id         : 0,
                                item_id             : catalogItem.id,
                                measurement_id      : itemPrices.length>0 ? itemPrices[0].measurement_id : catalogItem.measurement_id,
                                description         : catalogItem.purchase_description,
                                quantity            : 1,
                                conversion_ratio    : itemPrices.length>0 ? itemPrices[0].conversion_ratio : 1,
                                cost                : catalogItem.cost * rate,
                                amount              : 0,
                                discount            : 0,
                                rate                : rate,
                                locale              : catalogItem.locale,
                                movement            : -1,

                                item_prices         : itemPrices
                            });
                        }
                    });

                    this.changes();
                }else{
                    var rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date)),
                        itemPrices = banhji.source.getPriceList(data.item_id);

                    data.set("item_prices", itemPrices);
                    data.set("measurement_id", itemPrices.length>0 ? itemPrices[0].measurement_id : item.measurement_id);
                    data.set("description", item.purchase_description);
                    data.set("quantity", 1);
                    data.set("conversion_ratio", itemPrices.length>0 ? itemPrices[0].conversion_ratio : 1);
                    data.set("cost", item.cost * rate);
                    data.set("rate", rate);
                    data.set("locale", item.locale);

                    this.changes();
                }
            }else{
                data.set("item_id", "");
            }
        },
        measurementChanges  : function(e){
            var data = e.data, obj = this.get("obj");

            if(data.measurement_id>0){
                $.each(data.item_prices, function(index, value){
                    if(value.measurement_id==data.measurement_id){

                        data.set("conversion_ratio", value.conversion_ratio);

                        return false;
                    }
                });

                this.changes();
            }
        },
        //Account
        addRowAccount       : function(){
            var obj = this.get("obj");

            this.accountLineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                account_id          : "",
                description         : "",
                reference_no        : "",
                segments            : [],
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale
            });
        },
        removeRowAccount    : function(e){
            var d = e.data;
            if(this.lineDS.total()==0 && this.accountLineDS.total()==0){

            }else{
                this.accountLineDS.remove(d);
                this.changes();
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            this.dataSource.query({
                filter: para,
                page: 1,
                pageSize: 100
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
                self.set("statusSrc", banhji.source.usedSrc);
                self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));

                self.loadLines(id);
                self.assemblyLineDS.filter([
                    { field: "transaction_id", value: id },
                    { field: "assembly_id >", value: 0 }
                ]);
                self.accountLineDS.filter({ field: "transaction_id", value: id });
                self.journalLineDS.filter({ field: "transaction_id", value: id });
                self.attachmentDS.filter({ field: "transaction_id", value: id });
                self.returnDS.filter({ field: "return_id", value: id });
            });
        },
        loadLines           : function(id){
            var self = this;

            self.lineDS.query({
                filter: { field: "transaction_id", value: id }
            }).then(function(){
                var view = self.lineDS.view();

                $.each(view, function(index, value){
                    value.set("item_prices", banhji.source.getPriceList(value.item_id));
                });
            });
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
            subTotal = 0, tax = 0, returnAmount = 0, remaining = 0, itemIds = [];

            //Item lines
            $.each(this.lineDS.data(), function(index, value) {
                var amt = value.quantity * value.cost;
                subTotal += amt;

                //Tax by line
                if(value.tax_item_id>0){
                    var taxItem = self.taxItemDS.get(value.tax_item_id);
                    tax += amt * taxItem.rate;
                }

                value.set("amount", amt);

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            //Account lines
            $.each(this.accountLineDS.data(), function(index, value) {
                subTotal += value.amount;
            });

            //Total
            total = subTotal + tax;

            //Return lines
            $.each(this.returnDS.data(), function(index, value) {
                if(value.type=="Offset_Bill" && value.amount>value.sub_total){
                    value.set("amount", value.sub_total);
                }
                returnAmount += value.amount;
            });

            remaining = total - returnAmount;

            obj.set("sub_total", subTotal);
            obj.set("tax", tax);
            obj.set("amount", total);
            obj.set("deposit", returnAmount);
            obj.set("remaining", remaining);

            this.set("total", kendo.toString(total, "c", obj.locale));

            //Remove Assembly Item List
            var raw = this.assemblyLineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (jQuery.inArray(kendo.parseInt(item.assembly_id), itemIds)==-1) {
                    this.assemblyLineDS.remove(item);
                }
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.accountLineDS.data([]);
            this.assemblyLineDS.data([]);
            this.journalLineDS.data([]);
            this.returnDS.data([]);
            this.referenceDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);

            this.dataSource.insert(0, {
                contact_id          : "",
                reference_id        : "",
                recurring_id        : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                type                : "Purchase_Return", //Require
                number              : "",
                sub_total           : 0,
                discount            : 0,
                tax                 : 0,
                amount              : 0,
                deposit             : 0,
                amount_paid         : 0,
                remaining           : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                status              : 0,
                segments            : [],
                is_journal          : 1,
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:0, name:"" }
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);

            this.setRate();
            this.addRow();
            this.generateNumber();
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                item_id             : "",
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio            : 1,
                cost                : 0,
                amount              : 0,
                discount            : 0,
                fine                : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : -1,
                reference_no        : "",

                item_prices         : []
            });
        },
        removeRow           : function(e){
            var data = e.data;

            //Remove Assembly Item List
            if(data.item_id>0){
                var raw = this.assemblyLineDS.data();

                var item, i;
                for(i=raw.length-1; i>=0; i--){
                    item = raw[i];
                    if (item.assembly_id==data.item_id){
                        this.assemblyLineDS.remove(item);
                    }

                }
            }

            this.lineDS.remove(data);
            this.changes();
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");
            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

            //Mode
            if(obj.isNew()==false){
                //Journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });

                this.addJournal(obj.id);
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Account line
                    $.each(self.accountLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Assembly Item line
                    $.each(self.assemblyLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Journal
                    self.addJournal(data[0].id);
                }

                self.lineDS.sync();
                self.accountLineDS.sync();
                self.assemblyLineDS.sync();
                self.uploadFile();

                //Return
                var ids = [];
                $.each(self.returnDS.data(), function(index, value){
                    if(value.type=="Offset_Bill" && value.reference_id>0){
                        ids.push(value.reference_id);
                    }
                    value.set("return_id", data[0].id);
                    value.set("issued_date", kendo.toString(new Date(data[0].issued_date), "s"));
                });

                self.returnDS.sync();
                var saved = false;
                self.returnDS.bind("requestEnd", function(e){
                    if(e.type=="create" && saved==false){
                        saved = true;

                        self.updateTxnStatus(ids);
                    }
                });

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.cancel();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel              : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.accountLineDS.cancelChanges();
            this.assemblyLineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.accountLineDS.data([]);
            this.assemblyLineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("purchase_return");
        },
        validating          : function(){
            var result = true, obj = this.get("obj");

            if(kendo.parseFloat(obj.amount, "n3")!==kendo.parseFloat(obj.deposit, "n3")){
                $("#ntf1").data("kendoNotification").error("Remaining must be Zero!");

                result = false;
            }

            if(this.lineDS.total()==0 && this.accountLineDS.total()==0){
                $("#ntf1").data("kendoNotification").error("Please select an item or account.");

                result = false;
            }

            if(this.returnDS.total()==0){
                $("#ntf1").data("kendoNotification").error("Please make an offset bill or add to deposit.");

                result = false;
            }

            return result;
        },
        updateTxnStatus     : function(ids){
            var self = this;

            if(ids.length>0){
                this.txnDS.query({
                    filter:{ field:"id", operator:"where_in", value:ids }
                }).then(function(){
                    var view = self.txnDS.view();

                    $.each(view, function(index, value){
                        if(value.amount_paid == 0){
                            value.set("status", 0);
                        }else if(value.amount_paid >= value.amount){
                            value.set("status", 1);
                        }else{
                            value.set("status", 2);
                        }
                    });

                    self.txnDS.sync();
                });
            }
        },
        //Return
        addRowReturn        : function(type){
            var obj = this.get("obj"), account_id = 0;

            if(type=="Vendor_Deposit" && obj.contact_id>0){
                var contact = obj.contact;
                account_id = contact.deposit_account_id;
            }

            this.returnDS.insert(0, {
                return_id       : obj.id,
                account_id      : account_id,
                contact_id      : obj.contact_id,
                reference_id    : "",
                reference_no    : "",
                number          : "",
                type            : type,
                amount          : 0,
                rate            : obj.rate,
                locale          : obj.locale,
                issued_date     : obj.issued_date
            });

            var raw = this.returnDS.at(0);
            this.set("returnObj", raw);
        },
        selectedRow         : function(e){
            var data = e.data, para = [], ids = [], obj = this.get("obj");

            this.set("returnObj", data);

            if(data.type=="Offset_Bill"){
                this.set("isOffsetInvoice", true);

                if(this.returnDS.total()>0){
                    $.each(this.returnDS.data(), function(index, value){
                        if(value.reference_id!==data.reference_id){
                            ids.push(value.reference_id);
                        }
                    });
                    para.push({field: "id", operator:"where_not_in", value: ids});
                }
                para.push({field: "contact_id", value: obj.contact_id});
                para.push({field: "status", operator:"where_in", value: [0,2]});
                para.push({field: "type", value:"Credit_Purchase"});
                this.referenceDS.filter(para);
            }else{
                this.set("isOffsetInvoice", false);
            }

            this.set("windowVisible", true);
        },
        removeRowReturn     : function(e){
            var d = e.data;

            if(this.returnDS.total()>1){
                this.returnDS.remove(d);
                this.changes();
            }
        },
        returnChanges       : function(e){
            e.preventDefault();

            this.closeWindow();
        },
        referenceChanges    : function(){
            var returnObj = this.get("returnObj");

            if(returnObj.reference_id>0){
                var txn = this.referenceDS.get(returnObj.reference_id),
                amount = txn.amount - (txn.amount_paid + txn.deposit);

                returnObj.set("account_id", txn.account_id);
                returnObj.set("reference_no", txn.number);
                returnObj.set("sub_total", amount);
                returnObj.set("amount", amount);
            }else{
                returnObj.set("account_id", 0);
                returnObj.set("reference_no", "");
                returnObj.set("sub_total", 0);
                returnObj.set("amount", 0);
            }

            this.changes();
        },
        openOffsetInvoiceWindow : function(){
            this.openWindow("Offset_Bill");
        },
        openDepositWindow   : function(){
            this.openWindow("Vendor_Deposit");
        },
        openWindow          : function(type){
            var para = [], ids = [],
            obj = this.get("obj");

            if(obj.contact_id>0){
                this.addRowReturn(type);

                if(type=="Offset_Bill"){
                    this.set("isOffsetInvoice", true);

                    if(this.returnDS.total()>0){
                        $.each(this.returnDS.data(), function(index, value){
                            ids.push(value.reference_id);
                        });
                        para.push({field: "id", operator:"where_not_in", value: ids});
                    }
                    para.push({field: "contact_id", value: obj.contact_id});
                    para.push({field: "status", operator:"where_in", value: [0,2]});
                    para.push({field: "type", value:"Credit_Purchase"});
                    this.referenceDS.filter(para);
                }else{
                    this.set("isOffsetInvoice", false);
                }

                this.set("windowVisible", true);
            }else{
                alert("Please select a customer.");
            }
        },
        closeWindow         : function(){
            this.changes();
            this.set("windowVisible", false);
        },
        cancelWindow        : function(){
            var returnObj = this.get("returnObj"),
            indexReturnObj = this.returnDS.indexOf(returnObj),
            selectedReturnObj = this.returnDS.at(indexReturnObj);

            this.returnDS.remove(selectedReturnObj);
            this.changes();

            this.set("windowVisible", false);
        },
        //Journal
        addJournal          : function(transaction_id){
            var self = this,
                obj = this.get("obj"),
                contact = obj.contact,
                raw = "", entries = {};

            //Item lines
            $.each(this.lineDS.data(), function(index, value){
                var item = self.itemDS.get(value.item_id);

                //Service on Cr
                if(item.item_type_id==4){
                    var serviceID = kendo.parseInt(item.expense_account_id);
                    if(serviceID>0){
                        raw = "cr"+serviceID;

                        var serviceAmount = value.amount;
                        if(item.item_type_id==1 || item.item_type_id==4){
                            serviceAmount = value.quantity * value.conversion_ratio * item.cost;
                        }

                        if(entries[raw]===undefined){
                            entries[raw] = {
                                transaction_id      : transaction_id,
                                account_id          : serviceID,
                                contact_id          : obj.contact_id,
                                description         : value.description,
                                reference_no        : "",
                                segments            : obj.segments,
                                dr                  : 0,
                                cr                  : serviceAmount,
                                rate                : value.rate,
                                locale              : item.locale
                            };
                        }else{
                            entries[raw].cr += serviceAmount;
                        }
                    }
                }

                //Inventory on Cr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "cr"+inventoryID;

                    var inventoryAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        inventoryAmount = value.quantity * value.conversion_ratio * value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : inventoryAmount,
                            rate                : value.rate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].cr += inventoryAmount;
                    }
                }

                //Tax on Cr
                if(value.tax_item_id>0){
                    var taxItem = self.taxItemDS.get(value.tax_item_id),
                        raw = "cr"+taxItem.account_id,
                        taxAmt = value.amount * taxItem.rate;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : taxItem.account_id,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : taxAmt,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].cr += taxAmt;
                    }
                }
            });

            //Return Lines
            $.each(this.returnDS.data(), function(index, value){
                //Add Offset Bill and Deposit list
                var returnID = kendo.parseInt(value.account_id);
                if(value.type=="Offset_Bill"){
                    returnID = contact.account_id;
                }

                //A/P and Deposit on Dr
                if(returnID>0){
                    raw = "dr"+returnID;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : returnID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : value.amount,
                            cr                  : 0,
                            rate                : value.rate,
                            locale              : value.locale
                        };
                    }else{
                        entries[raw].dr += value.amount;
                    }
                }
            });

            //Rebate Account on Cr
            $.each(this.accountLineDS.data(), function(index, value){
                var accountID = kendo.parseInt(value.account_id);
                if(accountID>0){
                    raw = "cr"+accountID;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : accountID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : value.segments,
                            dr                  : 0,
                            cr                  : value.amount,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].cr += value.amount;
                    }
                }
            });

            //Add to journal entry
            if(!jQuery.isEmptyObject(entries)){
                $.each(entries, function(index, value){
                    self.journalLineDS.add(value);
                });
            }

            this.journalLineDS.sync();
        }
    });
    banhji.paymentRefund =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        referenceDS         : dataStore(apiUrl + "transactions"),
        returnDS            : dataStore(apiUrl + "transactions"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        assemblyLineDS      : dataStore(apiUrl + "item_lines"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        assemblyDS          : dataStore(apiUrl + "item_prices"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        taxItemDS           : new kendo.data.DataSource({
            data: banhji.source.taxList,
            filter:{
                logic: "or",
                filters: [
                    { field: "tax_type_id", value: 1 },//Supplier Tax
                    { field: "tax_type_id", value: 2 },
                    { field: "tax_type_id", value: 3 },
                    { field: "tax_type_id", value: 9 }
                ]
            },
            sort: [
                { field: "tax_type_id", dir: "asc" },
                { field: "name", dir: "asc" }
            ]
        }),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "Payment_Refund" }
        }),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:{ field: "item_type_id <>", value: 3 },
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        accountDS           : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 10 },
            sort: { field:"number", dir:"asc" }
        }),
        contactDS           : banhji.source.supplierDS,
        amtDueColor         : banhji.source.amtDueColor,
        obj                 : null,
        isEdit              : false,
        saveClose           : false,
        savePrint           : false,
        notDuplicateNumber  : true,
        total               : 0,
        total_deposit       : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        onRemove            : function(e){
            // Array with information about the uploaded files
            var self = this, files = e.files;
            $.each(this.attachmentDS.data(), function(index, value){
                if(value.name==files[0].name){
                    self.attachmentDS.remove(value);

                    return false;
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm("Are you sure, you want to delete it?")) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            var self = this;

            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                if(e.type=="destroy"){
                    if(saved==false){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var paramz = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(paramz, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });

            //Clear upload files
            $(".k-upload-files").remove();
        },
        //Deposit
        loadDeposit         : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact_id>0){
                this.txnDS.query({
                    filter:[
                        { field:"amount", operator:"select_sum", value:"amount" },
                        { field:"contact_id", value: obj.contact_id },
                        { field:"type", value: "Vendor_Deposit" }
                    ]
                }).then(function(){
                    var view = self.txnDS.view();

                    self.set("total_deposit", view[0].amount + obj.deposit);
                });
            }
        },
        //Contact
        setContact          : function(contact){
            var obj = this.get("obj");

            obj.set("contact", contact);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
                obj.set("locale", contact.locale);
                obj.set("bill_to", contact.bill_to);
                obj.set("ship_to", contact.ship_to);

                this.setRate();
                this.loadDeposit();
                this.loadReference();
            }

            this.changes();
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));

                value.set("rate", itemRate);
            });
        },
        //Segment
        segmentChanges      : function(e) {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //Item
        itemChanges         : function(e){
            var self = this, data = e.data, obj = this.get("obj");

            if(data.item_id>0){
                var item = this.itemDS.get(data.item_id);

                if(item.is_catalog=="1"){
                    this.lineDS.remove(data);

                    $.each(item.catalogs, function(ind, val){
                        var catalogItem = self.itemDS.get(val);

                        if(catalogItem){
                            var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date)),
                                itemPrices = banhji.source.getPriceList(catalogItem.id);

                            self.lineDS.add({
                                transaction_id      : obj.id,
                                tax_item_id         : 0,
                                item_id             : catalogItem.id,
                                measurement_id      : itemPrices.length>0 ? itemPrices[0].measurement_id : catalogItem.measurement_id,
                                description         : catalogItem.purchase_description,
                                quantity            : 1,
                                conversion_ratio    : itemPrices.length>0 ? itemPrices[0].conversion_ratio : 1,
                                cost                : catalogItem.cost * rate,
                                amount              : 0,
                                discount            : 0,
                                rate                : rate,
                                locale              : catalogItem.locale,
                                movement            : -1,

                                item_prices         : itemPrices
                            });
                        }
                    });

                    this.changes();
                }else{
                    var rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date)),
                        itemPrices = banhji.source.getPriceList(data.item_id);

                    data.set("item_prices", itemPrices);
                    data.set("measurement_id", itemPrices.length>0 ? itemPrices[0].measurement_id : item.measurement_id);
                    data.set("description", item.purchase_description);
                    data.set("quantity", 1);
                    data.set("conversion_ratio", itemPrices.length>0 ? itemPrices[0].conversion_ratio : 1);
                    data.set("cost", item.cost * rate);
                    data.set("rate", rate);
                    data.set("locale", item.locale);

                    this.changes();
                }
            }else{
                data.set("item_id", "");
            }
        },
        measurementChanges  : function(e){
            var data = e.data, obj = this.get("obj");

            if(data.measurement_id>0){
                $.each(data.item_prices, function(index, value){
                    if(value.measurement_id==data.measurement_id){

                        data.set("conversion_ratio", value.conversion_ratio);

                        return false;
                    }
                });

                this.changes();
            }
        },
        //Number
        checkExistingNumber : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            this.dataSource.query({
                filter: para
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
                self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));

                self.loadLines(id);
                self.assemblyLineDS.filter([
                    { field: "transaction_id", value: id },
                    { field: "assembly_id >", value: 0 }
                ]);
                self.journalLineDS.filter({ field: "transaction_id", value: id });
                self.attachmentDS.filter({ field: "transaction_id", value: id });
                self.referenceDS.filter([
                    { field: "contact_id", value: view[0].contact_id },
                    { field: "amount >", value: 0 },
                    { field: "type", value:"Vendor_Deposit" }
                ]);

                self.returnDS.query({
                    filter:{ field: "return_id", value: id }
                }).then(function(){
                    var reInvoice = self.returnDS.view();

                    $.each(reInvoice, function(index, value){
                        value.set("amount", Math.abs(value.amount));
                    });
                });

                self.loadDeposit();
            });
        },
        loadLines           : function(id){
            var self = this;

            self.lineDS.query({
                filter: [
                    { field: "transaction_id", value: id },
                    { field: "assembly_id", value: 0 }
                ],
            }).then(function(){
                var view = self.lineDS.view();

                $.each(view, function(index, value){
                    value.set("item_prices", banhji.source.getPriceList(value.item_id));
                });
            });
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
            subTotal = 0, tax = 0, returnAmount = 0, itemIds = [];

            $.each(this.lineDS.data(), function(index, value) {
                var amt = value.quantity * value.cost;

                //Tax by line
                if(value.tax_item_id>0){
                    var taxItem = self.taxItemDS.get(value.tax_item_id);
                    tax += amt * taxItem.rate;
                }

                value.set("amount", amt);
                subTotal += amt;

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            //Return
            $.each(this.returnDS.data(), function(index, value) {
                if(value.amount>value.sub_total){
                    value.set("amount", value.sub_total);
                }
                returnAmount += value.amount;
            });

            total = subTotal + tax + returnAmount;

            obj.set("sub_total", subTotal);
            obj.set("tax", tax);
            obj.set("deposit", returnAmount);
            obj.set("amount", total);

            this.set("total", kendo.toString(total, "c", obj.locale));

            //Remove Assembly Item List
            var raw = this.assemblyLineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (jQuery.inArray(kendo.parseInt(item.assembly_id), itemIds)==-1) {
                    this.assemblyLineDS.remove(item);
                }
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.journalLineDS.data([]);
            this.returnDS.data([]);
            this.referenceDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);

            this.dataSource.insert(0, {
                contact_id          : "",
                reference_id        : "",
                recurring_id        : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                type                : "Payment_Refund", //Require
                number              : "",
                sub_total           : 0,
                discount            : 0,
                tax                 : 0,
                amount              : 0,
                deposit             : 0,
                amount_paid         : 0,
                remaining           : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                status              : 0,
                segments            : [],
                is_journal          : 1,
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:0, name:"" }
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);

            this.setRate();
            this.addRow();
            this.generateNumber();
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                item_id             : "",
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio            : 1,
                cost                : 0,
                amount              : 0,
                discount            : 0,
                fine                : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : -1,
                reference_no        : "",

                item_prices         : []
            });
        },
        removeRow           : function(e){
            var data = e.data;

            //Remove Assembly Item List
            if(data.item_id>0){
                var raw = this.assemblyLineDS.data();

                var item, i;
                for(i=raw.length-1; i>=0; i--){
                    item = raw[i];
                    if (item.assembly_id==data.item_id){
                        this.assemblyLineDS.remove(item);
                    }

                }
            }

            this.lineDS.remove(data);
            this.changes();
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");
            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

            //Mode
            if(obj.isNew()==false){
                //Journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });

                this.addJournal(obj.id);
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Assembly Item line
                    $.each(self.assemblyLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Journal
                    self.addJournal(data[0].id);
                }

                self.lineDS.sync();
                self.assemblyLineDS.sync();
                self.uploadFile();

                //Return
                var ids = [];
                $.each(self.returnDS.data(), function(index, value){
                    if(value.reference_id>0){
                        ids.push(value.reference_id);
                    }
                    value.set("return_id", data[0].id);
                    value.set("amount", value.amount*-1);
                    value.set("issued_date", kendo.toString(new Date(data[0].issued_date), "s"));
                });
                self.returnDS.sync();
                self.updateTxnStatus(ids);

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.cancel();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel              : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.returnDS.cancelChanges();
            this.assemblyLineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.returnDS.data([]);
            this.assemblyLineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("payment_refund");
        },
        validating          : function(){
            var result = true, obj = this.get("obj"),
            total_deposit = this.get("total_deposit");

            if(obj.deposit>total_deposit){
                $("#ntf1").data("kendoNotification").error("Over deposit amount to refund!");

                result = false;
            }

            if(this.lineDS.total()==0 && this.returnDS.total()==0){
                $("#ntf1").data("kendoNotification").error("Please select an item or deposit.");

                result = false;
            }

            return result;
        },
        updateTxnStatus     : function(ids){
            var self = this;

            if(ids.length>0){
                this.txnDS.query({
                    filter:{ field:"id", operator:"where_in", value:ids }
                }).then(function(){
                    var view = self.txnDS.view();

                    $.each(view, function(index, value){
                        value.set("status", 3);//Status 3 = refund
                    });

                    self.txnDS.sync();
                });
            }
        },
        //Return
        addRowReturn        : function(){
            var obj = this.get("obj"), account_id = 0;

            if(obj.contact_id>0){
                var contact = obj.contact;
                account_id = contact.deposit_account_id;
            }

            this.returnDS.add({
                return_id       : obj.id,
                account_id      : account_id,
                contact_id      : obj.contact_id,
                reference_id    : "",
                reference_no    : "",
                number          : "",
                type            : "Vendor_Deposit",
                amount          : 0,
                rate            : obj.rate,
                locale          : obj.locale,
                issued_date     : obj.issued_date
            });
        },
        removeRowReturn     : function(e){
            var data = e.data;

            this.returnDS.remove(data);
            this.changes();
        },
        loadReference       : function(){
            var obj = this.get("obj");

            if(obj.contact_id>0){
                this.referenceDS.filter([
                    { field: "contact_id", value: obj.contact_id },
                    { field: "amount >", value: 0 },
                    { field: "status <>", value: 3 },
                    { field: "type", value:"Vendor_Deposit" }
                ]);
            }
        },
        referenceChanges    : function(e){
            var data = e.data;

            if(data.reference_id>0){
                var txn = this.referenceDS.get(data.reference_id);

                data.set("account_id", txn.account_id);
                data.set("reference_no", txn.number);
                data.set("sub_total", txn.amount);
                data.set("amount", txn.amount);
            }else{
                data.set("account_id", 0);
                data.set("reference_no", "");
                data.set("sub_total", 0);
                data.set("amount", 0);
            }

            this.changes();
        },
        //Journal
        addJournal          : function(transaction_id){
            var self = this,
                obj = this.get("obj"),
                contact = obj.contact,
                raw = "", entries = {};

            //Cash on Dr
            var cashID = kendo.parseInt(obj.account_id);
            if(cashID>0){
                raw = "dr"+cashID;

                if(entries[raw]===undefined){
                    entries[raw] = {
                        transaction_id      : transaction_id,
                        account_id          : cashID,
                        contact_id          : obj.contact_id,
                        description         : obj.memo,
                        reference_no        : "",
                        segments            : obj.segments,
                        dr                  : obj.amount,
                        cr                  : 0,
                        rate                : obj.rate,
                        locale              : obj.locale
                    };
                }else{
                    entries[raw].dr += obj.amount;
                }
            }

            //Item lines
            $.each(this.lineDS.data(), function(index, value){
                var item = self.itemDS.get(value.item_id);

                //Service on Cr
                if(item.item_type_id==4){
                    var serviceID = kendo.parseInt(item.expense_account_id);
                    if(serviceID>0){
                        raw = "cr"+serviceID;

                        var serviceAmount = value.amount;
                        if(item.item_type_id==1 || item.item_type_id==4){
                            serviceAmount = value.quantity * value.conversion_ratio * value.cost;
                        }

                        if(entries[raw]===undefined){
                            entries[raw] = {
                                transaction_id      : transaction_id,
                                account_id          : serviceID,
                                contact_id          : obj.contact_id,
                                description         : value.description,
                                reference_no        : "",
                                segments            : obj.segments,
                                dr                  : 0,
                                cr                  : serviceAmount,
                                rate                : value.rate,
                                locale              : item.locale
                            };
                        }else{
                            entries[raw].cr += serviceAmount;
                        }
                    }
                }

                //Inventory on Cr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "cr"+inventoryID;

                    var inventoryAmount = value.amount;
                    if(item.item_type_id==1 || item.item_type_id==4){
                        inventoryAmount = value.quantity * value.conversion_ratio * value.cost;
                    }

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : inventoryAmount,
                            rate                : value.rate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].cr += inventoryAmount;
                    }
                }

                //Tax on Cr
                if(value.tax_item_id>0){
                    var taxItem = self.taxItemDS.get(value.tax_item_id),
                        raw = "cr"+taxItem.account_id,
                        taxAmt = value.amount * taxItem.rate;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : taxItem.account_id,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : taxAmt,
                            rate                : obj.rate,
                            locale              : obj.locale
                        };
                    }else{
                        entries[raw].cr += taxAmt;
                    }
                }
            });

            //Return Lines
            $.each(this.returnDS.data(), function(index, value){
                //Deposit on Cr
                var depositID = kendo.parseInt(value.account_id);
                if(depositID>0){
                    raw = "cr"+depositID;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : depositID,
                            contact_id          : obj.contact_id,
                            description         : value.description,
                            reference_no        : value.reference_no,
                            segments            : value.segments,
                            dr                  : 0,
                            cr                  : value.amount,
                            rate                : value.rate,
                            locale              : value.locale
                        };
                    }else{
                        entries[raw].cr += value.amount;
                    }
                }
            });

            //Add to journal entry
            if(!jQuery.isEmptyObject(entries)){
                $.each(entries, function(index, value){
                    self.journalLineDS.add(value);
                });
            }

            this.journalLineDS.sync();
        }
    });
    banhji.vendorRecurring = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        contactDS           : banhji.source.supplierDS,
        contact_id          : "",
        pageLoad            : function(){
            this.search();
        },
        search              : function(){
            var para = [],
            contact_id = this.get("contact_id");

            if(contact_id){
                para.push({ field:"contact_id", value: contact_id });
            }

            para.push({ field:"type", operator:"where_in", value:["Purchase_Order","Vendor_Deposit","Cash_Purchase","Credit_Purchase","GRN"] });
            para.push({ field:"reference_id", value: 0 });
            para.push({ field:"is_recurring", value: 1 });

            this.dataSource.filter(para);

            this.set("contact_id", "");
        },
        edit                : function(e){
            var data = e.data;

            switch(data.type) {
                case "Purchase_Order":
                    banhji.purchaseOrder.set("recurring", "edit");
                    banhji.router.navigate('/purchase_order/' + data.id);
                    break;
                case "GRN":
                    banhji.grn.set("recurring", "edit");
                    banhji.router.navigate('/grn/' + data.id);

                    break;
                case "Vendor_Deposit":
                    banhji.vendorDeposit.set("recurring", "edit");
                    banhji.router.navigate('/vendor_deposit/' + data.id);

                    break;
                case "Cash_Purchase":
                    banhji.purchase.set("recurring", "edit");
                    banhji.router.navigate('/purchase/' + data.id);

                    break;
                case "Credit_Purchase":
                    banhji.purchase.set("recurring", "edit");
                    banhji.router.navigate('/purchase/' + data.id);

                    break;
                default:
                    // default code block
            }
        },
        use                 : function(e){
            var data = e.data;

            switch(data.type) {
                case "Purchase_Order":
                    banhji.purchaseOrder.set("recurring", "use");
                    banhji.router.navigate('/purchase_order/' + data.id);
                    break;
                case "GRN":
                    banhji.grn.set("recurring", "use");
                    banhji.router.navigate('/grn/' + data.id);

                    break;
                case "Vendor_Deposit":
                    banhji.vendorDeposit.set("recurring", "use");
                    banhji.router.navigate('/vendor_deposit/' + data.id);

                    break;
                case "Cash_Purchase":
                    banhji.purchase.set("recurring", "use");
                    banhji.router.navigate('/purchase/' + data.id);

                    break;
                case "Credit_Purchase":
                    banhji.purchase.set("recurring", "use");
                    banhji.router.navigate('/purchase/' + data.id);

                    break;
                default:
                    // default code block
            }
        },
        getContactName      : function(id){
            var raw = banhji.source.supplierDS.get(id);
            if(raw){
                return raw.name;
            }else{
                return "";
            }
        }
    });
    // VENDOR REPORTS
    banhji.vendorReportCenter = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "vendor_modules/dashboard"),
        graphDS             : dataStore(apiUrl + "vendor_modules/monthly_purchase"),
        obj                 : {},
        pageLoad            : function(){
            this.loadData();
        },
        setObj      : function(){
            this.set("obj", {
                purchase            : 0,
                purchase_supplier   : 0,
                purchase_product    : 0,
                purchase_ordered    : 0,
                ap                  : 0,
                ap_open             : 0,
                ap_supplier         : 0,
                ap_overdue          : 0,
                payable_payment_day : 0
            });
        },
        pageLoad            : function(){
            var self = this, obj = this.get("obj");

            this.graphDS.read();

            this.dataSource.query({
                filter: [],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.dataSource.view();

                obj.set("purchase", kendo.toString(view[0].purchase, banhji.locale=="km-KH"?"c0":"c", banhji.locale));
                obj.set("purchase_supplier", kendo.toString(view[0].purchase_supplier, "n0"));
                obj.set("purchase_product", kendo.toString(view[0].purchase_product, "n0"));
                obj.set("purchase_ordered", kendo.toString(view[0].purchase_ordered, "n0"));

                obj.set("ap", kendo.toString(view[0].ap, banhji.locale=="km-KH"?"c0":"c", banhji.locale));
                obj.set("ap_open", kendo.toString(view[0].ap_open, "n0"));
                obj.set("ap_supplier", kendo.toString(view[0].ap_supplier, "n0"));
                obj.set("ap_overdue", kendo.toString(view[0].ap_overdue, "n0"));
                obj.set("payable_payment_day", kendo.toString(view[0].payable_payment_day, "n0"));
            });
        }
    });
    banhji.supplierList = kendo.observable({
        lang                    : langVM,
        institute               : banhji.institute,
        contact                 : dataStore(apiUrl + "vendorReports/supplier"),
        dataSource              : dataStore(apiUrl + "contacts/supplier"),
        statusList              : banhji.source.statusList,
        contact_type_id         : null,
        status                  : null,
        pageLoad                : function(){
        },
        search                  : function(){
            var para = [],
            status = this.get("status"),
            contact_type_id = this.get("contact_type_id");

            if(status!==null){
                para.push({ field:"status", value: status });
            }

            if(contact_type_id){
                para.push({ field:"contact_type_id", value: contact_type_id });
            }

            this.dataSource.filter(para);
            this.set("status", null);
            this.set("contact_type_id", null);
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=900, height=700'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="<?php echo base_url(); ?>assets/responsive.css" rel="stylesheet" >' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    '*{  } html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: landscape; margin:0mm; } .saleSummaryCustomer .total-customer, .saleSummaryCustomer .total-sale { background-color: #DDEBF7!important; -webkit-print-color-adjust:exact; }.saleSummaryCustomer .table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;-webkit-print-color-adjust:exact;}.saleSummaryCustomer .table.table-borderless.table-condensed  tr th span{ color: #fff!important; }.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td {  background-color: #fff!important; -webkit-print-color-adjust:exact;} .saleSummaryCustomer .table.table-borderless.table-condensed tr td { background-color: #F2F2F2!important;-webkit-print-color-adjust:exact; } </style>' +
                    '</head>' +
                    '<body><div id="example" class="k-content saleSummaryCustomer" style="padding: 30px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
    });
    banhji.expensesSummarySupplier =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "vendorReports/expense_summary_by_supplier"),
        contactDS           : banhji.source.supplierDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0;
                $.each(view, function(index, value){
                    amount += value.amount;
                });

                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.expensesDetailSupplier =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "vendorReports/expense_detail_by_supplier"),
        contactDS           : banhji.source.supplierDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0;
                $.each(view, function(index, value){
                    amount += value.amount;
                });

                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.supplierTransaction =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "vendorReports/transaction_vendor"),
        contactDS           : banhji.source.supplierDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalCustomer       : 0,
        totalSale           : 0,
        totalBalance        : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.filter(para);
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.purchaseSummaryProductServices =  kendo.observable({
        lang                : langVM,
        dataSource      : dataStore(apiUrl + "vendorReports/purchase_summary_by_product"),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field: "is_catalog <>", value: 1 },
                { field: "is_assembly <>", value: 1 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { itemIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        avg_sale            : 0,
        total_sale          : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.itemIds.length>0){
                var itemIds = [];
                $.each(obj.itemIds, function(index, value){
                    itemIds.push(value);
                });
                para.push({ field:"item_id", operator:"where_in", value:itemIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var txnCount = 0, amount = 0;
                $.each(view, function(index, value){
                    txnCount += value.txn_count;
                    amount += value.amount;
                });

                self.set("avg_sale", kendo.toString(amount/txnCount, "c2", banhji.locale));
                self.set("total_sale", kendo.toString(amount, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.purchaseSummaryBrand =  kendo.observable({
        lang                : langVM,
        dataSource      : dataStore(apiUrl + "vendorReports/purchase_summary_by_brand"),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field: "is_catalog <>", value: 1 },
                { field: "is_assembly <>", value: 1 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { itemIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        avg_sale            : 0,
        total_sale          : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.itemIds.length>0){
                var itemIds = [];
                $.each(obj.itemIds, function(index, value){
                    itemIds.push(value);
                });
                para.push({ field:"item_id", operator:"where_in", value:itemIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var txnCount = 0, amount = 0;
                $.each(view, function(index, value){
                    txnCount += value.txn_count;
                    amount += value.amount;
                });

                self.set("avg_sale", kendo.toString(amount/txnCount, "c2", banhji.locale));
                self.set("total_sale", kendo.toString(amount, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.purchaseOrderList =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "vendorReports/purchase_order_list"),
        contactDS           : banhji.source.supplierDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        orderCount          : 0,
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0, orderCount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        orderCount++;
                        amount += val.amount;
                    });
                });

                self.set("orderCount", kendo.toString(orderCount, "n0"));
                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.purchaseDetailProductServices =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "vendorReports/purchase_detail_by_product"),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field: "is_catalog <>", value: 1 },
                { field: "is_assembly <>", value: 1 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { itemIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        product_sale        : 0,
        total_sale          : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.itemIds.length>0){
                var itemIds = [];
                $.each(obj.itemIds, function(index, value){
                    itemIds.push(value);
                });
                para.push({ field:"item_id", operator:"where_in", value:itemIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var txnCount = 0, amount = 0, sale = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        txnCount++;
                        amount += val.amount;
                        sale += val.total;
                    });
                });

                self.set("product_sale", kendo.toString(amount/txnCount, "c2", banhji.locale));
                self.set("total_sale", kendo.toString(sale, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.purchaseDetailBrand =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "vendorReports/purchase_detail_by_brand"),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field: "is_catalog <>", value: 1 },
                { field: "is_assembly <>", value: 1 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { itemIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        product_sale        : 0,
        total_sale          : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.itemIds.length>0){
                var itemIds = [];
                $.each(obj.itemIds, function(index, value){
                    itemIds.push(value);
                });
                para.push({ field:"item_id", operator:"where_in", value:itemIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var txnCount = 0, amount = 0, sale = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        txnCount++;
                        amount += val.amount;
                        sale += val.total;
                    });
                });

                self.set("product_sale", kendo.toString(amount/txnCount, "c2", banhji.locale));
                self.set("total_sale", kendo.toString(sale, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.depositDetailSupplier =  kendo.observable({
        lang                : langVM,
        dataSource      : dataStore(apiUrl + "vendorReports/deposit_detail_by_supplier"),
        contactDS           : banhji.source.supplierDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Contact
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        amount += val.amount;
                    });
                });

                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.supplierBalance = kendo.observable({
        lang                    : langVM,
        dataSource      : dataStore(apiUrl + "vendorReports/summary_balance"),
        filterDB            : [
            {id: 'customer', name: 'Customer'},
            {id: 'segment', name: 'Segment'}
        ],
        filteredBy          : "customer",
        sortDB              : [
            {id: 'date', name: 'Date'}
        ],
        search  : function() {

            banhji.supplierBalance.dataSource.filter({
                logic: banhji.supplierBalance.get('filteredBy'),
                filters: [
                    {field: "issued_date >=", value: kendo.toString(this.startDate, "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(this.endDate, "yyyy-MM-dd")}
                ]
            });
        },
        filterChange  : function(e){
            banhji.supplierBalance.set("filteredBy", e.sender.dataSource.at(e.sender.selectedIndex-1).id);
        }
    });
    banhji.suppliersBalanceSummary =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "vendorReports/balance_summary"),
        obj                 : null,
        company             : banhji.institute,
        as_of               : new Date(),
        displayDate         : "",
        totalTxn            : 0,
        totalBalance        : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        search              : function(){
            var self = this, para = [],
                as_of = this.get("as_of"),
                displayDate = "";

            if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);
                as_of.setDate(as_of.getDate()+1);

                para.push({ field:"issued_date <", value:kendo.toString(as_of, "yyyy-MM-dd") });
            }

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var balance = 0, txnCount = 0;
                $.each(view, function(index, value){
                    txnCount += value.txn_count;
                    balance += value.amount;
                });

                self.set("total_txn", kendo.toString(txnCount, "n0"));
                self.set("total_balance", kendo.toString(balance, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.suppliersBalanceDetail =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "vendorReports/balance_detail"),
        obj                 : null,
        company             : banhji.institute,
        as_of               : new Date(),
        displayDate         : "",
        totalTxn            : 0,
        totalBalance        : 0,
        exArray             : [],
        contactDS           : banhji.source.supplierDS,
        obj                 : { contactIds: [] },
        pageLoad            : function(){
            this.search();
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                as_of = this.get("as_of"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);
                as_of.setDate(as_of.getDate()+1);

                para.push({ field:"issued_date <", value:kendo.toString(as_of, "yyyy-MM-dd") });
            }

            this.dataSource.query({
                filter:para,
                sort:[
                    { field:"issued_date", dir:"asc" },
                    { field:"number", operator:"order_by_related_contact", dir:"asc" }
                ]
            }).then(function(){
                var view = self.dataSource.view();

                var balance = 0, txnCount = 0;
                $.each(view, function(index, value){
                    txnCount += value.line.length;
                    $.each(value.line, function(ind, val){
                        balance += val.amount;
                    });
                });

                self.set("total_txn", kendo.toString(txnCount, "n0"));
                self.set("total_balance", kendo.toString(balance, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.payablesAgingSummary =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "vendorReports/aging_summary"),
        contactDS           : banhji.source.supplierDS,
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        as_of               : new Date(),
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                as_of = this.get("as_of"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);
                as_of.setDate(as_of.getDate()+1);

                para.push({ field:"issued_date <", value:kendo.toString(as_of, "yyyy-MM-dd") });
            }

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var balance = 0;
                $.each(view, function(index, value){
                    balance += value.total;
                });

                self.set("totalBalance", kendo.toString(balance, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.payablesAgingDetail =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "vendorReports/aging_detail"),
        contactDS           : banhji.source.supplierDS,
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        as_of               : new Date(),
        displayDate         : "",
        totalBalance        : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                as_of = this.get("as_of"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);
                as_of.setDate(as_of.getDate()+1);

                para.push({ field:"issued_date <", value:kendo.toString(as_of, "yyyy-MM-dd") });
            }

            this.dataSource.query({
                filter:para,
                sort:[
                    { field:"issued_date", dir:"asc" },
                    { field:"number", operator:"order_by_related_contact", dir:"asc" }
                ]
            }).then(function(){
                var view = self.dataSource.view();

                var balance = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        balance += val.amount;
                    });
                });

                self.set("totalBalance", kendo.toString(balance, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.listBillsPaid =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "vendorReports/bill_topay"),
        contactDS           : banhji.source.supplierDS,
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        as_of               : new Date(),
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                as_of = this.get("as_of"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);
                as_of.setDate(as_of.getDate()+1);

                para.push({ field:"issued_date <", value:kendo.toString(as_of, "yyyy-MM-dd") });
            }

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0;
                $.each(view, function(index, value){
                    amount += value.amount;
                });

                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.billPaymentList =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "vendorReports/bill_list"),
        contactDS           : banhji.source.supplierDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        total_txn           : 0,
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0, txn = [];
                $.each(view, function(index, value){
                    $.each(value.line, function(indexx, x){
                        var txnId = kendo.parseInt(x.reference.id);
                        if(txnId>0){
                            txn.push(txnId);
                        }

                        amount += x.amount;
                    });
                });

                txn = jQuery.unique(txn);

                self.set("total_txn", kendo.toString(txn.length, "n0"));
                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.vendorSale = kendo.observable({
        lang                : langVM,
        locale              : banhji.locale,
        // purchaseSummary      : dataStore(apiUrl + "vendorReports/expense_summary"),
        count               : 0,
        total_avg           : 0,
        supplierCount       : 0,
        saleNumber          : 0,
        gpm                 : 0,
        total_sale          : 0,
        companyName         : null,
        startDate           : "<?php echo date("d-m-y"); ?>",
        endDate             : new Date(),
        sorter              : '',
        openInvoice         : 0,
        company             : banhji.institute,
        sortList            : banhji.source.sortList,
        //line to sale summary
        purchaseSummary         : banhji.expensesPurchaseSummarySupplier,
        purchaseDetail          : banhji.expenseDetailSupplier,
        summaryProduct          : banhji.summaryProductSuppplier,
        purchaseOrder           : banhji.purchaseOrderReport,
        detailProduct           : banhji.detailProductSupplier,
        supplierTransaction     : banhji.supplierTransaction,
        depositDetail           : banhji.depositDetailSupplier,
        supplierBalance         : banhji.supplierBalance,
        balanceDetailSupplier   : banhji.balanceDetailSupplier,
        payablesAging           : banhji.payablesAgingSupplier,
        payablesAgingDetail     : banhji.payablesAgingDetailSupplier,
        listBillsPaid           : banhji.listBillsPaid,
        billPaymentList         : banhji.billPaymentList,

        collectReportDB         : banhji.collectReport,
        invoiceListDB           : banhji.invoiceList,
        // search button
        saleDetailSearch    : function() {
            this.detailSale.filter({
                logic: 'segment',
                filters: [
                    {field: "id", "operator": "segment", value: 9},
                    {field: "issued_date >=", value: kendo.toString(this.startDate, "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(this.endDate, "yyyy-MM-dd")}
                ]
            });
        },
        displayDateStart    : function() {
            return kendo.toString(new Date(this.get('startDate')), 'dd-MM-yyyy');
        },
        displayDateEnd    : function() {
            return kendo.toString(new Date(this.get('endDate')), 'dd-MM-yyyy');
        },
        trnxSearch          : function() {},
        depositDetailSearch : function() {},
        summaryProductSearch: function() {},
        detailProductSearch : function() {},
        saleJobSearch       : function() {},
        saleOrderSearch     : function() {},
        balanaceSearch      : function() {},
        balanceDetailSearch : function() {},
        agingSummarySearch  : function() {},
        agingDetailSearch   : function() {},
        collectingInvSearch : function() {},
        collectedInvSearch  : function() {},
        invoiceListSearch   : function() {},
        customerListSearch  : function() {},
        dateMax             : function(e) {
            $('#edate').css('width', '160px');
            var edate = $('#edate').kendoDatePicker().data("kendoDatePicker");
            edate.min(e.sender.value());
        },
        dateMin             : function(e) {
            $('#sdate').css('width', '160px');
            var sdate = $('#sdate').kendoDatePicker().data("kendoDatePicker");
            sdate.max(e.sender.value());
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=900, height=700'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="<?php echo base_url(); ?>assets/responsive.css" rel="stylesheet" >' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    '*{  } html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: landscape; margin:0mm; } .saleSummaryCustomer .total-customer, .saleSummaryCustomer .total-sale { background-color: #DDEBF7!important; -webkit-print-color-adjust:exact; }.saleSummaryCustomer .table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;-webkit-print-color-adjust:exact;}.saleSummaryCustomer .table.table-borderless.table-condensed  tr th span{ color: #fff!important; }.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td {  background-color: #fff!important; -webkit-print-color-adjust:exact;} .saleSummaryCustomer .table.table-borderless.table-condensed tr td { background-color: #F2F2F2!important;-webkit-print-color-adjust:exact; } </style>' +
                    '</head>' +
                    '<body><div id="example" class="k-content saleSummaryCustomer" style="padding: 30px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        dateChange          : function(){
            // var strDate = "";

            //  if(this.startDate && this.endDate){
            //      strDate = "From " + kendo.toString(this.startDate, "dd-MM-yyyy") + " To " + kendo.toString(this.endDate, "dd-MM-yyyy");
            //  }else if(this.startDate){
            //      strDate = "On " + kendo.toString(this.startDate,"dd-MM-yyyy");
            //  }else if(this.endDate){
            //      strDate = "As Of " + kendo.toString(this.endDate,"dd-MM-yyyy");
            //  }else{
            //      strDate = "";
            //  }

            var today = new Date(),
            day = today.getDate();
            sdate = "",
            edate = "",
            value = this.get('sorter');

            switch(value){
            case "today":
                sdate = today;

                break;
            case "week":
                var first = new Date(today.getTime() - 60*60*24* day*1000),
                last = new Date(today.getTime() + 60*60*24* day*1000);

                sdate = first;
                edate = last;

                break;
            case "month":
                var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
                edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                break;
            case "year":
                var sdate = new Date(today.getFullYear(), 0, 1),
                edate = new Date(today.getFullYear(), 11, 31);

                break;
            default:

            }

            this.set("startDate", sdate);
            this.set("endDate", edate);
            // start.value(sdate);
            // end.value(edate);

            // start.max(end.value());
           //       end.min(start.value());

           //       dateChanges();
           //          });

           //          start.max(end.value());
           //          end.min(start.value());
        }
    });
    // VENDOR SETTINGS
    banhji.vendorSetting =  kendo.observable({
        lang                : langVM,
        paymentMethodDS     : banhji.source.paymentMethodDS,
        paymentTermDS       : banhji.source.paymentTermDS,
        txnTemplateDS       : dataStore(apiUrl + "transaction_templates"),
        contactTypeDS       : dataStore(apiUrl + "contacts/type"),
        patternDS           : dataStore(apiUrl + "contacts"),
        contactTypeName     : "",
        contactTypeAbbr     : "",
        contactTypeCompany  : 0,
        paymentMethodName   : "",
        paymentTermName     : "",
        paymentTermNetDue   : "",
        paymentTermPeriod   : "",
        paymentTermPercentage   : "",
        prefixDS            : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "prefixes",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                create  : {
                    url: apiUrl + "prefixes",
                    type: "POST",
                    headers: banhji.header,
                    dataType: 'json'
                },
                update  : {
                    url: apiUrl + "prefixes",
                    type: "PUT",
                    headers: banhji.header,
                    dataType: 'json'
                },
                destroy     : {
                    url: apiUrl + "prefixes",
                    type: "DELETE",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter: { field:"type", operator:"where_in", value:["Purchase_Order", "GRN", "Cash_Payment", "Deposit", "Purchase_Return", "Cash_Purchase", "Credit_Purchase", "Cash_Payment"] },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        pageLoad            : function() {
            this.txnTemplateDS.filter({ field: "moduls", value : "vendor_mg" });
        },
        addContactType      : function(){
            var self = this, name = this.get("contactTypeName");

            if(name!==""){
                this.contactTypeDS.add({
                    parent_id   : 2,
                    name        : name,
                    abbr        : this.get("contactTypeAbbr"),
                    description : "",
                    is_company  : this.get("contactTypeCompany"),
                    is_system   : 0
                });

                this.contactTypeDS.sync();
                this.contactTypeDS.bind("requestEnd", function(e){
                    if(e.type==="create"){
                        var response = e.response.results[0];
                        self.addPattern(response.id);
                        banhji.source.loadContactTypes();
                    }
                });

                this.set("contactTypeName", "");
                this.set("contactTypeAbbr", "");
                this.set("contactTypeCompany", 0);
            }
        },
        addPattern          : function(id){
            this.patternDS.insert(0, {
                "contact_type_id"       : id,
                "number"                : "",
                "locale"                : banhji.locale,
                "is_pattern"            : 1,
                "status"                : 1
            });
            this.patternDS.sync();
        },
        addPaymentMethod        : function(){
            var name = this.get("paymentMethodName");

            if(name!==""){
                this.paymentMethodDS.add({
                    name        : name,
                    description : "",
                    is_system   : 0
                });

                this.paymentMethodDS.sync();

                this.set("paymentMethodName", "");
            }
        },
        addPaymentTerm      : function(){
            var name = this.get("paymentTermName");

            if(name!==""){
                this.paymentTermDS.add({
                    name                : name,
                    net_due             : this.get("paymentTermNetDue"),
                    discount_period     : this.get("paymentTermPeriod"),
                    discount_percentage : this.get("paymentTermPercentage"),
                    is_system           : 0
                });

                this.paymentTermDS.sync();

                this.set("paymentTermName", "");
                this.set("paymentTermNetDue", "");
                this.set("paymentTermPeriod", "");
                this.set("paymentTermPercentage", "");
            }
        },
        deleteForm      : function(e){
            var data = e.data;
            if(confirm("Do you want to delete it?") == true) {
                this.txnTemplateDS.remove(data);
                this.txnTemplateDS.sync();
            }
        },
        goInvoiceCustom : function(){

            banhji.invoiceCustom.set("selectTypeList", banhji.source.vendorFormList);
            banhji.invoiceCustom.set("selectCustom", "vendor_mg");
            banhji.invoiceCustom.set("formShow", banhji.view.invoiceForm35);
            banhji.invoiceCustom.set("formTitle", "Purchase Order");
            banhji.invoiceCustom.set("formType", "Purchase_Order");
            var obj= banhji.invoiceCustom.get("obj");
            obj.set("type", "Purchase_Order");
            banhji.router.navigate('/invoice_custom');
        }
    });





    /*************************************************
    *   EMPLOYEE MVVM                                *
    *************************************************/
    banhji.employeeDashboard = kendo.observable({
        lang                : langVM,
        summaryDS           : dataStore(apiUrl + "customer_modules/customer_summary"),
        topCustomerDS       : dataStore(apiUrl + "customer_modules/top_customer"),
        topARDS             : dataStore(apiUrl + "customer_modules/top_ar"),
        topProductDS        : dataStore(apiUrl + "inventory_modules/top_sale_product"),
        graphDS             : dataStore(apiUrl + 'customer_modules/monthly_sale'),
        sale                : 0,
        sale_customer       : 0,
        sale_product        : 0,
        sale_order          : 0,
        order               : 0,
        order_avg           : 0,
        order_open          : 0,
        ar                  : 0,
        ar_open             : 0,
        ar_customer         : 0,
        ar_overdue          : 0,
        pageLoad            : function(){
            var self = this, today = new Date(),
            firstDayOfYear = new Date(today.getFullYear(), 0, 1);

            // this.summaryDS.query({
            //  filter: [
            //      { field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
            //      { field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
            //  ],
            //  page: 1,
            //  pageSize: 5
            // }).then(function(){
            //  var view = self.summaryDS.view();

            //  self.set("sale", kendo.toString(view[0].sale, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale));
            //  self.set("sale_customer", kendo.toString(view[0].sale_customer, "n0"));
            //  self.set("sale_product", kendo.toString(view[0].sale_product, "n0"));
            //  self.set("sale_order", kendo.toString(view[0].sale_order, "n0"));

            //  self.set("order", kendo.toString(view[0].order, "n0"));
            //  self.set("order_avg", kendo.toString(view[0].order_avg, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale));
            //  self.set("order_open", kendo.toString(view[0].order_open, "n0"));

            //  self.set("ar", kendo.toString(view[0].ar, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale));
            //  self.set("ar_open", kendo.toString(view[0].ar_open, "n0"));
            //  self.set("ar_customer", kendo.toString(view[0].ar_customer, "n0"));
            //  self.set("ar_overdue", kendo.toString(view[0].ar_overdue, "n0"));
            // });

            // this.topCustomerDS.query({
            //  filter: [
            //      { field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
            //      { field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
            //  ],
            //  page: 1,
            //  pageSize: 5
            // });

            // this.topARDS.query({
            //  filter: [
            //      { field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
            //      { field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
            //  ],
            //  page: 1,
            //  pageSize: 5
            // });

            // this.topProductDS.query({
            //  filter: [
            //      { field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
            //      { field:"issued_date <=", operator:"where_related_transaction", value:  kendo.toString(today, "yyyy-MM-dd") }
            //  ],
            //  page: 1,
            //  pageSize: 5
            // });

            // this.loadGraph();
        },
        loadGraph           : function(){
            var self = this,
            today = new Date(),
            firstDayOfYear = new Date(today.getFullYear(), 0, 1);

            this.graphDS.query({
                filter: [
                    { field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
                ],
                page: 1,
                pageSize: 100
            }).then(function(e) {
                var view = self.graphDS.view();

                $('#graph').kendoChart({
                    dataSource: {data: view},
                    series: [
                        {field: 'sale', categoryField:'month', type: 'line', axis: 'order'}
                    ],
                    valueAxes: [
                        {
                            name: "order",
                            color: "#007eff",
                            min: 0,
                            majorUnit: 500000,
                            max: 1000000
                        }
                    ],
                    categoryAxis: {
                        //categories: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],
                        axisCrossingValues: [0, 13],
                        justified: true
                    },
                    tooltip: {
                        visible: true,
                        format: "{0}",
                        template: "#= series.field #: #= value #"
                    }
                });
            });
        }
    });
    banhji.employeeCenter = kendo.observable({
        lang                : langVM,
        transactionDS       : dataStore(apiUrl + 'transactions'),
        contactDS           : dataStore(apiUrl + 'contacts'),
        noteDS              : dataStore(apiUrl + 'notes'),
        summaryDS           : dataStore(apiUrl + "transactions"),
        currencyDS              : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        contactTypeDS           : new kendo.data.DataSource({
            data: banhji.source.contactTypeList,
            filter: { field:"parent_id", value: 2 }//Supplier
        }),
        sortList            : banhji.source.sortList,
        sorter              : "all",
        sdate               : "",
        edate               : "",
        obj                 : null,
        note                : "",
        searchText          : "",
        contact_type_id     : 0,
        currency_id         : 0,
        user_id             : banhji.source.user_id,
        balance             : 0,
        po                  : 0,
        openInvoice         : 0,
        overInvoice         : 0,
        pageLoad            : function(){
        },
        loadSummary         : function(id){
            var self = this, obj = this.get("obj");

            this.summaryDS.query({
                filter: [
                    { field:"contact_id", value: obj.id },
                    { field:"type", operator:"where_in", value: ["Cash_Purchase","Credit_Purchase", "Purchase_Order"] },
                    { field:"status", value: 0 }
                ],
                sort: { field: "issued_date", dir: "desc" },
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.summaryDS.view(),
                balance = 0, open = 0, over = 0, po = 0, today = new Date();

                $.each(view, function(index, value){
                    if(value.type=="Purchase_Order"){
                        po++;
                    }else{
                        balance += kendo.parseFloat(value.amount);
                        open++;

                        if(new Date(value.due_date)<today){
                            over++;
                        }
                    }
                });

                self.set("balance", kendo.toString(balance, "c", obj.locale));
                self.set("po", kendo.toString(po, "n0"));
                self.set("openInvoice", kendo.toString(open, "n0"));
                self.set("overInvoice", kendo.toString(over, "n0"));
            });
        },
        loadTransaction     : function(id){
            this.transactionDS.query({
                filter: { field:"contact_id", value: id },
                sort: { field: "issued_date", dir: "desc" },
                page: 1,
                pageSize: 100
            });
        },
        loadBalance         : function(){
            var obj = this.get("obj");

            this.transactionDS.query({
                filter: [
                    { field:"contact_id", value: obj.id },
                    { field:"type", operator:"where_in", value:["Purchase","Expense"] },
                    { field:"status", value: 0 }
                ],
                sort: { field: "issued_date", dir: "desc" },
                page: 1,
                pageSize: 100
            });
        },
        loadPO              : function(){
            var obj = this.get("obj");

            this.transactionDS.query({
                filter: [
                    { field:"contact_id", value: obj.id },
                    { field:"type", value:"PO" },
                    { field:"status", value: 0 }
                ],
                sort: { field: "issued_date", dir: "desc" },
                page: 1,
                pageSize: 100
            });
        },
        loadOverInvoice     : function(){
            var obj = this.get("obj");

            this.transactionDS.query({
                filter: [
                    { field:"contact_id", value: obj.id },
                    { field:"type", operator:"where_in", value: ["Purchase","Expense"] },
                    { field:"due_date <", value: kendo.toString(new Date(), "yyyy-MM-dd") },
                    { field:"status", value: 0 }
                ],
                sort: { field: "issued_date", dir: "desc" },
                page: 1,
                pageSize: 100
            });
        },
        loadNote            : function(id){
            this.noteDS.query({
                filter: { field:"contact_id", value: id },
                sort: { field:"noted_date", dir:"desc" },
                page: 1,
                pageSize: 100
            });
        },
        selectedRow         : function(e){
            var id = e.data.id,
            data = e.data;

            this.set("obj", data);
            this.loadSummary(id);
            this.loadTransaction(id);
            this.loadNote(id);
        },
        sorterChanges       : function(){
            var value = this.get("sorter");

            switch(value){
            case "today":
                var today = new Date();

                this.set("sdate", today);
                this.set("edate", today);

                break;
            case "week":
                var thisWeek = new Date;
                var first = thisWeek.getDate() - thisWeek.getDay();
                var last = first + 6;

                var firstDayOfWeek = new Date(thisWeek.setDate(first));
                var lastDayOfWeek = new Date(thisWeek.setDate(last));

                this.set("sdate", firstDayOfWeek);
                this.set("edate", lastDayOfWeek);

                break;
            case "month":
                var thisMonth = new Date;
                var firstDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth(), 1);
                var lastDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth() + 1, 0);

                this.set("sdate", firstDayOfMonth);
                this.set("edate", lastDayOfMonth);

                break;
            case "year":
                var thisYear = new Date();
                var firstDayOfYear = new Date(thisYear.getFullYear(), 0, 1);
                var lastDayOfYear = new Date(thisYear.getFullYear(), 11, 31);

                this.set("sdate", firstDayOfYear);
                this.set("edate", lastDayOfYear);

                break;
            default:
                this.set("sdate", "");
                this.set("edate", "");
            }
        },
        enterSearch         : function(e){
            e.preventDefault();

            this.search();
        },
        search              : function(){
            var self = this,
            para = [],
            txtSearch = this.get("searchText"),
            contact_type_id = this.get("contact_type_id"),
            currency_id = this.get("currency_id");

            if(txtSearch){
                para.push(
                    { field: "number", operator: "like", value: txtSearch },
                    { field: "surname", operator: "or_like", value: txtSearch },
                    { field: "name", operator: "or_like", value: txtSearch },
                    { field: "company", operator: "or_like", value: txtSearch }
                );
            }

            if(contact_type_id){
                para.push({ field: "contact_type_id", value: contact_type_id });
            }else{
                para.push({ field: "parent_id", operator:"where_related_contact_type", value: 2 });
            }

            if(currency_id){
                para.push({ field: "currency_id", value: currency_id });
            }

            this.contactDS.filter(para);
            var loaded = false;
            this.contactDS.bind("requestEnd", function(){
                if(loaded==false){
                    loaded = true;

                    //Clear search filters
                    self.set("searchText", "");
                    self.set("contact_type_id", 0);
                    self.set("currency_id", 0);
                }
            });
        },
        searchTransaction   : function(){
            var self = this,
                para = [],
                obj = this.get("obj"),
                start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"),
                end = kendo.toString(this.get("edate"), "yyyy-MM-dd");

            //Dates
            if(start && end){
                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <=", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                para.push({ field:"issued_date <=", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }

            para.push({ field:"contact_id", value: obj.id });

            this.transactionDS.query({
                filter: para,
                sort: { field: "issued_date", dir: "desc" },
                page: 1,
                pageSize: 100
            });
        },
        goEditContact       : function(){
            var obj = this.get("obj");

            banhji.router.navigate('/vendor/'+obj.id);
        },
        goCashadvance       : function(){
            var obj = this.get("obj");

            banhji.router.navigate('/cash_advance');
            banhji.cashAdvance.loadContact(obj.id);
        },
        goExpense           : function(){
            var obj = this.get("obj");

            banhji.router.navigate('/expense');
            banhji.expense.loadContact(obj.id);
        },
        saveNote            : function(){
            var self = this;

            if(this.get("note")!==""){
                this.noteDS.insert(0, {
                    contact_id  : this.get("obj").id,
                    note        : this.get("note"),
                    noted_date  : new Date(),
                    created_by  : this.get("user_id"),

                    creator     : ""
                });
                var saved = false;
                this.noteDS.sync();
                this.noteDS.bind("requestEnd", function(){
                    if(saved==false){
                        saved = true;

                        self.set("note", "");
                    }
                });
            }else{
                alert("memo is required");
            }
        }
    });
    banhji.employee = kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "contacts"),
        patternDS               : dataStore(apiUrl + "contacts"),
        deleteDS                : dataStore(apiUrl + "transactions"),
        existingDS              : dataStore(apiUrl + "contacts"),
        businessTypeDS          : dataStore(apiUrl + "businesstypes"),
        contactTypeDS           : banhji.source.employeeTypeDS,
        contactPersonDS         : dataStore(apiUrl + "contact_persons"),
        adDS                    : banhji.source.ADAcountDS,
        saDS                    : banhji.source.SAAcountDS,
        currencyDS              : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        genders                 : banhji.source.genderList,
        statusList              : banhji.source.statusList,
        obj                     : null,
        originalNo              : null,
        isDuplicateNumber       : false,
        isCompany               : false,
        isEdit                  : false,
        pageLoad                : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
                this.loadContactPerson(id);
            }else{
                if(this.get("isEdit")){
                    this.set("isEdit", false);

                    this.dataSource.data([]);

                    this.addEmpty();
                }else if(this.dataSource.total()==0){
                    this.addEmpty();
                }else{
                    var obj = this.get("obj");

                    obj.set("is_pattern", false);
                }
            }
        },
        setPattern              : function(id){
            var obj = this.get("obj");

            obj.set("contact_type_id", id);
            obj.set("is_pattern", true);
        },
        loadPattern             : function(id){
            var self = this;

            this.patternDS.query({
                filter: [
                    { field:"contact_type_id", value: id },
                    { field:"is_pattern", value: true }
                ],
                page: 1,
                pageSize: 1
            }).then(function(data){
                var view = self.patternDS.view(),
                obj = self.get("obj");

                if(view.length>0){
                    obj.set("account_id", view[0].account_id);
                    obj.set("discount_account_id", view[0].discount_account_id);
                    obj.set("deposit_account_id", view[0].deposit_account_id);
                    obj.set("tax_item_id", view[0].tax_item_id);
                    obj.set("currency_id", view[0].currency_id);
                    obj.set("credit_limit", view[0].credit_limit);

                    obj.set("payment_term_id", view[0].payment_term_id);
                    obj.set("payment_method_id", view[0].payment_method_id);
                    obj.set("business_type_id", view[0].business_type_id);
                }else{
                    obj.set("account_id", 0);
                    obj.set("discount_account_id", 0);
                    obj.set("deposit_account_id", 0);
                    obj.set("tax_item_id", 0);
                    obj.set("currency_id", 0);
                    obj.set("credit_limit", 0);

                    obj.set("payment_term_id", 0);
                    obj.set("payment_method_id", 0);
                    obj.set("business_type_id", 0);
                }
            });
        },
        loadObj                 : function(id){
            var self = this;

            this.dataSource.query({
                filter:{ "field":"id", value: id },
                page: 1,
                pageSize: 100
            }).then(function(e){
                var view = self.dataSource.view();

                if(view[0].contact_type_id=="6" || view[0].contact_type_id=="7" || view[0].contact_type_id=="8"){
                    self.set("isCompany", true);
                }else{
                    self.set("isCompany", false);
                }

                self.set("obj", view[0]);
                self.loadMap();
                self.set("originalNo", view[0].number);
            });
        },
        loadPatternEdit         : function(id){
            var self = this;

            this.dataSource.query({
                filter:[
                    { "field":"id", value: id },
                    { "field":"is_pattern", value: 1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
            });
        },
        loadContactPerson       : function(id){
            this.contactPersonDS.query({
                filter: { "field":"contact_id", value: id },
                page: 1,
                pageSize: 100
            });
        },
        copyBillTo              : function(){
            var obj = this.get("obj");

            obj.set("ship_to", obj.bill_to);
        },
        contactTypeChanges      : function(){
            var obj = this.get("obj");

            if(obj.contact_type_id>0){
                this.loadPattern(obj.contact_type_id);
            }
        },
        checkExistingNumber     : function(){
            var self = this;

            var number = this.get("obj").number;
            var originalNo = this.get("originalNo");

            if(number.length>0 && number!==originalNo){
                this.existingDS.query({
                    filter: { field:"number", value: number },
                    page: 1,
                    pageSize: 100
                }).then(function(e){
                    var view = self.existingDS.view();

                    if(view.length>0){
                        self.set("isDuplicateNumber", true);
                    }else{
                        self.set("isDuplicateNumber", false);
                    }
                });
            }else{
                this.set("isDuplicateNumber", false);
            }
        },
        addEmptyContactPerson   : function(){
            var contact_id = 0;
            if(this.get("isEdit")){
                contact_id = this.get("obj").id;
            }

            this.contactPersonDS.add({
                contact_id          : contact_id,
                prefix              : "",
                name                : "",
                department          : "",
                phone               : "",
                email               : ""
            });
        },
        deleteContactPerson     : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var d = e.data,
                obj = this.contactPersonDS.getByUid(d.uid);

                this.contactPersonDS.remove(obj);
            }
        },
        addEmpty                : function(){
            this.dataSource.data([]);
            this.set("obj", null);

            this.dataSource.add({
                "company_id"            : 0,
                "ebranch_id"            : 0,
                "elocation_id"          : 0,
                "wbranch_id"            : 0,
                "wlocation_id"          : 0,
                "currency_id"           : 0,
                "user_id"               : 0,
                "contact_type_id"       : 0,
                "number"                : "",
                "enumber"               : "",
                "wnumber"               : "",
                "surname"               : "",
                "name"                  : "",
                "gender"                : "M",
                "dob"                   : "",
                "pob"                   : "",
                "latitute"              : "",
                "longtitute"            : "",
                "credit_limit"          : 0,
                "id_number"             : "",
                "phone"                 : "",
                "email"                 : "",
                "website"               : "",
                "job"                   : "",
                "vat_no"                : "",
                "family_member"         : "",
                "address"               : "",
                "bill_to"               : "",
                "ship_to"               : "",
                "memo"                  : "",
                "image_url"             : "",
                "company"               : "",
                "company_en"            : "",
                "bank_name"             : "",
                "bank_address"          : "",
                "bank_account_name"     : "",
                "bank_account_number"   : "",
                "name_on_cheque"        : "",
                "business_type_id"      : 0,
                "payment_term_id"       : 0,
                "payment_method_id"     : 0,
                "deposit_account_id"    : 0,
                "discount_account_id"   : 0,
                "account_id"            : 0,
                "salary_account_id"     : 0,
                "ra_id"                 : 0,
                "tax_item_id"           : 0,
                "phase_id"              : 0,
                "voltage_id"            : 0,
                "ampere_id"             : 0,
                "registered_date"       : new Date(),
                "use_electricity"       : 0,
                "use_water"             : 0,
                "is_local"              : 0,
                "is_pattern"            : 0,
                "status"                : 1
            });

            var data = this.dataSource.data();
            var obj = data[data.length - 1];
            this.set("obj", obj);
        },
        contactSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                dfd.resolve(e.response.results);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, saved = false;

            if(this.get("isEdit")){
                this.dataSource.sync();
                this.contactPersonDS.sync();
            }else{
                this.contactSync().then(function(data){
                    self.saveContactPerson(data[0].id);

                    if(data[0].is_pattern){
                        self.savePattern(data[0].contact_type_id, data[0].id);
                    }
                }).then(function(){
                    self.contactPersonDS.data([]);

                    self.addEmpty();
                });
            }
        },
        delete                  : function(){
            var self = this,
            obj = this.get("obj"),
            id = obj.id;

            if (confirm("Are you sure, you want to delete it?")) {
                this.deleteDS.query({
                    filter: { field: "contact_id", value: id },
                    page: 1,
                    pageSize: 1
                }).then(function() {
                    var view = self.deleteDS.view();

                    if(view.length>0){
                        alert("Sorry, you can not delete it because it is using now.");
                    }else{
                        var data = self.dataSource.get(id);
                        self.dataSource.remove(data);
                        self.save();

                        window.history.back();
                    }
                });
            }
        },
        cancel                  : function(){
            this.dataSource.cancelChanges();
            this.contactPersonDS.cancelChanges();

            window.history.back();
        },
        saveContactPerson       : function(id){
            $.each(this.contactPersonDS.data(), function(index, value) {
                value.set("contact_id", id);
            });

            this.contactPersonDS.sync();
        },
        savePattern             : function(contact_type_id, contact_id){
            var data = this.contactTypeDS.get(contact_type_id);
            data.set("contact_id", contact_id);
            this.contactTypeDS.sync();

            banhji.vendorSetting.contactTypeDS.fetch();
            window.history.back();
        }
    });





    /*************************************************
    *   INVENTORY MVVM                               *
    *************************************************/
    banhji.itemDashBoard = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "inventory_modules/dashboard"),
        graphDS             : dataStore(apiUrl + "inventory_modules/monthly_item_purchase_sale"),
        obj                 : {},
        pageLoad            : function(){
            this.loadData();
        },
        loadData            : function(){
            var self = this;

            this.graphDS.read();

            this.dataSource.query({
                filter: []
            }).then(function(){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
            });
        }
    });
    banhji.itemCenter = kendo.observable({
        lang                : langVM,
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field:"item_type_id <>", value: 3 },
                { field:"item_type_id <>", value: 5 }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"id", dir:"asc" }
            ],
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        dataSource          : dataStore(apiUrl + "inventory_modules/center"),
        transactionDS       : dataStore(apiUrl + "items/movement"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        categoryDS          : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter:[
                { field:"item_type_id", operator:"neq", value: 3 },
                { field:"item_type_id", operator:"neq", value: 5 }
            ]
        }),
        sortList            : banhji.source.sortList,
        sorter              : "all",
        sdate               : "",
        edate               : "",
        obj                 : null,
        raw                 : null,
        searchText          : "",
        pageLoad            : function(id){
            if(id){
                this.loadObj(id);
            }

            //Refresh
            if(this.itemDS.total()>0){
                this.itemDS.fetch();
                this.transactionDS.fetch();
            }
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Item",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        onRemove            : function(e){
            // Array with information about the uploaded files
            var self = this, files = e.files;
            $.each(this.attachmentDS.data(), function(index, value){
                if(value.name==files[0].name){
                    self.attachmentDS.remove(value);

                    return false;
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm("Are you sure, you want to delete it?")) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            var self = this;

            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                if(e.type=="destroy"){
                    if(saved==false){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var paramz = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(paramz, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });

            //Clear upload files
            $(".k-upload-files").remove();
        },
        //Obj
        loadObj             : function(id){
            var self = this;

            this.itemDS.query({
                filter: { field:"id", value:id},
                page:1,
                pageSize:100
            }).then(function(){
                var view = self.itemDS.view();

                if(view.length>0){
                    self.set("obj", view[0]);
                    self.loadData();
                }
            });
        },
        loadData            : function(){
            var self = this, obj = this.get("obj");

            if(obj!==null){
                this.searchTransaction();

                this.dataSource.query({
                    filter: { field:"id", value: obj.id }
                }).then(function(){
                    var view = self.dataSource.view();

                    self.set("raw", view[0]);
                });

                this.attachmentDS.query({
                    filter:{ field:"item_id", value: obj.id },
                    page: 1,
                    pageSize:10
                });
            }
        },
        selectedRow         : function(e){
            var self = this, data = e.data;

            this.set("obj", data);
            this.loadData();
        },
        sorterChanges       : function(){
            var value = this.get("sorter");

            switch(value){
            case "today":
                var today = new Date();

                this.set("sdate", today);
                this.set("edate", today);

                break;
            case "week":
                var thisWeek = new Date;
                var first = thisWeek.getDate() - thisWeek.getDay();
                var last = first + 6;

                var firstDayOfWeek = new Date(thisWeek.setDate(first));
                var lastDayOfWeek = new Date(thisWeek.setDate(last));

                this.set("sdate", firstDayOfWeek);
                this.set("edate", lastDayOfWeek);

                break;
            case "month":
                var thisMonth = new Date;
                var firstDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth(), 1);
                var lastDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth() + 1, 0);

                this.set("sdate", firstDayOfMonth);
                this.set("edate", lastDayOfMonth);

                break;
            case "year":
                var thisYear = new Date();
                var firstDayOfYear = new Date(thisYear.getFullYear(), 0, 1);
                var lastDayOfYear = new Date(thisYear.getFullYear(), 11, 31);

                this.set("sdate", firstDayOfYear);
                this.set("edate", lastDayOfYear);

                break;
            default:
                this.set("sdate", "");
                this.set("edate", "");
            }
        },
        search              : function(){
            var self = this,
            para = [],
            searchText = this.get("searchText"),
            category_id = this.get("category_id");

            if(searchText){
                var textParts = searchText.replace(/([a-z]+)/i, "$1 ").split(/[^0-9a-z]+/ig);

                para.push(
                    // { field: "abbr", operator: "or_like", value: textParts[0] },
                    // { field: "number", value: textParts[1] },
                    { field: "number", operator: "startswith", value: searchText },
                    { field: "name", operator: "or_like", value: searchText }
                );
            }

            if(category_id){
                para.push({ field:"category_id", value:category_id });
            }

            // para.push({ field:"item_type_id", value:1 });
            // para.push({ field:"is_catalog", value: 0 });
            // para.push({ field:"is_assembly", value: 0 });

            this.itemDS.filter(para);

            this.set("searchText", "");
            this.set("category_id", 0);
        },
        searchTransaction   : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate");

            if(obj!==null){
                para.push({ field:"item_id", value: obj.id });

                //Dates
                if(start && end){
                    start = new Date(start);
                    end = new Date(end);
                    end.setDate(end.getDate()+1);

                    para.push({ field:"issued_date >=", operator: "where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                    para.push({ field:"issued_date <=", operator: "where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
                }else if(start){
                    start = new Date(start);
                    para.push({ field:"issued_date", operator: "where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                }else if(end){
                    end = new Date(end);
                    end.setDate(end.getDate()+1);
                    para.push({ field:"issued_date <=", operator: "where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
                }else{}

                this.transactionDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 10
                });
            }
        },
        edit                : function(){
            var obj = this.get("obj");

            if(obj!==null){
                if(obj.item_type_id=="1"){
                    if(obj.is_catalog=="1"){
                        banhji.router.navigate('/item_catalog/'+obj.id);
                    }else if(obj.is_assembly=="1"){
                        banhji.router.navigate('/item_assembly/'+obj.id);
                    }else{
                        banhji.router.navigate('/item/'+obj.id);
                    }
                }else if(obj.item_type_id=="2"){
                    banhji.router.navigate('/non_inventory_part/'+obj.id);
                }else if(obj.item_type_id=="3"){
                    banhji.router.navigate('/fixed_assets/'+obj.id);
                }else if(obj.item_type_id=="4"){
                    banhji.router.navigate('/item_service/'+obj.id);
                }else if(obj.item_type_id=="5"){
                    banhji.router.navigate('/txn_item/'+obj.id);
                }else{

                }
            }
        },
        pricing             : function(){
            var obj = this.get("obj");

            if(obj!==null){
                if(obj.is_catalog=="1"){
                    banhji.router.navigate('/item_catalog/'+obj.id);
                }else if(obj.is_assembly=="1"){
                    banhji.router.navigate('/item_assembly/'+obj.id);
                }else{
                    banhji.router.navigate('/item_prices/'+obj.id);
                }
            }
        },
        variant             : function(){
            var obj = this.get("obj");

            if(obj!==null){
                if(obj.variant.length>0){
                    banhji.router.navigate('/item_variant/'+obj.sub_of_id);
                }
            }
        }
    });
    banhji.itemPrice = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "item_prices"),
        itemDS              : dataStore(apiUrl + "items"),
        recordDS            : dataStore(apiUrl + "items/movement"),
        poDS                : dataStore(apiUrl + "item_lines"),
        soDS                : dataStore(apiUrl + "item_lines"),
        onHandDS            : dataStore(apiUrl + "item_lines"),
        measurementDS       : banhji.source.measurementDS,
        currencyDS          : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        obj                 : null,
        priceList           : null,
        windowVisible       : false,
        isltBase            : true,
        type                : "ltBase",
        isBase              : false,
        on_po               : 0,
        on_so               : 0,
        on_hand             : 0,
        pageLoad            : function(id){
            this.dataSource.filter([
                { field:"item_id", value: id },
                { field:"assembly_id", value: 0 }
            ]);
            this.recordDS.query({
                filter: { field:"item_id", value: id },
                page:1,
                pageSize:10
            });
            this.loadObj(id);
            this.loadData(id);
        },
        loadObj             : function(id){
            var self = this;

            this.itemDS.query({
                filter: { field:"id", value: id },
                page:1,
                pageSize:1
            }).then(function(e){
                var view = self.itemDS.view();

                self.set("obj", view[0]);

                if(view[0].item_type_id==1){
                    self.loadOnHand(view[0].id);
                }else{
                    self.set("on_hand", 0);
                }
            });
        },
        loadData            : function(id){
            var self = this;

            //PO
            this.poDS.query({
                filter:[
                    { field:"item_id", value:id },
                    { field:"type", operator:"where_related_transaction",  value:"Purchase_Order" },
                    { field:"status", operator:"where_related_transaction", value:0 }
                ],
                page:1,
                pageSize:100
            }).then(function(){
                var view = self.poDS.view(),
                sum = 0;

                $.each(view, function(index, value){
                    sum += kendo.parseInt(value.quantity);
                });

                self.set("on_po", kendo.toString(sum, "n0"));
            });

            //SO
            this.soDS.query({
                filter:[
                    { field:"item_id", value: id },
                    { field:"type", operator:"where_related_transaction", value:"Sale_Order" },
                    { field:"status", operator:"where_related_transaction", value:0 }
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.soDS.view(),
                sum = 0;

                $.each(view, function(index, value){
                    sum += kendo.parseInt(value.quantity);
                });

                self.set("on_so", kendo.toString(sum, "n0"));
            });
        },
        loadOnHand          : function(id){
            var self = this;

            this.onHandDS.query({
                filter:[
                    { field:"item_id", value: id },
                    { field:"type", operator:"where_in_related_transaction", value:["Cash_Purchase", "Credit_Purchase", "Commercial_Invoice", "Vat_Invoice", "Invoice", "Commercial_Cash_Sale", "Vat_Cash_Sale", "Cash_Sale", "Item_Adjustment", "Internal_Usage"] },
                    { field:"is_recurring <>", operator:"where_related_transaction", value: 1 },
                    { field:"deleted <>", operator:"where_related_transaction", value: 1 }
                ]
            }).then(function(){
                var view = self.onHandDS.view();

                var onHand = 0;
                $.each(view, function(index, value){
                    onHand += (value.quantity * value.conversion_ratio * value.movement);
                });

                self.set("on_hand", kendo.toString(onHand, "n0"));
            });
        },
        changes             : function(){
            var p = this.get("priceList"),
            unitValue = 0;

            if(this.get("type")=="ltBase"){
                if(p.quantity>0){
                    unitValue = 1 / p.quantity;
                }else{
                    unitValue = 0;
                }
            }else{
                unitValue = p.quantity;
            }

            p.set("conversion_ratio", unitValue);
        },
        typeChanges         : function(){
            if(this.get("type")=="ltBase"){
                this.set("isltBase", true);
            }else{
                this.set("isltBase", false);
            }

            this.changes();
        },
        measurementChanges  : function(){
            var priceList = this.get("priceList"), lastIndex = this.dataSource.total()-1;

            if(priceList.measurement_id>0){
                $.each(this.dataSource.data(), function(index, value){
                    if(index < lastIndex && value.measurement_id==priceList.measurement_id){
                        priceList.set("measurement_id", 0);

                        $("#ntf1").data("kendoNotification").error(banhji.source.duplicateMeasurementMessage);

                        return false;
                    }
                });
            }
        },
        openWindow          : function(){
            this.addEmpty();
            this.set('windowVisible', true);
        },
        closeWindow         : function(){
            this.dataSource.cancelChanges();
            this.set('windowVisible', false);
        },
        addEmpty            : function () {
            var obj = this.get("obj");
            this.set("isBase", false);
            this.set("type", "ltBase");

            this.dataSource.add({
                item_id         : obj.id,
                measurement_id  : 0,
                quantity        : 1,
                price           : 0,
                conversion_ratio: 0,
                locale          : obj.locale,
                measurement     : ""
            });

            var data = this.dataSource.data();
            var obj = data[data.length - 1];

            this.set("priceList", obj);
        },
        validating          : function(){
            var result = true,
                priceList = this.get("priceList");

            if(priceList.measurement_id==0){
                result = false;
            }

            return result;
        },
        save                : function(){
            if(this.validating()){
                this.dataSource.sync();
                var saved = false;
                this.dataSource.bind("requestEnd",function(e){
                    if(saved==false){
                        saved = true;

                        $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);
                    }
                });

                this.set("windowVisible", false);
            }else{
                $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
            }
        },
        edit                : function(e){
            var data = e.data;

            this.set("priceList", data);

            if(this.dataSource.indexOf(data)==0){
                this.set("isBase", true);
                data.set("quantity", 1);
            }else{
                this.set("isBase", false);

                if(data.conversion_ratio>1){
                    this.set("type", "gtBase");
                    this.set("isltBase", false);
                }else{
                    this.set("type", "ltBase");
                    this.set("isltBase", true);
                }
            }

            this.set("windowVisible", true);
        },
        delete              : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var data = e.data;

                this.dataSource.remove(data);
                this.dataSource.sync();
            }
        }
    });
    banhji.item = kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "items"),
        patternDS               : dataStore(apiUrl + "items"),
        numberDS                : dataStore(apiUrl + "items"),
        deleteDS                : dataStore(apiUrl + "item_lines"),
        attachmentDS            : dataStore(apiUrl + "attachments"),
        itemPriceDS             : dataStore(apiUrl + "item_prices"),
        itemVendorDS            : dataStore(apiUrl + "items/contact"),
        itemCustomerDS          : dataStore(apiUrl + "items/contact"),
        itemVariantDS           : dataStore(apiUrl + "item_variants"),
        generateVariantDS       : dataStore(apiUrl + "item_variants/generate"),
        itemGroupDS             : banhji.source.itemGroupDS,
        brandDS                 : banhji.source.brandDS,
        measurementDS           : banhji.source.measurementDS,
        currencyDS              : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        vendorDS                : banhji.source.supplierDS,
        customerDS              : banhji.source.customerDS,
        categoryDS              : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: [
                { field:"item_type_id", value: 1 },
                { field:"id", operator:"neq", value: 5 },
                { field:"id", operator:"neq", value: 6 }
            ]
        }),
        incomeAccountDS         : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 35 },
                    { field: "account_type_id", value: 39 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        cogsAccountDS           : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 36 },
            sort: { field:"number", dir:"asc" }
        }),
        inventoryAccountDS      : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 13 },
            sort: { field:"number", dir:"asc" }
        }),
        statusList              : banhji.source.statusList,
        confirmMessage          : banhji.source.confirmMessage,
        tagList                 : [],
        obj                     : null,
        isEdit                  : false,
        saveClose               : false,
        showConfirm             : false,
        isLock                  : false,
        notDuplicateNumber      : true,
        variantDisplay          : false,
        subcribedAdvanceInventory : true,
        user_id                 : banhji.source.user_id,
        pageLoad                : function(id, category_id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id, category_id);
                this.checkExistingTxn(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        accessModule            : function(){
            // if(banhji.source.checkAccessModule("Advance Inventory")){
            //  this.set("subcribedAdvanceInventory", true);
            // }else{
            //  this.set("subcribedAdvanceInventory", false);
            // }
        },
        //Upload
        onSelect                : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files[0],
            obj = this.get("obj");

            var fileReader = new FileReader();
            fileReader.onload = function (event) {
                var mapImage = event.target.result;
                self.obj.set('image_url', mapImage);
            }
            fileReader.readAsDataURL(files.rawFile);

            // Check the extension of each file and abort the upload if it is not .jpg
            if (files.extension.toLowerCase() === ".jpg"
                || files.extension.toLowerCase() === ".jpeg"
                || files.extension.toLowerCase() === ".tiff"
                || files.extension.toLowerCase() === ".png"
                || files.extension.toLowerCase() === ".gif"){

                if(this.attachmentDS.total()>0){
                    var att = this.attachmentDS.at(0);
                    this.attachmentDS.remove(att);
                }

                var key = 'ITEM_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ files.name;

                this.attachmentDS.add({
                    user_id         : this.get("user_id"),
                    item_id         : obj.id,
                    type            : "Item",
                    name            : files.name,
                    description     : "",
                    key             : key,
                    url             : banhji.s3 + key,
                    size            : files.size,
                    created_at      : new Date(),

                    file            : files.rawFile
                });
            }else{
                alert("This type of file is not allowed to attach.");
            }
        },
        saveAttachment          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Pattern
        loadPattern             : function(){
            var self = this, obj = self.get("obj"),
            cat = this.categoryDS.get(obj.category_id);

            this.patternDS.query({
                filter: [
                    { field:"category_id", value: obj.category_id },
                    { field:"is_pattern", value: 1 }
                ],
                page: 1,
                pageSize: 1
            }).then(function(data){
                var view = self.patternDS.view();

                if(view.length>0){
                    obj.set("item_group_id", view[0].item_group_id);
                    obj.set("brand_id", view[0].brand_id);
                    obj.set("measurement_id", view[0].measurement_id);
                    obj.set("abbr", cat.abbr);
                    // obj.set("number", "");
                    obj.set("international_code", view[0].international_code);
                    obj.set("color_code", view[0].color_code);
                    obj.set("name", "");
                    obj.set("purchase_description", view[0].purchase_description);
                    obj.set("sale_description", view[0].sale_description);
                    obj.set("measurements", view[0].measurements);
                    obj.set("cost", view[0].cost);
                    obj.set("price", view[0].price);
                    obj.set("locale", view[0].locale);
                    obj.set("order_point", view[0].order_point);
                    obj.set("income_account_id", view[0].income_account_id);
                    obj.set("expense_account_id", view[0].expense_account_id);
                    obj.set("inventory_account_id", view[0].inventory_account_id);
                    obj.set("favorite", view[0].favorite);
                }else{
                    obj.set("item_group_id", "");
                    obj.set("brand_id", "");
                    obj.set("measurement_id", "");
                    obj.set("abbr", "");
                    obj.set("number", "");
                    obj.set("international_code", "");
                    obj.set("color_code", "");
                    obj.set("name", "");
                    obj.set("purchase_description", "");
                    obj.set("sale_description", "");
                    obj.set("measurements", "");
                    obj.set("cost", "");
                    obj.set("price", "");
                    obj.set("locale", "");
                    obj.set("order_point", "");
                    obj.set("income_account_id", "");
                    obj.set("expense_account_id", "");
                    obj.set("inventory_account_id", "");
                    obj.set("favorite", false);
                }
            });
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(this.get("isEdit")){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"abbr", value: obj.abbr });
                para.push({ field:"number", value: obj.number });
                para.push({ field:"category_id", value: obj.category_id });

                this.numberDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.numberDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber          : function(){
            var self = this, obj = this.get("obj");

            this.numberDS.query({
                filter:[
                    { field:"category_id", value:obj.category_id }
                ],
                sort: { field:"number", dir:"desc" },
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.numberDS.view();
                var lastNo = 0;
                if(view.length>0){
                    lastNo = kendo.parseInt(view[0].number);
                }
                lastNo++;
                obj.set("number",kendo.toString(lastNo, "00000"));
            });
        },
        categoryChanges         : function(){
            var obj = this.get("obj");

            if(obj.category_id && obj.isNew()){
                this.loadPattern();
                this.generateNumber();

                var cat = this.categoryDS.get(obj.category_id);

                if(jQuery.inArray( cat.name, obj.tags )==-1){
                    this.tagList.push(cat.name);
                    obj.tags.push(cat.name);
                }
            }
        },
        //Item Contact
        loadItemContact         : function(){
            var obj = this.get("obj");

            this.itemVendorDS.query({
                filter: [
                    { "field":"item_id", value: obj.id },
                    { "field":"type", value: "vendor" }
                ],
                page: 1,
                pageSize: 100
            });

            this.itemCustomerDS.query({
                filter: [
                    { "field":"item_id", value: obj.id },
                    { "field":"type", value: "customer" }
                ],
                page: 1,
                pageSize: 100
            });
        },
        addEmptyItemVendor      : function(){
            var obj = this.get("obj");

            this.itemVendorDS.add({
                item_id     : obj.id,
                contact_id  : "",
                code        : "",
                type        : "vendor"
            });
        },
        deleteItemVendor        : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var d = e.data,
                obj = this.itemVendorDS.getByUid(d.uid);

                this.itemVendorDS.remove(obj);
            }
        },
        addEmptyItemCustomer    : function(){
            var obj = this.get("obj");

            this.itemCustomerDS.add({
                item_id     : obj.id,
                contact_id  : "",
                code        : "",
                type        : "customer"
            });
        },
        deleteItemCustomer      : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var d = e.data,
                obj = this.itemCustomerDS.getByUid(d.uid);

                this.itemCustomerDS.remove(obj);
            }
        },
        checkExistingTxn        : function(id){
            var self = this;

            this.deleteDS.query({
                filter: { field: "item_id", value: id },
                page: 1,
                pageSize: 1
            }).then(function() {
                var view = self.deleteDS.view();

                if(view.length>0){
                    self.set("isLock", true);
                }else{
                    self.set("isLock", false);
                }
            });
        },
        tagChanges              : function(e){
            var obj = this.get("obj"),
                filter = e.filter;

            if(filter){
                this.tagList.push(filter.value);
            }
        },
        //Obj
        loadObj                 : function(id, category_id){
            var self = this, para = [];

            if(id>0){
                para.push({ field:"id", value: id });
            }

            if(category_id){
                para.push({ field:"category_id", value: category_id });
                para.push({ field:"is_pattern", value: 1 });
            }else{
                para.push({ field:"nature", value: "" });
            }

            this.dataSource.query({
                filter: para,
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
                self.set("tagList", view[0].tags);
                self.loadItemContact();

                self.set("variantDisplay", false);
                if(view[0].nature=="variant"){
                    self.set("variantDisplay", true);
                }
            });

            this.itemVariantDS.filter({ field:"item_id", value: id });
            this.attachmentDS.filter({ field:"item_id", value: id });
        },
        addVariant              : function(){
            var obj = this.get("obj");

            this.itemVariantDS.add({
                item_id                 : obj.id,
                variant_attribute_id    : 0,
                variants                : [],
                variant_attribute       : { id:0, name:"" }
            });
        },
        generateVariant         : function(){
            var triats = [];

            $.each(this.itemVariantDS.data(), function(index, value){
                $.each(value.variants, function(ind, val){
                    triats.push(val);
                });
            });

            console.log(triats);

            this.generateVariantDS.query({
                filter: { field: "variant", value: triats }
            });
        },
        addEmpty                : function(){
            var self = this;

            this.dataSource.data([]);
            this.itemVariantDS.data([]);
            this.itemVendorDS.data([]);
            this.itemCustomerDS.data([]);

            this.set("isLock", false);
            this.set("isEdit", false);
            this.set("obj", null);
            self.set("variantDisplay", false);

            this.patternDS.query({
                filter:[
                    { field:"category_id", value:1 },
                    { field:"is_pattern", value:1 }
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.patternDS.view(),
                cat = self.categoryDS.at(0);
                self.tagList.push(cat.name);

                self.dataSource.insert(0, {
                    item_type_id            : 1,//Inventory Part
                    category_id             : view[0].category_id,
                    item_group_id           : view[0].item_group_id,
                    brand_id                : view[0].brand_id,
                    measurement_id          : view[0].measurement_id,
                    abbr                    : cat.abbr,
                    number                  : "",
                    international_code      : view[0].international_code,
                    color_code              : view[0].color_code,
                    name                    : "",
                    purchase_description    : view[0].purchase_description,
                    sale_description        : view[0].sale_description,
                    measurements            : view[0].measurements,
                    cost                    : view[0].cost,
                    price                   : view[0].price,
                    locale                  : view[0].locale,
                    order_point             : view[0].order_point,
                    income_account_id       : view[0].income_account_id,
                    expense_account_id      : view[0].expense_account_id,
                    inventory_account_id    : view[0].inventory_account_id,
                    image_url               : banhji.no_image,
                    favorite                : view[0].favorite,
                    tags                    : [cat.name],
                    nature                  : "",
                    is_pattern              : 0,
                    status                  : 1,
                    deleted                 : 0,

                    variant                 : []
                });

                var obj = self.dataSource.at(0);
                //Pattern
                // if(self.get("contact_type_id")>0){
                //  obj.set("contact_type_id", self.get("contact_type_id"));
                //  obj.set("abbr", "");
                //  obj.set("is_pattern", 1);
                // }

                self.set("obj", obj);
                self.generateNumber();
            });
        },
        objSync                 : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, obj = this.get("obj");

            //Variant
            if(this.itemVariantDS.total()>0){
                obj.set("nature", "main_variant");

                $.each(this.itemVariantDS.data(), function(index, value){
                    value.set("item_id", obj.id);
                    value.set("variant_attribute_id", value.variant_attribute.id);
                });
            }else{
                obj.set("nature", "");
            }

            //Edit Mode
            if(obj.isNew()==false){
                obj.set("dirty", true);
            }

            //Attachment
            if(this.attachmentDS.total()>0){
                var att = this.attachmentDS.at(0);
                obj.set("image_url", att.url);
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    $.each(self.itemVariantDS.data(), function(index, value){
                        value.set("item_id", data[0].id);
                        value.set("variant_attribute_id", value.variant_attribute.id);
                    });

                    $.each(self.itemVendorDS.data(), function(index, value){
                        value.set("item_id", data[0].id);
                    });

                    $.each(self.itemCustomerDS.data(), function(index, value){
                        value.set("item_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("item_id", data[0].id);
                    });
                }

                self.itemVariantDS.sync();
                self.itemVendorDS.sync();
                self.itemCustomerDS.sync();
                self.saveAttachment();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel                  : function(){
            this.dataSource.cancelChanges();
            this.itemVariantDS.cancelChanges();
            this.itemVendorDS.cancelChanges();
            this.itemCustomerDS.cancelChanges();

            this.dataSource.data([]);
            this.itemVariantDS.data([]);
            this.itemVendorDS.data([]);
            this.itemCustomerDS.data([]);

            this.set("tagList", []);

            banhji.userManagement.removeMultiTask("item");
        },
        delete                  : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            if(!obj.is_system==1){
                this.deleteDS.query({
                    filter: { field: "item_id", value: obj.id },
                    page: 1,
                    pageSize: 1
                }).then(function() {
                    var view = self.deleteDS.view();

                    if(view.length>0){
                        alert("Sorry, you can not delete it because it is using now.");
                    }else{
                        obj.set("deleted", 1);
                        self.dataSource.sync();

                        window.history.back();
                    }
                });
            }else{
                alert("Sorry, you can not delete it because it is system's item.");
            }
        },
        openConfirm             : function(){
            this.set("showConfirm", true);
        },
        closeConfirm            : function(){
            this.set("showConfirm", false);
        }
    });
    banhji.itemVariant =  kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "items"),
        itemDS                  : dataStore(apiUrl + "items"),
        obj                     : [],
        pageLoad                : function(id){
            var self = this;

            this.dataSource.filter({ field:"sub_of_id", value: id });

            this.itemDS.query({
                filter:[
                    { field:"id", value: id },
                    { field:"nature", value: "main_variant" }
                ]
            }).then(function(){
                var view = self.itemDS.data();

                self.set("obj", view[0]);
            });
        }
    });
    banhji.itemCatalog =  kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "items"),
        deleteDS                : dataStore(apiUrl + "transactions"),
        existingDS              : dataStore(apiUrl + "items"),
        numberDS                : dataStore(apiUrl + "items"),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field: "is_catalog <>", value: 1 },
                { field: "is_assembly <>", value: 1 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        statusList              : banhji.source.statusList,
        confirmMessage          : banhji.source.confirmMessage,
        obj                     : null,
        isEdit                  : false,
        saveClose               : false,
        showConfirm             : false,
        originalNo              : "",
        notDuplicateNumber      : false,
        user_id                 : banhji.source.user_id,
        pageLoad                : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj"),
            originalNo = this.get("originalNo");

            if(obj.number!=="" && obj.number!==originalNo){
                this.existingDS.query({
                    filter: [
                        { field:"number", value: obj.number },
                        { field:"category_id", value: obj.category_id }
                    ],
                    page: 1,
                    pageSize: 100
                }).then(function(e){
                    var view = self.existingDS.view();

                    if(view.length>0){
                        self.set("isDuplicateNumber", true);
                    }else{
                        self.set("isDuplicateNumber", false);
                    }
                });
            }else{
                this.set("isDuplicateNumber", false);
            }
        },
        generateNumber          : function(){
            var self = this, obj = this.get("obj");

            this.numberDS.query({
                filter:[
                    { field:"category_id", value:obj.category_id }
                ],
                sort: { field:"number", dir:"desc" },
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.numberDS.view();

                var lastNo = 0;
                if(view.length>0){
                    lastNo = kendo.parseInt(view[0].number);
                }
                lastNo++;
                obj.set("number",kendo.toString(lastNo, "00000"));
            });
        },
        //Obj
        loadObj                 : function(id){
            var self = this;

            this.dataSource.query({
                filter: { field:"id", value: id }
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
            });
        },
        addEmpty                : function(){
            this.dataSource.data([]);

            this.set("isEdit", false);
            this.set("obj", null);

            this.dataSource.insert(0, {
                item_type_id            : 1,
                category_id             : 6,
                abbr                    : "CAT",
                number                  : "",
                name                    : "",
                purchase_description    : "",
                sale_description        : "",
                catalogs                : [],
                locale                  : banhji.locale,
                image_url               : banhji.no_image,
                favorite                : false,
                status                  : 1,
                is_catalog              : 1,
                deleted                 : 0
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.generateNumber();
        },
        objSync                 : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, obj = this.get("obj");

            //Save Obj
            this.objSync()
            .then(function(data){ //Success

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel                  : function(){
            this.dataSource.cancelChanges();
            this.dataSource.data([]);

            banhji.userManagement.removeMultiTask("item_catalog");
        },
        delete                  : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.deleteDS.query({
                filter: { field: "item_id", value: obj.id },
                page: 1,
                pageSize: 1
            }).then(function() {
                var view = self.deleteDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it because it is using now.");
                }else{
                    obj.set("deleted", 1);
                    self.dataSource.sync();

                    window.history.back();
                }
            });
        },
        openConfirm             : function(){
            this.set("showConfirm", true);
        },
        closeConfirm            : function(){
            this.set("showConfirm", false);
        }
    });
    banhji.itemAssembly =  kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "items"),
        lineDS                  : dataStore(apiUrl + "item_assemblies"),
        deleteDS                : dataStore(apiUrl + "transactions"),
        existingDS              : dataStore(apiUrl + "items"),
        numberDS                : dataStore(apiUrl + "items"),
        incomeAccountDS         : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 35 },
                    { field: "account_type_id", value: 39 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        itemDS                  : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field: "is_catalog <>", value: 1 },
                { field: "is_assembly <>", value: 1 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        currencyDS              : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        measurementDS           : banhji.source.measurementDS,
        statusList              : banhji.source.statusList,
        confirmMessage          : banhji.source.confirmMessage,
        obj                     : null,
        isEdit                  : false,
        saveClose               : false,
        showConfirm             : false,
        originalNo              : "",
        notDuplicateNumber      : true,
        total                   : 0,
        user_id                 : banhji.source.user_id,
        pageLoad                : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        lineDSChanges       : function(arg){
            var self = banhji.itemAssembly;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    dataRow.set("item_id", item.id);
                    dataRow.set("measurement_id", item.measurement_id);
                    dataRow.set("measurement", item.measurement);

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="measurement"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.measurement.measurement_id);
                }
            }
        },
        addRow                  : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                assembly_id     : obj.id,
                measurement_id  : 0,
                item_id         : 0,
                quantity        : 1,

                item            : { id:"", name:"" },
                measurement     : { measurement_id:"", measurement:"" }
            });
        },
        removeRow               : function(e){
            e.preventDefault();

            if(this.lineDS.total()>1){
                var data = e.data;
                this.lineDS.remove(data);
            }
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(this.get("isEdit")){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"abbr", value: obj.abbr });
                para.push({ field:"number", value: obj.number });
                para.push({ field:"category_id", value: obj.category_id });

                this.existingDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.existingDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber          : function(){
            var self = this, obj = this.get("obj");

            this.numberDS.query({
                filter:[
                    { field:"category_id", value:obj.category_id }
                ],
                sort: { field:"number", dir:"desc" },
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.numberDS.view();

                var lastNo = 0;
                if(view.length>0){
                    lastNo = kendo.parseInt(view[0].number);
                }
                lastNo++;
                obj.set("number",kendo.toString(lastNo, "00000"));
            });
        },
        //Obj
        loadObj                 : function(id){
            var self = this;

            this.dataSource.query({
                filter: { field:"id", value: id }
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
                self.lineDS.filter({ field:"assembly_id", value:id });
            });
        },
        addEmpty                : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);

            this.dataSource.insert(0, {
                item_type_id            : 1,
                category_id             : 5,
                income_account_id       : 0,
                abbr                    : "ASS",
                number                  : "",
                name                    : "",
                purchase_description    : "",
                sale_description        : "",
                price                   : 0,
                rate                    : banhji.source.getRate(banhji.locale, new Date()),
                locale                  : banhji.locale,
                image_url               : banhji.no_image,
                favorite                : false,
                status                  : 1,
                is_assembly             : 1,
                deleted                 : 0,

                measurement             : { id:"", name:"" }
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        objSync                 : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, obj = this.get("obj");

            this.removeEmptyRow();

            //Edit Mode
            if(this.get("isEdit")){
                //Line
                if(this.lineDS.hasChanges()){
                    obj.set("dirty", true);
                }
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("assembly_id", data[0].id);
                    });
                }

                self.lineDS.sync();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel                  : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);

            banhji.userManagement.removeMultiTask("item_assembly");
        },
        delete                  : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.deleteDS.query({
                filter: { field: "item_id", value: obj.id },
                page: 1,
                pageSize: 1
            }).then(function() {
                var view = self.deleteDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it because it is using now.");
                }else{
                    obj.set("deleted", 1);
                    self.dataSource.sync();

                    window.history.back();
                }
            });
        },
        openConfirm             : function(){
            this.set("showConfirm", true);
        },
        closeConfirm            : function(){
            this.set("showConfirm", false);
        }
    });
    banhji.itemService =  kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "items"),
        patternDS               : dataStore(apiUrl + "items"),
        numberDS                : dataStore(apiUrl + "items"),
        deleteDS                : dataStore(apiUrl + "item_lines"),
        itemGroupDS             : dataStore(apiUrl + "items/group"),
        itemVendorDS            : dataStore(apiUrl + "items/contact"),
        itemCustomerDS          : dataStore(apiUrl + "items/contact"),
        attachmentDS            : dataStore(apiUrl + "attachments"),
        currencyDS              : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        categoryDS              : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: { field:"item_type_id", value: 4 }//Service
        }),
        measurementDS           : banhji.source.measurementDS,
        vendorDS                : banhji.source.supplierDS,
        customerDS              : banhji.source.customerDS,
        incomeAccountDS         : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 35 },
                    { field: "account_type_id", value: 39 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        cogsAccountDS           : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 36 },//Expense
                    { field: "account_type_id", value: 37 },
                    { field: "account_type_id", value: 38 },
                    { field: "account_type_id", value: 40 },
                    { field: "account_type_id", value: 41 },
                    { field: "account_type_id", value: 42 },
                    { field: "account_type_id", value: 43 }
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        statusList              : banhji.source.statusList,
        confirmMessage          : banhji.source.confirmMessage,
        obj                     : null,
        isEdit                  : false,
        isLock                  : false,
        saveClose               : false,
        showConfirm             : false,
        notDuplicateNumber      : true,
        pageLoad                : function(id, category_id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id, category_id);
                this.checkExistingTxn(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Upload
        onSelect                : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files[0],
            obj = this.get("obj");

            var fileReader = new FileReader();
            fileReader.onload = function (event) {
                var mapImage = event.target.result;
                self.obj.set('image_url', mapImage);
            }
            fileReader.readAsDataURL(files.rawFile);

            // Check the extension of each file and abort the upload if it is not .jpg
            if (files.extension.toLowerCase() === ".jpg"
                || files.extension.toLowerCase() === ".jpeg"
                || files.extension.toLowerCase() === ".tiff"
                || files.extension.toLowerCase() === ".png"
                || files.extension.toLowerCase() === ".gif"){

                if(this.attachmentDS.total()>0){
                    var att = this.attachmentDS.at(0);
                    this.attachmentDS.remove(att);
                }

                var key = 'ITEM_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ files.name;

                this.attachmentDS.add({
                    user_id         : this.get("user_id"),
                    item_id         : obj.id,
                    type            : "Item",
                    name            : files.name,
                    description     : "",
                    key             : key,
                    url             : banhji.s3 + key,
                    size            : files.size,
                    created_at      : new Date(),

                    file            : files.rawFile
                });
            }else{
                alert("This type of file is not allowed to attach.");
            }
        },
        saveAttachment          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Pattern
        loadPattern             : function(){
            var self = this, obj = self.get("obj"),
            cat = this.categoryDS.get(obj.category_id);

            this.patternDS.query({
                filter: [
                    { field:"category_id", value: obj.category_id },
                    { field:"is_pattern", value: 1 }
                ],
                page: 1,
                pageSize: 1
            }).then(function(data){
                var view = self.patternDS.view();

                if(view.length>0){
                    obj.set("measurement_id", view[0].measurement_id),
                    obj.set("abbr", cat.abbr),
                    obj.set("price", view[0].price);
                    obj.set("cost", view[0].cost);
                    obj.set("locale", view[0].locale);
                    obj.set("purchase_description", view[0].purchase_description),
                    obj.set("sale_description", view[0].sale_description),
                    obj.set("income_account_id", view[0].income_account_id);
                    obj.set("expense_account_id", view[0].expense_account_id);
                }else{
                    obj.set("measurement_id", 0),
                    obj.set("abbr", ""),
                    obj.set("price", view[0].price);
                    obj.set("cost", view[0].cost);
                    obj.set("locale", banhji.locale);
                    obj.set("purchase_description", ""),
                    obj.set("sale_description", ""),
                    obj.set("income_account_id", 0);
                    obj.set("expense_account_id", 0);
                }
            });
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(this.get("isEdit")){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"abbr", value: obj.abbr });
                para.push({ field:"number", value: obj.number });
                para.push({ field:"category_id", value: obj.category_id });

                this.numberDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.numberDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber          : function(){
            var self = this, obj = this.get("obj");

            this.numberDS.query({
                filter:[
                    { field:"category_id", value:obj.category_id }
                ],
                sort: { field:"number", dir:"desc" },
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.numberDS.view();

                var lastNo = 0;
                if(view.length>0){
                    lastNo = kendo.parseInt(view[0].number);
                }
                lastNo++;
                obj.set("number",kendo.toString(lastNo, "00000"));
            });
        },
        categoryChanges         : function(){
            var obj = this.get("obj");

            if(obj.category_id && obj.isNew()){
                this.loadPattern();
                this.generateNumber();
            }
        },
        //Item Contact
        loadItemContact         : function(){
            var obj = this.get("obj");

            this.itemVendorDS.query({
                filter: [
                    { "field":"item_id", value: obj.id },
                    { "field":"type", value: "vendor" }
                ],
                page: 1,
                pageSize: 100
            });

            this.itemCustomerDS.query({
                filter: [
                    { "field":"item_id", value: obj.id },
                    { "field":"type", value: "customer" }
                ],
                page: 1,
                pageSize: 100
            });
        },
        addEmptyItemVendor      : function(){
            var item_id = 0;
            if(this.get("isEdit")){
                item_id = this.get("obj").id;
            }

            this.itemVendorDS.add({
                item_id     : item_id,
                contact_id  : "",
                code        : "",
                type        : "vendor"
            });
        },
        deleteItemVendor        : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var d = e.data,
                obj = this.itemVendorDS.getByUid(d.uid);

                this.itemVendorDS.remove(obj);
            }
        },
        addEmptyItemCustomer    : function(){
            var item_id = 0;
            if(this.get("isEdit")){
                item_id = this.get("obj").id;
            }

            this.itemCustomerDS.add({
                item_id     : item_id,
                contact_id  : "",
                code        : "",
                type        : "customer"
            });
        },
        deleteItemCustomer      : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var d = e.data,
                obj = this.itemCustomerDS.getByUid(d.uid);

                this.itemCustomerDS.remove(obj);
            }
        },
        checkExistingTxn        : function(id){
            var self = this;

            this.deleteDS.query({
                filter: { field: "item_id", value: id },
                page: 1,
                pageSize: 1
            }).then(function() {
                var view = self.deleteDS.view();

                if(view.length>0){
                    self.set("isLock", true);
                }else{
                    self.set("isLock", false);
                }
            });
        },
        //Obj
        loadObj                 : function(id, category_id){
            var self = this, para = [];

            if(id>0){
                para.push({ field:"id", value: id });
            }

            if(category_id){
                para.push({ field:"category_id", value: category_id });
                para.push({ field:"is_pattern", value: 1 });
            }

            this.dataSource.query({
                filter: para,
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
                self.loadItemContact();
            });
        },
        addEmpty                : function(){
            var self = this;

            this.dataSource.data([]);
            this.itemVendorDS.data([]);
            this.itemCustomerDS.data([]);

            this.set("isLock", false);
            this.set("isEdit", false);
            this.set("obj", null);

            this.patternDS.query({
                filter:[
                    { field:"category_id", value: 3 },
                    { field:"is_pattern", value: 1 }
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.patternDS.view(),
                cat = self.categoryDS.get(view[0].category_id);

                self.dataSource.insert(0, {
                    item_type_id            : 4,//Service
                    category_id             : view[0].category_id,
                    item_group_id           : view[0].item_group_id,
                    measurement_id          : view[0].measurement_id,
                    abbr                    : cat.abbr,
                    number                  : "",
                    name                    : "",
                    price                   : view[0].price,
                    cost                    : view[0].cost,
                    locale                  : view[0].locale,
                    purchase_description    : view[0].purchase_description,
                    sale_description        : view[0].sale_description,
                    income_account_id       : view[0].income_account_id,
                    expense_account_id      : view[0].expense_account_id,
                    image_url               : banhji.no_image,
                    favorite                : view[0].favorite,
                    is_pattern              : 0,
                    status                  : 1
                });

                var obj = self.dataSource.at(0);
                //Pattern
                // if(self.get("contact_type_id")>0){
                //  obj.set("contact_type_id", self.get("contact_type_id"));
                //  obj.set("abbr", "");
                //  obj.set("is_pattern", 1);
                // }

                self.set("obj", obj);
                self.generateNumber();
            });
        },
        objSync                 : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, obj = this.get("obj");

            //Edit Mode
            if(this.get("isEdit")){
                //Contact Item has changes
                if(this.itemVendorDS.hasChanges() || this.itemCustomerDS.hasChanges()){
                    obj.set("dirty", true);
                }
            }

            //Attachment
            if(this.attachmentDS.total()>0){
                var att = this.attachmentDS.at(0);
                obj.set("image_url", att.url);
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    $.each(self.itemVendorDS.data(), function(index, value){
                        value.set("item_id", data[0].id);
                    });

                    $.each(self.itemCustomerDS.data(), function(index, value){
                        value.set("item_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("item_id", data[0].id);
                    });
                }

                self.itemVendorDS.sync();
                self.itemCustomerDS.sync();
                self.saveAttachment();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel                  : function(){
            this.dataSource.cancelChanges();
            this.itemVendorDS.cancelChanges();
            this.itemCustomerDS.cancelChanges();

            this.dataSource.data([]);
            this.itemVendorDS.data([]);
            this.itemCustomerDS.data([]);

            banhji.userManagement.removeMultiTask("item_service");
        },
        delete                  : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            if(!obj.is_system==1){
                this.deleteDS.query({
                    filter: { field: "item_id", value: obj.id },
                    page: 1,
                    pageSize: 1
                }).then(function() {
                    var view = self.deleteDS.view();

                    if(view.length>0){
                        alert("Sorry, you can not delete it because it is using now.");
                    }else{
                        obj.set("deleted", 1);
                        self.dataSource.sync();

                        window.history.back();
                    }
                });
            }else{
                alert("Sorry, you can not delete it because it is system's item.");
            }
        },
        openConfirm             : function(){
            this.set("showConfirm", true);
        },
        closeConfirm            : function(){
            this.set("showConfirm", false);
        }
    });
    banhji.nonInventoryPart =  kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "items"),
        patternDS               : dataStore(apiUrl + "items"),
        numberDS                : dataStore(apiUrl + "items"),
        deleteDS                : dataStore(apiUrl + "item_lines"),
        itemGroupDS             : dataStore(apiUrl + "items/group"),
        brandDS                 : dataStore(apiUrl + "brands"),
        measurementDS           : dataStore(apiUrl + "measurements"),
        itemPriceDS             : dataStore(apiUrl + "item_prices"),
        itemVendorDS            : dataStore(apiUrl + "items/contact"),
        itemCustomerDS          : dataStore(apiUrl + "items/contact"),
        currencyDS              : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        vendorDS                : banhji.source.supplierDS,
        customerDS              : banhji.source.customerDS,
        categoryDS              : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: { field:"item_type_id", value: 2 }//Non Inventory
        }),
        inventoryAccountDS      : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 13 },
            sort: { field:"number", dir:"asc" }
        }),
        statusList              : banhji.source.statusList,
        confirmMessage          : banhji.source.confirmMessage,
        obj                     : null,
        isEdit                  : false,
        isLock                  : false,
        saveClose               : false,
        showConfirm             : false,
        notDuplicateNumber      : true,
        pageLoad                : function(id, category_id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id, category_id);
                this.checkExistingTxn(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Pattern
        loadPattern             : function(){
            var self = this, obj = self.get("obj");

            if(obj.category_id){
                var cat = this.categoryDS.get(obj.category_id);

                this.patternDS.query({
                    filter: [
                        { field:"category_id", value: obj.category_id },
                        { field:"is_pattern", value: 1 }
                    ],
                    page: 1,
                    pageSize: 1
                }).then(function(){
                    var view = self.patternDS.view();

                    if(view.length>0){
                        obj.set("item_group_id", view[0].item_group_id),
                        obj.set("brand_id", view[0].brand_id),
                        obj.set("measurement_id", view[0].measurement_id),
                        obj.set("abbr", cat.abbr),
                        obj.set("number", ""),
                        obj.set("name", ""),
                        obj.set("purchase_description", view[0].purchase_description),
                        obj.set("sale_description", view[0].sale_description),
                        obj.set("measurements", view[0].measurements),
                        obj.set("color_code", view[0].color_code),
                        obj.set("international_code", view[0].international_code),
                        obj.set("inventory_account_id", view[0].inventory_account_id),
                        obj.set("favorite", view[0].favorite)
                    }else{
                        obj.set("item_group_id", ""),
                        obj.set("brand_id", ""),
                        obj.set("measurement_id", ""),
                        obj.set("abbr", ""),
                        obj.set("number", ""),
                        obj.set("name", ""),
                        obj.set("purchase_description", ""),
                        obj.set("sale_description", ""),
                        obj.set("measurements", ""),
                        obj.set("color_code", ""),
                        obj.set("international_code", ""),
                        obj.set("inventory_account_id", ""),
                        obj.set("favorite", false)
                    }
                });
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(this.get("isEdit")){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"abbr", value: obj.abbr });
                para.push({ field:"number", value: obj.number });
                para.push({ field:"category_id", value: obj.category_id });

                this.numberDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.numberDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber          : function(){
            var self = this, obj = this.get("obj");

            this.numberDS.query({
                filter:[
                    { field:"category_id", value:obj.category_id }
                ],
                sort: { field:"number", dir:"desc" },
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.numberDS.view();

                var lastNo = 0;
                if(view.length>0){
                    lastNo = kendo.parseInt(view[0].number);
                }
                lastNo++;
                obj.set("number",kendo.toString(lastNo, "00000"));
            });
        },
        categoryChanges         : function(){
            var obj = this.get("obj");

            if(obj.category_id && obj.isNew()){
                this.loadPattern();
                this.generateNumber();
            }
        },
        //Item Price
        addItemPrice            : function (item_id) {
            var obj = this.get("obj");

            this.itemPriceDS.add({
                item_id         : item_id,
                measurement_id  : obj.measurement_id,
                conversion_ratio        : 1,
                locale          : obj.locale
            });

            this.itemPriceDS.sync();
            var loaded = false;
            this.itemPriceDS.bind("requestEnd", function(e){
                if(e.type=="create" && loaded==false){
                    loaded = true;
                }
            });
        },
        //Item Contact
        loadItemContact         : function(){
            var obj = this.get("obj");

            this.itemVendorDS.query({
                filter: [
                    { "field":"item_id", value: obj.id },
                    { "field":"type", value: "vendor" }
                ],
                page: 1,
                pageSize: 100
            });

            this.itemCustomerDS.query({
                filter: [
                    { "field":"item_id", value: obj.id },
                    { "field":"type", value: "customer" }
                ],
                page: 1,
                pageSize: 100
            });
        },
        addEmptyItemVendor      : function(){
            var obj = this.get("obj");

            this.itemVendorDS.add({
                item_id     : obj.id,
                contact_id  : "",
                code        : "",
                type        : "vendor"
            });
        },
        deleteItemVendor        : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var d = e.data,
                obj = this.itemVendorDS.getByUid(d.uid);

                this.itemVendorDS.remove(obj);
            }
        },
        addEmptyItemCustomer    : function(){
            var obj = this.get("obj");

            this.itemCustomerDS.add({
                item_id     : obj.id,
                contact_id  : "",
                code        : "",
                type        : "customer"
            });
        },
        deleteItemCustomer      : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var d = e.data,
                obj = this.itemCustomerDS.getByUid(d.uid);

                this.itemCustomerDS.remove(obj);
            }
        },
        //Obj
        loadObj                 : function(id, category_id){
            var self = this, para = [];

            if(id>0){
                para.push({ field:"id", value: id });
            }

            if(category_id){
                para.push({ field:"category_id", value: category_id });
                para.push({ field:"is_pattern", value: 1 });
            }

            this.dataSource.query({
                filter: para,
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
                self.loadItemContact();
            });
        },
        checkExistingTxn        : function(id){
            var self = this;

            this.deleteDS.query({
                filter: { field: "item_id", value: id },
                page: 1,
                pageSize: 1
            }).then(function() {
                var view = self.deleteDS.view();

                if(view.length>0){
                    self.set("isLock", true);
                }else{
                    self.set("isLock", false);
                }
            });
        },
        addEmpty                : function(){
            var self = this;

            this.dataSource.data([]);
            this.itemVendorDS.data([]);
            this.itemCustomerDS.data([]);

            this.set("isLock", false);
            this.set("isEdit", false);
            this.set("obj", null);

            this.patternDS.query({
                filter:[
                    { field:"category_id", value:2 },
                    { field:"is_pattern", value:1 }
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.patternDS.view(),
                cat = self.categoryDS.at(0);

                self.dataSource.insert(0, {
                    item_type_id            : 2,//Non Inventory Part
                    category_id             : view[0].category_id,
                    item_group_id           : view[0].item_group_id,
                    brand_id                : view[0].brand_id,
                    measurement_id          : view[0].measurement_id,
                    abbr                    : cat.abbr,
                    number                  : "",
                    name                    : "",
                    locale                  : view[0].locale,
                    purchase_description    : view[0].purchase_description,
                    sale_description        : view[0].sale_description,
                    measurements            : view[0].measurements,
                    color_code              : view[0].color_code,
                    international_code      : view[0].international_code,
                    inventory_account_id    : view[0].inventory_account_id,
                    image_url               : banhji.no_image,
                    favorite                : view[0].favorite,
                    is_pattern              : 0,
                    status                  : 1,
                    deleted                 : 0
                });

                var obj = self.dataSource.at(0);
                self.set("obj", obj);
                self.generateNumber();
            });
        },
        objSync                 : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, obj = this.get("obj");

            //Edit Mode
            if(this.get("isEdit")){
                //Contact Item has changes
                if(this.itemVendorDS.hasChanges() || this.itemCustomerDS.hasChanges()){
                    obj.set("dirty", true);
                }
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    $.each(self.itemVendorDS.data(), function(index, value){
                        value.set("item_id", data[0].id);
                    });

                    $.each(self.itemCustomerDS.data(), function(index, value){
                        value.set("item_id", data[0].id);
                    });

                    //Add first item price
                    self.addItemPrice(data[0].id);
                }

                self.itemVendorDS.sync();
                self.itemCustomerDS.sync();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel                  : function(){
            this.dataSource.cancelChanges();
            this.itemVendorDS.cancelChanges();
            this.itemCustomerDS.cancelChanges();

            this.dataSource.data([]);
            this.itemVendorDS.data([]);
            this.itemCustomerDS.data([]);

            banhji.userManagement.removeMultiTask("item");
        },
        delete                  : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            if(!obj.is_system==1){
                this.deleteDS.query({
                    filter: { field: "item_id", value: obj.id },
                    page: 1,
                    pageSize: 1
                }).then(function() {
                    var view = self.deleteDS.view();

                    if(view.length>0){
                        alert("Sorry, you can not delete it because it is using now.");
                    }else{
                        obj.set("deleted", 1);
                        self.dataSource.sync();

                        window.history.back();
                    }
                });
            }else{
                alert("Sorry, you can not delete it because it is system's item.");
            }
        },
        openConfirm             : function(){
            this.set("showConfirm", true);
        },
        closeConfirm            : function(){
            this.set("showConfirm", false);
        }
    });
    // INVENTORY FUNCTIONS
    banhji.transferOrder =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        assemblyLineDS      : dataStore(apiUrl + "item_lines"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "item_lines"),
        referenceDS         : dataStore(apiUrl + "transactions"),
        referenceLineDS     : dataStore(apiUrl + "item_lines"),
        itemPriceDS         : dataStore(apiUrl + "item_prices"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        locationDS          : dataStore(apiUrl + "locations"),
        binLocationDS       : dataStore(apiUrl + "bin_locations"),
        newBinLocationDS    : dataStore(apiUrl + "bin_locations"),
        wacDS               : dataStore(apiUrl + "items/weighted_average_costing"),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "GDN" }
        }),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field:"item_type_id <>", value: 3 },
                { field:"is_assembly", value: 0 }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        typeList            : new kendo.data.DataSource({
            data: banhji.source.prefixList,
            filter:{
                logic: "or",
                filters: [
                    { field: "type", value: "Transfer_Order" },
                    { field: "type", value: "Shelving" },
                    { field: "type", value: "Packing" }
                ]
            }
        }),
        categoryDS          : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: [
                { field:"item_type_id", value: 1 },
                { field:"id", operator:"neq", value: 5 },
                { field:"id", operator:"neq", value: 6 }
            ]
        }),
        itemGroupDS         : banhji.source.itemGroupDS,
        contactDS           : banhji.source.customerDS,
        statusObj           : banhji.source.statusObj,
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthOptionList     : banhji.source.monthOptionList,
        monthList           : banhji.source.monthList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        serialObj           : [],
        binObj              : [],
        newBinObj           : [],
        isEdit              : false,
        saveClose           : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        notDuplicateNumber  : true,
        statusSrc           : "",
        recurring           : "",
        recurring_validate  : false,
        enableRef           : false,
        enableContact       : false,
        total               : 0,
        binWindowVisible    : false,
        newBinWindowVisible : false,
        serialWindowVisible : false,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Barcode
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                category_id = this.get("category_id"),
                item_group_id = this.get("item_group_id");

            if(item_group_id>0){
                para.push({ field:"number", value:item_group_id });
            }else{
                if(category_id>0){
                    para.push({ field:"category_id", value:category_id });
                }
            }

            this.itemDS.query({
                filter: para,
                page:1,
                pageSize: 10
            });

            this.set("category_id", 0);
            this.set("item_group_id", 0);
        },
        searchByBarcode     : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                barcode = this.get("barcode");

            if(barcode!==""){
                this.itemDS.query({
                    filter: { field: "barcode", value: barcode },
                    page:1,
                    pageSize: 1
                }).then(function(){
                    var view = self.itemDS.view();

                    if(view.length>0){
                        self.insertItem(view[0]);
                    }
                });

                this.set("barcode", "");
            }
        },
        addSearchItem       : function(e){
            var data = e.data;

            this.insertItem(data);
        },
        openBarcodeWindow   : function(){
            this.set("barcodeVisible", true);
        },
        closeBarcodeWindow  : function(){
            this.set("barcodeVisible", false);
        },
        insertItem          : function(data){
            var obj = this.get("obj"),
                rate = obj.rate / banhji.source.getRate(data.locale, new Date(obj.issued_date));

            this.lineDS.insert(0, {
                transaction_id      : obj.id,
                tax_item_id         : "",
                bin_location_id     : 0,
                item_id             : data.id,
                assembly_id         : 0,
                measurement_id      : data.measurement_id,
                description         : data.sale_description,
                quantity            : 0,
                conversion_ratio    : 0,
                price               : 0,
                amount              : 0,
                rate                : rate,
                locale              : data.locale,
                movement            : -1,
                reference_no        : "",

                item                : data,
                item_price          : data.measurement,
                item_serials        : [],
                bin_locations       : { id:0, number:"" },
                new_bin_locations   : { id:0, number:"" }
            });
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        onRemove            : function(e){
            // Array with information about the uploaded files
            var self = this, files = e.files;
            $.each(this.attachmentDS.data(), function(index, value){
                if(value.name==files[0].name){
                    self.attachmentDS.remove(value);

                    return false;
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm("Are you sure, you want to delete it?")) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            var self = this;

            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                if(e.type=="destroy"){
                    if(saved==false){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var paramz = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(paramz, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });

            //Clear upload files
            $(".k-upload-files").remove();
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });
        },
        //Item
        addItem             : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Get first price
            this.itemPriceDS.query({
                filter:[
                    { field:"item_id", value:item.id },
                    { field:"assembly_id", value:0 }
                ],
                page: 1,
                pageSize: 1
            }).then(function(){
                var view = self.itemPriceDS.view();

                if(view.length>0){
                    var measurement = {
                        measurement_id  : view[0].measurement_id,
                        conversion_ratio: view[0].conversion_ratio,
                        measurement     : view[0].measurement
                    };
                    row.set("measurement", measurement);
                }
            });
        },
        addItemCatalog      : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : 0,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : 0,

                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" }
                    });
                }
            });
        },
        lineDSChanges       : function(arg){
            var self = banhji.transferOrder;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity"){
                    self.changes();
                }else if(arg.field=="item_price"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.item_price.measurement_id);
                    dataRow.set("conversion_ratio", dataRow.item_price.conversion_ratio);
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        setStatus           : function(){
            var self = this,
                obj = this.get("obj"),
                statusObj = this.get("statusObj");

            statusObj.set("text", "");
            statusObj.set("date", "");
            statusObj.set("number", "");
            statusObj.set("url", "");

            switch(obj.status) {
                case 0:
                    statusObj.set("text", "open");
                    break;
                case 1:
                    statusObj.set("text", "Received");

                    this.txnDS.query({
                        filter:{ field:"reference_id", value: obj.id },
                        sort: { field:"issued_date", dir:"desc" },
                        page:1,
                        pageSize:1
                    }).then(function(){
                        var view = self.txnDS.view();

                        if(view.length>0){
                            statusObj.set("date", kendo.toString(new Date(view[0].issued_date), "dd-MM-yyyy h:mm:ss tt"));
                            statusObj.set("number", view[0].number);

                            var url = "#/" + view[0].type.toLowerCase() + "/" + view[0].id;
                            statusObj.set("url", url);
                        }
                    });
                    break;
                case 4:
                    statusObj.set("text", "draft");
                    break;
                default:
                    //Default here
            }
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 100
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    self.set("total", kendo.toString(view[0].amount, "n0"));
                    self.setStatus();

                    self.lineDS.query({
                        filter: [
                            { field: "transaction_id", value: id },
                            { field: "reference_id", value: 0 }
                        ]
                    });
                    self.attachmentDS.filter({ field: "transaction_id", value: id });
                    self.referenceDS.filter({ field: "id", value: view[0].reference_id });
                });
            }
        },
        changes             : function(){
            var self = this, obj = this.get("obj"), total = 0, itemIds = [];

            $.each(this.lineDS.data(), function(index, value) {
                total += value.quantity;

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            this.set("total", kendo.toString(total, "n0"));
            obj.set("amount", total);

            //Remove Assembly Item List
            var raw = this.assemblyLineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (jQuery.inArray(kendo.parseInt(item.assembly_id), itemIds)==-1) {
                    this.assemblyLineDS.remove(item);
                }
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);
            this.set("enableRef", false);
            this.set("enableContact", false);

            //Set Date
            var duedate = new Date();
            duedate.setDate(duedate.getDate() + 7);

            this.dataSource.insert(0, {
                contact_id          : "",
                transaction_template_id : 4,
                reference_id        : "",
                recurring_id        : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                employee_id         : "",
                type                : "Transfer_Order",//Required
                number              : "",
                amount              : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                due_date            : duedate,//Delivery Date
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                status              : 0,
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:0, name:"" }
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);

            this.setRate();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                bin_location_id     : 0,
                item_id             : "",
                assembly_id         : 0,
                measurement_id      : 0,
                description         : "",
                quantity            : 0,
                conversion_ratio    : 0,
                price               : 0,
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : -1,
                reference_no        : "",

                item                : { id:"", name:"" },
                item_price          : { measurement_id:"", measurement:"" },
                item_serials        : [],
                bin_locations       : { id:0, number:"" },
                new_bin_locations   : { id:0, number:"" }
            });
        },
        removeRow           : function(e){
            var data = e.data;
            if(this.lineDS.total()>1){
                //Remove Assembly Item List
                if(data.item_id>0){
                    var raw = this.assemblyLineDS.data();

                    var item, i;
                    for(i=raw.length-1; i>=0; i--){
                        item = raw[i];
                        if (item.assembly_id==data.item_id){
                            this.assemblyLineDS.remove(item);
                        }

                    }
                }

                this.lineDS.remove(data);
                this.changes();
            }
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");
            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

            this.removeEmptyRow();

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Reference
            if(obj.reference_id>0){
                var ref = this.referenceDS.get(obj.reference_id);
                ref.set("status", 1);
                this.referenceDS.sync();
            }else{
                obj.set("reference_id", 0);
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Assembly Item line
                    $.each(self.assemblyLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                self.lineDS.sync();
                self.assemblyLineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.cancel();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear               : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.assemblyLineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("gdn");
        },
        cancel              : function(){
            this.clear();
            window.history.back();
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id },
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);

                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        validating          : function(){
            var result = true, noItem = true, noBin = false, lackSerial = false;

            //Check select non item
            $.each(this.lineDS.data(), function(index, value){
                if(value.item_id>0){
                    noItem = false;

                    if(value.bin_locations.id==0 && value.new_bin_locations.id==0){
                        noBin = true;
                    }

                    var serials = [];
                    $.each(value.item_serials, function(a, b){
                        if(b.number!==""){
                            serials.push(b);
                        }
                    });

                    if(serials.length!==value.quantity){
                        lackSerial = true;
                    }
                }
            });

            if(noItem){
                $("#ntf1").data("kendoNotification").warning("Please select at least one item!");

                result = false;
            }

            if(noBin){
                $("#ntf1").data("kendoNotification").warning("Please select location!");

                result = false;
            }

            if(lackSerial){
                $("#ntf1").data("kendoNotification").warning("Please complete serial numbers!");

                result = false;
            }

            return result;
        },
        // Serial Windows
        serialOpen          : function(e){
            var data = e.data,
                count = data.quantity - data.item_serials.length;

            this.set("serialObj", data);

            if(count>0){//Add more rows
                for (var i = 0; i < count; i++) {
                    this.serialAdd();
                }
            }else if(count<0){//Remove rows
                data.item_serials.splice(data.item_serials.length + count, Math.abs(count));
            }

            this.set("serialWindowVisible", true);
        },
        serialAdd           : function(){
            var obj = this.get("serialObj");

            obj.item_serials.push({ id:0, number:"" });
        },
        serialClose         : function(){
            this.set("serialWindowVisible", false);
        },
        // Bin Location Windows
        binOpen         : function(e){
            var data = e.data,
                obj = this.get("obj");

            switch(obj.type) {
                case "Shelving":
                    this.locationDS.filter([]);

                    break;
                case "Packing":
                    this.locationDS.filter({ field:"contact_id", operator:"by_user_id", value:banhji.userData.id });

                    break;
                default:
                    //Transfer
                    this.locationDS.filter({ field:"contact_id", operator:"by_user_id", value:banhji.userData.id });
            }

            this.set("binObj", data);

            this.set("binWindowVisible", true);
        },
        newBinOpen          : function(e){
            var data = e.data,
                obj = this.get("obj");

            switch(obj.type) {
                case "Shelving":
                    this.locationDS.filter({ field:"contact_id", operator:"by_user_id", value:banhji.userData.id });

                    break;
                case "Packing":
                    this.locationDS.filter({ field:"contact_id", operator:"by_user_id", value:banhji.userData.id });

                    break;
                default:
                    //Transfer
                    this.locationDS.filter([]);
            }

            this.set("newBinObj", data);

            this.set("newBinWindowVisible", true);
        },
        binClose            : function(){
            this.set("binWindowVisible", false);
        },
        newBinClose         : function(){
            this.set("newBinWindowVisible", false);
        },
        //Reference
        typeChanges         : function(){
            var obj = this.get("obj");
            this.set("enableRef", false);
            this.set("enableContact", false);

            if(obj.type=="Shelving"){
                this.set("enableRef", true);
                this.loadReference();
            }

            if(obj.type=="Packing"){
                this.set("enableRef", true);
                this.set("enableContact", true);
            }
        },
        contactChanges      : function(){
            var obj = this.get("obj");

            this.loadReference();
        },
        loadReference       : function(){
            var obj = this.get("obj"),
                para = [], typeList = [];

            if(obj.contact_id>0){
                para.push({ field: "contact_id", value: obj.contact_id });
            }

            switch(obj.type) {
                case "Shelving":
                    typeList.push("GRN","Transfer_Order");

                    break;
                case "Packing":
                    typeList.push("Sale_Order","Commercial_Invoice", "Vat_Invoice", "Invoice", "Commercial_Cash_Sale", "Vat_Cash_Sale", "Cash_Sale");

                    break;
                default:
                //Code here...
            }

            if(typeList.length>0){
                para.push({ field: "type", operator:"where_in", value: typeList });
            }

            para.push({ field: "status", value: 0 });
            para.push({ field: "due_date >=", value: kendo.toString(obj.issued_date, "yyyy-MM-dd") });

            this.referenceDS.filter(para);
        },
        referenceChanges    : function(){
            var self = this, obj = this.get("obj");

            if(obj.reference_id>0){
                var reference = this.referenceDS.get(obj.reference_id);

                obj.set("segments", reference.segments);

                this.referenceLineDS.query({
                    filter:[
                        { field:"transaction_id", value: obj.reference_id },
                        { field: "assembly_id", value: 0 }
                    ]
                }).then(function(){
                    var view = self.referenceLineDS.view();

                    self.lineDS.data([]);
                    $.each(view, function(index, value){
                        self.lineDS.add({
                            transaction_id      : obj.id,
                            reference_id        : reference.id,
                            bin_location_id     : value.bin_location_id,
                            tax_item_id         : value.tax_item_id,
                            item_id             : value.item_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            price               : value.price,
                            amount              : value.amount,
                            discount            : value.discount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : 0,
                            reference_no        : reference.number,

                            item                : value.item,
                            item_price          : value.item_price,
                            item_serials        : [],
                            bin_locations       : { id:0, number:"" },
                            new_bin_locations   : { id:0, number:"" }
                        });
                    });

                    self.changes();
                });
            }else{
                obj.set("deposit", 0);
            }
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("recurring_id", id);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
                obj.set("bill_to", view[0].bill_to);
                obj.set("ship_to", view[0].ship_to);
            });

            this.recurringLineDS.query({
                filter:[
                    { field:"transaction_id", value: id },
                    { field: "assembly_id", value: 0 }
                ]
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        bin_location_id     : value.bin_location_id,
                        tax_item_id         : value.tax_item_id,
                        item_id             : value.item_id,
                        measurement_id      : value.measurement_id,
                        description         : value.description,
                        quantity            : value.quantity,
                        price               : value.price,
                        amount              : value.amount,
                        discount            : value.discount,
                        rate                : value.rate,
                        locale              : value.locale,
                        movement            : 0,

                        item                : value.item,
                        item_price          : value.item_price,
                        item_serials        : [],
                        bin_locations       : { id:0, number:"" },
                        new_bin_locations   : { id:0, number:"" }
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.itemAdjustment = kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "transactions"),
        txnDS                   : dataStore(apiUrl + "transactions"),
        numberDS                : dataStore(apiUrl + "transactions/number"),
        recurringDS             : dataStore(apiUrl + "transactions"),
        lineDS                  : dataStore(apiUrl + "item_lines"),
        recurringLineDS         : dataStore(apiUrl + "item_lines"),
        journalLineDS           : dataStore(apiUrl + "journal_lines"),
        attachmentDS            : dataStore(apiUrl + "attachments"),
        wacDS                   : dataStore(apiUrl + "items/weighted_average_costing"),
        itemDS                  : dataStore(apiUrl + "items"),
        contactDS               : banhji.source.employeeDS,
        accountDS               : banhji.source.accountList,
        jobDS                   : banhji.source.jobList,
        segmentItemDS           : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        txnTemplateDS           : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "Item_Adjustment" }
        }),
        categoryDS              : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: [
                { field:"item_type_id", value: 1 },
                { field:"id", operator:"neq", value: 5 },
                { field:"id", operator:"neq", value: 6 }
            ]
        }),
        itemGroupDS             : banhji.source.itemGroupDS,
        confirmMessage          : banhji.source.confirmMessage,
        frequencyList           : banhji.source.frequencyList,
        monthOptionList         : banhji.source.monthOptionList,
        monthList               : banhji.source.monthList,
        weekDayList             : banhji.source.weekDayList,
        dayList                 : banhji.source.dayList,
        showMonthOption         : false,
        showMonth               : false,
        showWeek                : false,
        showDay                 : false,
        obj                     : null,
        isEdit                  : false,
        saveClose               : false,
        savePrint               : false,
        saveRecurring           : false,
        recurring_validate      : false,
        recurring               : "",
        barcode                 : "",
        barcodeVisible          : false,
        category_id             : 0,
        item_group_id           : 0,
        user_id                 : banhji.source.user_id,
        pageLoad                : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Barcode
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                category_id = this.get("category_id"),
                item_group_id = this.get("item_group_id");

            if(item_group_id>0){
                para.push({ field:"number", value:item_group_id });
            }else{
                if(category_id>0){
                    para.push({ field:"category_id", value:category_id });
                }
            }

            this.itemDS.query({
                filter: para,
                page:1,
                pageSize: 10
            });

            this.set("category_id", 0);
            this.set("item_group_id", 0);
        },
        searchByBarcode     : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                barcode = this.get("barcode");

            if(barcode!==""){
                this.itemDS.query({
                    filter: { field: "barcode", value: barcode },
                    page:1,
                    pageSize: 1
                }).then(function(){
                    var view = self.itemDS.view();

                    if(view.length>0){
                        self.insertItem(view[0]);
                    }
                });

                this.set("barcode", "");
            }
        },
        addSearchItem       : function(e){
            var data = e.data;

            this.insertItem(data);
        },
        openBarcodeWindow   : function(){
            this.set("barcodeVisible", true);
        },
        closeBarcodeWindow  : function(){
            this.set("barcodeVisible", false);
        },
        insertItem          : function(data){
            var self = this,
                obj = this.get("obj"),
                rate = obj.rate / banhji.source.getRate(data.locale, new Date(obj.issued_date));

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: data.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();

                var item_price = {
                    measurement_id  : data.measurement_id,
                    price           : kendo.parseFloat(data.price),
                    conversion_ratio: 1,
                    measurement     : data.measurement.name
                };

                self.lineDS.insert(0, {
                    transaction_id      : obj.id,
                    item_id             : data.id,
                    measurement_id      : data.measurement_id,
                    description         : data.sale_description,
                    on_hand             : wac[0].quantity,
                    quantity_adjusted   : 0,
                    quantity            : 0,
                    conversion_ratio    : 1,
                    cost                : wac[0].cost * rate,
                    rate                : 1,
                    locale              : data.locale,
                    movement            : 1,
                    reference_no        : "",

                    item                : data,
                    item_price          : item_price,
                    measurement         : item_price
                });
            });
        },
        //Upload
        onSelect                : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile              : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile              : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Employee
        employeeChanges             : function(){
            var obj = this.get("obj");

            if(obj.employee){
                var employee = obj.employee;

                obj.set("employee_id", employee.id);
            }else{
                obj.set("employee_id", 0);
            }
        },
        //Currency Rate
        setRate                 : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);
        },
        //Segment
        segmentChanges          : function(e) {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        //Obj
        loadObj                 : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page:1,
                    pageSize:100
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    self.lineDS.query({
                        filter:{ field:"transaction_id", value: id }
                    });

                    self.journalLineDS.query({
                        filter: { field: "transaction_id", value: id }
                    });
                });
            }
        },
        lineDSChanges           : function(arg){
            var self = banhji.itemAdjustment;

            if(arg.field){
                if(arg.field=="item"){
                    var dataItem = arg.items[0],
                        obj = self.get("obj"),
                        rate = banhji.source.getRate(dataItem.item.locale, new Date(obj.issued_date));

                    dataItem.set("item_id", dataItem.item.id);
                    dataItem.set("measurement_id", dataItem.item.measurement_id);
                    dataItem.set("description", dataItem.item.name);
                    dataItem.set("rate", rate);
                    dataItem.set("locale", dataItem.item.locale);
                    dataItem.set("measurement", dataItem.item.measurement);
                    dataItem.set("item_price", dataItem.item.measurement);

                    //Get cost
                    self.wacDS.query({
                        filter:[
                            { field:"item_id", value: dataItem.item.id },
                            { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                        ]
                    }).then(function(){
                        var wac = self.wacDS.view();

                        dataItem.set("cost", wac[0].cost * rate);
                        dataItem.set("on_hand", wac[0].quantity);
                        dataItem.set("quantity", wac[0].quantity);
                        dataItem.set("movement", -1);
                    });

                    self.addExtraRow(dataItem.uid);
                }else if(arg.field=="quantity_adjusted"){
                    $.each(banhji.itemAdjustment.lineDS.data(), function(index, value){
                        var diff = 0;
                        if(value.quantity_adjusted>value.on_hand){
                            diff = value.on_hand - value.quantity_adjusted;
                            value.set("movement", 1);
                        }else{
                            diff = value.quantity_adjusted - value.on_hand;
                            value.set("movement", -1);
                        }

                        value.set("quantity", Math.abs(diff));
                    });
                }
            }
        },
        addEmpty                : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.journalLineDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);

            this.dataSource.insert(0, {
                transaction_template_id : "",
                employee_id             : "",
                job_id                  : "",
                account_id              : "",
                type                    : "Item_Adjustment",
                rate                    : 1,
                locale                  : banhji.locale,
                issued_date             : new Date(),
                memo                    : "",
                memo2                   : "",
                segments                : [],
                is_journal              : 1,
                //Recurring
                recurring_name          : "",
                start_date              : new Date(),
                frequency               : "Daily",
                month_option            : "Day",
                interval                : 1,
                day                     : 1,
                week                    : 0,
                month                   : 0,
                is_recurring            : 0
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.generateNumber();
            this.setRate();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        addRow                  : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                item_id             : "",
                measurement_id      : 0,
                description         : "",
                on_hand             : 0,
                quantity_adjusted   : 0,
                quantity            : 0,
                conversion_ratio    : 1,
                cost                : 0,
                rate                : 1,
                locale              : banhji.locale,
                movement            : 1,
                reference_no        : "",

                item                : { id:"", name:"" },
                measurement         : { measurement_id:"", measurement:"" }
            });
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        removeRow               : function(e){
            var d = e.data;
            this.lineDS.remove(d);
        },
        objSync                 : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, obj = this.get("obj");
            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

            this.removeEmptyRow();

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            // Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item Line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                //Journal
                if(data[0].is_recurring==0 && data[0].is_journal==1){
                    self.addJournal(data[0].id);
                }

                self.lineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.cancel();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel                  : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.journalLineDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.journalLineDS.data([]);

            banhji.userManagement.removeMultiTask("item_adjustment");
        },
        //Journal
        addJournal              : function(transaction_id){
            var self = this,
                obj = this.get("obj"),
                raw = "", entries = {}, gainLoss = 0;

            //Edit Mode
            if(obj.isNew()==false){
                //Delete previous journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });
            }

            //Item Lines
            $.each(this.lineDS.data(), function(index, value){
                var accountID = value.item.inventory_account_id,
                    itemRate = banhji.source.getRate(value.item.locale, new Date(obj.issued_date)),
                    itemCost = (value.quantity*value.conversion_ratio) * value.movement * (kendo.parseFloat(value.cost)/itemRate);

                gainLoss += itemCost;

                if(itemCost>0){//Add + Positive Inventory On Dr
                    raw = "dr"+accountID;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : accountID,
                            contact_id          : obj.contact_id,
                            description         : obj.memo,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : Math.abs(itemCost),
                            cr                  : 0,
                            rate                : itemRate,
                            locale              : value.item.locale
                        };
                    }else{
                        entries[raw].dr += Math.abs(itemCost);
                    }
                }else{
                    //Add - Negative Inventory On Cr
                    raw = "cr"+accountID;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : accountID,
                            contact_id          : obj.contact_id,
                            description         : obj.memo,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : Math.abs(itemCost),
                            rate                : itemRate,
                            locale              : value.item.locale
                        };
                    }else{
                        entries[raw].cr += Math.abs(itemCost);
                    }
                }
            });//End Foreach Loop

            //Add Gain Or Loss Account
            var objAccountID = kendo.parseInt(obj.account_id),
                dr = 0, cr = 0;

            if(objAccountID>0){
                if(gainLoss>0){
                    raw = "cr"+objAccountID;
                    cr = Math.abs(gainLoss);
                }else{
                    raw = "dr"+objAccountID;
                    dr = Math.abs(gainLoss);
                }

                if(entries[raw]===undefined){
                    entries[raw] = {
                        transaction_id      : transaction_id,
                        account_id          : objAccountID,
                        contact_id          : obj.contact_id,
                        description         : obj.memo,
                        reference_no        : "",
                        segments            : obj.segments,
                        dr                  : dr,
                        cr                  : cr,
                        rate                : obj.rate,
                        locale              : obj.locale
                    };
                }else{
                    entries[raw].dr += dr;
                    entries[raw].cr += cr;
                }
            }

            //Add to journal entry
            if(!jQuery.isEmptyObject(entries)){
                $.each(entries, function(index, value){
                    self.journalLineDS.add(value);
                });
            }

            this.journalLineDS.sync();
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("recurring_id", id);
                obj.set("account_id", view[0].account_id);
                obj.set("employee_id", view[0].employee_id);//Employee
                obj.set("job_id", view[0].job_id);
                obj.set("segments", view[0].segments);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
            });

            this.recurringLineDS.query({
                filter:[
                    { field:"transaction_id", value:id },
                    { operator:"item" }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                var ids = [];
                $.each(view, function(index, value){
                    ids.push(value.item_id);

                    self.lineDS.add({
                        transaction_id      : 0,
                        item_id             : value.item_id,
                        measurement_id      : value.item.measurement_id,
                        description         : value.description,
                        on_hand             : 0,
                        quantity_adjusted   : 0,
                        quantity            : 0,
                        conversion_ratio    : 1,
                        cost                : kendo.parseFloat(value.item.cost),
                        rate                : 1,
                        locale              : value.item.locale,
                        movement            : 1,

                        item                : value.item,
                        item_price          : value.item_price
                    });
                });

                self.onHandDS.query({
                    filter:{ field:"item_id", operator:"where_in", value:ids }
                }).then(function(){
                    $.each(self.lineDS.data(), function(index, value){
                        var item = self.onHandDS.get(value.item_id);
                        if(item){
                            value.set("on_hand", item.on_hand);
                        }
                    });
                });
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        validateRecurring   : function(){
            var result = true, obj = this.get("obj");

            if(obj.recurring_name!==""){
                //Check existing name
                $.each(this.recurringDS.data(), function(index, value){
                    if(value.recurring_name==obj.recurring_name){
                        result = false;
                        alert("This is name is taken.");

                        return false;
                    }
                });
            }
            else{
                result = false;
                alert("Recurring name is required.");
            }

            return result;
        }
    });
    banhji.internalUsage = kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "transactions"),
        lineDS                  : dataStore(apiUrl + "item_lines"),
        txnDS                   : dataStore(apiUrl + "transactions"),
        numberDS                : dataStore(apiUrl + "transactions/number"),
        accountLineDS           : dataStore(apiUrl + "account_lines"),
        toItemLineDS            : dataStore(apiUrl + "item_lines"),
        toAccountLineDS         : dataStore(apiUrl + "account_lines"),
        recurringDS             : dataStore(apiUrl + "transactions"),
        recurringLineDS         : dataStore(apiUrl + "item_lines"),
        recurringAccountLineDS  : dataStore(apiUrl + "account_lines"),
        journalLineDS           : dataStore(apiUrl + "journal_lines"),
        attachmentDS            : dataStore(apiUrl + "attachments"),
        itemPriceDS             : dataStore(apiUrl + "item_prices"),
        wacDS                   : dataStore(apiUrl + "items/weighted_average_costing"),
        txnTemplateDS           : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{
                logic: "or",
                filters: [
                    { field: "type", value: "Internal_Usage" },
                    { field: "type", value: "Transfer_In" },
                    { field: "type", value: "Transfer_Out" },
                    { field: "type", value: "Usage_Disposal" }
                ]
            }
        }),
        jobDS                   : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        segmentItemDS           : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        amtDueColor             : banhji.source.amtDueColor,
        confirmMessage          : banhji.source.confirmMessage,
        frequencyList           : banhji.source.frequencyList,
        monthOptionList         : banhji.source.monthOptionList,
        monthList               : banhji.source.monthList,
        weekDayList             : banhji.source.weekDayList,
        dayList                 : banhji.source.dayList,
        showMonthOption         : false,
        showMonth               : false,
        showWeek                : false,
        showDay                 : false,
        obj                     : null,
        isEdit                  : false,
        saveDraft               : false,
        saveClose               : false,
        savePrint               : false,
        saveRecurring           : false,
        showConfirm             : false,
        notDuplicateNumber      : true,
        total                   : 0,
        totalFrom               : 0,
        totalTo                 : 0,
        different               : 0,
        user_id                 : banhji.source.user_id,
        pageLoad                : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Upload
        onSelect                : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile              : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile              : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Currency Rate
        setRate                 : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            //Item Lines
            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });

            //Account Line
            $.each(this.accountLineDS.data(), function(index, value){
                value.set("rate", rate);
                value.set("locale", obj.locale);
            });

            //Item Lines To
            $.each(this.toItemLineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });

            //Account Line To
            $.each(this.toAccountLineDS.data(), function(index, value){
                value.set("rate", rate);
                value.set("locale", obj.locale);
            });
        },
        //Segment
        segmentChanges          : function(e) {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //From Item
        addItem                 : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            // row.set("cost", item.cost * rate);
            row.set("rate", rate);
            row.set("locale", item.locale);
            // row.set("measurement", item.measurement);

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: item.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();
                row.set("cost", wac[0].cost * rate);
            });

            //Get first price
            this.itemPriceDS.query({
                filter:[
                    { field:"item_id", value:item.id },
                    { field:"assembly_id", value:0 }
                ],
                page: 1,
                pageSize: 1
            }).then(function(){
                var view = self.itemPriceDS.view();

                if(view.length>0){
                    var measurement = {
                        measurement_id  : view[0].measurement_id,
                        price           : kendo.parseFloat(view[0].price),
                        conversion_ratio: view[0].conversion_ratio,
                        measurement     : view[0].measurement
                    };
                    row.set("measurement", measurement);
                }
            });

            self.changes();
        },
        addItemCatalog          : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : 0,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : -1,

                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" }
                    });
                }
            });
        },
        addRow                  : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                item_id             : "",
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio    : 1,
                cost                : 0,
                price               : 0,
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : -1,
                reference_no        : "",

                item                : { id:"", name:"" },
                measurement         : { measurement_id:"", measurement:"" }
            });
        },
        addExtraRow             : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeRow               : function(e){
            var data = e.data;
            if(this.lineDS.total()>1){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        removeEmptyRow          : function(){
            var row, i;

            //Item
            var item = this.lineDS.data();
            for(i=item.length-1; i>=0; i--){
                row = item[i];

                if (row.item_id==0) {
                    this.lineDS.remove(row);
                }
            }

            //Account
            var account = this.accountLineDS.data();
            for(i=account.length-1; i>=0; i--){
                row = account[i];

                if (row.account_id==0) {
                    this.accountLineDS.remove(row);
                }
            }

            //Item To
            var itemTo = this.toItemLineDS.data();
            for(i=itemTo.length-1; i>=0; i--){
                row = itemTo[i];

                if (row.item_id==0) {
                    this.toItemLineDS.remove(row);
                }
            }

            //Account To
            var accountTo = this.toAccountLineDS.data();
            for(i=accountTo.length-1; i>=0; i--){
                row = accountTo[i];

                if (row.account_id==0) {
                    this.toAccountLineDS.remove(row);
                }
            }
        },
        itemLineDSChanges       : function(arg){
            var self = banhji.internalUsage;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity"){
                    self.changes();
                }else if(arg.field=="measurement"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.measurement.measurement_id);
                    dataRow.set("conversion_ratio", dataRow.measurement.conversion_ratio);
                }
            }
        },
        //From Account
        addRowAccount           : function(){
            var obj = this.get("obj");

            this.accountLineDS.add({
                transaction_id      : obj.id,
                account_id          : "",
                description         : "",
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : -1, //From Account

                account             : { id:"", name:"" }
            });
        },
        addExtraRowAccount      : function(uid){
            var row = this.accountLineDS.getByUid(uid),
                index = this.accountLineDS.indexOf(row);

            if(index==this.accountLineDS.total()-1){
                this.addRowAccount();
            }
        },
        removeRowAccount        : function(e){
            var d = e.data;

            this.accountLineDS.remove(d);
            this.changes();
        },
        accountLineDSChanges    : function(arg){
            var self = banhji.internalUsage;

            if(arg.field){
                if(arg.field=="account"){
                    var dataRow = arg.items[0],
                        account = dataRow.account;

                    dataRow.set("account_id", account.id);

                    self.addExtraRowAccount(dataRow.uid);
                }else if(arg.field=="amount"){
                    self.changes();
                }
            }
        },
        //To Item
        addRowTo                : function(){
            var obj = this.get("obj");

            this.toItemLineDS.add({
                transaction_id      : obj.id,
                item_id             : "",
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio    : 1,
                cost                : 0,
                price               : 0,
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : 1,
                reference_no        : "",

                item                : { id:"", name:"" },
                measurement         : { measurement_id:"", measurement:"" }
            });

            this.changes();
        },
        addExtraRowTo           : function(uid){
            var row = this.toItemLineDS.getByUid(uid),
                index = this.toItemLineDS.indexOf(row);

            if(index==this.toItemLineDS.total()-1){
                this.addRowTo();
            }
        },
        removeRowTo             : function(e){
            var data = e.data;

            this.toItemLineDS.remove(data);
            this.changes();
        },
        addItemTo               : function(uid){
            var self = this,
                row = this.toItemLineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            // row.set("cost", item.cost * rate);
            row.set("rate", rate);
            row.set("locale", item.locale);
            // row.set("measurement", item.measurement);

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: item.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();
                row.set("cost", wac[0].cost * rate);
            });

            //Get first price
            this.itemPriceDS.query({
                filter:[
                    { field:"item_id", value:item.id },
                    { field:"assembly_id", value:0 }
                ],
                page: 1,
                pageSize: 1
            }).then(function(){
                var view = self.itemPriceDS.view();

                if(view.length>0){
                    var measurement = {
                        measurement_id  : view[0].measurement_id,
                        price           : view[0].price * rate,
                        conversion_ratio: view[0].conversion_ratio,
                        measurement     : view[0].measurement
                    };
                    row.set("measurement", measurement);
                }
            });

            self.changes();
        },
        addItemCatalogTo        : function(uid){
            var self = this,
                row = this.toItemLineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.toItemLineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : 0,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : 1,

                        item                : catalogItem,
                        measurement         : catalogItem.measurement
                    });
                }
            });
        },
        toItemLineDSChanges     : function(arg){
            var self = banhji.internalUsage;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalogTo(dataRow.uid);
                    }else{
                        self.addItemTo(dataRow.uid);
                    }

                    self.addExtraRowTo(dataRow.uid);
                }else if(arg.field=="quantity" || arg.field=="cost"){
                    self.changes();
                }else if(arg.field=="measurement"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.measurement.measurement_id);
                    dataRow.set("conversion_ratio", dataRow.measurement.conversion_ratio);
                }
            }
        },
        //To Account
        addRowAccountTo             : function(){
            var obj = this.get("obj");
            this.toAccountLineDS.add({
                transaction_id      : obj.id,
                account_id          : "",
                description         : "",
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : 1, //To Account

                account             : { id:"", name:"" }
            });

            this.changes();
        },
        addExtraRowAccountTo        : function(uid){
            var row = this.toAccountLineDS.getByUid(uid),
                index = this.toAccountLineDS.indexOf(row);

            if(index==this.toAccountLineDS.total()-1){
                this.addRowAccountTo();
            }
        },
        removeRowAccountTo      : function(e){
            var data = e.data;

            this.toAccountLineDS.remove(data);
            this.changes();
        },
        toAccountLineDSChanges  : function(arg){
            var self = banhji.internalUsage;

            if(arg.field){
                if(arg.field=="account"){
                    var dataRow = arg.items[0],
                        account = dataRow.account;

                    dataRow.set("account_id", account.id);

                    self.addExtraRowAccountTo(dataRow.uid);
                }else if(arg.field=="amount"){
                    self.changes();
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        //Obj
        loadObj                 : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page:1,
                    pageSize:100
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    self.set("totalFrom", kendo.toString(view[0].amount, "c2", view[0].locale));
                    self.set("totalTo", kendo.toString(view[0].amount, "c2", view[0].locale));
                    self.set("different", 0);

                    self.journalLineDS.query({
                        filter:{ field:"transaction_id", value: id }
                    });

                    //From
                    self.lineDS.query({
                        filter: [
                            { field: "transaction_id", value: id },
                            { field: "movement", value: -1 }
                        ]
                    });
                    self.accountLineDS.query({
                        filter:[
                            { field:"transaction_id", value: id },
                            { field:"movement", value: -1 }
                        ]
                    });

                    //To
                    self.toItemLineDS.query({
                        filter:[
                            { field:"transaction_id", value: id },
                            { field:"movement", value: 1 }
                        ]
                    });
                    self.toAccountLineDS.query({
                        filter:[
                            { field:"transaction_id", value: id },
                            { field:"movement", value: 1 }
                        ]
                    });
                });
            }
        },
        changes                 : function() {
            var obj = this.get("obj"), sumFrom = 0, sumTo = 0;

            //From
            $.each(this.lineDS.data(), function(index, value){
                var fromItemAmount = value.quantity * value.cost;
                value.set("amount", fromItemAmount);
                sumFrom += fromItemAmount;
            });
            $.each(this.accountLineDS.data(), function(index, value){
                sumFrom += value.amount;
            });

            //To
            $.each(this.toItemLineDS.data(), function(index, value){
                var toItemAmount = value.quantity * value.cost;
                value.set("amount", toItemAmount);
                sumTo += toItemAmount;
            });
            $.each(this.toAccountLineDS.data(), function(index, value){
                sumTo += value.amount;
            });

            obj.set("amount", sumFrom);

            this.set("total", kendo.toString(sumFrom, "c2", obj.locale));
            this.set("totalFrom", sumFrom);
            this.set("totalTo", sumTo);
            this.set("different", Math.abs(sumFrom - sumTo));
        },
        addEmpty                : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.accountLineDS.data([]);
            this.toItemLineDS.data([]);
            this.toAccountLineDS.data([]);
            this.journalLineDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);
            this.set("totalFrom", 0);
            this.set("totalTo", 0);
            this.set("different", 0);

            this.dataSource.insert(0, {
                transaction_template_id : 0,
                recurring_id        : "",
                item_id             : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                type                : "Internal_Usage",//Required
                number              : "",
                amount              : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                status              : 0,
                segments            : [],
                is_journal          : 1,
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.setRate();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
                this.addRowAccount();
                this.addRowTo();
                this.addRowAccountTo();
            }
        },
        objSync                 : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, obj = this.get("obj");
            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

            this.removeEmptyRow();

            //Save Draft
            if(this.get("saveDraft")){
                obj.set("status", 4); //In progress
                obj.set("progress", "Draft");
                obj.set("is_journal", 0);//No Journal
            }

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Edit Mode
            if(obj.isNew()==false){
                //Use draft
                if(obj.status==4){
                    obj.set("status", 0);//Open
                    obj.set("progress", "");
                    obj.set("is_journal", 1);//Add Journal
                }
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item Line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Account Line
                    $.each(self.accountLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //To Item Line
                    $.each(self.toItemLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //To Account Line
                    $.each(self.toAccountLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                //Journal
                if(data[0].is_recurring==0 && data[0].is_journal==1){
                    self.addJournal(data[0].id);
                }

                self.lineDS.sync();
                self.accountLineDS.sync();
                self.toItemLineDS.sync();
                self.toAccountLineDS.sync();

                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveDraft") || self.get("saveClose")){
                    //Save Draft or Save Close
                    self.set("saveDraft", false);
                    self.set("saveClose", false);
                    self.cancel();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.cancel();

                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear                   : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.accountLineDS.cancelChanges();
            this.toItemLineDS.cancelChanges();
            this.toAccountLineDS.cancelChanges();
            this.journalLineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.accountLineDS.data([]);
            this.toItemLineDS.data([]);
            this.toAccountLineDS.data([]);
            this.journalLineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("internal_usage");
        },
        cancel                  : function(){
            this.clear();
            window.history.back();
        },
        validating              : function(){
            var result = true, obj = this.get("obj");

            if(this.get("totalFrom")!==this.get("totalTo")){
                $("#ntf1").data("kendoNotification").error("Total From must equal to Total To");

                result = false;
            }

            return result;
        },
        //Journal
        addJournal              : function(transaction_id){
            var self = this,
                obj = this.get("obj"),
                raw = "",
                entries = {};

            //Edit Mode
            if(obj.isNew()==false){
                //Delete previous journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });
            }

            //To on Dr
            $.each(this.toItemLineDS.data(), function(index, value){
                var item = value.item,
                    itemRate = banhji.source.getRate(item.locale, new Date(obj.issued_date));

                //Inventory on Dr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "dr"+inventoryID;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : 0,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : value.amount,
                            cr                  : 0,
                            rate                : itemRate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].dr += value.amount;
                    }
                }
            });
            $.each(this.toAccountLineDS.data(), function(index, value){
                raw = "dr"+value.account_id;

                //Account on Dr
                if(entries[raw]===undefined){
                    entries[raw] = {
                        transaction_id      : transaction_id,
                        account_id          : value.account_id,
                        contact_id          : 0,
                        description         : value.description,
                        reference_no        : "",
                        segments            : value.segments,
                        dr                  : value.amount,
                        cr                  : 0,
                        rate                : obj.rate,
                        locale              : obj.locale
                    };
                }else{
                    entries[raw].dr += value.amount;
                }
            });


            //From on Cr
            $.each(this.lineDS.data(), function(index, value){
                var item = value.item,
                    itemRate = banhji.source.getRate(item.locale, new Date(obj.issued_date));

                //Inventory on Cr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "cr"+inventoryID;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : 0,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : value.amount,
                            rate                : itemRate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].cr += value.amount;
                    }
                }
            });
            $.each(this.accountLineDS.data(), function(index, value){
                raw = "cr"+value.account_id;

                //Account on Cr
                if(entries[raw]===undefined){
                    entries[raw] = {
                        transaction_id      : transaction_id,
                        account_id          : value.account_id,
                        contact_id          : 0,
                        description         : value.description,
                        reference_no        : "",
                        segments            : value.segments,
                        dr                  : 0,
                        cr                  : value.amount,
                        rate                : obj.rate,
                        locale              : obj.locale
                    };
                }else{
                    entries[raw].cr += value.amount;
                }
            });

            //Add to journal entry
            if(!jQuery.isEmptyObject(entries)){
                $.each(entries, function(index, value){
                    self.journalLineDS.add(value);
                });
            }

            this.journalLineDS.sync();
        },
        //Recurring
        loadRecurring           : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("recurring_id", id);
                obj.set("employee_id", view[0].employee_id);//Employee
                obj.set("job_id", view[0].job_id);
                obj.set("segments", view[0].segments);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
            });

            //Item Line
            this.recurringLineDS.query({
                filter: { field:"transaction_id", value:id }
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);
                self.toItemLineDS.data([]);

                $.each(view, function(index, value){
                    if(value.movement==-1){//FROM
                        self.lineDS.add({
                            transaction_id      : 0,
                            tax_item_id         : value.tax_item_id,
                            item_id             : value.item_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            cost                : value.cost,
                            price               : value.price,
                            amount              : value.amount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : value.movement,

                            item                : value.item,
                            measurement         : value.measurement
                        });
                    }else{//TO
                        self.toItemLineDS.add({
                            transaction_id      : 0,
                            tax_item_id         : value.tax_item_id,
                            item_id             : value.item_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            cost                : value.cost,
                            price               : value.price,
                            amount              : value.amount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : value.movement,

                            item                : value.item,
                            measurement         : value.measurement
                        });
                    }
                });

                self.changes();
            });

            //Account Line
            this.recurringAccountLineDS.query({
                filter: { field:"transaction_id", value:id }
            }).then(function(){
                var view = self.recurringAccountLineDS.view();
                self.accountLineDS.data([]);
                self.toAccountLineDS.data([]);

                $.each(view, function(index, value){
                    if(value.movement==-1){//FROM
                        self.accountLineDS.add({
                            transaction_id      : 0,
                            account_id          : value.account_id,
                            description         : value.description,
                            amount              : value.amount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : value.movement,

                            account             : value.account
                        });
                    }else{//TO
                        self.toAccountLineDS.add({
                            transaction_id      : 0,
                            account_id          : value.account_id,
                            description         : value.description,
                            amount              : value.amount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : value.movement,

                            account             : value.account
                        });
                    }
                });

                self.changes();
            });
        },
        frequencyChanges        : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges      : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        validateRecurring       : function(){
            var result = true, obj = this.get("obj");

            if(obj.recurring_name!==""){
                //Check existing name
                $.each(this.recurringDS.data(), function(index, value){
                    if(value.recurring_name==obj.recurring_name){
                        result = false;
                        alert("This is name is taken.");

                        return false;
                    }
                });
            }
            else{
                result = false;
                alert("Recurring name is required.");
            }

            return result;
        }
    });
    banhji.itemRecurring = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        pageLoad            : function(){
            this.search();
        },
        search              : function(){
            var para = [];

            para.push({ field:"type", operator:"where_in", value:["Item_Adjustment","Internal_Usage"] });
            para.push({ field:"is_recurring", value: 1 });

            this.dataSource.filter(para);
        },
        edit                : function(e){
            var data = e.data;

            switch (data.type) {
                case "Item_Adjustment":
                    banhji.itemAdjustment.set("recurring", "edit");
                    break;
                default:
                    banhji.internalUsage.set("recurring", "edit");
            }

            banhji.router.navigate('/'+ data.type +'/'+ data.id);
        },
        use                 : function(e){
            var data = e.data;

            switch (data.type) {
                case "Item_Adjustment":
                    banhji.itemAdjustment.set("recurring", "use");
                    break;
                default:
                    banhji.internalUsage.set("recurring", "use");
            }

            banhji.router.navigate('/'+ data.type +'/'+ data.id);
        }
    });
    // INVENTORY REPORTS
    banhji.itemReportCenter = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "inventory_modules/dashboard"),
        graphDS             : dataStore(apiUrl + "inventory_modules/monthly_item_purchase_sale"),
        obj                 : {},
        pageLoad            : function(){
            this.loadData();
        },
        setObj      : function(){
            this.set("obj", {
                inventory_value         : 0,
                gross_profit_margin     : 0,
                inventory_turnover_day  : 0
            });
        },
        loadData            : function(){
            var self = this, obj = this.get("obj");

            this.graphDS.read();

            this.dataSource.query({
                filter: []
            }).then(function(){
                var view = self.dataSource.view();

                obj.set("inventory_value", kendo.toString(view[0].inventory_value, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
                obj.set("gross_profit_margin", kendo.toString(view[0].gross_profit_margin, "p"));
                obj.set("inventory_turnover_day", kendo.toString(view[0].inventory_turnover_day, "n0"));
            });
        }
    });
    banhji.inventoryPositionSummary = kendo.observable({
        lang                : langVM,
        // dataSource           : dataStore(apiUrl + "inventory_modules/position_summary"),
        dataSource              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "inventory_modules/position_summary",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            sort: [
                { field:"quantity", dir:"desc" },
                { field:"amount", dir:"desc" }
            ],
            serverFiltering: true,
            serverPaging: true,
            page: 1,
            pageSize: 10
        }),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter: [
                { field: "is_catalog", value: 0 },
                { field: "is_assembly", value: 0 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }//Inventory For Sale & Service
            ],
            sort: [
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page: 1,
            pageSize: 10
        }),
        categoryDS          : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: [
                {field:"item_type_id", value: 1}
            ]
        }),
        itemGroupDS         : banhji.source.itemGroupDS,
        itemCustomerDS      : dataStore(apiUrl + "items/contact"),
        obj                 : { itemIds: []},
        institute           : banhji.institute,
        as_of               : new Date(),
        displayDate         : "",
        total               : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();

            this.set("haveGroup", false);
        },
        catagoryChange      : function(){
            var self = this;
            this.itemGroupDS.data([]);

            this.itemGroupDS.filter([
                {field: "category_id", value: this.get("categorySelect")}
            ]);
            this.set("haveGroup", true);
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                as_of = this.get("as_of"),
                displayDate = "";
                group  = this.get("groupSelect");
                category_id = this.get("categorySelect");

            if(category_id){
                para.push({field:"category_id", value: category_id});
            }

            if(group){
                para.push({field:"item_group_id", value: group.id});
            }

            //Items
            if(obj.itemIds.length>0){
                var itemIds = [];
                $.each(obj.itemIds, function(index, value){
                    itemIds.push(value);
                });
                para.push({ field:"id", operator:"where_in", value:itemIds });
            }

            if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);
                as_of.setDate(as_of.getDate() + 1);

                para.push({ field:"issued_date <", operator:"as_of", value:kendo.toString(as_of, "yyyy-MM-dd") });
            }

            this.dataSource.query({
                filter:para,
                page: 1,
                pageSize: 50
            }).then(function(){
                // var view = self.dataSource.view();

                // var amount = 0;
                // $.each(view, function(index, value){
                //  amount += value.amount;
                // });

                // self.set("total", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response;

                    if(response){
                        self.set("total", kendo.toString(response.totalAmount, "c2", banhji.locale));
                    }

                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.institute.name, textAlign: "center", colSpan: 7 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Inventory Position Summary",bold: true, fontSize: 20, textAlign: "center", colSpan: 7 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 7 }
                            ]
                        });
                    };
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 7 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Item Name", background: "#496cad", color: "#ffffff" },
                            { value: "QOH", background: "#496cad", color: "#ffffff" },
                            { value: "ON PO", background: "#496cad", color: "#ffffff" },
                            { value: "ON SO", background: "#496cad", color: "#ffffff" },
                            { value: "Average Cost", background: "#496cad", color: "#ffffff" },
                            { value: "Average Price", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" }
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].name },
                                    { value: kendo.parseFloat(response.results[i].qoh)},
                                    { value: kendo.parseFloat(response.results[i].po)},
                                    { value: kendo.parseFloat(response.results[i].so)},
                                    { value: kendo.parseFloat(response.results[i].cost)},
                                    { value: kendo.parseFloat(response.results[i].price)},
                                    { value: kendo.parseFloat(response.results[i].amount)},
                                ]
                            });
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 7 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        dataSourceEX        : dataStore(apiUrl + "inventory_modules/position_summary"),
        ExportExcel         : function(){
            $("#loadImport").css("display", "block");
           var self = this, para = [],
                obj = this.get("obj"),
                as_of = this.get("as_of"),
           displayDate = "";
           group  = this.get("groupSelect");
           category_id = this.get("categorySelect");

           if(category_id){
                para.push({field:"category_id", value: category_id});
           }

           if(group){
                para.push({field:"item_group_id", value: group.id});
           }

           //Items
           if(obj.itemIds.length>0){
                var itemIds = [];
                $.each(obj.itemIds, function(index, value){
                     itemIds.push(value);
                });
                para.push({ field:"id", operator:"where_in", value:itemIds });
           }

           if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);
                as_of.setDate(as_of.getDate() + 1);
                para.push({ field:"issued_date <", operator:"as_of", value:kendo.toString(as_of, "yyyy-MM-dd") });
           }

           this.dataSourceEX.query({
                filter:para,
           }).then(function(e){
                self.exArray = [];
                self.exArray.push({
                     cells: [
                          { value: self.institute.name, textAlign: "center", colSpan: 7 }
                     ]
                });
                self.exArray.push({
                     cells: [
                          { value: "Inventory Position Summary",bold: true, fontSize: 20, textAlign: "center", colSpan: 7 }
                     ]
                });
                if(self.displayDate){
                     self.exArray.push({
                          cells: [
                               { value: self.displayDate, textAlign: "center", colSpan: 7 }
                          ]
                     });
                };
                self.exArray.push({
                     cells: [
                          { value: "", colSpan: 7 }
                     ]
                });
                self.exArray.push({
                     cells: [
                          { value: "Item Name", background: "#496cad", color: "#ffffff" },
                          { value: "ON PO", background: "#496cad", color: "#ffffff" },
                          { value: "ON SO", background: "#496cad", color: "#ffffff" },
                          { value: "QOH", background: "#496cad", color: "#ffffff" },
                          { value: "UOM", background: "#496cad", color: "#ffffff" },
                          { value: "Average Cost", background: "#496cad", color: "#ffffff" },
                          { value: "Inventory Value", background: "#496cad", color: "#ffffff" }
                     ]
                });
                if(self.dataSourceEX.data().length > 0){
                     $.each(self.dataSourceEX.data(), function(i,v){
                          self.exArray.push({
                               cells: [
                                    { value: v.name },
                                    { value: kendo.parseFloat(v.on_po)},
                                    { value: kendo.parseFloat(v.on_so)},
                                    { value: kendo.parseFloat(v.quantity)},
                                    { value: kendo.parseFloat(v.measurement)},
                                    { value: kendo.parseFloat(v.cost)},
                                    { value: kendo.parseFloat(v.amount)},
                               ]
                          });
                     });
                     var workbook = new kendo.ooxml.Workbook({
                          sheets: [{
                               columns: [
                                    { autoWidth: true },
                                    { autoWidth: true },
                                    { autoWidth: true },
                                    { autoWidth: true },
                                    { autoWidth: true },
                                    { autoWidth: true },
                                    { autoWidth: true }
                               ],
                               title: "Inventory Position Summary",
                               rows: self.exArray
                          }]
                     });
                     //save the file as Excel file with extension xlsx
                     kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "inventoryPositionSummary.xlsx"});
                     $("#loadImport").css("display", "none");
                }
           });
        }
    });
    banhji.inventoryPositionSummaryByLocation = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "inventory_modules/position_summary"),
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter: [
                { field: "is_catalog", value: 0 },
                { field: "is_assembly", value: 0 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }//Inventory For Sale & Service
            ],
            sort: [
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page: 1,
            pageSize: 10
        }),
        categoryDS          : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: [
                {field:"item_type_id", value: 1}
            ]
        }),
        itemGroupDS         : banhji.source.itemGroupDS,
        itemCustomerDS      : dataStore(apiUrl + "items/contact"),
        obj                 : { itemIds: []},
        institute           : banhji.institute,
        as_of               : new Date(),
        displayDate         : "",
        total               : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();

            this.set("haveGroup", false);
        },
        catagoryChange      : function(){
            var self = this;
            this.itemGroupDS.data([]);

            this.itemGroupDS.filter([
                {field: "category_id", value: this.get("categorySelect")}
            ]);
            this.set("haveGroup", true);
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                as_of = this.get("as_of"),
                displayDate = "";
                group  = this.get("groupSelect");
                category_id = this.get("categorySelect");

            if(category_id){
                para.push({field:"category_id", value: category_id});
            }

            if(group){
                para.push({field:"item_group_id", value: group.id});
            }

            //Items
            if(obj.itemIds.length>0){
                var itemIds = [];
                $.each(obj.itemIds, function(index, value){
                    itemIds.push(value);
                });
                para.push({ field:"id", operator:"where_in", value:itemIds });
            }

            if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);
                as_of.setDate(as_of.getDate() + 1);

                para.push({ field:"issued_date <", operator:"as_of", value:kendo.toString(as_of, "yyyy-MM-dd") });
            }

            this.dataSource.query({
                filter:para,
                page: 1,
                pageSize: 50
            }).then(function(){
                // var view = self.dataSource.view();

                // var amount = 0;
                // $.each(view, function(index, value){
                //  amount += value.amount;
                // });

                // self.set("total", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response;

                    if(response){
                        self.set("total", kendo.toString(response.totalAmount, "c2", banhji.locale));
                    }

                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.institute.name, textAlign: "center", colSpan: 7 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Inventory Position Summary",bold: true, fontSize: 20, textAlign: "center", colSpan: 7 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 7 }
                            ]
                        });
                    };
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 7 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Item Name", background: "#496cad", color: "#ffffff" },
                            { value: "QOH", background: "#496cad", color: "#ffffff" },
                            { value: "ON PO", background: "#496cad", color: "#ffffff" },
                            { value: "ON SO", background: "#496cad", color: "#ffffff" },
                            { value: "Average Cost", background: "#496cad", color: "#ffffff" },
                            { value: "Average Price", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" }
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].name },
                                    { value: kendo.parseFloat(response.results[i].qoh)},
                                    { value: kendo.parseFloat(response.results[i].po)},
                                    { value: kendo.parseFloat(response.results[i].so)},
                                    { value: kendo.parseFloat(response.results[i].cost)},
                                    { value: kendo.parseFloat(response.results[i].price)},
                                    { value: kendo.parseFloat(response.results[i].amount)},
                                ]
                            });
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 7 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Inventory Position Summary",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "inventoryPositionSummary.xlsx"});
        }
    });
    banhji.inventoryPositionDetail = kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "inventory_modules/position_detail"),
        itemDS                  : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter: [
                { field: "is_catalog", value: 0 },
                { field: "is_assembly", value: 0 },
                { field: "item_type_id", operator:"where_in", value: [1,4] }//Inventory For Sale & Service
            ],
            sort: [
                { field:"item_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page: 1,
            pageSize: 10
        }),
        categoryDS              : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: [
                {field:"item_type_id", value: 1}
            ]
        }),
        itemGroupDS             : banhji.source.itemGroupDS,
        obj                     : { itemIds: [] },
        sortList                : banhji.source.sortList,
        sorter                  : "month",
        sdate                   : "",
        edate                   : "",
        institute               : banhji.institute,
        displayDate             : "",
        total                   : 0,
        exArray                 : [],
        pageLoad                : function(){
            // this.search();
            this.set("haveGroup", false);
        },
        catagoryChange      : function(){
            var self = this;
            this.itemGroupDS.data([]);

            this.itemGroupDS.filter([
                {field: "category_id", value: this.get("categorySelect")}
            ]);
            this.set("haveGroup", true);
        },
        sorterChanges           : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search                  : function(){
            var self = this, para = [], displayDate = "",
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate");
                group  = this.get("groupSelect");
                category = this.get("categorySelect");

            if(category){
                para.push({field:"category_id", operator:"where_related_item", value: category});
            }

            if(group){
                para.push({field:"item_group_id", operator:"where_related_item", value: group.id});
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                //Add 1 day
                end.setDate(end.getDate() + 1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                end = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");
                //Add 1 day
                end.setDate(end.getDate() + 1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                //Add 1 day
                end.setDate(end.getDate() + 1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{}
            this.set("displayDate", displayDate);

            //Item list
            if(obj.itemIds.length>0){
                var itemIds = [];
                $.each(obj.itemIds, function(index, value){
                    itemIds.push(value);
                });

                para.push({ field: "item_id", operator:"where_in", value:itemIds });
            }

            this.dataSource.query({
                filter:para
            }).then(function(){
                // var view = self.dataSource.view();

                // var sum = 0;
                // $.each(view, function(index, value){
                //  sum += value.balance_forward;
                //  $.each(value.line, function(ind, val){
                //      sum += val.amount;
                //  });
                // });
                // self.set("total", kendo.toString(sum, "c", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balanceRec = 0, qty= 0, balance= 0;

                    if(response){
                        self.set("total", kendo.toString(response.totalAmount, "c2", banhji.locale));
                    }

                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.institute.name, textAlign: "center", colSpan: 8}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Inventory Position Detail",bold: true, fontSize: 20, textAlign: "center", colSpan: 8}
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 8}
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 8}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "TXN Type", background: "#496cad", color: "#ffffff" },
                            { value: "Date", background: "#496cad", color: "#ffffff" },
                            { value: "REF", background: "#496cad", color: "#ffffff" },
                            { value: "QTY", background: "#496cad", color: "#ffffff" },
                            { value: "Cost", background: "#496cad", color: "#ffffff" },
                            { value: "Price", background: "#496cad", color: "#ffffff" },
                            { value: "On Hand", background: "#496cad", color: "#ffffff" },
                            { value: "Balance", background: "#496cad", color: "#ffffff" }
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        qty = response.results[i].qoh_forward, balance = response.results[i].balance_forward;
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: response.results[i].qoh_forward, bold: true, },
                                { value: response.results[i].balance_forward, bold: true, }
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            qty += response.results[i].line[j].quantity;
                            balance += response.results[i].line[j].amount;
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].type },
                                    { value: response.results[i].line[j].issued_date },
                                    { value: response.results[i].line[j].number},
                                    { value: response.results[i].line[j].quantity },
                                    { value: response.results[i].line[j].cost},
                                    { value: response.results[i].line[j].price},
                                    { value: qty},
                                    { value: balance},
                                ]
                            });
                        }

                        self.exArray.push({
                        cells: [
                            { value: "TOTAL", bold: true,fontSize: 16 },
                            { value: "" },
                            { value: "" },
                            { value: "" },
                            { value: "" },
                            { value: "" },
                            { value: "" },
                            { value: balance, bold: true, fontSize: 16 },
                        ]
                        });
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 7 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Inventory Position Detail",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "inventoryPositionDetail.xlsx"});
        }
    });
    banhji.inventorySaleItemAnalysis = kendo.observable({
        dataSource      : dataStore(apiUrl + "item_reports/item_sale"),
        filterDB            : [
            {id: 'customer', name: 'Customer'},
            {id: 'segment', name: 'Segment'}
        ],
        filteredBy          : "customer",
        sortDB              : [
            {id: 'date', name: 'Date'}
        ],
        search  : function() {

            banhji.inventorySaleItemAnalysis.dataSource.filter({
                logic: banhji.inventorySaleItemAnalysis.get('filteredBy'),
                filters: [
                    {field: "issued_date >=", value: kendo.toString(this.startDate, "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(this.endDate, "yyyy-MM-dd")}
                ]
            });
        },
        filterChange  : function(e){
            banhji.inventorySaleItemAnalysis.set("filteredBy", e.sender.dataSource.at(e.sender.selectedIndex-1).id);
        }
    });
    banhji.inventoryTurnoverList = kendo.observable({
        dataSource      : dataStore(apiUrl + "item_reports/item_turnover"),
        filterDB            : [
            {id: 'customer', name: 'Customer'},
            {id: 'segment', name: 'Segment'}
        ],
        filteredBy          : "customer",
        sortDB              : [
            {id: 'date', name: 'Date'}
        ],
        search  : function() {

            banhji.inventoryTurnoverList.dataSource.filter({
                logic: banhji.inventoryTurnoverList.get('filteredBy'),
                filters: [
                    {field: "issued_date >=", value: kendo.toString(this.startDate, "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(this.endDate, "yyyy-MM-dd")}
                ]
            });
        },
        filterChange  : function(e){
            banhji.inventoryTurnoverList.set("filteredBy", e.sender.dataSource.at(e.sender.selectedIndex-1).id);
        }
    });
    banhji.inventoryMovementSummary = kendo.observable({
        dataSource      : dataStore(apiUrl + "item_reports/movement_summary"),
        filterDB            : [
            {id: 'customer', name: 'Customer'},
            {id: 'segment', name: 'Segment'}
        ],
        filteredBy          : "customer",
        sortDB              : [
            {id: 'date', name: 'Date'}
        ],
        search  : function() {

            banhji.inventoryMovementSummary.dataSource.filter({
                logic: banhji.inventoryMovementSummary.get('filteredBy'),
                filters: [
                    {field: "issued_date >=", value: kendo.toString(this.startDate, "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(this.endDate, "yyyy-MM-dd")}
                ]
            });
        },
        filterChange  : function(e){
            banhji.inventoryMovementSummary.set("filteredBy", e.sender.dataSource.at(e.sender.selectedIndex-1).id);
        }
    });
    banhji.inventoryMovementDetail = kendo.observable({
        dataSource      : dataStore(apiUrl + "item_reports/movement_detail"),
        filterDB            : [
            {id: 'customer', name: 'Customer'},
            {id: 'segment', name: 'Segment'}
        ],
        filteredBy          : "customer",
        sortDB              : [
            {id: 'date', name: 'Date'}
        ],
        search  : function() {

            banhji.inventoryMovementDetail.dataSource.filter({
                logic: banhji.inventoryMovementDetail.get('filteredBy'),
                filters: [
                    {field: "issued_date >=", value: kendo.toString(this.startDate, "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(this.endDate, "yyyy-MM-dd")}
                ]
            });
        },
        filterChange  : function(e){
            banhji.inventoryMovementDetail.set("filteredBy", e.sender.dataSource.at(e.sender.selectedIndex-1).id);
        },
    });
    banhji.inventorySale = kendo.observable({
        institute           : banhji.institute,
        lang                : langVM,
        locale              : banhji.locale,
        statementDB         : dataStore(apiUrl + "sales/statement"),
        count               : 0,
        total_avg           : 0,
        saleNumber          : 0,
        gpm                 : 0,
        total_sale          : 0,
        companyName         : null,
        startDate           : "<?php echo date("d-m-y"); ?>",
        endDate             : new Date(),
        sorter              : '',
        openInvoice         : 0,
        company             : banhji.institute,
        sortList            : banhji.source.sortList,
        //line to sale summary
        inventoryPositionSummary         : banhji.inventoryPositionSummary,
        inventoryPositionDetail          : banhji.inventoryPositionDetail,
        inventorySaleDB                  : banhji.inventorySaleItemAnalysis,
        inventoryTurnoverList            : banhji.inventoryTurnoverList,
        inventoryMovementSummary         : banhji.inventoryMovementSummary,
        inventoryMovementDetail         : banhji.inventoryMovementDetail,
        // search button
        saleDetailSearch    : function() {
            this.detailSale.filter({
                logic: 'segment',
                filters: [
                    {field: "id", "operator": "segment", value: 9},
                    {field: "issued_date >=", value: kendo.toString(this.startDate, "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(this.endDate, "yyyy-MM-dd")}
                ]
            });
        },
        displayDateStart    : function() {
            return kendo.toString(new Date(this.get('startDate')), 'dd-MM-yyyy');
        },
        displayDateEnd    : function() {
            return kendo.toString(new Date(this.get('endDate')), 'dd-MM-yyyy');
        },
        trnxSearch          : function() {},
        depositDetailSearch : function() {},
        summaryProductSearch: function() {},
        detailProductSearch : function() {},
        saleJobSearch       : function() {},
        saleOrderSearch     : function() {},
        balanaceSearch      : function() {},
        balanceDetailSearch : function() {},
        agingSummarySearch  : function() {},
        agingDetailSearch   : function() {},
        collectingInvSearch : function() {},
        collectedInvSearch  : function() {},
        invoiceListSearch   : function() {},
        customerListSearch  : function() {},
        dateMax             : function(e) {
            $('#edate').css('width', '160px');
            var edate = $('#edate').kendoDatePicker().data("kendoDatePicker");
            edate.min(e.sender.value());
        },
        dateMin             : function(e) {
            $('#sdate').css('width', '160px');
            var sdate = $('#sdate').kendoDatePicker().data("kendoDatePicker");
            sdate.max(e.sender.value());
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=900, height=700'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="<?php echo base_url(); ?>assets/responsive.css" rel="stylesheet" >' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    '*{  } html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: landscape; margin:0mm; } .saleSummaryCustomer .total-customer, .saleSummaryCustomer .total-sale { background-color: #DDEBF7!important; -webkit-print-color-adjust:exact; }.saleSummaryCustomer .table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;-webkit-print-color-adjust:exact;}.saleSummaryCustomer .table.table-borderless.table-condensed  tr th span{ color: #fff!important; }.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td {  background-color: #fff!important; -webkit-print-color-adjust:exact;} .saleSummaryCustomer .table.table-borderless.table-condensed tr td { background-color: #F2F2F2!important;-webkit-print-color-adjust:exact; } </style>' +
                    '</head>' +
                    '<body><div id="example" class="k-content saleSummaryCustomer" style="padding: 30px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        dateChange          : function(){
            // var strDate = "";

            //  if(this.startDate && this.endDate){
            //      strDate = "From " + kendo.toString(this.startDate, "dd-MM-yyyy") + " To " + kendo.toString(this.endDate, "dd-MM-yyyy");
            //  }else if(this.startDate){
            //      strDate = "On " + kendo.toString(this.startDate,"dd-MM-yyyy");
            //  }else if(this.endDate){
            //      strDate = "As Of " + kendo.toString(this.endDate,"dd-MM-yyyy");
            //  }else{
            //      strDate = "";
            //  }

            var today = new Date(),
            day = today.getDate();
            sdate = "",
            edate = "",
            value = this.get('sorter');

            switch(value){
            case "today":
                sdate = today;

                break;
            case "week":
                var first = new Date(today.getTime() - 60*60*24* day*1000),
                last = new Date(today.getTime() + 60*60*24* day*1000);

                sdate = first;
                edate = last;

                break;
            case "month":
                var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
                edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                break;
            case "year":
                var sdate = new Date(today.getFullYear(), 0, 1),
                edate = new Date(today.getFullYear(), 11, 31);

                break;
            default:

            }

            this.set("startDate", sdate);
            this.set("endDate", edate);
            // start.value(sdate);
            // end.value(edate);

            // start.max(end.value());
           //       end.min(start.value());

           //       dateChanges();
           //          });

           //          start.max(end.value());
           //          end.min(start.value());
        }
    });
    banhji.inventoryList =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "items"),
        categoryDS          : dataStore(apiUrl + "categories"),
        itemGroupDS         : dataStore(apiUrl + "items/group"),
        contactDS           : dataStore(apiUrl + "contacts"),
        vendorDS            : dataStore(apiUrl + "contacts"),

        searchField         : "",
        category_id         : 0,
        item_group_id       : 0,

        pageLoad            : function(){

        },
        search              : function(){
            var para = [],
            searchField = this.get("searchField"),
            category_id = this.get("category_id"),
            item_group_id = this.get("item_group_id");

            if(searchField!==""){
                para.push(
                    { field: "number", operator: "like", value: searchField },
                    { field: "name", operator: "or_like", value: searchField }
                );
            }

            if(item_group_id>0){
                para.push({ field:"item_group_id", value:item_group_id });
            }else if(category_id>0){
                para.push({ field:"category_id", value:category_id });
            }

            this.dataSource.filter(para);
        },
        searchFavorite  : function(){
            this.dataSource.filter({ field:"favorite", value: 1 });
        },
        vendorChanges   : function(e){
            var index = e.sender.select().index();
            var data = this.vendorDS.at(index);

            this.dataSource.filter({ field:"contact_id", operator:"by_vendor", value:data.id });
        }
    });
    banhji.itemList = kendo.observable({
      lang          : langVM,
      institute         : banhji.institute,
      dataSource        : dataStore(apiUrl + "inventory_modules/item"),
      statusList        : banhji.source.statusList,
      contact_type_id     : null,
      status          : null,
      pageLoad        : function(){
      },
      printGrid     : function() {
        var gridElement = $('#grid'),
              printableContent = '',
              win = window.open('', '', 'width=900, height=700'),
              doc = win.document.open();
          var htmlStart =
                  '<!DOCTYPE html>' +
                  '<html>' +
                  '<head>' +
                  '<meta charset="utf-8" />' +
                  '<title></title>' +
                  '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                  '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                  '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                  '<link href="<?php echo base_url(); ?>assets/responsive.css" rel="stylesheet" >' +
                  '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                  '<style>' +
                  '*{  } html { font: 11pt sans-serif; }' +
                  '.k-grid { border-top-width: 0; }' +
                  '.k-grid, .k-grid-content { height: auto !important; }' +
                  '.k-grid-content { overflow: visible !important; }' +
                  'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                  '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                  '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                  '</style><style type="text/css" media="print"> @page { size: landscape; margin:0mm; } .saleSummaryCustomer .total-customer, .saleSummaryCustomer .total-sale { background-color: #DDEBF7!important; -webkit-print-color-adjust:exact; }.saleSummaryCustomer .table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;-webkit-print-color-adjust:exact;}.saleSummaryCustomer .table.table-borderless.table-condensed  tr th span{ color: #fff!important; }.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td {  background-color: #fff!important; -webkit-print-color-adjust:exact;} .saleSummaryCustomer .table.table-borderless.table-condensed tr td { background-color: #F2F2F2!important;-webkit-print-color-adjust:exact; } </style>' +
                  '</head>' +
                  '<body><div id="example" class="k-content saleSummaryCustomer" style="padding: 30px;">';
          var htmlEnd =
                  '</div></body>' +
                  '</html>';

          printableContent = $('#invFormContent').html();
          doc.write(htmlStart + printableContent + htmlEnd);
          doc.close();
          setTimeout(function(){
            win.print();
            win.close();
          },2000);
      },
    });
    banhji.inventoryPurchaseByVendorSummary =  kendo.observable({
        lang                : langVM,
        dataSource          : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items/purchase_by_vendor_summary",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            limit: options.pageSize,
                            page: options.page,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            sort: { field: "amount", dir: "desc" },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            batch: true,
            serverFiltering: true
        }),
        sortList            : [
            { text:"All", value: "all" },
            { text:"Today", value: "today" },
            { text:"This Week", value: "week" },
            { text:"This Month", value: "month" },
            { text:"This Year", value: "year" }
        ],
        sorter              : "all",
        sdate               : "",
        edate               : "",
        pageLoad            : function(id){
        },
        sorterChanges       : function(){
            var value = this.get("sorter"),
            today = new Date();

            switch(value){
            case "today":
                this.set("sdate", today);
                this.set("edate", "");

                break;
            case "week":
                var first = today.getDate() - today.getDay(),
                last = first + 6;

                var firstDayOfWeek = new Date(today.setDate(first)),
                lastDayOfWeek = new Date(today.setDate(last));

                this.set("sdate", firstDayOfWeek);
                this.set("edate", lastDayOfWeek);

                break;
            case "month":
                var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1),
                lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                this.set("sdate", firstDayOfMonth);
                this.set("edate", lastDayOfMonth);

                break;
            case "year":
                var firstDayOfYear = new Date(today.getFullYear(), 0, 1),
                lastDayOfYear = new Date(today.getFullYear(), 11, 31);

                this.set("sdate", firstDayOfYear);
                this.set("edate", lastDayOfYear);

                break;
            default:
                this.set("sdate", "");
                this.set("edate", "");
            }
        },
        strDate             : function(){
            var strDate = "",
            sdate = this.get("sdate"),
            edate = this.get("edate");

            if(sdate && edate){
                strDate = "From " + kendo.toString(new Date(sdate), "dd-MM-yyyy") + " To " + kendo.toString(new Date(edate), "dd-MM-yyyy");
            }else if(sdate){
                strDate = "On " + kendo.toString(new Date(sdate),"dd-MM-yyyy");
            }else if(edate){
                strDate = "As Of " + kendo.toString(new Date(edate),"dd-MM-yyyy");
            }else{
                strDate = "";
            }

            return strDate;
        },
        search              : function(){
            var self = this,
            para = [],
            start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"),
            end = kendo.toString(this.get("edate"), "yyyy-MM-dd");

            //Dates
            if(start && end){
                para.push({ field:"issued_date >=", value: start });
                para.push({ field:"issued_date <=", value: end });
            }else if(start){
                para.push({ field:"issued_date", value: start });
            }else if(end){
                para.push({ field:"issued_date <=", value: end });
            }else{

            }

            this.dataSource.filter(para);
        }
    });
    banhji.inventoryPurchaseByVendorDetail = kendo.observable({
        lang                : langVM,
        dataSource          : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items/purchase_by_vendor_detail",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            limit: options.pageSize,
                            page: options.page,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            sort: { field: "issued_date", dir: "asc" },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            batch: true,
            serverFiltering: true
        }),
        sortList            : [
            { text:"All", value: "all" },
            { text:"Today", value: "today" },
            { text:"This Week", value: "week" },
            { text:"This Month", value: "month" },
            { text:"This Year", value: "year" }
        ],
        sorter              : "all",
        sdate               : "",
        edate               : "",
        pageLoad            : function(id){},
        sorterChanges       : function(){
            var value = this.get("sorter"),
            today = new Date();

            switch(value){
            case "today":
                this.set("sdate", today);
                this.set("edate", "");
                break;
            case "week":
                var first = today.getDate() - today.getDay(),
                last = first + 6;

                var firstDayOfWeek = new Date(today.setDate(first)),
                lastDayOfWeek = new Date(today.setDate(last));

                this.set("sdate", firstDayOfWeek);
                this.set("edate", lastDayOfWeek);

                break;
            case "month":
                var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1),
                lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                this.set("sdate", firstDayOfMonth);
                this.set("edate", lastDayOfMonth);

                break;
            case "year":
                var firstDayOfYear = new Date(today.getFullYear(), 0, 1),
                lastDayOfYear = new Date(today.getFullYear(), 11, 31);

                this.set("sdate", firstDayOfYear);
                this.set("edate", lastDayOfYear);

                break;
            default:
                this.set("sdate", "");
                this.set("edate", "");
            }
        },
        strDate             : function(){
            var strDate = "",
            sdate = this.get("sdate"),
            edate = this.get("edate");

            if(sdate && edate){
                strDate = "From " + kendo.toString(new Date(sdate), "dd-MM-yyyy") + " To " + kendo.toString(new Date(edate), "dd-MM-yyyy");
            }else if(sdate){
                strDate = "On " + kendo.toString(new Date(sdate),"dd-MM-yyyy");
            }else if(edate){
                strDate = "As Of " + kendo.toString(new Date(edate),"dd-MM-yyyy");
            }else{
                strDate = "";
            }

            return strDate;
        },
        search              : function(){
            var self = this,
            para = [],
            start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"),
            end = kendo.toString(this.get("edate"), "yyyy-MM-dd");

            //Dates
            if(start && end){
                para.push({ field:"issued_date >=", value: start });
                para.push({ field:"issued_date <=", value: end });
            }else if(start){
                para.push({ field:"issued_date", value: start });
            }else if(end){
                para.push({ field:"issued_date <=", value: end });
            }else{

            }
            this.dataSource.filter(para);
        }
    });
    banhji.gdnReport = kendo.observable({
        lang                    : langVM,
        dataSource              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "inventory_modules/gdn_report",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            group: { field: "name" },
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page: 1,
            pageSize: 100
        }),
        contactDS               : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "contacts",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:{ field:"parent_id", operator:"where_related_contact_type", value: 1 },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page: 1,
            pageSize: 100
        }),
        obj                     : {},
        sortList                : banhji.source.sortList,
        sorter                  : "month",
        sdate                   : "",
        edate                   : "",
        institute               : banhji.institute,
        displayDate             : "",
        total                   : 0,
        pageLoad                : function(){
            this.search();
        },
        sorterChanges           : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search                  : function(){
            var self = this, para = [], displayDate = "",
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate");

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.filter(para);
            // this.dataSource.query({
            //  filter:para
            // }).then(function(){
            //  var view = self.dataSource.view();
            // });
        }
    });
    // INVENTORY SETTING
    banhji.itemSetting =  kendo.observable({
        lang                : langVM,
        itemTypeDS          : dataStore(apiUrl + "item_types"),
        categoryDS          : dataStore(apiUrl + "categories"),
        itemGroupDS         : dataStore(apiUrl + "items/group"),
        brandDS             : dataStore(apiUrl + "brands"),
        measurementDS       : dataStore(apiUrl + "measurements"),
        measurementCategoryDS: dataStore(apiUrl + "measurement_categories"),
        patternDS           : dataStore(apiUrl + "items"),
        category_code       : "",
        category_name       : "",
        category_abbr       : "",
        category_item_type_id : 1,
        item_group_category_id : 0,
        item_group_code     : "",
        item_group_name     : "",
        item_group_abbr     : "",
        measurement_name    : "",
        measurement_category_id : 0,
        brand_code          : "",
        brand_name          : "",
        brand_abbr          : "",
        prefixDS            : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "prefixes",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                create  : {
                    url: apiUrl + "prefixes",
                    type: "POST",
                    headers: banhji.header,
                    dataType: 'json'
                },
                update  : {
                    url: apiUrl + "prefixes",
                    type: "PUT",
                    headers: banhji.header,
                    dataType: 'json'
                },
                destroy     : {
                    url: apiUrl + "prefixes",
                    type: "DELETE",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter: { field:"type", operator:"where_in", value:["GRN", "GDN", "Item_Adjustment", "Internal_Usage"] },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        pageLoad            : function() {
        },
        addCategory         : function(){
            var self = this,
            name = this.get("category_name"),
            abbr = this.get("category_abbr");

            if(name!=="" && abbr!==""){
                this.categoryDS.add({
                    sub_of          : 0,
                    item_type_id    : this.get("category_item_type_id"),
                    item_id         : 0,
                    code            : "",
                    name            : name,
                    abbr            : abbr,
                    is_system       : 0,
                    item_type       : []
                });

                this.categoryDS.sync();
                var saved = false;
                this.categoryDS.bind("requestEnd", function(e){
                    if(e.type==="create" && saved==false){
                        saved = true;

                        var response = e.response.results[0];
                        // self.addPattern(response.id, response.item_type_id);
                        banhji.source.loadCategories();
                    }
                });

                this.set("category_name", "");
                this.set("category_abbr", "");
            }else{
                alert("required abbr and name!");
            }
        },
        categoryChanges     : function(){
            banhji.source.loadCategories();
        },
        addPattern          : function(category_id, item_type_id){
            this.patternDS.insert(0, {
                item_type_id            : item_type_id,
                category_id             : category_id,
                number                  : "",
                is_pattern              : 1,
                status                  : 1
            });

            this.patternDS.sync();
        },
        addItemGroup        : function(){
            var self = this,
            category_id = this.get("item_group_category_id"),
            name = this.get("item_group_name"),
            abbr = this.get("item_group_abbr");

            if(category_id>0 && name!=="" && abbr!==""){
                this.itemGroupDS.add({
                    category_id     : category_id,
                    sub_of          : 0,
                    code            : "",
                    name            : name,
                    abbr            : abbr,
                    is_system       : 0,

                    category        : [{name:""}]
                });

                this.itemGroupDS.sync();
                var saved = false;
                this.itemGroupDS.bind("requestEnd", function(e){
                    if(e.type==="create" && saved==false){
                        saved = true;
                        banhji.source.loadItemGroups();
                    }
                });

                self.set("item_group_category_id", 0);
                self.set("item_group_code", "");
                self.set("item_group_name", "");
                self.set("item_group_abbr", "");
            }else{
                alert("required category, abbr, and name!");
            }
        },
        addMeasurementCategory      : function(){
            var name = this.get("measurement_category_name");

            if(name!==""){
                this.measurementCategoryDS.add({
                    name        : name,
                    is_system   : 0
                });

                this.measurementCategoryDS.sync();

                this.set("measurement_category_name", "");
            }else{
                alert("required name");
            }
        },
        addMeasurement      : function(){
            var self = this,
                measurement_category_id = this.get("measurement_category_id"),
                name = this.get("measurement_name");

            if(name!=="" && measurement_category_id>0){
                var category = this.measurementCategoryDS.get(measurement_category_id);

                this.measurementDS.add({
                    measurement_category_id : measurement_category_id,
                    name        : name,
                    description : name,
                    is_system   : 0,
                    category    : category.name
                });

                this.measurementDS.sync();
                var saved = false;
                this.measurementDS.bind("requestEnd", function(e){
                    if(saved==false){
                        saved = true;
                        banhji.source.loadMeasurements();
                    }
                });

                this.set("measurement_category_id", 0);
                this.set("measurement_name", "");
            }else{
                alert("required both name and category");
            }
        },
        addBrand            : function(){
            var self = this,
            code = this.get("brand_code"),
            name = this.get("brand_name");

            if(name!=="" && code!==""){
                this.brandDS.add({
                    sub_of      : this.get("brand_sub_of"),
                    code        : code,
                    name        : name,
                    abbr        : this.get("brand_abbr")
                });

                this.brandDS.sync();

                this.set("brand_code", "");
                this.set("brand_name", "");
                this.set("brand_abbr", "");
            }else{
                alert("required number and name!");
            }
        },
        goPattern           : function(e){
            var data = e.data;

            if(data.item_type_id==1){
                banhji.router.navigate('/item/0/'+data.id);
            }else if(data.item_type_id==2){
                banhji.router.navigate('/non_inventory_part/0/'+data.id);
            }else if(data.item_type_id==3){
                banhji.router.navigate('/fixed_assets/0/'+data.id);
            }else if(data.item_type_id==4){
                banhji.router.navigate('/item_service/0/'+data.id);
            }else if(data.item_type_id==5){
                banhji.router.navigate('/txn_item/0/'+data.id);
            }
        }
    });
    banhji.serviceSetting =  kendo.observable({
        lang                : langVM,
        categoryDS          : dataStore(apiUrl + "categories"),
        itemGroupDS         : dataStore(apiUrl + "items/group"),
        measurementDS       : dataStore(apiUrl + "measurements"),
        itemTypeDS          : dataStore(apiUrl + "item_types"),
        category_code       : "",
        category_name       : "",
        category_abbr       : "",
        category_item_type_id : 4,
        item_group_category_id : 0,
        item_group_code     : "",
        item_group_name     : "",
        item_group_abbr     : "",
        measurement_name    : "",
        pageLoad            : function() {

        },
        addCategory         : function(){
            var self = this,
            name = this.get("category_name"),
            code = this.get("category_code");

            if(name!=="" && code!==""){
                this.categoryDS.add({
                    sub_of          : 0,
                    item_type_id    : this.get("category_item_type_id"),
                    item_id         : 0,
                    code            : code,
                    name            : name,
                    abbr            : this.get("category_abbr"),
                    is_system       : 0,
                    item_type       : []
                });

                this.categoryDS.sync();
                this.set("category_code", "");
                this.set("category_name", "");
                this.set("category_abbr", "");
            }else{
                alert("required number and name!");
            }
        },
        addItemGroup        : function(){
            var self = this,
            category_id = this.get("item_group_category_id"),
            name = this.get("item_group_name"),
            code = this.get("item_group_code");

            if(category_id>0 && name!=="" && code!==""){
                this.itemGroupDS.add({
                    category_id     : category_id,
                    sub_of          : 0,
                    code            : code,
                    name            : name,
                    abbr            : this.get("item_group_abbr"),
                    is_system       : 0
                });

                this.itemGroupDS.sync();

                self.set("item_group_category_id", 0);
                self.set("item_group_code", "");
                self.set("item_group_name", "");
                self.set("item_group_abbr", "");
            }else{
                alert("required category, number, and name!");
            }
        },
        addMeasurement      : function(){
            var self = this,
            name = this.get("measurement_name");

            if(name!==""){
                this.measurementDS.add({
                    name        : name,
                    description : name,
                    is_system   : 0
                });

                this.measurementDS.sync();

                this.set("measurement_name", "");
            }else{
                alert("required name");
            }
        },
        goPattern   : function(e){
            var data = e.data;

            if(kendo.parseInt(data.item_id)>0){
                banhji.router.navigate('/item_service/'+data.item_id+'/1');
            }else{
                banhji.router.navigate('/item_service');
                banhji.item.setPattern(data.id);
            }
        }
    });
    banhji.variants =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "variant_attributes"),
        attributeValueDS    : dataStore(apiUrl + "attribute_values"),
        pageLoad            : function() {
        },
        addNew              : function(){
            var listView = $("#listView").data("kendoListView");
            // add item
            listView.add();
        },
        addNewAttributeValue: function(e){
            var self = this, data = e.data;

            this.attributeValueDS.query({
                filter: { field:"variant_attribute_id", value: data.id }
            }).then(function(){
                self.attributeValueDS.insert(0, {
                    variant_attribute_id    : data.id,
                    name                    : "",
                    color_code              : "",
                    image_url               : ""
                });
            });

        },
        viewAttributeValue  : function(e){
            var data = e.data;

            this.attributeValueDS.filter({ field:"variant_attribute_id", value: data.id });
        }
    });
    banhji.warehouses =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "warehouses"),
        locationDS          : dataStore(apiUrl + "locations"),
        locationTypeDS      : dataStore(apiUrl + "location_types"),
        zoneDS              : dataStore(apiUrl + "zones"),
        sectionDS           : dataStore(apiUrl + "sections"),
        rackDS              : dataStore(apiUrl + "racks"),
        levelDS             : dataStore(apiUrl + "levels"),
        positionDS          : dataStore(apiUrl + "positions"),
        binLocationDS       : dataStore(apiUrl + "bin_locations"),
        pageLoad            : function() {
        },
        addNew              : function(){
            var listView = $("#listView").data("kendoListView");
            // add item
            listView.add();
        },
        addNewLocation      : function(e){
            var data = e.data;

            this.locationDS.insert(0, {
                warehouse_id        : data.id,
                location_type_id    : 0,
                number              : "",
                name                : "",
                location_type       : { id:0, name:"" }
            });
        },
        viewLocation        : function(e){
            var data = e.data;
            this.locationDS.filter({ field:"warehouse_id", value: data.id });
        },
        addNewBinLocation   : function(){
            var lvBinLocation = $("#lvBinLocation").data("kendoListView");
            // add item
            lvBinLocation.add();
        },
        generateNumber      : function(e){
            var data = e.data, number = "";

            if(data.warehouse_id>0){
                var warehouse = this.dataSource.get(data.warehouse_id);
                number += warehouse.number;
            }

            if(data.location_id>0){
                var location = this.locationDS.get(data.location_id);
                number += location.number;
            }

            if(data.zone_id>0){
                var zone = this.zoneDS.get(data.zone_id);
                number += zone.number;
            }

            if(data.section_id>0){
                var section = this.sectionDS.get(data.section_id);
                number += section.number;
            }

            if(data.rack_id>0){
                var rack = this.rackDS.get(data.rack_id);
                number += rack.number;
            }

            if(data.level_id>0){
                var level = this.levelDS.get(data.level_id);
                number += level.number;
            }

            if(data.position_id>0){
                var position = this.positionDS.get(data.position_id);
                number += position.number;
            }
            console.log(number);
            // data.set("number", "xxxx");

            // this.binLocationDS.sync();
        },
        binLocationDSChanges: function(arg){
            var self = banhji.warehouses;

            if(arg.field){
                var dataRow = arg.items[0],
                    number = "";

                if(dataRow.autoNumber){
                    if(dataRow.warehouse_id){
                        var warehouse = self.dataSource.get(dataRow.warehouse_id);
                        number += warehouse.number;
                    }

                    if(dataRow.location_id){
                        var location = self.locationDS.get(dataRow.location_id);
                        number += location.number;
                    }

                    if(dataRow.zone_id>0){
                        var zone = self.zoneDS.get(dataRow.zone_id);
                        number += zone.number;
                    }

                    if(dataRow.section_id>0){
                        var section = self.sectionDS.get(dataRow.section_id);
                        number += section.number;
                    }

                    if(dataRow.rack_id>0){
                        var rack = self.rackDS.get(dataRow.rack_id);
                        number += rack.number;
                    }

                    if(dataRow.level_id>0){
                        var level = self.levelDS.get(dataRow.level_id);
                        number += level.number;
                    }

                    if(dataRow.position_id>0){
                        var position = self.positionDS.get(dataRow.position_id);
                        number += position.number;
                    }

                    dataRow.set("number", number);
                }
            }
        }
    });
    banhji.binLocations =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "variant_attributes"),
        attributeValueDS    : dataStore(apiUrl + "attribute_values"),
        pageLoad            : function() {
        },
        addNew              : function(){
            var listView = $("#listView").data("kendoListView");
            // add item
            listView.add();
        },
        addNewAttributeValue: function(e){
            var data = e.data;

            this.attributeValueDS.insert(0, {
                variant_attribute_id : data.id,
                name                    : "",
                color_code              : "",
                image_url               : ""
            });
        },
        viewAttributeValue  : function(e){
            var data = e.data;

            this.attributeValueDS.filter({ field:"variant_attribute_id", value: data.id });
        }
    });
    banhji.employeeItemLocation =  kendo.observable({
        lang                : langVM,
        dataSource          : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "contacts/item_location",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                create  : {
                    url: apiUrl + "contacts/item_location",
                    type: "POST",
                    headers: banhji.header,
                    dataType: 'json'
                },
                update  : {
                    url: apiUrl + "contacts/item_location",
                    type: "PUT",
                    headers: banhji.header,
                    dataType: 'json'
                },
                destroy : {
                    url: apiUrl + "contacts/item_location",
                    type: "DELETE",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter: { field:"parent_id", operator:"where_related_contact_type", value: 3 },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        warehouseDS         : dataStore(apiUrl + "warehouses"),
        locationDS          : dataStore(apiUrl + "locations"),
        employeeDS          : dataStore(apiUrl + "contacts"),
        editMode            : false,
        obj                 : [],
        warehouse_id        : 0,
        pageLoad            : function(){
        },
        search              : function(){
            var warehouse_id = this.get("warehouse_id"),
                para = [];

            if(warehouse_id){
                para.push({ field: "warehouse_id", value: warehouse_id });
            }

            this.locationDS.filter(para);

            this.set("warehouse_id", 0);
        },
        setObj              : function(){
            this.set("editMode", false);

            this.set("obj", {
                contact     : { abbr:"", number:"", name:"" },
                locations   : []
            });
        },
        edit                : function(e){
            var data = e.data;

            this.set("editMode", true);
            this.set("obj", data);
        },
        save                : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact && obj.locations.length>0){
                this.dataSource.add(obj);

                this.dataSource.sync();
                this.dataSource.bind("requestEnd", function(e){
                    if(e.type=="create" || e.type=="update"){
                        self.setObj();
                        self.dataSource.fetch();
                    }
                });
            }else{
                $("#ntf1").data("kendoNotification").error("Please select employee and locations");
            }
        },
        cancel              : function(){
            this.dataSource.data([]);
            this.dataSource.cancelChanges();

            self.cancel();
        }
    });





    /*************************************************
    *   ACCOUNTING MVVM                              *
    *************************************************/
    banhji.accountingDashboard = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl+"accounting_modules/ratio_analysis"),
        reportCurrency      : banhji.institute.reportCurrency.code,
        income              : 0,
        expense             : 0,
        net_income          : 0,
        asset               : 0,
        liability           : 0,
        equity              : 0,
        quickRatio          : 0,
        currentRatio        : 0,
        cashRatio           : 0,
        wcSale              : 0,
        grossProfitMargin   : 0,
        profitMargin        : 0,
        returnOnAsset       : 0,
        roce                : 0,
        arCollectionPeriod  : 0,
        apPaymentPeriod     : 0,
        inventoryTurnOver   : 0,
        ccc                 : 0,
        txnRecorded         : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(){
            var self = this;

            this.dataSource.query({
                filter: [],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.dataSource.view();

                self.set("income", kendo.toString(view[0].income, banhji.locale=="km-KH"?"c0":"c", banhji.locale));
                self.set("expense", kendo.toString(view[0].expense, banhji.locale=="km-KH"?"c0":"c", banhji.locale));
                self.set("net_income", kendo.toString(view[0].net_income, banhji.locale=="km-KH"?"c0":"c", banhji.locale));

                self.set("asset", kendo.toString(view[0].asset, banhji.locale=="km-KH"?"c0":"c", banhji.locale));
                self.set("liability", kendo.toString(view[0].liability, banhji.locale=="km-KH"?"c0":"c", banhji.locale));
                self.set("equity", kendo.toString(view[0].equity, banhji.locale=="km-KH"?"c0":"c", banhji.locale));

                self.set("quickRatio", kendo.toString(view[0].quickRatio, "n"));
                self.set("currentRatio", kendo.toString(view[0].currentRatio, "n"));
                self.set("cashRatio", kendo.toString(view[0].cashRatio, "n"));

                self.set("wcSale", kendo.toString(view[0].wcSale, "p"));
                self.set("grossProfitMargin", kendo.toString(view[0].grossProfitMargin, "p"));
                self.set("profitMargin", kendo.toString(view[0].profitMargin, "p"));
                self.set("returnOnAsset", kendo.toString(view[0].returnOnAsset, "n"));

                self.set("roce", kendo.toString(view[0].roce, "p"));
                self.set("arCollectionPeriod", kendo.toString(view[0].arCollectionPeriod, "n"));
                self.set("apPaymentPeriod", kendo.toString(view[0].apPaymentPeriod, "n"));
                self.set("inventoryTurnOver", kendo.toString(view[0].inventoryTurnOver, "n"));
                self.set("ccc", kendo.toString(view[0].ccc, "n"));

                self.set("txnRecorded", kendo.toString(view[0].txnRecorded, "n"));
            });
        }
    });
    banhji.accountingCenter = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "accounts"),
        accountTypeDS       : banhji.source.accountTypeDS,
        summaryDS           : dataStore(apiUrl + 'centers/accounting_summary'),
        transactionDS       : dataStore(apiUrl + 'centers/accounting_txn'),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        sortList            : banhji.source.sortList,
        sorter              : "all",
        sdate               : "",
        edate               : "",
        obj                 : null,
        searchText          : "",
        balance             : 0,
        totalTxn            : 0,
        subName             : "",
        typeName            : "",
        nature              : "",
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            this.search();

            if(id){
                this.loadObj(id);
            }
            //Refresh
            if(this.dataSource.total()>0){
                this.dataSource.fetch();
                this.loadSummary();
                this.searchTransaction();
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            if(obj!==null){
                // Check the extension of each file and abort the upload if it is not .jpg
                $.each(files, function(index, value){
                    if (value.extension.toLowerCase() === ".jpg"
                        || value.extension.toLowerCase() === ".jpeg"
                        || value.extension.toLowerCase() === ".tiff"
                        || value.extension.toLowerCase() === ".png"
                        || value.extension.toLowerCase() === ".gif"
                        || value.extension.toLowerCase() === ".pdf"){

                        var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                        self.attachmentDS.add({
                            user_id         : self.get("user_id"),
                            account_id      : obj.id,
                            type            : "Account",
                            name            : value.name,
                            description     : "",
                            key             : key,
                            url             : banhji.s3 + key,
                            size            : value.size,
                            created_at      : new Date(),

                            file            : value.rawFile
                        });
                    }else{
                        alert("This type of file is not allowed to attach.");
                    }
                });
            }
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
                this.attachmentDS.sync();
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        loadObj             : function(id){
            var self = this;

            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var data = e.response.results;

                    $.each(data, function(index, value){
                        if(value.id==id){
                            if(value.sub_of_id>0){
                                self.set("subName", value.name);
                            }else{
                                self.set("subName", "");
                            }

                            self.set("obj", value);
                            self.loadSummary();
                            self.searchTransaction();

                            return false;
                        }
                    });

                    //Sub Account
                    var obj = self.get("obj");
                    if(obj.sub_of_id>0){
                        $.each(data, function(index, value){
                            if(value.id==obj.sub_of_id){
                                self.set("subName", value.name);

                                return false;
                            }
                        });
                    }else{
                        self.set("subName", "");
                    }

                    var type = self.accountTypeDS.get(obj.account_type_id);
                    self.set("typeName", type.name);
                    self.set("nature", type.nature);
                }
            });
        },
        loadSummary         : function(){
            var self = this, obj = this.get("obj");

            this.summaryDS.query({
                filter: [
                    { field:"account_id", value: obj.id }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.summaryDS.view();

                if(view.length>0){
                    self.set("balance", kendo.toString(view[0].balance, view[0].locale=="km-KH"?"c0":"c", view[0].locale));
                    self.set("totalTxn", self.summaryDS.total());
                }else{
                    self.set("balance", 0);
                    self.set("totalTxn", 0);
                }
            });
        },
        selectedRow         : function(e){
            var data = e.data,
            sub = this.dataSource.get(data.sub_of_id),
            type = this.accountTypeDS.get(data.account_type_id);

            if(sub && data.sub_of_id>0){
                this.set("subName", sub.name);
            }else{
                this.set("subName", "");
            }

            this.set("typeName", type.name);
            this.set("nature", type.nature);

            this.set("obj", data);
            this.loadSummary();
            this.searchTransaction();

            this.attachmentDS.query({
                filter:{ field:"account_id", value: data.id },
                page: 1,
                pageSize:10
            });
        },
        enterSearch         : function(e){
            e.preventDefault();

            this.search();
        },
        search              : function(){
            var self = this,
            para = [],
            account_type_id = this.get("account_type_id"),
            txtSearch = this.get("searchText");

            if(txtSearch){
                para.push(
                    { field: "number", operator: "like", value: txtSearch },
                    { field: "name", operator: "or_like", value: txtSearch }
                );
            }

            if(account_type_id){
                para.push({ field:"account_type_id", value:account_type_id });
            }

            para.push({ field:"status", value:1 });

            this.dataSource.query({
                filter:para,
                sort:[
                    { field:"account_type_id", dir:"asc" },
                    { field:"number", dir:"asc" }
                ],
                page:1,
                pageSize:100
            });

            //Clear search filters
            this.set("searchText", "");
            this.set("account_type_id", "");
        },
        searchTransaction   : function(){
            var self = this,
                para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate");

            if(obj.id){
                para.push({ field:"account_id", value: obj.id });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator: "where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <=", operator: "where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                para.push({ field:"issued_date", operator: "where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                end.setDate(end.getDate()+1);
                para.push({ field:"issued_date <=", operator: "where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{}

            this.transactionDS.query({
                filter: para,
                page: 1,
                pageSize: 10
            });
        },
        showActive          : function(){
            this.dataSource.filter({ field:"status", value: 1 });
        },
        showInactive        : function(){
            this.dataSource.filter({ field:"status", value: 0 });
        },
        loadTransaction     : function(){
            var self = this,
                para = [],
                obj = this.get("obj"),
                today = new Date(),
                start = kendo.toString(banhji.source.getFiscalDate(), "yyyy-MM-dd"),
                end = kendo.toString(today, "yyyy-MM-dd");

            if(obj.id){
                para.push({ field:"account_id", value: obj.id });
            }

            para.push({ field:"issued_date >=", operator:"where_related_transaction", value: start });
            para.push({ field:"issued_date <=", operator:"where_related_transaction", value: end });

            this.transactionDS.query({
                filter: para,
                page: 1,
                pageSize: 100
            });
        },
        goEdit              : function(){
            var obj = this.get("obj");
            banhji.router.navigate('/account/'+obj.id);
        },
        checkIsSub          : function(sub_of_id){
            var isSub = false, data = this.dataSource.get(sub_of_id);

            if(data){
                if(data.sub_of_id>0){
                    isSub = true;
                }
            }

            return isSub;
        }
    });
    banhji.account =  kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "accounts"),
        deleteDS                : dataStore(apiUrl + "account_lines"),
        numberDS                : dataStore(apiUrl + "accounts"),
        accountTypeDS           : banhji.source.accountTypeDS,
        currencyDS              : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        subAccountDS            : new kendo.data.DataSource({
            data: banhji.source.accountList
        }),
        statusList              : banhji.source.statusList,
        confirmMessage          : banhji.source.confirmMessage,
        obj                     : null,
        isEdit                  : false,
        isProtected             : false,
        saveClose               : false,
        showConfirm             : false,
        notDuplicateNumber      : true,
        showBank                : false,
        pageLoad                : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"account_type_id", value: obj.account_type_id });

                this.numberDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.numberDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber          : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.sub_of_id>0){
                para.push({ field:"sub_of_id", value: obj.sub_of_id });
                para.push({ field:"id", operator:"or_where", value: obj.sub_of_id });
            }else{
                para.push({ field:"account_type_id", value:obj.account_type_id });
            }

            this.numberDS.query({
                filter: para,
                sort: { field:"number", dir:"desc" },
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.numberDS.view();

                var lastNo = 0;
                if(view.length>0){
                    lastNo = kendo.parseInt(view[0].number);
                }
                lastNo++;
                obj.set("number",kendo.toString(lastNo, "00000"));
            });
        },
        //Obj
        loadObj                 : function(id){
            var self = this;

            this.dataSource.query({
                filter: { field:"id", value: id },
                page:1,
                pageSize:1
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);

                if(view[0].account_type_id==10){
                    self.set("showBank", true);
                }else{
                    self.set("showBank", false);
                }
            });
        },
        typeChanges             : function(){
            var obj = this.get("obj");
            this.set("showBank", false);

            if(obj.account_type_id){
                if(obj.account_type_id==10){
                    this.set("showBank", true);
                }
                this.generateNumber();
            }
        },
        addEmpty                : function(){
            this.dataSource.data([]);

            this.set("isEdit", false);
            this.set("notDuplicateNumber", true);

            this.dataSource.insert(0, {
                account_type_id         : 0,
                sub_of_id               : 0,
                number                  : "",
                name                    : "",
                name_2                  : "",
                description             : "",
                bank_name               : "",
                bank_account_number     : "",
                locale                  : banhji.locale,
                is_taxable              : 0,
                status                  : 1,
                is_system               : 0
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
        },
        objSync                 : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, obj = this.get("obj");

            //Save Obj
            this.objSync()
            .then(function(data){ //Success

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else{
                    //Save New
                    self.addEmpty();
                }

                //Refresh all account
                banhji.source.loadAccounts();
            });
        },
        cancel                  : function(){
            this.dataSource.cancelChanges();
            this.dataSource.data([]);

            banhji.userManagement.removeMultiTask("account");
        },
        delete                  : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            if(obj.is_system!=="1"){
                this.deleteDS.query({
                    filter:[
                        { field:"account_id", value:obj.id },
                    ],
                    page:1,
                    pageSize:1
                }).then(function(){
                    var view = self.deleteDS.view();

                    if(view.length>0){
                        alert("Sorry, you can not delete it.");
                    }else{
                        var data = self.dataSource.get(obj.id);
                        self.dataSource.remove(data);
                        self.dataSource.sync();
                        self.dataSource.bind("requestEnd", function(e){
                            if(e.type==="destroy"){
                                //Refresh all account
                                banhji.source.loadAccounts();
                                window.history.back();
                            }
                        });
                    }
                });
            }
        },
        openConfirm             : function(){
            this.set("showConfirm", true);
        },
        closeConfirm            : function(){
            this.set("showConfirm", false);
        }
    });
    banhji.txnItem =  kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "items"),
        deleteDS                : dataStore(apiUrl + "item_lines"),
        numberDS                : dataStore(apiUrl + "items"),
        currencyDS              : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        accountDS               : banhji.source.accountList,
        statusList              : banhji.source.statusList,
        confirmMessage          : banhji.source.confirmMessage,
        obj                     : null,
        isEdit                  : false,
        isLock                  : false,
        saveClose               : false,
        showConfirm             : false,
        isDuplicateNumber       : false,
        account_id              : 0,
        user_id                 : banhji.source.user_id,
        pageLoad                : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
                this.checkExistingTxn(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Number
        checkExistingName   : function(){
            var self = this, para = [],
            obj = this.get("obj"),
            originalName = this.get("originalName");

            if(obj.name!=="" && obj.name!==originalName){
                this.numberDS.query({
                    filter: [
                        { field:"name", value: obj.name },
                        { field:"category_id", value: obj.category_id }
                    ],
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.numberDS.view();

                    if(view.length>0){
                        self.set("isDuplicateNumber", true);
                    }else{
                        self.set("isDuplicateNumber", false);
                    }
                });
            }else{
                this.set("isDuplicateNumber", false);
            }
        },
        //Obj
        loadObj                 : function(id){
            var self = this;

            this.dataSource.query({
                filter: { field:"id", value: id },
                page:1,
                pageSize:1
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);

                self.set("account_id", view[0].income_account_id);
                if(view[0].expense_account_id>0){
                    self.set("account_id", view[0].expense_account_id);
                }
                self.set("originalName", view[0].name);
            });
        },
        checkExistingTxn        : function(id){
            var self = this;

            this.deleteDS.query({
                filter: { field: "item_id", value: id },
                page: 1,
                pageSize: 1
            }).then(function() {
                var view = self.deleteDS.view();

                if(view.length>0){
                    self.set("isLock", true);
                }else{
                    self.set("isLock", false);
                }
            });
        },
        addEmpty                : function(){
            this.dataSource.data([]);

            this.set("isLock", false);
            this.set("isEdit", false);
            this.set("obj", null);

            this.dataSource.insert(0, {
                inventory_account_id    : 0,
                item_type_id            : 5,//Transaction type
                category_id             : 4,
                name                    : "",
                purchase_description    : "",
                sale_description        : "",
                locale                  : banhji.locale,
                image_url               : banhji.no_image,
                status                  : 1
            });

            var obj = this.dataSource.at(0);

            this.set("obj", obj);
        },
        objSync                 : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, obj = this.get("obj");

            //Save Obj
            this.objSync()
            .then(function(data){ //Success

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel                  : function(){
            this.dataSource.cancelChanges();
            this.dataSource.data([]);

            banhji.userManagement.removeMultiTask("txn_item");
        },
        delete                  : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            if(!obj.is_system==1){
                this.deleteDS.query({
                    filter: { field: "item_id", value: obj.id },
                    page: 1,
                    pageSize: 1
                }).then(function() {
                    var view = self.deleteDS.view();

                    if(view.length>0){
                        alert("Sorry, you can not delete it because it is using now.");
                    }else{
                        obj.set("deleted", 1);
                        self.dataSource.sync();

                        window.history.back();
                    }
                });
            }else{
                alert("Sorry, you can not delete it because it is system's item.");
            }
        },
        openConfirm             : function(){
            this.set("showConfirm", true);
        },
        closeConfirm            : function(){
            this.set("showConfirm", false);
        }
    });
    banhji.txnItemList = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "items"),
        pageLoad            : function(){
            this.dataSource.filter({ field:"item_type_id", value:5 });
        }
    });
    banhji.fixedAssets =  kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "items"),
        patternDS               : dataStore(apiUrl + "items"),
        deleteDS                : dataStore(apiUrl + "item_lines"),
        measurementDS           : dataStore(apiUrl + "measurements"),
        numberDS                : dataStore(apiUrl + "items"),
        existingDS              : dataStore(apiUrl + "items"),
        itemPriceDS             : dataStore(apiUrl + "item_prices"),
        categoryDS              : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter: { field:"item_type_id", value: 3 }//Fixed Asset
        }),
        fixedAssetAccountDS     : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 16 },
            sort: { field:"number", dir:"asc" }
        }),
        accumulatedAccountDS    : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 18 },
            sort: { field:"number", dir:"asc" }
        }),
        deposalAccountDS        : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 38 },
            sort: { field:"number", dir:"asc" }
        }),
        statusList              : banhji.source.statusList,
        confirmMessage          : banhji.source.confirmMessage,
        obj                     : null,
        isEdit                  : false,
        saveClose               : false,
        showConfirm             : false,
        notDuplicateNumber      : true,
        pageLoad                : function(id, category_id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id, category_id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Pattern
        loadPattern             : function(){
            var self = this, obj = self.get("obj"),
            cat = this.categoryDS.get(obj.category_id);

            this.patternDS.query({
                filter: [
                    { field:"category_id", value: obj.category_id },
                    { field:"is_pattern", value: 1 }
                ],
                page: 1,
                pageSize: 1
            }).then(function(data){
                var view = self.patternDS.view();

                if(view.length>0){
                    obj.set("category_id", view[0].category_id),
                    obj.set("measurement_id", view[0].measurement_id),
                    obj.set("abbr", cat.abbr),
                    obj.set("name", ""),
                    obj.set("purchase_description", view[0].purchase_description),
                    obj.set("sale_description", view[0].sale_description),
                    obj.set("locale", view[0].locale),
                    obj.set("inventory_account_id", view[0].inventory_account_id),
                    obj.set("income_account_id", view[0].income_account_id),
                    obj.set("expense_account_id", view[0].expense_account_id)
                    obj.set("favorite", view[0].favorite)
                }else{
                    obj.set("category_id", 0),
                    obj.set("measurement_id", 0),
                    obj.set("abbr", ""),
                    obj.set("number", ""),
                    obj.set("name", ""),
                    obj.set("purchase_description", ""),
                    obj.set("sale_description", ""),
                    obj.set("locale", ""),
                    obj.set("inventory_account_id", 0),
                    obj.set("income_account_id", 0),
                    obj.set("expense_account_id", 0)
                }
            });
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(this.get("isEdit")){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"abbr", value: obj.abbr });
                para.push({ field:"number", value: obj.number });
                para.push({ field:"category_id", value: obj.category_id });

                this.existingDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.existingDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber          : function(){
            var self = this, obj = this.get("obj");

            this.numberDS.query({
                filter:[
                    { field:"category_id", value:obj.category_id }
                ],
                sort: { field:"number", dir:"desc" },
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.numberDS.view();

                var lastNo = 0;
                if(view.length>0){
                    lastNo = kendo.parseInt(view[0].number);
                }
                lastNo++;
                obj.set("number",kendo.toString(lastNo, "00000"));
            });
        },
        categoryChanges         : function(){
            var obj = this.get("obj");

            if(obj.category_id && obj.isNew()){
                this.loadPattern();
                this.generateNumber();
            }
        },
        //Obj
        loadObj                 : function(id, category_id){
            var self = this, para = [];

            if(id>0){
                para.push({ field:"id", value: id });
            }

            if(category_id){
                para.push({ field:"category_id", value: category_id });
                para.push({ field:"is_pattern", value: 1 });
            }

            this.dataSource.query({
                filter: para,
            }).then(function(e){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
            });
        },
        addEmpty                : function(){
            var self = this;
            this.dataSource.data([]);

            this.set("isEdit", false);
            this.set("obj", null);

            this.patternDS.query({
                filter:[
                    { field:"category_id", value:7 },
                    { field:"is_pattern", value:1 }
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.patternDS.view(),
                cat = self.categoryDS.at(0);

                self.dataSource.insert(0, {
                    item_type_id            : 3,//Fixed Assets
                    category_id             : view[0].category_id,
                    measurement_id          : view[0].measurement_id,
                    abbr                    : cat.abbr,
                    number                  : "",
                    name                    : "",
                    purchase_description    : view[0].purchase_description,
                    sale_description        : view[0].sale_description,
                    locale                  : view[0].locale,
                    inventory_account_id    : view[0].inventory_account_id,
                    income_account_id       : view[0].income_account_id,
                    expense_account_id      : view[0].expense_account_id,
                    image_url               : banhji.no_image,
                    is_pattern              : 0,
                    status                  : 1,
                    deleted                 : 0
                });

                var obj = self.dataSource.at(0);
                //Pattern
                // if(self.get("contact_type_id")>0){
                //  obj.set("contact_type_id", self.get("contact_type_id"));
                //  obj.set("abbr", "");
                //  obj.set("is_pattern", 1);
                // }

                self.set("obj", obj);
                self.generateNumber();
            });
        },
        objSync                 : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, obj = this.get("obj");

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){

                }

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel                  : function(){
            this.dataSource.cancelChanges();

            this.dataSource.data([]);

            banhji.userManagement.removeMultiTask("fixed_assets");
        },
        delete                  : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            if(!obj.is_system==1){
                this.deleteDS.query({
                    filter: { field: "item_id", value: obj.id },
                    page: 1,
                    pageSize: 1
                }).then(function() {
                    var view = self.deleteDS.view();

                    if(view.length>0){
                        alert("Sorry, you can not delete it because it is using now.");
                    }else{
                        obj.set("deleted", 1);
                        self.dataSource.sync();

                        window.history.back();
                    }
                });
            }
        },
        openConfirm             : function(){
            this.set("showConfirm", true);
        },
        closeConfirm            : function(){
            this.set("showConfirm", false);
        }
    });
    banhji.fixedAssetItemList =  kendo.observable({
        lang                : langVM,
        itemDS              : dataStore(apiUrl + "items"),
        patternDS           : dataStore(apiUrl + "items"),
        categoryDS          : dataStore(apiUrl + "categories"),
        deleteDS            : dataStore(apiUrl + "item_lines"),
        obj                 : { abbr:"", name:"" },
        objName             : "",
        pageLoad            : function() {
            this.categoryDS.filter({ field:"item_type_id", value: 3 });
        },
        addObj              : function(){
            var self = this, obj = this.get("obj");

            if(obj.abbr!=="" && obj.name!==""){
                this.categoryDS.insert(0, {
                    item_type_id    : 3,
                    abbr            : obj.abbr,
                    name            : obj.name,
                    is_system       : 0
                });

                this.categoryDS.sync();
                var saved = false;
                this.categoryDS.bind("requestEnd", function(e){
                    if(e.type==="create" && saved==false){
                        saved = true;

                        var response = e.response.results[0];
                        self.addPattern(response.id);
                        banhji.source.loadCategories();
                    }
                });

                //Clear
                obj.set("abbr", "");
                obj.set("name", "");
            }else{
                alert("Abbr and Name are required.");
            }
        },
        delete              : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var self = this, data = e.data;

                this.deleteDS.query({
                    filter: { field:"item_id", value:data.id},
                    page:1,
                    pageSize:1
                }).then(function(){
                    var view = self.deleteDS.view();

                    if(view.length>0){
                        alert("Sorry, this item can not be deleted.");
                    }else{
                        self.categoryDS.remove(data);
                        self.categoryDS.sync();
                        var saved = false;
                        self.categoryDS.bind("requestEnd", function(e){
                            if(e.type==="destroy" && saved==false){
                                saved = true;
                                banhji.source.loadCategories();
                            }
                        });

                        self.deletePattern(data.id);
                    }
                });
            }
        },
        view                : function(e){
            var data = e.data;
            this.set("objName", data.name);
            this.itemDS.filter({ field: "category_id", value: data.id});
        },
        addPattern          : function(category_id){
            this.patternDS.insert(0, {
                item_type_id            : 3,
                category_id             : category_id,
                number                  : "",
                is_pattern              : 1,
                status                  : 1
            });

            this.patternDS.sync();
        },
        goPattern           : function(e){
            var data = e.data;
            banhji.router.navigate('/fixed_assets/0/'+data.id);
        },
        deletePattern       : function(id){
            var self = this;

            this.patternDS.query({
                filter:[
                    { field:"category_id", value:id },
                    { field:"is_pattern", value:1 }
                ]
            }).then(function(){
                var data = self.patternDS.at(0);

                if(data){
                    self.patternDS.remove(data);
                    self.patternDS.sync();
                }
            });
        }
    });
    // ACCOUNTING FUNCTIONS
    banhji.journal =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        lineDS              : dataStore(apiUrl + "journal_lines"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "journal_lines"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        contactDS           : dataStore(apiUrl + "contacts"),
        segmentDS           : dataStore(apiUrl + "segments"),
        segmentItemDS       : dataStore(apiUrl + "segments/item"),
        currencyDS          : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{
                logic: "or",
                filters: [
                    { field: "type", value: "Journal" }
                ]
            }
        }),
        types               : [
            {id: 'Journal', name: 'General Journal'},
            {id: 'Adjustment', name: 'Adjustment'},
            {id: 'Opening_Balance', name: 'Opening Balance'},
            {id: 'Closing_Entry', name: 'Closing Entry'},
            {id: 'Reclassification', name: 'Reclassification'},
            {id: 'Accrual', name: 'Accrual'},
            {id: 'Depreciation_amortization', name: 'Depreciation/Amortization'},
            {id: 'Others', name: 'Others'}
        ],
        jobDS               : banhji.source.jobList,
        accountDS           : banhji.source.accountList,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthOptionList     : banhji.source.monthOptionList,
        monthList           : banhji.source.monthList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        segObj              : [],
        isEdit              : false,
        saveDraft           : false,
        saveClose           : false,
        saveDraftPrint      : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        showRef             : true,
        showName            : false,
        showJob             : false,
        showSegment         : false,
        notDuplicateNumber  : true,
        recurring           : "",
        recurring_validate  : false,
        dr                  : 0,
        cr                  : 0,
        segment_id          : "",
        segmentitem_id      : "",
        segmentWindowVisible: false,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            $.each(this.lineDS.data(), function(index, value){
                value.set("rate", rate);
                value.set("locale", obj.locale);
            });
        },
        //Segments
        addSegmentItem      : function(){
            var obj = this.get("segObj"),
                notExisting = true,
                segment_id = this.get("segment_id"),
                segmentitem_id = this.get("segmentitem_id");

            if(segment_id && segmentitem_id){
                $.each(obj.segments, function(index, value){
                    if(value.segment_id==segment_id){
                        notExisting = false;

                        return false;
                    }
                });

                if(notExisting){
                    var segments = this.segmentDS.get(segment_id),
                        segmentitems = this.segmentItemDS.get(segmentitem_id);

                    obj.segments.push({
                        id : segmentitems.id,
                        segment_id: segment_id,
                        code: segmentitems.code,
                        name: segmentitems.name,
                        segment: { id : segment_id, name : segments.name}
                    });
                }else{
                    $("#ntf1").data("kendoNotification").warning("This segment is already selected!");
                }
            }

            this.set("segment_id", ""),
            this.set("segmentitem_id", "");
        },
        openWindow          : function(e){
            var data = e.data;

            this.set("segObj", data);

            this.set("segmentWindowVisible", true);
        },
        closeWindow             : function(){
            this.set("segmentWindowVisible", false);
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id <>", value: obj.id });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    self.set("dr", kendo.toString(view[0].amount, "c", view[0].locale));
                    self.set("cr", kendo.toString(view[0].amount, "c", view[0].locale));
                });

                self.lineDS.query({
                    filter:{ field: "transaction_id", value: id }
                });
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("dr", 0);
            this.set("cr", 0);

            this.dataSource.insert(0, {
                recurring_id        : "",
                transaction_template_id : 13,
                user_id             : this.get("user_id"),
                type                : "Journal", //required
                journal_type        : "Journal",
                number              : "",
                amount              : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                memo                : "",
                memo2               : "",
                status              : 0,
                progress            : "",
                is_journal          : 1,
                //Recuring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);

            this.setRate();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                account_id          : "",
                contact_id          : "",
                description         : "",
                reference_no        : "",
                job_id              : "",
                segments            : [],
                dr                  : "",
                cr                  : "",
                rate                : obj.rate,
                locale              : obj.locale,
                reference_no        : "",

                account             : { id:0, name:"" },
                contact             : { id:0, name:"" },
                job                 : { id:0, name:"" },
                segments            : []
            });
        },
        removeRow               : function(e){
            var data = e.data;
            if(this.lineDS.total()>2){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var row, i;
            for(i=raw.length-1; i>=0; i--){
                row = raw[i];

                if (row.account) {
                    if (row.account.id==0) {
                        this.lineDS.remove(row);
                    }
                }
            }
        },
        checkDr             : function(uid){
            var data = this.lineDS.getByUid(uid);

            if(data.dr>0 && data.cr>0){
                data.set("cr", "");
            }

            this.changes();
        },
        checkCr             : function(uid){
            var data = this.lineDS.getByUid(uid);

            if(data.dr>0 && data.cr>0){
                data.set("dr", "");
            }

            this.changes();
        },
        lineDSChanges       : function(arg){
            var self = banhji.journal;

            if(arg.field){
                var dataRow = arg.items[0];

                if(arg.field=="account"){
                    self.accountChanges(dataRow.uid);
                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="dr"){
                    self.checkDr(dataRow.uid);
                }else if(arg.field=="cr"){
                    self.checkCr(dataRow.uid);
                }
            }
        },
        accountChanges      : function(uid){
            var data = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(data),
                beforeLine = this.lineDS.at(index-1);

            if(beforeLine){
                data.set("description", beforeLine.description);

                if(index==1){
                    if(beforeLine.dr>0){
                        data.set("dr", "");
                        data.set("cr", beforeLine.dr);
                    }else{
                        data.set("dr", beforeLine.cr);
                        data.set("cr", "");
                    }

                    this.changes();
                }
            }
        },
        changes             : function(){
            var obj = this.get("obj"), dr = 0, cr = 0;

            $.each(this.lineDS.data(), function(index, value) {
                value.set("rate", obj.rate);

                dr += kendo.parseFloat(value.dr);
                cr += kendo.parseFloat(value.cr);
            });

            obj.set("amount", dr);

            this.set("dr", kendo.toString(dr, "c", obj.locale));
            this.set("cr", kendo.toString(cr, "c", obj.locale));
        },
        validating          : function(){
            var result = true,
                obj = this.get("obj"),
                selectedAccount = 0,
                dr = 0, cr = 0;

            $.each(this.lineDS.data(), function(index, value) {
                if(kendo.parseFloat(value.dr)>0 || kendo.parseFloat(value.cr)>0){
                    if(value.account){
                        if(value.account.id>0){
                            selectedAccount++;
                        }
                    }
                }

                dr += kendo.parseFloat(value.dr);
                cr += kendo.parseFloat(value.cr);
            });

            dr = kendo.toString(dr, 'n');
            cr = kendo.toString(cr, 'n');

            if(selectedAccount<2){
                result = false;

                $("#ntf1").data("kendoNotification").warning("Please select account and enter amount!");
            }

            if(dr!=cr){
                result = false;

                $("#ntf1").data("kendoNotification").warning("Dr not equal Cr");
            }

            return result;
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");
            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

            this.removeEmptyRow();

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Save Draft
            if(this.get("saveDraft") || this.get("saveDraftPrint")){
                obj.set("status", 4); //In progress
                obj.set("progress", "Draft");
                obj.set("is_journal", 0);//No Journal
            }

            //Mode
            if(obj.isNew()==false){
                //Use draft
                if(obj.status==4){
                    obj.set("status", 0);//Open
                    obj.set("progress", "");
                    obj.set("is_journal", 1);//Add Journal
                }
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                self.lineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else if(self.get("savePrint") || self.get("saveDraftPrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.set("saveDraftPrint", false);

                    self.cancel();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel              : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("journal");
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id },
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);

                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("journal_type", view[0].journal_type);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
            });

            this.recurringLineDS.query({
                filter: { field:"transaction_id", value:id },
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        account_id          : value.account_id,
                        contact_id          : value.contact_id,
                        job_id              : value.job_id,
                        description         : value.description,
                        reference_no        : value.reference_no,
                        dr                  : value.dr,
                        cr                  : value.cr,
                        rate                : value.rate,
                        locale              : value.locale,

                        account             : value.account,
                        contact             : value.contact,
                        job                 : value.job,
                        segments            : value.segments
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.cashTransaction =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        lineDS              : dataStore(apiUrl + "account_lines"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "account_lines"),
        contactDS           : dataStore(apiUrl + "contacts"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        paymentMethodDS     : banhji.source.paymentMethodDS,
        currencyDS          : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        accountDS           : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 10 },
            sort: { field:"number", dir:"asc" }
        }),
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{
                logic: "or",
                filters: [
                    { field: "type", value: "Deposit" },
                    { field: "type", value: "Withdraw" },
                    { field: "type", value: "Transfer" }
                ]
            }
        }),
        types               : [
            {id: 'Deposit', name: 'Deposit'},
            {id: 'Withdraw', name: 'Withdraw'},
            {id: 'Transfer', name: 'Transfer'}
        ],
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthOptionList     : banhji.source.monthOptionList,
        monthList           : banhji.source.monthList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        fileMan             : banhji.fileManagement,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        isEdit              : false,
        saveDraft           : false,
        saveClose           : false,
        saveDraftPrint      : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        notDuplicateNumber  : true,
        showRef             : true,
        showName            : false,
        showSegment         : false,
        recurring           : "",
        recurring_validate  : false,
        total               : 0,
        original_total      : 0,
        fromToTop           : "TO",
        fromToBottom        : "FROM",
        uer_id              : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        onRemove            : function(e){
            // Array with information about the uploaded files
            var self = this, files = e.files;
            $.each(this.attachmentDS.data(), function(index, value){
                if(value.name==files[0].name){
                    self.attachmentDS.remove(value);

                    return false;
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm("Are you sure, you want to delete it?")) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            var self = this;

            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                if(e.type=="destroy"){
                    if(saved==false){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var paramz = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(paramz, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });

            //Clear upload files
            $(".k-upload-files").remove();
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            $.each(this.lineDS.data(), function(index, value){
                value.set("rate", rate);
                value.set("locale", obj.locale);
            });
        },
        //Segment
        transactionSegmentChanges   : function() {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        segmentChanges      : function(e) {
            var dataArr = e.data.segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.dataSource.view();

                    if(view.length>0){
                        self.set("obj", view[0]);
                        self.set("total", kendo.toString(view[0].amount, "c2", view[0].locale));

                        self.lineDS.filter({ field: "transaction_id", value: id });
                        self.journalLineDS.filter({ field: "transaction_id", value: id });
                        self.attachmentDS.filter({ field: "transaction_id", value: id });
                    }
                });
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.journalLineDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);

            this.dataSource.insert(0, {
                transaction_template_id : 0,
                recurring_id        : "",
                account_id          : "",
                user_id             : this.get("user_id"),
                type                : "Deposit", //required
                number              : "",
                amount              : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                memo                : "",
                memo2               : "",
                status              : 0,
                progress            : "",
                segments            : [],
                is_journal          : 1,
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);

            this.setRate();
            this.addRow();
            this.typeChanges();
            this.generateNumber();
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                payment_method_id   : 0,
                account_id          : "",
                contact_id          : "",
                description         : "",
                reference_no        : "",
                segments            : [],
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                reference_no        : ""
            });
        },
        remove              : function(e){
            var data = e.data;

            if(this.lineDS.total()>1){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        changes             : function(){
            var obj = this.get("obj"),
            sum = 0;

            $.each(this.lineDS.data(), function(index, value) {
                value.set("rate", obj.rate);

                sum += value.amount;
            });

            this.set("total", kendo.toString(sum, "c2", obj.locale));
            obj.set("amount", sum);
        },
        typeChanges         : function(){
            var obj = this.get("obj");

            this.txnTemplateDS.filter({ field:"type", value:obj.type });

            switch(obj.type) {
                case "Withdraw":
                    this.set("fromToTop", "FROM");
                    this.set("fromToBottom", "TO");
                    break;
                default:
                    this.set("fromToTop", "TO");
                    this.set("fromToBottom", "FROM");
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");
            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Save Draft
            if(this.get("saveDraft")  || this.get("saveDraftPrint")){
                obj.set("status", 4); //In progress
                obj.set("progress", "Draft");
                obj.set("is_journal", 0);//No Journal
            }

            //Mode
            if(obj.isNew()==false){
                //Use draft
                if(obj.status==4){
                    obj.set("status", 0);//Open
                    obj.set("progress", "");
                    obj.set("is_journal", 1);//Add Journal
                }
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                //Journal
                if(data[0].is_recurring==0 && data[0].is_journal==1){
                    self.addJournal(data[0].id);
                }

                self.lineDS.sync();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else if(self.get("savePrint") || self.get("saveDraftPrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.set("saveDraftPrint", false);

                    self.cancel();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear               : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("cash_transaction");
        },
        cancel              : function(){
            this.clear();
            history.back();
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id }
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);
                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        //Journal
        addJournal          : function(transaction_id){
            var self = this,
                obj = this.get("obj"),
                raw = "", entries = {},
                dr = 0, cr = 0;

            //Edit Mode
            if(obj.isNew()==false){
                //Delete previous journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });
            }

            //Add Journal
            var objAccountID = kendo.parseInt(obj.account_id);
            if(objAccountID>0){
                if(obj.type=="Deposit"){
                    raw = "dr"+objAccountID;
                    dr = obj.amount;
                }else{
                    raw = "cr"+objAccountID;
                    cr = obj.amount;
                }

                if(entries[raw]===undefined){
                    entries[raw] = {
                        transaction_id      : transaction_id,
                        account_id          : objAccountID,
                        contact_id          : obj.contact_id,
                        description         : obj.memo,
                        reference_no        : obj.reference_no,
                        segments            : obj.segments,
                        dr                  : dr,
                        cr                  : cr,
                        rate                : obj.rate,
                        locale              : obj.locale
                    };
                }else{
                    entries[raw].dr += dr;
                    entries[raw].cr += cr;
                }
            }

            $.each(this.lineDS.data(), function(index, value){
                dr = 0; cr = 0;
                if(obj.type=="Deposit"){
                    raw = "cr"+value.account_id;
                    cr = value.amount;
                }else{
                    raw = "dr"+value.account_id;
                    dr = value.amount;
                }

                if(entries[raw]===undefined){
                    entries[raw] = {
                        transaction_id      : transaction_id,
                        account_id          : value.account_id,
                        contact_id          : value.contact_id,
                        description         : value.description,
                        reference_no        : value.reference_no,
                        segments            : value.segments,
                        dr                  : dr,
                        cr                  : cr,
                        rate                : obj.rate,
                        locale              : obj.locale
                    };
                }else{
                    entries[raw].dr += dr;
                    entries[raw].cr += cr;
                }
            });

            //Add to journal entry
            if(!jQuery.isEmptyObject(entries)){
                $.each(entries, function(index, value){
                    self.journalLineDS.add(value);
                });
            }

            this.journalLineDS.sync();
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("recurring_id", id);
                obj.set("type", view[0].type);
                obj.set("locale", view[0].locale);
                obj.set("account_id", view[0].account_id);
                obj.set("segments", view[0].segments);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
            });

            this.recurringLineDS.query({
                filter: { field:"transaction_id", value:id },
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        payment_method_id   : value.payment_method_id,
                        account_id          : value.account_id,
                        contact_id          : value.contact_id,
                        description         : value.description,
                        reference_no        : value.reference_no,
                        segments            : value.segments,
                        amount              : value.amount,
                        rate                : value.rate,
                        locale              : value.locale
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.cashAdvance =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        lineDS              : dataStore(apiUrl + "account_lines"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "account_lines"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        currencyDS          : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        contactDS           : banhji.source.employeeDS,
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        paymentMethodDS     : banhji.source.paymentMethodDS,
        accountDS           : banhji.source.accountList,
        cashAccountDS       : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field:"account_type_id", value: 10 },//Cash Account
                    { field:"account_type_id", value: 34 }//Retained Earning
                ]
            },
            sort:[
                { field:"account_type_id", dir:"asc" },
                { field:"number", dir:"asc" }
            ]
        }),
        advAccountDS        : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 11 },
            sort: { field:"number", dir:"asc" }
        }),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter: [
                { field: "type", value:"Cash_Advance" },
                { field: "moduls", value: "account_mg"}
            ]
        }),
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthOptionList     : banhji.source.monthOptionList,
        monthList           : banhji.source.monthList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        isEdit              : false,
        saveDraft           : false,
        saveClose           : false,
        saveDraftPrint      : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        statusSrc           : "",
        recurring           : "",
        recurring_validate  : false,
        showRef             : true,
        showName            : false,
        showSegment         : false,
        total               : 0,
        original_total      : 0,
        notDuplicateNumber  : true,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Contact
        contactChanges      : function(){
            var obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
            }
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            $.each(this.lineDS.data(), function(index, value){
                value.set("rate", rate);
                value.set("locale", obj.locale);
            });
        },
        //Segment
        segmentChanges      : function(e) {
            var dataArr = e.data.segments;
            var lastIndex = dataArr.length - 1;
            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current = this.segmentItemDS.get(dataArr[i]);
                    var last = this.segmentItemDS.get(dataArr[lastIndex]);
                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        transactionSegmentChanges   : function() {
            dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1;
            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current = this.segmentItemDS.get(dataArr[i]);
                    var last = this.segmentItemDS.get(dataArr[lastIndex]);
                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);

                    self.set("total", kendo.toString(view[0].amount, "c2", view[0].locale));

                    self.lineDS.filter({ field: "transaction_id", value: id });
                    self.journalLineDS.filter({ field: "transaction_id", value: id });
                    self.attachmentDS.filter({ field: "transaction_id", value: id });
                });
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.journalLineDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);

            this.dataSource.insert(0, {
                recurring_id        : "",
                account_id          : 1,
                payment_method_id   : 1,
                contact_id          : "",
                employee_id         : "",
                user_id             : this.get("user_id"),
                type                : "Cash_Advance", //required
                number              : "",
                amount              : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                due_date            : new Date(),
                memo                : "",
                memo2               : "",
                status              : 0,
                progress            : "",
                segments            : [],
                is_journal          : 1,
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);

            this.generateNumber();
            this.setRate();
            this.addRow();
        },
        addRow              : function(){
            var obj = this.get("obj");
            this.lineDS.add({
                transaction_id      : obj.id,
                account_id          : "",
                description         : "",
                reference_no        : "",
                segments            : [],
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                reference_no        : ""
            });
        },
        remove              : function(e){
            var data = e.data;

            if(this.lineDS.total()>1){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        changes             : function(){
            var obj = this.get("obj");

            if(this.lineDS.total()>0){
                var sum = 0;

                $.each(this.lineDS.data(), function(index, value) {
                    value.set("rate", obj.rate);

                    sum += value.amount;
                });

                this.set("total", kendo.toString(sum, "c0", obj.locale));
                obj.set("amount", sum);
            }else{
                this.set("total", 0);
                obj.set("amount", 0);
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");
            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Save Draft
            if(this.get("saveDraft") || this.get("saveDraftPrint")){
                obj.set("status", 4); //In progress
                obj.set("progress", "Draft");
                obj.set("is_journal", 0);//No Journal
            }

            //Mode
            if(obj.isNew()==false){
                //Use draft
                if(obj.status==4){
                    obj.set("status", 0);//Open
                    obj.set("progress", "");
                    obj.set("is_journal", 1);//Add Journal
                }
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                //Journal
                if(data[0].is_recurring==0 && data[0].is_journal==1){
                    self.addJournal(data[0].id);
                }

                self.lineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else if(self.get("savePrint") || self.get("saveDraftPrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.set("saveDraftPrint", false);

                    self.cancel();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel              : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("expense");
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id },
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);

                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        //Journal
        addJournal          : function(transaction_id){
            var self = this, obj = this.get("obj");

            //Edit Mode
            if(obj.isNew()==false){
                //Delete previous journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });
            }

            $.each(self.lineDS.data(), function(index, value){
                //Add Cash Advance Account on Dr
                self.journalLineDS.add({
                    transaction_id      : transaction_id,
                    account_id          : value.account_id,
                    description         : value.description,
                    reference_no        : value.reference_no,
                    segments            : value.segments,
                    dr                  : value.amount,
                    cr                  : 0,
                    rate                : value.rate,
                    locale              : value.locale
                });
            });

            //Add Cash Account on Cr
            this.journalLineDS.add({
                transaction_id      : transaction_id,
                account_id          : obj.account_id,
                description         : obj.memo,
                reference_no        : "",
                segments            : obj.segments,
                dr                  : 0,
                cr                  : obj.amount,
                rate                : obj.rate,
                locale              : obj.locale
            });

            this.journalLineDS.sync();
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("recurring_id", id);
                obj.set("contact_id", view[0].contact_id);
                obj.set("locale", view[0].locale);
                obj.set("payment_method_id", view[0].payment_method_id);
                obj.set("account_id", view[0].account_id);
                obj.set("segments", view[0].segments);
                obj.set("memo", view[0].memo);
                obj.set("contact", view[0].contact);
            });

            this.recurringLineDS.query({
                filter: { field:"transaction_id", value:id },
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        account_id          : value.account_id,
                        description         : value.description,
                        reference_no        : value.reference_no,
                        segments            : value.segments,
                        amount              : value.amount,
                        rate                : value.rate,
                        locale              : value.locale
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.expense =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        lineDS              : dataStore(apiUrl + "account_lines"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        referenceDS         : dataStore(apiUrl + "transactions"),
        referenceLineDS     : dataStore(apiUrl + "account_lines"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "account_lines"),
        invoiceDS           : dataStore(apiUrl + "account_lines"),
        segmentDS           : dataStore(apiUrl + "segments"),
        segmentItemDS       : dataStore(apiUrl + "segments/item"),
        currencyDS          : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        contactDS           : banhji.source.employeeDS,
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        taxItemDS           : new kendo.data.DataSource({
            data: banhji.source.taxList,
            sort: [
                { field: "tax_type_id", dir: "asc" },
                { field: "name", dir: "asc" }
            ]
        }),
        supplierDS          : banhji.source.supplierDS,
        accountDS           : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter: {
                logic: "or",
                filters: [
                    { field: "account_type_id", value: 11 },//Cash Advance
                    { field: "account_type_id", value: 16 },//Fixed Asset
                    { field: "account_type_id", value: 17 },
                    { field: "account_type_id", value: 18 },
                    { field: "account_type_id", value: 19 },
                    { field: "account_type_id", value: 20 },
                    { field: "account_type_id", value: 21 },
                    { field: "account_type_id", value: 22 },
                    { field: "account_type_id", value: 36 },//Expense
                    { field: "account_type_id", value: 37 },
                    { field: "account_type_id", value: 38 },
                    { field: "account_type_id", value: 40 },
                    { field: "account_type_id", value: 41 },
                    { field: "account_type_id", value: 42 },
                    { field: "account_type_id", value: 43 },
                    { field: "account_type_id", value: 39 }//Other Revenue
                ]
            },
            sort: { field:"number", dir:"asc" }
        }),
        cashAccountDS       : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 10 },
            sort: { field:"number", dir:"asc" }
        }),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{
                logic: "or",
                filters: [
                    { field: "type", value: "Direct_Expense" },
                    { field: "type", value: "Reimbursement" },
                    { field: "type", value: "Advance_Settlement" },
                    { field: "type", value: "Cash_Payment"},
                    { field: "status", value: 2  }
                ]
            }
        }),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthOptionList     : banhji.source.monthOptionList,
        monthList           : banhji.source.monthList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        isEdit              : false,
        saveDraft           : false,
        saveClose           : false,
        saveDraftPrint      : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        statusSrc           : "",
        recurring           : "",
        recurring_validate  : false,
        isExistingInvoice   : false,
        showJob             : false,
        showSegment         : false,
        showCashAdvance     : false,
        notDuplicateNumber  : true,
        sub_total           : 0,
        tax                 : 0,
        total               : 0,
        credit              : 0,
        remain              : 0,
        segment_id          : "",
        segmentitem_id      : "",
        segmentWindowVisible: false,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            $.each(this.lineDS.data(), function(index, value){
                value.set("rate", rate);
                value.set("locale", obj.locale);
            });
        },
        //Segments
        addSegmentItem      : function(){
            var obj = this.get("segObj"),
                notExisting = true,
                segment_id = this.get("segment_id"),
                segmentitem_id = this.get("segmentitem_id");

            if(segment_id && segmentitem_id){
                $.each(obj.segments, function(index, value){
                    if(value.segment_id==segment_id){
                        notExisting = false;

                        return false;
                    }
                });

                if(notExisting){
                    var segments = this.segmentDS.get(segment_id),
                        segmentitems = this.segmentItemDS.get(segmentitem_id);

                    obj.segments.push({
                        id : segmentitems.id,
                        segment_id: segment_id,
                        code: segmentitems.code,
                        name: segmentitems.name,
                        segment: { id : segment_id, name : segments.name}
                    });
                }else{
                    $("#ntf1").data("kendoNotification").warning("This segment is already selected!");
                }
            }

            this.set("segment_id", ""),
            this.set("segmentitem_id", "");
        },
        openWindow          : function(e){
            var data = e.data;

            this.set("segObj", data);

            this.set("segmentWindowVisible", true);
        },
        closeWindow             : function(){
            this.set("segmentWindowVisible", false);
        },
        //Contact
        setContact          : function(contact){
            var obj = this.get("obj");

            obj.set("employee", contact);
            this.employeeChanges();
        },
        contactChanges      : function(){
            var obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);

                this.setRate();
                this.loadReference();
            }
        },
        typeChanges         : function(){
            var obj = this.get("obj");

            switch(obj.type) {
                case "Advance_Settlement":
                    this.set("showCashAdvance", true);
                    break;
                default:
                    this.set("showCashAdvance", false);
                    obj.set("reference_id", 0);
                    obj.set("deposit", 0);
                    obj.set("received", 0);
            }

            this.generateNumber();
        },
        //Segment
        segmentChanges      : function(e) {
            var dataArr = e.data.segments;
            var lastIndex = dataArr.length - 1;
            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current = this.segmentItemDS.get(dataArr[i]);
                    var last = this.segmentItemDS.get(dataArr[lastIndex]);
                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        transactionSegmentChanges   : function() {
            dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1;
            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current = this.segmentItemDS.get(dataArr[i]);
                    var last = this.segmentItemDS.get(dataArr[lastIndex]);
                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        //Obj
        checkExistingInvoice: function(){
            var self = this, obj = this.get("obj"),
            para = [], ids = [], contactIDs = [], referenceNos = [];

            $.each(this.lineDS.data(), function(index, value){
                if(value.contact_id>0 && value.reference_no!==""){

                    if(obj.isNew()==false){
                        ids.push(value.id);
                    }

                    contactIDs.push(value.contact_id);
                    referenceNos.push(value.reference_no);
                }
            });

            if(contactIDs.length>0 && referenceNos.length>0){
                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: ids });
                }
                para.push({ field:"contact_id", operator:"where_in", value: contactIDs });
                para.push({ field:"reference_no", operator:"where_in", value: referenceNos });

                this.invoiceDS.query({
                    filter:para,
                    page:1,
                    pageSize:1
                }).then(function(){
                    var view = self.invoiceDS.view();

                    if(view.length>0){
                        self.set("isExistingInvoice", true);

                        $("#ntf1").data("kendoNotification").error(banhji.source.duplicateInvoice);
                    }else{
                        self.set("isExistingInvoice", false);
                    }
                });
            }
        },
        loadObj             : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    self.set("total", kendo.toString(view[0].amount, "c2", view[0].locale));

                    self.lineDS.filter({ field: "transaction_id", value: id });
                    self.journalLineDS.filter({ field: "transaction_id", value: id });
                    self.attachmentDS.filter({ field: "transaction_id", value: id });

                    self.referenceLineDS.filter({ field: "transaction_id", value: view[0].reference_id });
                    self.referenceDS.query({
                        filter:{ field: "id", value: view[0].reference_id }
                    }).then(function(){
                        var dropdownlist = $("#ddlReference").data("kendoDropDownList");
                        dropdownlist.value(view[0].reference_id);
                    });

                    if(view[0].type=="Advance_Settlement") {
                        self.set("showCashAdvance", true);
                    }else{
                        self.set("showCashAdvance", false);
                    }
                });
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.journalLineDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("sub_total", 0);
            this.set("tax", 0);
            this.set("total", 0);
            this.set("showCashAdvance", false);

            this.dataSource.insert(0, {
                recurring_id        : 0,
                reference_id        : 0,
                account_id          : 1,
                job_id              : 0,
                contact_id          : "",
                employee_id         : "",
                user_id             : this.get("user_id"),
                type                : "Direct_Expense", //required
                number              : "",
                sub_total           : 0,
                tax                 : 0,
                deposit             : 0,
                amount              : 0,
                remaining           : 0,
                received            : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                memo                : "",
                memo2               : "",
                status              : 0,
                segments            : [],
                progress            : "",
                is_journal          : 1,
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:0, name:"" }
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);

            this.generateNumber();
            this.setRate();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                job_id              : "",
                contact_id          : "",
                account_id          : "",
                description         : "",
                reference_no        : "",
                segments            : [],
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                reference_date      : new Date(),
                reference_no        : "",

                account             : { id:0, name:"" },
                contact             : { id:0, name:"" },
                job                 : { id:0, name:"" },
                tax_item            : { id:0, name:"" }
            });
        },
        removeRow           : function(e){
            var data = e.data;
            if(this.lineDS.total()>1){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.account_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        lineDSChanges       : function(arg){
            var self = banhji.expense;

            if(arg.field){
                if(arg.field=="account"){
                    var dataRow = arg.items[0];

                    dataRow.set("account_id", dataRow.account.id);
                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="contact"){
                    var dataRow = arg.items[0];

                    dataRow.set("contact_id", dataRow.contact.id);
                    self.checkExistingInvoice();
                }else if(arg.field=="reference_no"){
                    self.checkExistingInvoice();
                }else if(arg.field=="job"){
                    var dataRow = arg.items[0];

                    dataRow.set("job_id", dataRow.job.id);
                }else if(arg.field=="amount"){
                    self.changes();
                }else if(arg.field=="tax_item"){
                    var dataRow = arg.items[0];

                    dataRow.set("tax_item_id", dataRow.tax_item.id);
                    dataRow.set("tax", 0);

                    self.changes();
                }
            }
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
            subTotal = 0, total = 0, tax = 0, remaining = 0;

            $.each(this.lineDS.data(), function(index, value) {
                value.set("rate", obj.rate);

                //Tax by line
                if(value.tax_item_id>0){
                    var taxAmount = value.amount * value.tax_item.rate;
                    tax += taxAmount;
                    value.set("tax", taxAmount);
                }else{
                    value.set("tax", 0);
                }

                subTotal += value.amount;
            });

            total = subTotal + tax;

            if(obj.deposit>0){
                remaining = obj.deposit - (total + obj.received);
            }

            obj.set("sub_total", subTotal);
            obj.set("tax", tax);
            obj.set("amount", total);
            obj.set("remaining", remaining);

            this.set("total", kendo.toString(total, "c", obj.locale));
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");
            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

            //Segment
            // $.each(this.segmentItemDS.data(), function(index, value){
            //  segments.push(value.id);
            // });
            // obj.set("segments", segments);

            this.removeEmptyRow();

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Save Draft
            if(this.get("saveDraft") || this.get("saveDraftPrint")){
                obj.set("status", 4); //In progress
                obj.set("progress", "Draft");
                obj.set("is_journal", 0);//No Journal
            }

            //Mode
            if(obj.isNew()==false){
                //Use draft
                if(obj.status==4){
                    obj.set("status", 0);//Open
                    obj.set("progress", "");
                    obj.set("is_journal", 1);//Add Journal
                }
            }

            //Reference
            if(obj.reference_id>0){
                var ref = this.referenceDS.get(obj.reference_id);
                if(obj.remaining<1){
                    ref.set("status", 1);
                }else{
                    ref.set("status", 2);
                }

                this.referenceDS.sync();
            }else{
                obj.set("reference_id", 0);
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                //Journal
                if(data[0].is_recurring==0 && data[0].is_journal==1){
                    self.addJournal(data[0].id);
                }

                self.lineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else if(self.get("savePrint") || self.get("saveDraftPrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.set("saveDraftPrint", false);

                    self.clear();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear               : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("expense");
        },
        cancel              : function(){
            this.clear();
            history.back();
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id },
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);

                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        validating          : function(){
            var result = true, obj = this.get("obj");

            if(this.get("isExistingInvoice")){
                $("#ntf1").data("kendoNotification").error(banhji.source.duplicateInvoice);

                result = false;
            }

            return result;
        },
        //Journal
        addJournal          : function(transaction_id){
            var self = this, obj = this.get("obj"),
            sum = 0, sumExpense = 0, taxList = {};

            //Edit Mode
            if(obj.isNew()==false){
                //Delete previous journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });
            }

            //Expense on Dr
            $.each(this.lineDS.data(), function(index, value){
                sumExpense += value.amount;

                self.journalLineDS.add({
                    transaction_id      : transaction_id,
                    contact_id          : value.contact_id,
                    account_id          : value.account_id,
                    description         : value.description,
                    reference_no        : value.reference_no,
                    segments            : value.segments,
                    dr                  : value.amount,
                    cr                  : 0,
                    rate                : value.rate,
                    locale              : value.locale
                });
            });
            sum += sumExpense;

            //Tax accounts
            if(obj.tax>0){
                $.each(this.lineDS.data(), function(index, value){
                    if(value.tax_item_id>0){
                        var taxItem = value.tax_item,
                        taxAmount = value.amount * taxItem.rate;
                        sum += taxAmount;

                        if(taxItem.account_id>0){
                            if(taxList[taxItem.account_id]===undefined){
                                taxList[taxItem.account_id]={"id": taxItem.account_id, "amount":taxAmount};
                            }else{
                                if(taxList[taxItem.account_id].id===taxItem.account_id){
                                    taxList[taxItem.account_id].amount += taxAmount;
                                }else{
                                    taxList[taxItem.account_id]={"id": taxItem.account_id, "amount": taxAmount};
                                }
                            }
                        }
                    }
                });

                //Tax account on Dr
                if(!jQuery.isEmptyObject(taxList)){
                    $.each(taxList, function(index, value){
                        self.journalLineDS.add({
                            transaction_id      : transaction_id,
                            account_id          : value.id,
                            contact_id          : value.contact_id,
                            description         : "",
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : value.amount,
                            cr                  : 0,
                            rate                : obj.rate,
                            locale              : obj.locale
                        });
                    });
                }
            }

            if(obj.type=="Advance_Settlement") {
                var reference = this.referenceDS.get(obj.reference_id),
                advance_account_id = this.referenceLineDS.at(0).account_id,
                sumExpense = 0;

                //Cash on Dr
                if(obj.received>0){
                    sum += obj.received;

                    this.journalLineDS.add({
                        transaction_id      : transaction_id,
                        contact_id          : obj.contact_id,
                        account_id          : obj.account_id,
                        description         : "",
                        reference_no        : "",
                        segments            : obj.segments,
                        dr                  : obj.received,
                        cr                  : 0,
                        rate                : obj.rate,
                        locale              : obj.locale
                    });
                }

                //Over Expense
                if(obj.remaining<0){
                    sum += obj.remaining;

                    //Cash on Cr
                    this.journalLineDS.add({
                        transaction_id      : transaction_id,
                        contact_id          : obj.contact_id,
                        account_id          : obj.account_id,
                        description         : "",
                        reference_no        : "",
                        segments            : obj.segments,
                        dr                  : 0,
                        cr                  : Math.abs(obj.remaining),
                        rate                : obj.rate,
                        locale              : obj.locale
                    });
                }

                //Advance Account on Cr
                this.journalLineDS.add({
                    transaction_id      : transaction_id,
                    contact_id          : reference.contact_id,
                    account_id          : advance_account_id,
                    description         : reference.memo,
                    reference_no        : reference.number,
                    segments            : reference.segments,
                    dr                  : 0,
                    cr                  : sum,
                    rate                : reference.rate,
                    locale              : reference.locale
                });
            }else{//Direct Expense & Reimbursement
                //Cash on Cr
                this.journalLineDS.add({
                    transaction_id      : transaction_id,
                    contact_id          : obj.contact_id,
                    account_id          : obj.account_id,
                    description         : "",
                    reference_no        : "",
                    segments            : obj.segments,
                    dr                  : 0,
                    cr                  : sum,
                    rate                : obj.rate,
                    locale              : obj.locale
                });
            }

            this.journalLineDS.sync();
        },
        //Reference
        loadReference       : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact_id>0){
                this.referenceDS.filter([
                    { field:"contact_id", value:obj.contact_id },
                    { field:"type", value:"Cash_Advance" },
                    { field:"status", operator:"where_in", value:[0,2] }
                ]);
            }
        },
        referenceChanges    : function(){
            var obj = this.get("obj");
            if(obj.reference_id){
                var reference = this.referenceDS.get(obj.reference_id);

                obj.set("reference_no", reference.number);
                obj.set("deposit", reference.amount - reference.amount_paid);
                this.referenceLineDS.filter({ field:"transaction_id", value: obj.reference_id});
            }
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("recurring_id", id);
                obj.set("contact_id", view[0].contact_id);
                obj.set("type", view[0].type);
                obj.set("locale", view[0].locale);
                obj.set("account_id", view[0].account_id);
                obj.set("segments", view[0].segments);
                obj.set("job_id", view[0].job_id);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
                obj.set("employee", view[0].employee);
            });

            this.recurringLineDS.query({
                filter: { field:"transaction_id", value:id },
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        tax_item_id         : value.tax_item_id,
                        job_id              : value.job_id,
                        contact_id          : value.contact_id,
                        account_id          : value.account_id,
                        description         : value.description,
                        reference_no        : value.reference_no,
                        segments            : value.segments,
                        amount              : value.amount,
                        rate                : value.rate,
                        locale              : value.locale,
                        reference_date      : value.reference_date
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.accountingRecurring = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        pageLoad            : function(){
            this.search();
        },
        search              : function(){
            this.dataSource.filter([
                { field:"type", operator:"where_in", value:["Deposit","Withdraw","Transfer","Cash_Advance","Journal","Direct_Expense","Reimbursement","Advance_Settlement"] },
                { field:"is_recurring", value: 1 }
            ]);
        },
        edit                : function(e){
            var data = e.data;

            switch(data.type) {
                case "Journal":
                    banhji.journal.set("recurring", "edit");
                    banhji.router.navigate('/journal/' + data.id);
                    break;
                case "Deposit":
                    banhji.cashTransaction.set("recurring", "edit");
                    banhji.router.navigate('/cash_transaction/' + data.id);

                    break;
                case "Withdraw":
                    banhji.cashTransaction.set("recurring", "edit");
                    banhji.router.navigate('/cash_transaction/' + data.id);

                    break;
                case "Transfer":
                    banhji.cashTransaction.set("recurring", "edit");
                    banhji.router.navigate('/cash_transaction/' + data.id);

                    break;
                case "Cash_Advance":
                    banhji.cashAdvance.set("recurring", "edit");
                    banhji.router.navigate('/cash_advance/' + data.id);

                    break;
                case "Direct_Expense":
                    banhji.expense.set("recurring", "edit");
                    banhji.router.navigate('/expense/' + data.id);

                    break;
                case "Reimbursement":
                    banhji.expense.set("recurring", "edit");
                    banhji.router.navigate('/expense/' + data.id);

                    break;
                case "Advance_Settlement":
                    banhji.expense.set("recurring", "edit");
                    banhji.router.navigate('/expense/' + data.id);

                    break;
                default:
                    // default code block
            }
        },
        use                 : function(e){
            var data = e.data;

            switch(data.type) {
                case "Journal":
                    banhji.journal.set("recurring", "use");
                    banhji.router.navigate('/journal/' + data.id);
                    break;
                case "Deposit":
                    banhji.cashTransaction.set("recurring", "use");
                    banhji.router.navigate('/cash_transaction/' + data.id);

                    break;
                case "Withdraw":
                    banhji.cashTransaction.set("recurring", "use");
                    banhji.router.navigate('/cash_transaction/' + data.id);

                    break;
                case "Transfer":
                    banhji.cashTransaction.set("recurring", "use");
                    banhji.router.navigate('/cash_transaction/' + data.id);

                    break;
                case "Cash_Advance":
                    banhji.cashAdvance.set("recurring", "use");
                    banhji.router.navigate('/cash_advance/' + data.id);

                    break;
                case "Direct_Expense":
                    banhji.expense.set("recurring", "use");
                    banhji.router.navigate('/expense/' + data.id);

                    break;
                case "Reimbursement":
                    banhji.expense.set("recurring", "use");
                    banhji.router.navigate('/expense/' + data.id);

                    break;
                case "Advance_Settlement":
                    banhji.expense.set("recurring", "use");
                    banhji.router.navigate('/expense/' + data.id);

                    break;
                default:
                    // default code block
            }
        }
    });
    // ACCOUNTING REPORTS
    banhji.accountingReportCenter = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl+"accounting_modules/financial_snapshot"),
        income              : 0,
        expense             : 0,
        net_income          : 0,
        asset               : 0,
        liability           : 0,
        equity              : 0,
        pageLoad            : function(){
            var self = this;

            this.dataSource.query({
                filter: [],
                page: 1,
                pageSize: 5
            }).then(function(){
                var view = self.dataSource.view();

                self.set("income", kendo.toString(view[0].income, banhji.locale=="km-KH"?"c0":"c", banhji.locale));
                self.set("expense", kendo.toString(view[0].expense, banhji.locale=="km-KH"?"c0":"c", banhji.locale));
                self.set("net_income", kendo.toString(view[0].net_income, banhji.locale=="km-KH"?"c0":"c", banhji.locale));

                self.set("asset", kendo.toString(view[0].asset, banhji.locale=="km-KH"?"c0":"c", banhji.locale));
                self.set("liability", kendo.toString(view[0].liability, banhji.locale=="km-KH"?"c0":"c", banhji.locale));
                self.set("equity", kendo.toString(view[0].equity, banhji.locale=="km-KH"?"c0":"c", banhji.locale));
            });
        }
    });
    banhji.journalReport =  kendo.observable({
        lang                : langVM,
        // dataSource           : dataStore(apiUrl + "accounting_modules/journal"),
        dataSource          : new kendo.data.DataSource({
            transport: {
                read: {
                    url: apiUrl + "accounting_modules/journal",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if (operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {
                            models: kendo.stringify(options.models)
                        };
                    }
                }
            },
            schema: {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter: [
            ],
            sort: {
                field: "id",
                dir: "asc"
            },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page: 1,
            pageSize: 100
        }),
        exdataSource        : dataStore(apiUrl + "accounting_modules/journal"),
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : null,
        company             : banhji.institute,
        displayDate         : "",
        showDescription     : false,
        showRef             : true,
        showName            : false,
        showSegment         : false,
        dr                  : 0,
        cr                  : 0,
        totalTxn            : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter: para,
                sort: [
                    { field: "issued_date", operator:"order_by_related_transaction", dir: "desc" },
                    { field: "number", operator:"order_by_related_transaction", dir: "desc" }
                ]
            });
            var saved = false;
            this.dataSource.bind("requestEnd", function(e){
                if(e.type==="read" && saved==false){
                    saved = true;
                    var response = e.response;
                    self.set("dr", kendo.toString(response.dr, "c", banhji.locale));
                    self.set("cr", kendo.toString(response.cr, "c", banhji.locale));
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +
                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block>.span4 * {color: #fff!important;}' +
                        '.journal_block>.span4:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block>.span4:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block>.span4 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.pcg .mid-header {' +
                            'background-color: #dce6f2!important; ' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}'+
                        '.inv1 span.total-amount { ' +
                            'color:#fff!important;' +
                        '}</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            $("#loadImport").css("display","block");
            var self = this, para = [],
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Dates
            if(start && end){
                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(new Date(start), "yyyy-MM-dd") });
                para.push({ field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(end), "yyyy-MM-dd") });

                displayDate = "From " + kendo.toString(new Date(start), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end), "dd-MM-yyyy");
            }else if(start){
                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(new Date(start), "yyyy-MM-dd") });

                displayDate = "On " + kendo.toString(new Date(start), "dd-MM-yyyy");
            }else if(end){
                para.push({ field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(end), "yyyy-MM-dd") });

                displayDate = "As Of " + kendo.toString(new Date(end), "dd-MM-yyyy");
            }else{

            }

            this.set("displayDate", displayDate);
            this.exdataSource.data([]);
            this.exdataSource.query({
                filter: para,
                sort: [
                    { field: "issued_date", operator:"order_by_related_transaction", dir: "desc" },
                    { field: "number", operator:"order_by_related_transaction", dir: "desc" }
                ]
            })
            .then(function(e){
                var sumDR = 0, sumCR = 0;
                self.exArray = [];
                self.exArray.push({
                    cells: [
                        { value: self.company.name, textAlign: "center", colSpan: 7 }
                    ]
                });
                self.exArray.push({
                    cells: [
                        { value: "JOURNAL ENTRY REPORTS",bold: true, fontSize: 20, textAlign: "center", colSpan: 7 }
                    ]
                });
                if(self.displayDate){
                    self.exArray.push({
                        cells: [
                            { value: self.displayDate, textAlign: "center", colSpan: 7 }
                        ]
                    });
                }
                self.exArray.push({
                    cells: [
                        { value: "", colSpan: 7 }
                    ]
                });
                self.exArray.push(
                    { cells: [
                        { value: "Type", background: "#496cad", color: "#ffffff" },
                        { value: "Date", background: "#496cad", color: "#ffffff" },
                        { value: "TXN#", background: "#496cad", color: "#ffffff" },
                        { value: "Description", background: "#496cad", color: "#ffffff" },
                        { value: "Name", background: "#496cad", color: "#ffffff" },
                        { value: "Account", background: "#496cad", color: "#ffffff" },
                        { value: "Debits(DR)", background: "#496cad", color: "#ffffff" },
                        { value: "Credits(CR)", background: "#496cad", color: "#ffffff" }
                    ]}
                );
                for (var i = 0; i < self.exdataSource.data().length; i++){
                  var RATE = self.exdataSource.data()[i].rate;
                  var DR = self.exdataSource.data()[i].line[0].dr / RATE;
                  var CR = self.exdataSource.data()[i].line[0].cr / RATE;
                  self.exArray.push({
                    cells: [
                      { value: self.exdataSource.data()[i].type},
                      { value: kendo.toString(new Date(self.exdataSource.data()[i].issued_date), "dd-MMMM-yyyy")},
                      { value: self.exdataSource.data()[i].number },
                      { value: self.exdataSource.data()[i].line[0].description },
                      { value: self.exdataSource.data()[i].line[0].contact },
                      { value: self.exdataSource.data()[i].line[0].account },
                      { value: self.exdataSource.data()[i].line[0].dr ? DR : "",  },
                      { value: self.exdataSource.data()[i].line[0].cr ? CR : "" }
                    ]
                  });
                  sumDR = kendo.parseFloat(self.exdataSource.data()[i].line[0].dr);
                  sumCR = kendo.parseFloat(self.exdataSource.data()[i].line[0].cr);
                  for(var j = 1; j < self.exdataSource.data()[i].line.length; j++){
                    var DR = self.exdataSource.data()[i].line[j].dr / RATE;
                    var CR = self.exdataSource.data()[i].line[j].cr / RATE;
                      self.exArray.push({
                        cells: [
                          { value: ""},
                          { value: ""},
                          { value: ""},
                          { value: self.exdataSource.data()[i].line[j].description},
                          { value: self.exdataSource.data()[i].line[j].contact},
                          { value: self.exdataSource.data()[i].line[j].account },
                          { value: self.exdataSource.data()[i].line[j].dr ? DR : "" },
                          { value: self.exdataSource.data()[i].line[j].cr ? CR : "" }
                        ]
                      });
                    sumDR += kendo.parseFloat(self.exdataSource.data()[i].line[j].dr);
                    sumCR += kendo.parseFloat(self.exdataSource.data()[i].line[j].cr);
                  }
                  self.exArray.push({
                    cells: [
                      { value: "Total", bold: true, background: "#bbbbbb" },
                      { value: "", background: "#bbbbbb" },
                      { value: "", background: "#bbbbbb" },
                      { value: "", background: "#bbbbbb" },
                      { value: "", background: "#bbbbbb" },
                      { value: "", background: "#bbbbbb" },
                      { value: kendo.parseFloat(sumDR), bold: true, background: "#bbbbbb" },
                      { value: kendo.parseFloat(sumCR), bold: true, background: "#bbbbbb" }
                    ]
                  });
                }
                if(self.exArray.length > 1) {
                    $("#loadImport").css("display","none");
                    var workbook = new kendo.ooxml.Workbook({
                      sheets: [
                        {
                          columns: [
                            { autoWidth: true },
                            { autoWidth: true },
                            { autoWidth: true },
                            { autoWidth: true },
                            { autoWidth: true },
                            { autoWidth: true },
                            { autoWidth: true },
                            { autoWidth: true }
                          ],
                          title: "Journal Entry Reports",
                          rows: self.exArray
                        }
                      ]
                    });
                    //save the file as Excel file with extension xlsx
                    kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "JournalEntryReports.xlsx"});
                }
            });
        }
    });
    banhji.journalReportBySegment =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "accounting_modules/journal_by_segment"),
        segmentDS           : banhji.source.segmentDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { segments: [] },
        company             : banhji.institute,
        displayDate         : "",
        showDescription     : false,
        showRef             : true,
        showName            : false,
        showSegment         : false,
        dr                  : 0,
        cr                  : 0,
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Segments
            var segments = [];
            if(obj.segments.length>0){
                $.each(obj.segments, function(index, value){
                    $.each(banhji.source.segmentItemList, function(ind, val){
                        if(val.segment_id==value){
                            segments.push(val.id);
                        }
                    });
                });
                para.push({ field:"id", operator:"segments", value: segments });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter: para,
                sort: [
                    { field: "issued_date",  dir: "desc" },
                    { field: "number", dir: "desc" }
                ]
            });
            var loaded = false;
            this.dataSource.bind("requestEnd", function(e){
                if(e.type==="read" && loaded==false){
                    loaded = true;

                    var response = e.response;
                    self.set("dr", kendo.toString(response.dr, "c2", banhji.locale));
                    self.set("cr", kendo.toString(response.cr, "c2", banhji.locale));
                }
            });

            obj.set("segments", []);
        }
    });
    banhji.generalLedger =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "accounting_modules/general_ledger"),
        accountDS           : banhji.source.accountList,
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { account_id: 0, segments: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        totalBalance        : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        segmentChanges      : function() {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Account
            if(obj.account_id>0){
                para.push({ field:"account_id", operator:"where_in", value:obj.account_id });
            }

            //Trial Balance cross accounts
            if(banhji.trialBalance.get("crossAccounts").length>0){
                var ids = [];
                $.each(banhji.trialBalance.get("crossAccounts"), function(index, value){
                    ids.push(value);
                });
                para.push({ field:"account_id", operator:"where_in", value:ids });

                banhji.trialBalance.set("crossAccounts", []);
            }

            //Balance Sheet cross accounts
            if(banhji.statementFinancialPosition.get("crossAccounts").length>0){
                var ids = [];
                $.each(banhji.statementFinancialPosition.get("crossAccounts"), function(index, value){
                    ids.push(value);
                });
                para.push({ field:"account_id", operator:"where_in", value:ids });

                banhji.statementFinancialPosition.set("crossAccounts", []);
            }

            //Segment
            if(obj.segments.length>0){
                var segments = [];
                $.each(obj.segments, function(index, value){
                    segments.push(value);
                });
                para.push({ field:"segments", operator:"like_related_transaction", value:"%"+segments.toString()+"%" });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para,
                sort:[
                    { field:"account_type_id", operator:"order_by_related_account", dir:"asc" },
                    { field:"number", operator:"order_by_related_account", dir:"asc" },
                    { field:"issued_date", operator:"order_by_related_transaction", dir:"asc" },
                    { field:"number", operator:"order_by_related_transaction", dir:"asc" }
                ]
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0;
                    self.exArray = [];
                    // self.set("totalAmount", kendo.toString(response.totalAmount, "c", banhji.locale));
                    // self.set("totalBalance", kendo.toString(response.totalBalance, "c", banhji.locale));

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 6 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "General Ledger",bold: true, fontSize: 20, textAlign: "center", colSpan: 6 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 6 }
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 6 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Date", background: "#496cad", color: "#ffffff" },
                            { value: "Reference No", background: "#496cad", color: "#ffffff" },
                            { value: "Description", background: "#496cad", color: "#ffffff" },
                            { value: "Name", background: "#496cad", color: "#ffffff" },
                            { value: "Debit", background: "#496cad", color: "#ffffff" },
                            { value: "Credit", background: "#496cad", color: "#ffffff" },
                            { value: "Balance", background: "#496cad", color: "#ffffff" }
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: kendo.parseFloat(response.results[i].balance_forward), bold: true },
                            ]
                        });
                        var totalCr = 0, totalDr = 0;
                        balanceCal = response.results[i].balance_forward;
                        for(var j = 0; j < response.results[i].line.length; j++){
                            balanceCal += response.results[i].line[j].amount;
                            totalDr += response.results[i].line[j].dr;
                            totalCr += response.results[i].line[j].cr;
                            self.exArray.push({
                                cells: [
                                    { value: "    "+response.results[i].line[j].type },
                                    { value: kendo.toString(new Date(response.results[i].line[j].issued_date), "dd-MM-yyyy")  },
                                    { value: response.results[i].line[j].number },
                                    { value: response.results[i].line[j].memo },
                                    { value: response.results[i].line[j].contact },
                                    { value: kendo.parseFloat(response.results[i].line[j].dr)},
                                    { value: kendo.parseFloat(response.results[i].line[j].cr)},
                                    { value: kendo.parseFloat(balanceCal)}
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "Total " + response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: kendo.parseFloat(totalDr), bold: true, borderTop: { color: "#000000", size: 1 }  },
                                { value: kendo.parseFloat(totalCr), bold: true, borderTop: { color: "#000000", size: 1 }  },
                                { value: kendo.parseFloat(balanceCal), bold: true, borderTop: { color: "#000000", size: 1 }  },
                            ]
                        });
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 7 }
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "TOTAL", bold: true,fontSize: 16 },
                            { value: "" },
                            { value: "" },
                            { value: "" },
                            { value: "" },
                            { value: kendo.parseFloat(response.totalAmount), bold: true, fontSize: 16 },
                            { value: kendo.parseFloat(response.totalBalance), bold: true, fontSize: 16 },
                        ]
                    });
                }
            });
        },
        totalDr             : function() {
            var sum = 0;

            $.each(this.dataSource.data(), function(index, value) {
                $.each(value.line, function(ind, val) {
                    sum += kendo.parseFloat(val.dr);
                });
            });

            return sum;
        },
        totalCr             : function() {
            var sum = 0;

            $.each(this.dataSource.data(), function(index, value) {
                $.each(value.line, function(ind, val) {
                    sum += kendo.parseFloat(val.cr);
                });
            });

            return sum;
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    banhji.generalLedgerBySegment =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "accounting_modules/general_ledger_by_segment"),
        segmentDS           : banhji.source.segmentDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { segments: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        totalBalance        : 0,
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Segments
            var segments = [];
            if(obj.segments.length>0){
                $.each(obj.segments, function(index, value){
                    $.each(banhji.source.segmentItemList, function(ind, val){
                        if(val.segment_id==value){
                            segments.push(val.id);
                        }
                    });
                });
                para.push({ field:"id", operator:"where_in_related_segmentitem", value: segments });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter: para
            });
            var loaded = false;
            this.dataSource.bind("requestEnd", function(e){
                if(e.type==="read" && loaded==false){
                    loaded = true;

                    var response = e.response;
                    self.set("totalBalance", kendo.toString(response.totalBalance, "c2", banhji.locale));
                }
            });

            obj.set("segments", []);
        }
    });
    banhji.statementProfitLoss =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "accounting_modules/income_statement"),
        sortList            : banhji.source.sortList,
        sorter              : "all",
        sdate               : "",
        edate               : "",
        obj                 : null,
        company             : banhji.institute,
        displayDate         : "",
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        exArray             : [],
        search              : function(){
            var self = this, para = [], displayDate = "",
                start = this.get("sdate"),
                end = this.get("edate");

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response;
                    self.exArray = [];
                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 3 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Statement of Profit or Loss",bold: true, fontSize: 20, textAlign: "center", colSpan: 3 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 3 }
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 3 }
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){

                        if(response.results[i].line){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].type, bold: true, },
                                    { value: "" },
                                    { value: "" }
                                ]
                            });
                            for(var j = 0; j < response.results[i].line.length; j++){
                                self.exArray.push({
                                    cells: [
                                        { value: response.results[i].line[j].number + " - " + response.results[i].line[j].name },
                                        { value: kendo.parseFloat(response.results[i].line[j].amount)  },
                                        { value: "" }
                                    ]
                                });
                            }
                            self.exArray.push({
                                cells: [
                                    { value: "Total " + response.results[i].type, bold: true, },
                                    { value: "" },
                                    { value: kendo.parseFloat(response.results[i].amount), bold: true, borderTop: { color: "#000000", size: 1 }  },
                                ]
                            });
                        }else{
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].name, bold: true, },
                                    { value: "" },
                                    { value: kendo.parseFloat(response.results[i].amount), bold: true, borderTop: { color: "#000000", size: 1 }  },
                                ]
                            });
                        }
                    }

                }
            });
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Statement of Profit or Loss",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "StatementOfProfitOrLoss.xlsx"});
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        }
    });
    banhji.statementProfitLossByNature =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "accounting_modules/income_statement_by_nature"),
        sortList            : banhji.source.sortList,
        sorter              : "all",
        sdate               : "",
        edate               : "",
        obj                 : null,
        company             : banhji.institute,
        displayDate         : "",
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        exArray             : [],
        goToGeneralLegder   : function(){
            alert("yooooooo");
        },
        search              : function(){
            var self = this,
                para = [],
                displayDate = "",
                start = this.get("sdate"),
                end = this.get("edate");

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter: para
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response;
                    self.exArray = [];
                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 3 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Statement of Profit or Loss by Nature",bold: true, fontSize: 20, textAlign: "center", colSpan: 3 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 3 }
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 3 }
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){

                        if(response.results[i].line){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].type, bold: true, },
                                    { value: "" },
                                    { value: "" }
                                ]
                            });
                            for(var j = 0; j < response.results[i].line.length; j++){
                                self.exArray.push({
                                    cells: [
                                        { value: response.results[i].line[j].number + " - " + response.results[i].line[j].name },
                                        { value: kendo.parseFloat(response.results[i].line[j].amount)  },
                                        { value: "" }
                                    ]
                                });
                            }
                            self.exArray.push({
                                cells: [
                                    { value: "Total " + response.results[i].type, bold: true, },
                                    { value: "" },
                                    { value: kendo.parseFloat(response.results[i].amount), bold: true, borderTop: { color: "#000000", size: 1 }  },
                                ]
                            });
                        }else{
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].name, bold: true, },
                                    { value: "" },
                                    { value: kendo.parseFloat(response.results[i].amount), bold: true, borderTop: { color: "#000000", size: 1 }  },
                                ]
                            });
                        }
                    }

                }
            });
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Statement of Profit or Loss",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "StatementOfProfitOrLoss.xlsx"});
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        }
    });
    banhji.statementProfitLossBySegment =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "accounting_modules/income_statement_by_segment"),
        segmentDS           : banhji.source.segmentDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { segments: [] },
        company             : banhji.institute,
        displayDate         : "",
        pageLoad            : function(){
            // this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Clear table header
            document.getElementById("myTable").deleteTHead();

            var table = document.getElementById("myTable");
            // Create an empty <thead> element and add it to the table:
            var header = table.createTHead();

            // Create an empty <tr> element and add it to the first position of <thead>:
            var row = header.insertRow(0);
                row.insertCell(0);
                row.insertCell(1);

            //Segments
            var segments = [], segmentItems = [];
            if(obj.segments.length>0){
                $.each(obj.segments, function(index, value){
                    var seg = banhji.source.segmentDS.get(value);
                    segments.push(value);

                    // Insert a new cell (<td>) at the first position of the "new" <tr> element:
                    var cell = row.insertCell(index+2);

                    // Add some bold text in the new cell:
                    cell.innerHTML = seg.name;

                    $.each(banhji.source.segmentItemList, function(ind, val){
                        if(val.segment_id==value){
                            segmentItems.push(val.id);
                        }
                    });
                });
                para.push({ field:"id", operator:"segments", value: segments });
                para.push({ field:"id", operator:"where_in_related_segmentitem", value: segmentItems });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            // this.dataSource.query({
            //  filter: para,
            //  group:{ field:"type" }
            // });

            this.dataSource.query({
                filter: para
            });

            // obj.set("segments", []);
        }
    });
    banhji.statementProfitLossComparison =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "accounting_modules/income_statement"),
        sortList            : banhji.source.sortList,
        sorter              : "all",
        sdate               : "",
        edate               : "",
        obj                 : null,
        company             : banhji.institute,
        displayDate         : "",
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [], displayDate = "",
                start = this.get("sdate"),
                end = this.get("edate");

            //Dates
            if(start && end){
                para.push({ field:"issued_date >=", value: kendo.toString(new Date(start), "yyyy-MM-dd") });
                para.push({ field:"issued_date <=", value: kendo.toString(new Date(end), "yyyy-MM-dd") });

                displayDate = "From " + kendo.toString(new Date(start), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end), "dd-MM-yyyy");
            }else if(start){
                para.push({ field:"issued_date", value: kendo.toString(new Date(start), "yyyy-MM-dd") });

                displayDate = "On " + kendo.toString(new Date(start), "dd-MM-yyyy");
            }else if(end){
                para.push({ field:"issued_date <=", value: kendo.toString(new Date(end), "yyyy-MM-dd") });

                displayDate = "As Of " + kendo.toString(new Date(end), "dd-MM-yyyy");
            }else{

            }

            this.set("displayDate", displayDate);

            this.dataSource.filter(para);
        }
    });
    banhji.trialBalance =  kendo.observable({
        lang                : langVM,
        dataSource          : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "accounting_modules/trial_balance",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            sort:{ field:"number", dir:"asc" },
            batch: true,
            serverFiltering: true,
            page:1,
            pageSize: 100
        }),
        as_of               : new Date(),
        displayDate         : "",
        company             : banhji.institute,
        dr                  : 0,
        cr                  : 0,
        crossAccounts       : [],
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sort                : function(e){
            var col = "",
            target = e.currentTarget.innerText;

            if(this.get("currentSort")=="asc"){
                this.set("currentSort", "desc");
            }else{
                this.set("currentSort", "asc");
            }

            switch(target) {
                case "TYPE":
                    col = "type";
                    break;
                case "DATE":
                    col = "issued_date";
                    break;
                case "ACCOUNT":
                    col = "account_id";
                    break;
                default:
                    //default code block
            }

            this.dataSource.sort({ field:col, dir:this.get("currentSort") });
        },
        search              : function(){
            var as_of = this.get("as_of"), self = this, totalDR = 0, totalCR = 0;

            if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);

                this.dataSource.query({
                    filter: { field:"issued_date <", value:kendo.toString(as_of, "yyyy-MM-dd") },
                    sort: {field: "number", dir: "asc" }
                });

                this.dataSource.bind("requestEnd", function(e){
                    if(e.type=="read"){
                        self.exArray = [];
                        var response = e.response;
                            self.exArray.push({
                            cells: [
                                { value: self.company.name, textAlign: "center", colSpan: 5 }
                            ]
                        });
                        self.exArray.push({
                            cells: [
                                { value: "Trial Balance",bold: true, fontSize: 20, textAlign: "center", colSpan: 5 }
                            ]
                        });
                        if(self.displayDate){
                            self.exArray.push({
                                cells: [
                                    { value: self.displayDate, textAlign: "center", colSpan: 5 }
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 5 }
                            ]
                        });
                        self.exArray.push({ cells: [
                            { value: "Code", background: "#496cad", color: "#ffffff" },
                            { value: "Name", background: "#496cad", color: "#ffffff" },
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Debit", background: "#496cad", color: "#ffffff" },
                            { value: "Credit", background: "#496cad", color: "#ffffff" }
                            ]
                        });
                        for (var i = 0; i < response.results.length; i++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].number },
                                    { value: response.results[i].name },
                                    { value: response.results[i].type },
                                    { value: response.results[i].dr ? kendo.parseFloat(response.results[i].dr) : "" },
                                    { value: response.results[i].cr ? kendo.parseFloat(response.results[i].cr) : "" }
                                ]
                            });
                            totalDR += kendo.parseFloat(response.results[i].dr);
                            totalCR += kendo.parseFloat(response.results[i].cr);
                        }
                        self.exArray.push({
                            cells: [
                                { value: "TOTAL:", color: "#ffffff", background: "#333333", bold: true, fontSize: 16 },
                                { value: "",background: "#333333" },
                                { value: "",background: "#333333" },
                                { value: kendo.parseFloat(totalDR), color: "#ffffff", background: "#333333", bold: true, fontSize: 16 },
                                { value: kendo.parseFloat(totalCR), color: "#ffffff", background: "#333333", bold: true, fontSize: 16 }
                            ]
                        });
                    }
                });
            }
        },
        goToGeneralLegder   : function(e){
            var data = e.data, ids = this.get("crossAccounts");

            ids.push(data.id);

            banhji.router.navigate('/general_ledger');
        },
        totalDr             : function() {
            var sum = 0;

            $.each(this.dataSource.data(), function(index, value) {
                sum += kendo.parseFloat(value.dr);
            });

            this.set("dr", kendo.toString(sum, "c", banhji.locale));

            return kendo.toString(sum, "c", banhji.locale);
        },
        totalCr             : function() {
            var sum = 0;

            $.each(this.dataSource.data(), function(index, value) {
                sum += kendo.parseFloat(value.cr);
            });

            this.set("cr", kendo.toString(sum, "c", banhji.locale));

            return kendo.toString(sum, "c", banhji.locale);
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Trial Balance",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "TrialBalance.xlsx"});
        }
    });
    banhji.statementFinancialPosition =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "accounting_modules/balance_sheet_asset"),
        liabilityDS         : dataStore(apiUrl + "accounting_modules/balance_sheet_liability"),
        equityDS            : dataStore(apiUrl + "accounting_modules/balance_sheet_equity"),
        as_of               : new Date(),
        displayDate         : "",
        company             : banhji.institute,
        totalAsset          : 0,
        totalLiability      : 0,
        totalEquity         : 0,
        totalLiabilityEquity: 0,
        crossAccounts       : [],
        pageLoad            : function(){
            this.search();
        },
        exArray             : [],
        liArray             : [],
        eqArray             : [],
        search              : function(){
            var self = this, as_of = this.get("as_of");
            this.set("totalLiabilityEquity", 0);
            var totalAll = 0, totalCurrent = 0, totalLi = 0, totalEq = 0, totalAsCu = 0, totalBlock = 0;
            if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);
                // as_of.setDate(as_of.getDate()+1);

                this.dataSource.filter([
                    { field:"issued_date", value:kendo.toString(as_of, "yyyy-MM-dd") },
                    { field:"account_type_id", value:[10,11,12,13,14,15,16,17,18,19,20,21,22] }
                ]);
                var unReadAsset = true;
                this.dataSource.bind("requestEnd", function(e){
                    if(e.type=="read" && unReadAsset){
                        unReadAsset = false;
                        var response = e.response.totalAmount;

                        self.set("totalAsset", kendo.toString(response, "c", banhji.locale));

                        var response = e.response;
                        self.exArray = [];
                        self.exArray.push({
                            cells: [
                                { value: self.company.name, textAlign: "center", colSpan: 3 }
                            ]
                        });
                        self.exArray.push({
                            cells: [
                                { value: "Statement of Financial Position",bold: true, fontSize: 20, textAlign: "center", colSpan: 3 }
                            ]
                        });
                        if(self.displayDate){
                            self.exArray.push({
                                cells: [
                                    { value: self.displayDate, textAlign: "center", colSpan: 3 }
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 3 }
                            ]
                        });
                        self.exArray.push({
                            cells: [
                                { value: "ASSETS", bold: true, fontSize: 16 },
                                { value: "" },
                                { value: "" }
                            ]
                        });
                        for (var i = 0; i < response.results.length; i++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].name, bold: true, italic: true },
                                    { value: "" },
                                    { value: "" }
                                ]
                            });
                            for(var j = 0; j < response.results[i].typeLine.length; j++){
                                self.exArray.push({
                                    cells: [
                                        { value: response.results[i].typeLine[j].type, bold: true },
                                        { value: "" },
                                        { value: "" }
                                    ]
                                });
                                for(var k = 0; k < response.results[i].typeLine[j].line.length; k++){
                                    self.exArray.push({
                                        cells: [
                                            { value: response.results[i].typeLine[j].line[k].number + " " + response.results[i].typeLine[j].line[k].name },
                                            { value: kendo.parseFloat(response.results[i].typeLine[j].line[k].amount) },
                                            { value: "" }
                                        ]
                                    });

                                    totalCurrent += kendo.parseFloat(response.results[i].typeLine[j].line[k].amount);
                                    totalAll += kendo.parseFloat(response.results[i].typeLine[j].line[k].amount);
                                    totalAsCu += kendo.parseFloat(response.results[i].typeLine[j].line[k].amount);
                                    totalBlock += kendo.parseFloat(response.results[i].typeLine[j].line[k].amount);
                                }
                                self.exArray.push({
                                    cells: [
                                        { value: "Total " + response.results[i].typeLine[j].type, bold: true },
                                        { value: totalBlock, bold: true, borderTop: { color: "#000000", size: 1 } },
                                        { value: "" }
                                    ]
                                });
                                totalBlock = 0;
                                self.exArray.push({
                                    cells: [
                                        { value: "" },
                                        { value: "" },
                                        { value: "" }
                                    ]
                                });
                            }
                            self.exArray.push({
                                cells: [
                                    { value: "Total " + response.results[i].name, bold: true, italic: true },
                                    { value: "" },
                                    { value: totalCurrent , bold: true, borderTop: { color: "#000000", size: 1 } }
                                ]
                            });
                            totalCurrent = 0;
                        }
                        self.exArray.push({
                            cells: [
                                { value: "TOTAL ASSETS", bold: true, color: "#ffffff", background: "#1E4E78", fontSize: 20 },
                                { value: "", background: "#1E4E78" },
                                { value: totalAsCu, bold: true, color: "#ffffff", background: "#1E4E78", fontSize: 20 }
                            ]
                        });
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 3 },
                            ]
                        });
                    }
                });
                totalAll = 0;
                //Liability
                this.liabilityDS.filter([
                    { field:"issued_date", value:kendo.toString(as_of, "yyyy-MM-dd") },
                    { field:"account_type_id", value:[23,24,25,26,27,28,29,30,31] }
                ]);
                var unReadLiability = true;
                this.liabilityDS.bind("requestEnd", function(e){
                    if(e.type=="read" && unReadLiability){
                        unReadLiability = false;
                        var response = e.response.totalAmount;
                        var total = self.get("totalLiabilityEquity");
                        total += response;
                        self.set("totalLiabilityEquity", total);
                        self.set("totalLiability", kendo.toString(response, "c", banhji.locale));
                        //Excel Export

                        var response = e.response;
                        self.liArray = [];
                        self.liArray.push({
                            cells: [
                                { value: "LIABILITIES", bold: true, fontSize: 16 },
                                { value: "" },
                                { value: "" }
                            ]
                        });
                        for (var i = 0; i < response.results.length; i++){
                            self.liArray.push({
                                cells: [
                                    { value: response.results[i].name, bold: true, italic: true },
                                    { value: "" },
                                    { value: "" }
                                ]
                            });
                            for(var j = 0; j < response.results[i].typeLine.length; j++){
                                self.liArray.push({
                                    cells: [
                                        { value: response.results[i].typeLine[j].type, bold: true },
                                        { value: "" },
                                        { value: "" }
                                    ]
                                });
                                for(var k = 0; k < response.results[i].typeLine[j].line.length; k++){
                                    self.liArray.push({
                                        cells: [
                                            { value: response.results[i].typeLine[j].line[k].number + " " + response.results[i].typeLine[j].line[k].name },
                                            { value: kendo.parseFloat(response.results[i].typeLine[j].line[k].amount) },
                                            { value: "" }
                                        ]
                                    });
                                    totalBlock += kendo.parseFloat(response.results[i].typeLine[j].line[k].amount);
                                    totalLi += kendo.parseFloat(response.results[i].typeLine[j].line[k].amount);
                                    totalAll += kendo.parseFloat(response.results[i].typeLine[j].line[k].amount);
                                }
                                self.liArray.push({
                                    cells: [
                                        { value: "Total " + response.results[i].typeLine[j].type, bold: true },
                                        { value: totalBlock, bold: true, borderTop: { color: "#000000", size: 1 } },
                                        { value: "" }
                                    ]
                                });
                                totalBlock = 0;
                                self.liArray.push({
                                    cells: [
                                        { value: "" },
                                        { value: "" },
                                        { value: "" }
                                    ]
                                });
                            }
                            self.liArray.push({
                                cells: [
                                    { value: "Total " + response.results[i].name, bold: true, italic: true },
                                    { value: "" },
                                    { value: totalLi, bold: true, borderTop: { color: "#000000", size: 1 } }
                                ]
                            });
                        }
                        self.liArray.push({
                            cells: [
                                { value: "TOTAL LIABILITIES", bold: true, color: "#000000", fontSize: 20 },
                                { value: "" },
                                { value: totalLi, bold: true, color: "#000000", fontSize: 20 }
                            ]
                        });
                        self.liArray.push({
                            cells: [
                                { value: "", colSpan: 3 },
                            ]
                        });
                    }
                });

                //Equity
                this.equityDS.filter({ field:"issued_date", value:kendo.toString(as_of, "yyyy-MM-dd") });
                var unReadEquity = true;
                this.equityDS.bind("requestEnd", function(e){
                    if(e.type=="read" && unReadEquity){
                        unReadEquity = false;
                        var response = e.response.totalAmount;
                        var total = self.get("totalLiabilityEquity");
                        total += response;
                        self.set("totalLiabilityEquity", total);
                        self.set("totalEquity", kendo.toString(response, "c", banhji.locale));
                        //export Excel
                        var response = e.response;
                        self.eqArray = [];
                        self.eqArray.push({
                            cells: [
                                { value: "EQUITY", bold: true, fontSize: 16 },
                                { value: "" },
                                { value: "" }
                            ]
                        });
                        for (var i = 0; i < response.results.length; i++){
                            self.eqArray.push({
                                cells: [
                                    { value: response.results[i].name, bold: true, italic: true },
                                    { value: "" },
                                    { value: "" }
                                ]
                            });
                            for(var j = 0; j < response.results[i].typeLine.length; j++){
                                self.eqArray.push({
                                    cells: [
                                        { value: response.results[i].typeLine[j].type, bold: true },
                                        { value: "" },
                                        { value: "" }
                                    ]
                                });
                                for(var k = 0; k < response.results[i].typeLine[j].line.length; k++){
                                    self.eqArray.push({
                                        cells: [
                                            { value: response.results[i].typeLine[j].line[k].number + " " + response.results[i].typeLine[j].line[k].name },
                                            { value: response.results[i].typeLine[j].line[k].amount },
                                            { value: "" }
                                        ]
                                    });
                                    totalBlock += kendo.parseFloat(response.results[i].typeLine[j].line[k].amount);
                                    totalEq += kendo.parseFloat(response.results[i].typeLine[j].line[k].amount);
                                    totalAll += kendo.parseFloat(response.results[i].typeLine[j].line[k].amount);
                                }
                                self.eqArray.push({
                                    cells: [
                                        { value: "Total " + response.results[i].typeLine[j].type, bold: true },
                                        { value: totalBlock, bold: true, borderTop: { color: "#000000", size: 1 } },
                                        { value: "" }
                                    ]
                                });
                                totalBlock = 0;
                                self.eqArray.push({
                                    cells: [
                                        { value: "" },
                                        { value: "" },
                                        { value: "" }
                                    ]
                                });
                            }
                            self.eqArray.push({
                                cells: [
                                    { value: "Total " + response.results[i].name, bold: true, italic: true },
                                    { value: "" },
                                    { value: totalEq, bold: true, borderTop: { color: "#000000", size: 1 } }
                                ]
                            });
                        }
                        self.eqArray.push({
                            cells: [
                                { value: "TOTAL LIABILITIES & EQUITY", bold: true, color: "#ffffff", background: "#1E4E78", fontSize: 20 },
                                { value: "", background: "#1E4E78" },
                                { value: totalAll, bold: true, color: "#ffffff", background: "#1E4E78", fontSize: 20 }
                            ]
                        });
                    }
                });
            }
        },
        goToGeneralLegder   : function(e){
            var data = e.data, ids = this.get("crossAccounts");

            ids.push(data.id);

            banhji.router.navigate('/general_ledger');
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var row = this.exArray.concat(this.liArray.concat(this.eqArray));
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Statement Financial Position",
                  rows: row
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "StatementFinancialPosition.xlsx"});
        }
    });
    // ACCOUNTING SETTINGS
    banhji.accountingSetting =  kendo.observable({
        lang                : langVM,
        contactTypeDS       : banhji.source.contactTypeDS,
        patternDS           : dataStore(apiUrl + "contacts"),
        txnTemplateDS       : dataStore(apiUrl + "transaction_templates"),
        prefixDS            : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "prefixes",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                create  : {
                    url: apiUrl + "prefixes",
                    type: "POST",
                    headers: banhji.header,
                    dataType: 'json'
                },
                update  : {
                    url: apiUrl + "prefixes",
                    type: "PUT",
                    headers: banhji.header,
                    dataType: 'json'
                },
                destroy     : {
                    url: apiUrl + "prefixes",
                    type: "DELETE",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter: { field:"type", operator:"where_not_in", value:["Electricity_Invoice", "Water_Invoice", "Journal", "Cash_Advance", "Reimbursement","Direct_Expense", "Advance_Settlement"] },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        contactTypeName     : "",
        contactTypeAbbr     : "",
        contactTypeCompany  : 0,
        paymentMethodName   : "",
        paymentTermName     : "",
        paymentTermNetDue   : "",
        paymentTermPeriod   : "",
        paymentTermPercentage   : "",
        pageLoad            : function() {
            this.txnTemplateDS.filter({ field: "moduls", value : "customer_mg" });
        },
        addContactType      : function(){
            var name = this.get("contactTypeName");

            if(name!==""){
                this.contactTypeDS.add({
                    parent_id   : 1,
                    name        : name,
                    abbr        : this.get("contactTypeAbbr"),
                    description : "",
                    is_company  : this.get("contactTypeCompany"),
                    is_system   : 0
                });

                this.contactTypeDS.sync();
                this.contactTypeDS.bind("requestEnd", function(e){
                    if(e.type==="create" || e.type==="update"){
                        var response = e.response.results[0];
                        self.addPattern(response.id);
                        banhji.source.loadContactTypes();
                    }
                });

                this.set("contactTypeName", "");
                this.set("contactTypeAbbr", "");
                this.set("contactTypeCompany", 0);
            }
        },
        addPattern          : function(id){
            this.patternDS.insert(0, {
                "contact_type_id"       : id,
                "number"                : "",
                "locale"                : banhji.locale,
                "is_pattern"            : 1,
                "status"                : 1
            });
            this.patternDS.sync();
        },
        addPaymentMethod        : function(){
            var name = this.get("paymentMethodName");

            if(name!==""){
                this.paymentMethodDS.add({
                    name        : name,
                    description : "",
                    is_system   : 0
                });

                this.paymentMethodDS.sync();

                this.set("paymentMethodName", "");
            }
        },
        addPaymentTerm      : function(){
            var name = this.get("paymentTermName");

            if(name!==""){
                this.paymentTermDS.add({
                    name                : name,
                    net_due             : this.get("paymentTermNetDue"),
                    discount_period     : this.get("paymentTermPeriod"),
                    discount_percentage : this.get("paymentTermPercentage"),
                    is_system           : 0
                });

                this.paymentTermDS.sync();

                this.set("paymentTermName", "");
                this.set("paymentTermNetDue", "");
                this.set("paymentTermPeriod", "");
                this.set("paymentTermPercentage", "");
            }
        },
        goPattern   : function(e){
            var data = e.data;

            if(kendo.parseInt(data.contact_id)>0){
                banhji.router.navigate('/customer/'+data.contact_id+'/1');
            }else{
                banhji.router.navigate('/customer');
                banhji.customer.set("contact_type_id",data.id);
            }
        },
        deleteForm      : function(e){
            var data = e.data;
            if(confirm("Do you want to delete it?") == true) {
                this.txnTemplateDS.remove(data);
                this.txnTemplateDS.sync();
            }
        },
        goInvoiceCustom : function(){

            banhji.invoiceCustom.set("selectTypeList", banhji.source.customerFormList);
            banhji.invoiceCustom.set("formShow", banhji.view.invoiceForm10);
            banhji.router.navigate('/invoice_custom');
        }
    });
    banhji.addAccountingprefix =  kendo.observable({
        lang                : langVM,
        selectTypeList      : banhji.source.typeList,
        Type                : "Invoice",
        dataSource          : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "prefixes",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                create  : {
                    url: apiUrl + "prefixes",
                    type: "POST",
                    headers: banhji.header,
                    dataType: 'json'
                },
                update  : {
                    url: apiUrl + "prefixes",
                    type: "PUT",
                    headers: banhji.header,
                    dataType: 'json'
                },
                destroy     : {
                    url: apiUrl + "prefixes",
                    type: "DELETE",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter: { field:"type", operator:"where_not_in", value:["Electricity_Invoice", "Water_Invoice"] },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                this.cancel;
            }
        },
        loadObj             : function(id){
            var self = this;
            this.dataSource.query({
                filter: { field:"id", value: id },
                page: 1,
                take: 100
            }).then(function(e){
                var view = self.dataSource.view();
                self.set("obj", view[0]);

            });
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });
            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");
            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                banhji.accountingSetting.prefixDS.fetch();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    //window.history.back();
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel              : function(){
            this.dataSource.cancelChanges();
            window.history.back();
        }
    });
    banhji.chartOfAccount =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "accounts"),
        as_of               : new Date(),
        currentSort         : "asc",
        exArray             : [{ cells: [{ value: "Number", background: "#496cad" },{ value: "Name", background: "#496cad" },{ value: "Type", background: "#496cad" }]}],
        pageLoad            : function(){
            var self = this;
            this.dataSource.query({
                filter: [],
                sort: [
                    { field:"account_type_id", dir:"asc" },
                    { field:"number", dir:"asc" }
                ]
            }).then(function(e){
                for (var i = 0; i < self.dataSource.data().length; i++){
                  self.exArray.push({
                    cells: [
                      { value: self.dataSource.data()[i].number },
                      { value: self.dataSource.data()[i].name },
                      { value: self.dataSource.data()[i].account_type_name  }
                    ]
                  });
                }
            });
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Chart Of Account",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "ChartOfAccount.xlsx"});
        },
        sort                : function(e){
            var col = "",
            target = e.currentTarget.innerText;

            if(this.get("currentSort")=="asc"){
                this.set("currentSort", "desc");
            }else{
                this.set("currentSort", "asc");
            }

            switch(target) {
                case "TYPE":
                    col = "type";
                    break;
                case "DATE":
                    col = "issued_date";
                    break;
                case "ACCOUNT":
                    col = "account_id";
                    break;
                default:
                    //default code block
            }

            this.dataSource.sort({ field:col, dir:this.get("currentSort") });
        }
    });
    banhji.segment =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "segments"),
        itemDS              : dataStore(apiUrl + "segments/item"),
        deleteDS            : dataStore(apiUrl + "segments/item"),
        itemDeleteDS        : dataStore(apiUrl + "transactions"),
        statusList          : banhji.source.statusList,
        obj                 : null,
        item                : null,
        objName             : "",
        windowVisible       : false,
        windowItemVisible   : false,
        pageLoad            : function() {
        },
        addObj              : function(){
            this.dataSource.add({
                code_length         : "",
                name                : "",
                is_system           : 0
            });
            var data = this.dataSource.data();
            var obj = data[data.length-1];
            this.set("obj", obj);
        },
        openWindow          : function(){
            this.addObj();

            this.set("windowVisible", true);
        },
        closeWindow         : function(){
            this.dataSource.cancelChanges();

            this.set("windowVisible", false);
        },
        save                : function(){
            var self = this;
            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if( e.type == "create" || e.type == "update"){
                    self.set("windowVisible", false);
                }
            });
        },
        edit                : function(e){
            var data = e.data;
            this.set("obj", data);

            this.set("windowVisible", true);
        },
        delete              : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var self = this, data = e.data;

                this.deleteDS.query({
                    filter: { field:"segment_id", value:data.id},
                    page:1,
                    pageSize:1
                }).then(function(){
                    var view = self.deleteDS.view();

                    if(view.length>0){
                        alert("Sorry, this item can not be deleted.");
                    }else{
                        self.dataSource.remove(data);
                        self.dataSource.sync();
                    }
                });
            }
        },
        view                : function(e){
            var data = e.data;
            this.set("objName", data.name);
            this.itemDS.filter({ field: "segment_id", value: data.id});
        },
        openWindowItem      : function(){
            this.set("windowItemVisible", true);
        },
        closeWindowItem     : function(){
            this.itemDS.cancelChanges();

            this.set("windowItemVisible", false);
        },
        loadItem            : function(e){
            var d = e.data;

            this.set("selectedType", true);
            this.set("tax_type_id", d.id);
            this.set("selectedTypeName", d.name);

            this.itemDS.query({
                filter: { field:"segment_id", value: d.id },
                page: 1,
                pageSize: 100
            });
        },
        addItem             : function(e){
            var data = e.data;

            this.itemDS.add({
                segment_id      : data.id,
                code            : "",
                is_system       : 0,
                segment         : [{name: ""}]
            });
            var data = this.itemDS.data();
            var obj = data[data.length-1];
            this.set("item", obj);
            this.openWindowItem();
        },
        saveItem            : function(){
            var self = this;
            this.itemDS.sync();
            this.itemDS.bind("requestEnd", function(e){
                if( e.type == "create" || e.type == "update"){
                    banhji.source.loadSegmentItems();
                    self.set("windowItemVisible", false);
                }
            });
        },
        editItem            : function(e){
            var data = e.data;
            this.set("item", data);

            this.set("windowItemVisible", true);
        },
        deleteItem          : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var self = this, data = e.data;

                this.itemDeleteDS.query({
                    filter: { field:"segments", operator:"like", value:data.id},
                    page:1,
                    pageSize:1
                }).then(function(){
                    var view = self.itemDeleteDS.view();

                    if(view.length>0){
                        alert("Sorry, this item can not be deleted.");
                    }else{
                        self.itemDS.remove(data);
                        self.itemDS.sync();
                        self.itemDS.bind("requestEnd", function(e){
                            if(e.type=="destroy"){
                                banhji.source.loadSegmentItems();
                            }
                        });
                    }
                });
            }
        }
    });
    banhji.segmentCenter = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "accounts"),
        accountTypeDS       : banhji.source.accountTypeDS,
        summaryDS           : dataStore(apiUrl + 'centers/accounting_summary'),
        transactionDS       : dataStore(apiUrl + 'centers/accounting_txn'),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        sortList            : banhji.source.sortList,
        sorter              : "all",
        sdate               : "",
        edate               : "",
        obj                 : null,
        searchText          : "",
        balance             : 0,
        totalTxn            : 0,
        subName             : "",
        typeName            : "",
        nature              : "",
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            this.search();

            if(id){
                this.loadObj(id);
            }
            //Refresh
            if(this.dataSource.total()>0){
                this.dataSource.fetch();
                this.loadSummary();
                this.searchTransaction();
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            if(obj!==null){
                // Check the extension of each file and abort the upload if it is not .jpg
                $.each(files, function(index, value){
                    if (value.extension.toLowerCase() === ".jpg"
                        || value.extension.toLowerCase() === ".jpeg"
                        || value.extension.toLowerCase() === ".tiff"
                        || value.extension.toLowerCase() === ".png"
                        || value.extension.toLowerCase() === ".gif"
                        || value.extension.toLowerCase() === ".pdf"){

                        var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                        self.attachmentDS.add({
                            user_id         : self.get("user_id"),
                            account_id      : obj.id,
                            type            : "Account",
                            name            : value.name,
                            description     : "",
                            key             : key,
                            url             : banhji.s3 + key,
                            size            : value.size,
                            created_at      : new Date(),

                            file            : value.rawFile
                        });
                    }else{
                        alert("This type of file is not allowed to attach.");
                    }
                });
            }
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
                this.attachmentDS.sync();
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        loadObj             : function(id){
            var self = this;

            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var data = e.response.results;

                    $.each(data, function(index, value){
                        if(value.id==id){
                            if(value.sub_of_id>0){
                                self.set("subName", value.name);
                            }else{
                                self.set("subName", "");
                            }

                            self.set("obj", value);
                            self.loadSummary();
                            self.searchTransaction();

                            return false;
                        }
                    });

                    //Sub Account
                    var obj = self.get("obj");
                    if(obj.sub_of_id>0){
                        $.each(data, function(index, value){
                            if(value.id==obj.sub_of_id){
                                self.set("subName", value.name);

                                return false;
                            }
                        });
                    }else{
                        self.set("subName", "");
                    }

                    var type = self.accountTypeDS.get(obj.account_type_id);
                    self.set("typeName", type.name);
                    self.set("nature", type.nature);
                }
            });
        },
        loadSummary         : function(){
            var self = this, obj = this.get("obj");

            this.summaryDS.query({
                filter: [
                    { field:"account_id", value: obj.id }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.summaryDS.view();

                if(view.length>0){
                    self.set("balance", kendo.toString(view[0].balance, view[0].locale=="km-KH"?"c0":"c", view[0].locale));
                    self.set("totalTxn", self.summaryDS.total());
                }else{
                    self.set("balance", 0);
                    self.set("totalTxn", 0);
                }
            });
        },
        selectedRow         : function(e){
            var data = e.data,
            sub = this.dataSource.get(data.sub_of_id),
            type = this.accountTypeDS.get(data.account_type_id);

            if(sub && data.sub_of_id>0){
                this.set("subName", sub.name);
            }else{
                this.set("subName", "");
            }

            this.set("typeName", type.name);
            this.set("nature", type.nature);

            this.set("obj", data);
            this.loadSummary();
            this.searchTransaction();

            this.attachmentDS.query({
                filter:{ field:"account_id", value: data.id },
                page: 1,
                pageSize:10
            });
        },
        enterSearch         : function(e){
            e.preventDefault();

            this.search();
        },
        search              : function(){
            var self = this,
            para = [],
            account_type_id = this.get("account_type_id"),
            txtSearch = this.get("searchText");

            if(txtSearch){
                para.push(
                    { field: "number", operator: "like", value: txtSearch },
                    { field: "name", operator: "or_like", value: txtSearch }
                );
            }

            if(account_type_id){
                para.push({ field:"account_type_id", value:account_type_id });
            }

            para.push({ field:"status", value:1 });

            this.dataSource.query({
                filter:para,
                sort:[
                    { field:"account_type_id", dir:"asc" },
                    { field:"number", dir:"asc" }
                ],
                page:1,
                pageSize:100
            });

            //Clear search filters
            this.set("searchText", "");
            this.set("account_type_id", "");
        },
        searchTransaction   : function(){
            var self = this,
                para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate");

            if(obj.id){
                para.push({ field:"account_id", value: obj.id });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator: "where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <=", operator: "where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                para.push({ field:"issued_date", operator: "where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                end.setDate(end.getDate()+1);
                para.push({ field:"issued_date <=", operator: "where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{}

            this.transactionDS.query({
                filter: para,
                page: 1,
                pageSize: 10
            });
        },
        showActive          : function(){
            this.dataSource.filter({ field:"status", value: 1 });
        },
        showInactive        : function(){
            this.dataSource.filter({ field:"status", value: 0 });
        },
        loadTransaction     : function(){
            var self = this,
                para = [],
                obj = this.get("obj"),
                today = new Date(),
                start = kendo.toString(banhji.source.getFiscalDate(), "yyyy-MM-dd"),
                end = kendo.toString(today, "yyyy-MM-dd");

            if(obj.id){
                para.push({ field:"account_id", value: obj.id });
            }

            para.push({ field:"issued_date >=", operator:"where_related_transaction", value: start });
            para.push({ field:"issued_date <=", operator:"where_related_transaction", value: end });

            this.transactionDS.query({
                filter: para,
                page: 1,
                pageSize: 100
            });
        },
        goEdit              : function(){
            var obj = this.get("obj");
            banhji.router.navigate('/account/'+obj.id);
        },
        checkIsSub          : function(sub_of_id){
            var isSub = false, data = this.dataSource.get(sub_of_id);

            if(data){
                if(data.sub_of_id>0){
                    isSub = true;
                }
            }

            return isSub;
        }
    });
    banhji.tax =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "tax_types"),
        itemDS              : dataStore(apiUrl + "tax_items"),
        deleteDS            : dataStore(apiUrl + "tax_items"),
        itemDeleteDS        : dataStore(apiUrl + "item_lines"),
        accountDS           : banhji.source.accountList,
        typeList            : [
            { id:"Invoice Based", name: "Invoice Based" },
            { id:"Payment Based", name: "Payment Based" },
            { id:"No Tax", name: "No Tax" }
        ],
        obj                 : null,
        item                : null,
        taxName             : "",
        windowVisible       : false,
        windowItemVisible   : false,
        pageLoad            : function() {
        },
        addType             : function(){
            this.dataSource.add({
                number              : "",
                name                : "",
                agency              : "",
                tax_system          : "Invoice Based",
                end_date            : new Date(),
                submission_date     : new Date(),
                is_system           : 0
            });
            var data = this.dataSource.data();
            var obj = data[data.length-1];
            this.set("obj", obj);
        },
        openWindow          : function(){
            this.addType();

            this.set("windowVisible", true);
        },
        closeWindow         : function(){
            this.dataSource.cancelChanges();

            this.set("windowVisible", false);
        },
        save                : function(){
            var self = this;
            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if( e.type == "create" || e.type == "update"){
                    self.set("windowVisible", false);
                }
            });
        },
        edit                : function(e){
            var data = e.data;
            this.set("obj", data);

            this.set("windowVisible", true);
        },
        delete              : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var self = this, data = e.data;

                this.deleteDS.query({
                    filter: { field:"tax_type_id", value:data.id},
                    page:1,
                    pageSize:1
                }).then(function(){
                    var view = self.deleteDS.view();

                    if(view.length>0){
                        this.dataSource.remove(data);
                        this.dataSource.sync();
                    }else{
                        alert("Sorry, this item can not be deleted.");
                    }
                });
            }
        },
        view                : function(e){
            var data = e.data;
            this.set("taxName", data.name);
            this.itemDS.filter({ field: "tax_type_id", value: data.id});
        },
        openWindowItem      : function(){
            this.set("windowItemVisible", true);
        },
        closeWindowItem     : function(){
            this.itemDS.cancelChanges();

            this.set("windowItemVisible", false);
        },
        loadItem            : function(e){
            var d = e.data;

            this.set("selectedType", true);
            this.set("tax_type_id", d.id);
            this.set("selectedTypeName", d.name);

            this.itemDS.query({
                filter: { field:"tax_type_id", value: d.id },
                page: 1,
                pageSize: 100
            });
        },
        addItem             : function(e){
            var data = e.data;

            this.itemDS.add({
                tax_type_id         : data.id,
                account_id          : 0,
                name                : "",
                description         : "",
                rate                : "",
                is_system           : "",
                account             : [{name: ""}]
            });
            var data = this.itemDS.data();
            var obj = data[data.length-1];
            this.set("item", obj);
            this.openWindowItem();
        },
        saveItem                : function(){
            var self = this;
            this.itemDS.sync();
            this.itemDS.bind("requestEnd", function(e){
                if( e.type == "create" || e.type == "update"){
                    banhji.source.loadTaxes();
                    self.set("windowItemVisible", false);
                }
            });
        },
        editItem                : function(e){
            var data = e.data;
            this.set("item", data);

            this.set("windowItemVisible", true);
        },
        deleteItem              : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var self = this, data = e.data;

                this.deleteDS.query({
                    filter: { field:"tax_item_id", value:data.id},
                    page:1,
                    pageSize:1
                }).then(function(){
                    var view = self.deleteDS.view();

                    if(view.length>0){
                        this.itemDS.remove(data);
                        this.itemDS.sync();
                        this.itemDS.bind("requestEnd", function(e){
                            if( e.type == "delete"){
                                self.set("windowItemVisible", false);
                                banhji.source.loadTaxes();
                            }
                        });
                    }else{
                        alert("Sorry, this item can not be deleted.");
                    }
                });
            }
        }
    });
    banhji.currencyRate =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "currencies/rate"),
        currencyDS          : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        currencyAllDS       : new kendo.data.DataSource({
            data: banhji.source.currencyList
        }),
        obj                 : null,
        isEdit              : false,
        baseCode            : banhji.institute.currency.country +' - '+ banhji.institute.currency.code,
        reportCode          : banhji.institute.reportCurrency.country +' - '+ banhji.institute.reportCurrency.code,
        windowVisible       : false,
        user_id             : banhji.source.user_id,
        pageLoad            : function(){
        },
        getCode             : function(id){
            var raw = banhji.source.currencyDS.get(id);
            if(raw){
                return raw.code;
            }else{
                return "";
            }
        },
        getCountry             : function(id){
            var raw = banhji.source.currencyDS.get(id);
            if(raw){
                return raw.country;
            }else{
                return "";
            }
        },
        openWindow          : function(){
            this.addEmpty();

            this.set("windowVisible", true);
        },
        closeWindow         : function(){
            this.dataSource.cancelChanges();

            this.set("windowVisible", false);
        },
        addEmpty            : function(){
            this.dataSource.insert(0, {
                user_id     : this.get("user_id"),
                currency_id : 0,
                rate        : 1,
                locale      : "",
                source      : "",
                method      : "Manual",
                date        : new Date(),

                currency    : []
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
        },
        save                : function(){
            var obj = this.get("obj"),
            currency = this.currencyAllDS.get(obj.currency_id);
            obj.set("locale", currency.locale);

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.type==="create" || e.type==="update"){
                    banhji.source.loadCurrencies();
                    banhji.source.loadRates();
                }
            });

            this.set("windowVisible", false);
        },
        edit                : function(e){
            var data = e.data;

            this.set("obj", data);

            this.set("windowVisible", true);
        },
        cancel              : function(){
            banhji.userManagement.removeMultiTask("currency_rate");
        }
    });


    banhji.taxCenter = kendo.observable({
        lang                : langVM,
        transactionDS       : dataStore(apiUrl + 'transactions'),
        noteDS              : dataStore(apiUrl + 'notes'),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        txnDS               : dataStore(apiUrl + "transactions"),
        measurementDS       : dataStore(apiUrl + "measurements"),
        currencyDS          : new kendo.data.DataSource({
            data: banhji.source.currencyList,
            filter: { field:"status", value: 1 }
        }),
        contactTypeDS       : new kendo.data.DataSource({
            data: banhji.source.contactTypeList,
            filter: { field:"parent_id", value: 1 }//Customer
        }),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "all",
        sdate               : "",
        edate               : "",
        obj                 : null,
        note                : "",
        searchText          : "",
        contact_type_id     : null,
        currency_id         : 0,
        balance             : 0,
        deposit             : 0,
        outInvoice          : 0,
        overInvoice         : 0,
        currencyCode        : "",
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.loadObj(id);
            }

            //Refresh
            if(this.contactDS.total()>0){
                this.contactDS.fetch();
                this.searchTransaction();
                this.loadSummary();
            }
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        setCurrencyCode     : function(){
            var code = "", obj = this.get("obj");

            $.each(banhji.source.currencyDS.data(), function(index, value){
                if(value.locale == obj.locale){
                    code = value.code;

                    return false;
                }
            });

            this.set("currencyCode", code);
        },
        loadObj             : function(id){
            var self = this;

            this.contactDS.query({
                filter: { field:"id", value:id},
                page:1,
                pageSize:100
            }).then(function(){
                var view = self.contactDS.view();

                if(view.length>0){
                    self.set("obj", view[0]);
                    self.loadData();
                }
            });
        },
        loadData            : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.searchTransaction();
                this.loadSummary();
                this.setCurrencyCode();

                this.attachmentDS.query({
                    filter:{ field:"contact_id", value: obj.id },
                    page: 1,
                    pageSize:10
                });
                this.noteDS.query({
                    filter: { field:"contact_id", value: obj.id },
                    sort: { field:"noted_date", dir:"desc" },
                    page: 1,
                    pageSize: 10
                });
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            if(obj!==null){
                // Check the extension of each file and abort the upload if it is not .jpg
                $.each(files, function(index, value){
                    if (value.extension.toLowerCase() === ".jpg"
                        || value.extension.toLowerCase() === ".jpeg"
                        || value.extension.toLowerCase() === ".tiff"
                        || value.extension.toLowerCase() === ".png"
                        || value.extension.toLowerCase() === ".gif"
                        || value.extension.toLowerCase() === ".pdf"){

                        var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                        self.attachmentDS.add({
                            user_id         : self.get("user_id"),
                            contact_id      : obj.id,
                            type            : "Contact",
                            name            : value.name,
                            description     : "",
                            key             : key,
                            url             : banhji.s3 + key,
                            size            : value.size,
                            created_at      : new Date(),

                            file            : value.rawFile
                        });
                    }else{
                        alert("This type of file is not allowed to attach.");
                    }
                });
            }
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
                this.attachmentDS.sync();
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Summary
        loadContact         : function(id){
            var self = this;

            this.contactDS.query({
                filter:[
                    { field:"id", value:id }
                ],
                page: 1,
                pageSize: 50
            }).then(function(e) {
                var view = self.contactDS.data();

                if(view.length>0){
                    self.set("obj", view[0]);
                    self.loadData();
                }
            });
        },
        loadSummary         : function(){
            var self = this, obj = this.get("obj");

            if(obj!==null){
                this.txnDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", operator:"where_in", value: ["Customer_Deposit", "Commercial_Invoice", "Vat_Invoice", "Invoice"] },
                        { field:"status", operator:"where_in", value: [0,2] }
                    ],
                    sort: { field: "issued_date", dir: "desc" },
                    page: 1,
                    pageSize: 1000
                }).then(function(){
                    var view = self.txnDS.view(),
                    deposit = 0, open = 0, over = 0, balance = 0, today = new Date();

                    $.each(view, function(index, value){
                        if(value.type=="Customer_Deposit"){
                            deposit += kendo.parseFloat(value.amount);
                        }else{
                            balance += kendo.parseFloat(value.amount) - (kendo.parseFloat(value.deposit) + value.amount_paid);
                            open++;

                            if(new Date(value.due_date)<today){
                                over++;
                            }
                        }
                    });

                    self.set("deposit", kendo.toString(deposit, obj.locale=="km-KH"?"c0":"c", obj.locale));
                    self.set("outInvoice", kendo.toString(open, "n0"));
                    self.set("overInvoice", kendo.toString(over, "n0"));
                    self.set("balance", kendo.toString(balance, obj.locale=="km-KH"?"c0":"c", obj.locale));
                });
            }
        },
        loadBalance         : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.transactionDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", operator:"where_in", value:["Commercial_Invoice", "Vat_Invoice", "Invoice"] },
                        { field:"status", operator:"where_in", value: [0,2] }
                    ],
                    sort: [
                        { field: "issued_date", dir: "desc" },
                        { field: "id", dir: "desc" }
                    ],
                    page: 1,
                    pageSize: 10
                });
            }
        },
        loadDeposit         : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.transactionDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", value:"Customer_Deposit" }
                    ],
                    sort: [
                        { field: "issued_date", dir: "desc" },
                        { field: "id", dir: "desc" }
                    ],
                    page: 1,
                    pageSize: 10
                });
            }
        },
        loadOverInvoice     : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.transactionDS.query({
                    filter: [
                        { field:"contact_id", value: obj.id },
                        { field:"type", operator:"where_in", value: ["Commercial_Invoice", "Vat_Invoice", "Invoice"] },
                        { field:"status", operator:"where_in", value: [0,2] },
                        { field:"due_date <", value: kendo.toString(new Date(), "yyyy-MM-dd") }
                    ],
                    sort: [
                        { field: "issued_date", dir: "desc" },
                        { field: "id", dir: "desc" }
                    ],
                    page: 1,
                    pageSize: 10
                });
            }
        },
        selectedRow         : function(e){
            var data = e.data;

            this.set("obj", data);
            this.loadData();
        },
        //Search
        enterSearch         : function(e){
            e.preventDefault();

            this.search();
        },
        search              : function(){
            var self = this,
            para = [],
            searchText = this.get("searchText"),
            contact_type_id = this.get("contact_type_id");

            if(searchText){
                var textParts = searchText.replace(/([a-z]+)/i, "$1 ").split(/[^0-9a-z]+/ig);

                para.push(
                    { field: "abbr", value: textParts[0] },
                    { field: "number", value: textParts[1] },
                    { field: "name", operator: "or_like", value: searchText }
                );
            }

            if(contact_type_id){
                para.push({ field: "contact_type_id", value: contact_type_id });
            }else{
                para.push({ field: "parent_id", operator:"where_related_contact_type", value: 1 });
            }

            this.contactDS.filter(para);

            //Clear search filters
            self.set("searchText", "");
            self.set("contact_type_id", 0);
        },
        searchTransaction   : function(){
            var self = this,
                start = this.get("sdate"),
                end = this.get("edate"),
                para = [], obj = this.get("obj");

            if(obj!==null){
                para.push({ field:"contact_id", value: obj.id });

                //Dates
                if(start && end){
                    start = new Date(start);
                    end = new Date(end);
                    end.setDate(end.getDate()+1);

                    para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                    para.push({ field:"issued_date <=", value: kendo.toString(end, "yyyy-MM-dd") });
                }else if(start){
                    start = new Date(start);
                    para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
                }else if(end){
                    end = new Date(end);
                    end.setDate(end.getDate()+1);
                    para.push({ field:"issued_date <=", value: kendo.toString(end, "yyyy-MM-dd") });
                }else{}

                this.transactionDS.query({
                    filter: para,
                    sort: { field: "issued_date", dir: "desc" },
                    page: 1,
                    pageSize: 10
                });
            }
        },
        //Links
        goEdit              : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/customer/'+obj.id);
            }
        },
        goReference         : function(e){
            var self = this, data = e.data;

            this.txnDS.query({
                filter:{ field:"id", value:data.reference_id}
            }).then(function(){
                var view = self.txnDS.view();

                banhji.router.navigate('/' + view[0].type.toLowerCase() +'/'+ data.reference_id);
            });
        },
        goQuote             : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/quote');
                banhji.quote.setContact(obj);
            }
        },
        goDeposit           : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/customer_deposit');
                banhji.customerDeposit.setContact(obj);
            }
        },
        goSaleOrder         : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/sale_order');
                banhji.saleOrder.setContact(obj);
            }
        },
        goCashSale          : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/cash_sale');
                banhji.cashSale.setContact(obj);
            }
        },
        goInvoice           : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/invoice');
                banhji.invoice.setContact(obj);
            }
        },
        goGDN               : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/gdn');
                banhji.gdn.setContact(obj);
            }
        },
        goSaleReturn        : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/sale_return');
                banhji.saleReturn.setContact(obj);
            }
        },
        goStatement         : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/statement');
                banhji.statement.loadContact(obj.id);
            }
        },
        goCashRefound       : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/cash_refund');
                banhji.cashRefund.setContact(obj);
            }
        },
        goCashReceipt       : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/cash_receipt');
                banhji.cashReceipt.loadContact(obj.id);
            }
        },
        payInvoice          : function(e){
            var data = e.data;

            if(obj!==null){
                banhji.router.navigate('/cash_receipt');
                banhji.cashReceipt.loadInvoice(data.id);
            }
        },
        //Note
        saveNoteEnter       : function(e){
            e.preventDefault();
            this.saveNote();
        },
        saveNote            : function(){
            var obj = this.get("obj");

            if(obj!==null && this.get("note")!==""){
                this.noteDS.insert(0, {
                    contact_id  : obj.id,
                    note        : this.get("note"),
                    noted_date  : new Date(),
                    created_by  : this.get("user_id"),

                    creator     : ""
                });

                this.noteDS.sync();
                this.set("note", "");
            }else{
                alert("Please select a customer and Memo is required");
            }
        }
    });





    /*************************************************
    *   REPORTS MVVM                                 *
    *************************************************/
    banhji.reportDashboard = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl+"accounting_modules/ratio_analysis"),
        quickRatio          : 0,
        currentRatio        : 0,
        cashRatio           : 0,
        wcSale              : 0,
        grossProfitMargin   : 0,
        profitMargin        : 0,
        returnOnAsset       : 0,
        roce                : 0,
        arCollectionPeriod  : 0,
        apPaymentPeriod     : 0,
        inventoryTurnOver   : 0,
        ccc                 : 0,
        pageLoad            : function(){
            var self = this;

            this.dataSource.query({
                filter: [],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.dataSource.view();

                self.set("quickRatio", kendo.toString(view[0].quickRatio, "n"));
                self.set("currentRatio", kendo.toString(view[0].currentRatio, "n"));
                self.set("cashRatio", kendo.toString(view[0].cashRatio, "n"));

                self.set("wcSale", kendo.toString(view[0].wcSale, "p"));
                self.set("grossProfitMargin", kendo.toString(view[0].grossProfitMargin, "p"));
                self.set("profitMargin", kendo.toString(view[0].profitMargin, "p"));
                self.set("returnOnAsset", kendo.toString(view[0].returnOnAsset, "n"));

                self.set("roce", kendo.toString(view[0].roce, "p"));
                self.set("arCollectionPeriod", kendo.toString(view[0].arCollectionPeriod, "n"));
                self.set("apPaymentPeriod", kendo.toString(view[0].apPaymentPeriod, "n"));
                self.set("inventoryTurnOver", kendo.toString(view[0].inventoryTurnOver, "n"));
                self.set("ccc", kendo.toString(view[0].ccc, "n"));
            });
        }
    });
    banhji.profitabilitySummaryJob =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "accounting_modules/profitability_summary_by_job"),
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { jobs: [] },
        company             : banhji.institute,
        displayDate         : "",
        revenue             : 0,
        expense             : 0,
        profit              : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Job
            if(obj.jobs.length>0){
                var jobs = [];
                $.each(obj.jobs, function(index, value){
                    jobs.push(value);
                });
                para.push({ field:"job_id", operator:"where_in", value:jobs });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            para.push({ field:"job_id >", value:0 });

            this.dataSource.query({
                filter:para,
                sort:{ field:"number", operator:"order_by_related_job", dir:"asc" }
            }).then(function(){
                var view = self.dataSource.view();

                var revenue = 0, expense = 0;
                $.each(view, function(index, value){
                    revenue += value.revenue;
                    expense += value.expense;
                });

                self.set("revenue", kendo.toString(revenue, "c2", banhji.locale));
                self.set("expense", kendo.toString(expense, "c2", banhji.locale));
                self.set("profit", kendo.toString(revenue-expense, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, profit =0, margin1 = 0, expense = 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 7 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Profitability Summary by Job",bold: true, fontSize: 20, textAlign: "center", colSpan: 7 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 7}
                            ]
                        });
                    };
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 7}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Job", background: "#496cad", color: "#ffffff" },
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "Revenue", background: "#496cad", color: "#ffffff" },
                            { value: "Expense", background: "#496cad", color: "#ffffff" },
                            { value: "Profit", background: "#496cad", color: "#ffffff" },
                            { value: "Margin", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        profit = response.results[i].revenue - response.results[i].expense ;
                        expense = response.results[i].expense;
                        margin1 = response.results[i].revenue /expense *100;
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].name },
                                    { value: response.results[i].type },
                                    { value: response.results[i].number },
                                    { value: response.results[i].revenue },
                                    { value: response.results[i].expense },
                                    { value: profit},
                                    { value: margin1+"%"},
                                ]
                            });
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 7 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Profitability Summary by Job",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "profitableSummarybyJob.xlsx"});
        }
    });
    banhji.profitabilityDetailJob =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "accounting_modules/profitability_detail_by_job"),
        jobDS                       : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { jobs: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        totalBalance        : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Job
            if(obj.jobs.length>0){
                var jobs = [];
                $.each(obj.jobs, function(index, value){
                    jobs.push(value);
                });
                para.push({ field:"job_id", operator:"where_in", value:jobs });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            para.push({ field:"job_id >", value:0 });

            this.dataSource.query({
                filter:para,
                sort:{ field:"number", operator:"order_by_related_job", dir:"asc" }
            });
                        this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 6}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Profitability Detail by Job",bold: true, fontSize: 20, textAlign: "center", colSpan: 6}
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 6}
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 6}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Date", background: "#496cad", color: "#ffffff" },
                            { value: "Reference No.", background: "#496cad", color: "#ffffff" },
                            { value: "Description", background: "#496cad", color: "#ffffff" },
                            { value: "Revenue", background: "#496cad", color: "#ffffff" },
                            { value: "Expense", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].type },
                                    { value: response.results[i].line[j].issued_date },
                                    { value: response.results[i].line[j].number},
                                    { value: response.results[i].line[j].description},
                                    { value: response.results[i].line[j].revenue},
                                    { value: response.results[i].line[j].expense},
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 6 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Profitability Detail by Job",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "profitabilityDeataiJob.xlsx"});
        }
    });





    /*************************************************
    *   CASH MVVM                                    *
    *************************************************/
    banhji.cashDashboard = kendo.observable({
        lang                : langVM,
        topCashDS   : dataStore(apiUrl + 'cash_modules/top_cash'),
        topAdvaDS   : dataStore(apiUrl + 'cash_modules/top_advance'),
        topExpsDS   : dataStore(apiUrl + 'cash_modules/top_expense'),
        graphDS     : banhji.index.graphDS,
        balance     : 0,
        open        : 0,
        overDue     : 0,
        totalAdvance: 0,
        cashACNumber: 0,
        ar          : 0,
        ar_open     : 0,
        ar_customer : 0
    });
    banhji.cashCenter = kendo.observable({
        lang                : langVM,
        dataStore           : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 10 },
            sort: { field:"number", dir:"asc" }
        }),
        summaryDS           : dataStore(apiUrl + 'centers/accounting_summary'),
        transactionDS       : dataStore(apiUrl + 'centers/accounting_txn'),
        accountTypeDS       : banhji.source.accountTypeDS,
        balance             : 0,
        sortList            : banhji.source.sortList,
        sorter              : "all",
        sdate               : "",
        edate               : "",
        obj                 : null,
        searchText          : null,
        totalTxn            : 0,
        sorterChanges: function(event){
            var today = new Date(),
            sdate = "",
            edate = "",
            value = event.sender.selectedIndex;

            switch(value){
                case 1:
                    banhji.cashCenter.set('sdate', today);
                    banhji.cashCenter.set('edate', today);

                    break;
                case 2:
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    banhji.cashCenter.set('sdate', new Date(today.setDate(first)));
                    banhji.cashCenter.set('edate', new Date(today.setDate(last)));

                    break;
                case 3:
                    banhji.cashCenter.set('sdate', new Date(today.getFullYear(), today.getMonth(), 1));
                    banhji.cashCenter.set('edate', new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case 4:
                    banhji.cashCenter.set('edate', new Date(today.getFullYear(), 0, 1));
                    banhji.cashCenter.set('edate', new Date(today.getFullYear(), 11, 31));

                    break;
            }
        },
        searchTransaction: function() {
            var self = this, obj = this.get("obj");
            var para = [],
                obj = this.get("obj"),
                start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"),
                end = kendo.toString(this.get("edate"), "yyyy-MM-dd");
            this.set('balance', 'Loading');
            var para = [],
                obj = this.get("obj"),
                start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"),
                end = kendo.toString(this.get("edate"), "yyyy-MM-dd");
            this.set('balance', 'Loading');
            this.summaryDS.query({
                filter: [
                    { field:"account_id", value: obj.id },
                    { field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(this.get("sdate"), 'yyyy-MM-dd') },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(this.get("edate"), 'yyyy-MM-dd') }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.summaryDS.view();

                if(view.length>0){
                    banhji.cashCenter.set("balance", kendo.toString(view[0].balance, view[0].locale=="km-KH"?"c0":"c", view[0].locale));
                }else{
                    banhji.cashCenter.set("balance", 0);
                }
            });
            this.transactionDS.query({
                filter: [
                    { field:"account_id", value: obj.id },
                    { field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(this.get("sdate"), 'yyyy-MM-dd') },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(this.get("edate"), 'yyyy-MM-dd') }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.summaryDS.view();

                if(view.length>0){
                    banhji.cashCenter.set('totalTxn', banhji.cashCenter.transactionDS.data().length);
                }else{
                    banhji.cashCenter.set('totalTxn', 0);
                }
            });
        },
        goCashTransaction: function() {
            banhji.router.navigate('/cash_transaction');
        },
        goCashReceipt: function() {
            banhji.router.navigate('/cash_receipt');
        },
        goCashPayment: function() {
            banhji.router.navigate('/cash_payment');
        },
        goCashAdvance: function() {
            banhji.router.navigate('/cash_advance');
        },
        goExpense: function() {
            banhji.router.navigate('/expense');
        },
        goExchange: function() {
            banhji.router.navigate('/currency_rate');
        },
        typeName: null,
        nature: null,
        goEdit              : function(){
            var obj = this.get("obj");
            banhji.router.navigate('/account/'+obj.id);
        },
        selectedRow : function(e) {
            this.set('obj', e.data);
            var data = e.data,

            sub = this.dataStore.get(data.sub_of_id),
            type = this.accountTypeDS.get(data.account_type_id);

            if(data.sub_of_id>0){
                this.set("subName", sub.name);
            }else{
                this.set("subName", "");
            }

            // this.set("typeName", type.name);
            this.set("nature", type.nature);

            // this.set("obj", data);
            // this.loadSummary();
            // this.searchTransaction();
            //

            var self = this, obj = this.get("obj");
            var para = [],
                obj = this.get("obj"),
                start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"),
                end = kendo.toString(this.get("edate"), "yyyy-MM-dd");
            this.set('balance', 'Loading');
            this.summaryDS.query({
                filter: [
                    { field:"account_id", value: obj.id }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.summaryDS.view();

                if(view.length>0){
                    self.set("balance", kendo.toString(view[0].balance, view[0].locale=="km-KH"?"c0":"c", view[0].locale));
                }else{
                    self.set("balance", 0);
                }
            });

            if(obj.id){
                para.push({ field:"account_id", value: obj.id });
            }

            //Dates
            if(start && end){
                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: start });
                para.push({ field:"issued_date <=", operator:"where_related_transaction", value: end });
            }else if(start){
                para.push({ field:"issued_date", operator:"where_related_transaction", value: start });
            }else if(end){
                para.push({ field:"issued_date <=", operator:"where_related_transaction", value: end });
            }else{

            }

            this.transactionDS.query({
                filter: para,
                page: 1,
                pageSize: 100
            }).then(function(){
                banhji.cashCenter.set('totalTxn', banhji.cashCenter.transactionDS.data().length);
            });
        },
        search      : function() {
            var isNumber =  /^\d+$/.test(this.get('searchText'));

            if(isNumber) {
                this.dataStore.filter([
                    {field: "number", value: this.get('searchText')},
                    {field: "account_type_id", value: 10}
                ]);
            } else {
                this.dataStore.filter([
                    {field: "name", operator: "like", value: this.get('searchText')},
                    {field: "account_type_id", value: 10}
                ]);
            }
        }
    });
    // CASH FUNCTIONS
    banhji.cashier = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        paymentByCashierDS  : dataStore(apiUrl + "transactions"),
        contactDS           : dataStore(apiUrl + "contacts"),
        invoiceDS           : dataStore(apiUrl + "transactions"),
        updateInvoiceDS     : dataStore(apiUrl + "transactions"),
        transactionDS       : dataStore(apiUrl + "transactions"),
        paymentMethodDS     : dataStore(apiUrl + "payment_methods"),
        invoiceList         : [],
        customer            : null,
        total_customer      : 0,
        total_payment       : kendo.toString(0,"c0", "km-KH"),
        //Payment
        payment_date        : new Date(),
        payment_method_id   : 1,
        account_id          : 2,
        check_no            : "",
        cashier             : banhji.source.user_id,
        discount            : 0,
        fine                : 0,
        pay_amount          : kendo.toString(0,"c0", "km-KH"),
        receive_amount      : kendo.toString(0,"c0", "km-KH"),
        remain              : kendo.toString(0,"c0", "km-KH"),
        pageLoad            : function(id){
            var self = this;

            if(id){
                this.set("invoiceList", []);

                this.invoiceDS.query({
                    filter: { field:"id", value: id },
                    page: 1,
                    pageSize: 100
                }).then(function(){
                    var view = self.invoiceDS.view(),
                    fullIdName = view[0].contact[0].number +" "+ view[0].contact[0].surname +" "+ view[0].contact[0].name;

                    if(view[0].contact[0].contact_type_id==5 && view[0].contact[0].contact_type_id==6 && view[0].contact[0].contact_type_id==7){
                        fullIdName = view[0].contact[0].number +" "+ view[0].contact[0].company;
                    }

                    self.loadInvoice(view[0].contact_id, fullIdName);
                });
            }else{
                this.loadPaymentByCashier();
            }
        },
        total               : function() {
            var sum = 0;

            $.each(this.invoiceList, function(index, value) {
                sum += kendo.parseInt(value.amount);
            });

            return kendo.toString(sum, "c0", "km-KH");
        },
        loadContact         : function(id){
            var self = this;

            this.set("invoiceList", []);

            this.contactDS.query({
                filter: { field:"id", value: id },
                page: 1,
                pageSize: 100
            }).then(function(e){
                var view = self.contactDS.view(),
                fullIdName = view[0].number +" "+ view[0].fullname;

                self.get("customer", view[0]);
                self.loadInvoice(id, fullIdName, view[0].account_id);
            });
        },
        loadPaymentByCashier: function(){
            var self = this;

            this.paymentByCashierDS.query({
                filter: [
                    { field:"user_id", value: this.get("cashier") },
                    { field:"issued_date", value: kendo.toString(new Date(), "yyyy-MM-dd") }
                ]
            }).then(function(e){
                var view = self.paymentByCashierDS.view(),
                contactIDList = {}, sum = 0, counter = 0;

                if(view.length>0){
                    $.each(view, function(index, value){
                        var contact_id = value.contact_id;

                        if(contactIDList[contact_id]===undefined){
                            contactIDList[contact_id]={"id": contact_id};
                            counter++;
                        }

                        sum += value.amount / value.rate;
                    });

                    self.set("total_customer", counter);
                    self.set("total_payment", kendo.toString(sum, "c0", banhji.institute.locale));
                }else{
                    self.set("total_customer", 0);
                    self.set("total_payment", 0);
                }
            });
        },
        loadInvoice         : function(contact_id, fullIdName, ar_id){
            var self = this;

            this.invoiceDS.query({
                filter: [
                    { field:"contact_id", value: contact_id },
                    { field:"status", operator:"where_in", value: [0,2] },
                    { field:"type", operator:"where_in", value:["Commercial_Invoice", "Vat_Invoice", "Invoice", "Electricity_Invoice", "Water_Invoice"] }
                ],
                page: 1,
                pageSize: 50
            }).then(function(e) {
                var view = self.invoiceDS.view();

                $.each(view, function(index, value){
                    var result = $.grep(self.get("invoiceList"), function(e){ return e.id == value.id; });

                    if (result.length == 0) {
                        // not found
                        var remainAmount = kendo.parseFloat(value.amount) - kendo.parseFloat(value.amount_paid);

                        self.get("invoiceList").push({
                            id              : value.id,
                            isPay           : true,
                            issued_date     : value.issued_date,
                            fullname        : fullIdName,
                            number          : value.number,
                            amount          : remainAmount,
                            pay_amount      : remainAmount,
                            rate            : value.rate,
                            locale          : value.locale,
                            contact_id      : value.contact_id,
                            ar_id           : ar_id,
                            company_id      : value.company_id
                        });
                        self.change();
                        self.autoIncreaseNo();
                    } else if (result.length == 1) {
                        // access the foo property using result[0].foo
                    } else {
                        // multiple items found
                    }
                });
            });
        },
        autoIncreaseNo      : function(){
            $(".sno").each(function(index,element){
               $(element).text(index + 1);
            });
        },
        change              : function(){
            var total = 0;
            var tpay = 0;
            $.each(this.get("invoiceList"), function(index, value){
                total += kendo.parseFloat(value.amount)/kendo.parseFloat(value.rate);
                tpay += kendo.parseFloat(value.pay_amount)/kendo.parseFloat(value.rate);
            });

            this.set("pay_amount", kendo.toString(tpay, "c0", banhji.institute.locale));

            var receive_amount = tpay + kendo.parseFloat(this.get("fine"));
            this.set("receive_amount", kendo.toString(receive_amount, "c0", banhji.institute.locale));

            var remain = (total + kendo.parseFloat(this.get("fine"))) - (tpay + kendo.parseFloat(this.get("discount")));
            this.set("remain", kendo.toString(remain, "c0", banhji.institute.locale));
        },
        remove              : function(e){
            if (confirm("Are you sure, you want to delete it?")) {
                var item = e.data,
                index = this.get("invoiceList").indexOf(item);
                this.get("invoiceList").splice(index, 1);
                this.change();
                this.autoIncreaseNo();
            }
        },
        checkPay            : function(e){
            e.preventDefault();

            var d = e.data;
            var target = e.currentTarget;

            if(target.checked){
                d.set("pay_amount", d.amount);
            }else{
                d.set("pay_amount", 0);
            }
            this.change();
        },
        transactionSync     : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                dfd.resolve(e.response.results);
            });

            return dfd;
        },
        save                : function(){
            var self = this, data = this.get("invoiceList"), idList = {};

            if(data.length>0){
                $.each(data, function(index, value){
                    if(kendo.parseFloat(value.pay_amount)>0 && value.isPay){
                        // var contact_id = value.contact_id;
                        // if(idList[contact_id]===undefined){
                        //  idList[contact_id]={"id": contact_id, "amount": value.pay_amount};
                        // }else{
                        //  if(idList[contact_id].id===contact_id){
                        //      idList[contact_id].amount += value.pay_amount;
                        //  }else{
                        //      idList[contact_id]={"id": contact_id, "amount": value.pay_amount};
                        //  }
                        // }

                        self.dataSource.add({
                            contact_id          : value.contact_id,
                            user_id             : self.get("cashier"),
                            reference_id        : value.id,
                            payment_method_id   : self.get("payment_method_id"),
                            account_id          : self.get("account_id"),
                            check_no            : self.get("check_no"),
                            type                : "Cash_Receipt",
                            amount              : value.pay_amount,
                            fine                : self.get("fine"),
                            discount            : self.get("discount"),
                            rate                : value.rate,
                            locale              : value.locale,
                            issued_date         : kendo.toString(self.get("payment_date"), "yyyy-MM-dd"),
                            payment_date        : kendo.toString(self.get("payment_date"), "yyyy-MM-dd"),
                            is_journal          : 1
                        });
                    }
                });

                this.transactionSync()
                .then(function(data){
                    //Start journal
                    //Cash on Dr
                    self.journalLineDS.add({
                        transaction_id      : data[0].id,
                        account_id          : data[0].account_id,
                        contact_id          : data[0].contact_id,
                        description         : "",
                        reference_no        : "",
                        segments            : [],
                        dr                  : obj.amount,
                        cr                  : 0,
                        rate                : data[0].rate,
                        locale              : data[0].locale
                    });

                    //A/R on Cr
                    self.journalLineDS.add({
                        transaction_id      : data[0].id,
                        account_id          : value.id,
                        contact_id          : data[0].contact_id,
                        description         : "",
                        reference_no        : "",
                        segments            : [],
                        dr                  : 0,
                        cr                  : value.amount,
                        rate                : data[0].rate,
                        locale              : data[0].locale
                    });

                    self.journalLineDS.sync();
                }).then(function(){
                    self.clear();
                    self.loadPaymentByCashier();
                });
            }
        },
        clear               : function() {
            this.set("check_no", "");
            this.set("discount", 0);
            this.set("fine", 0);
            this.set("pay_amount", kendo.toString(0,"c0", "km-KH"));
            this.set("receive_amount", kendo.toString(0,"c0", "km-KH"));
            this.set("remain", kendo.toString(0,"c0", "km-KH"));

            this.set("invoiceList", []);

            this.updateInvoiceDS.data([]);
            this.dataSource.data([]);
        }
    });
    banhji.reconcile = kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "reconciles"),
        existingDS              : dataStore(apiUrl + "reconciles"),
        prevAmountDS            : dataStore(apiUrl + "reconciles"),
        reconcileItemDS         : dataStore(apiUrl + "reconciles/item"),
        paymentDS               : dataStore(apiUrl + "payments"),
        denominationList        : [
            { 'denomination':1, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
            { 'denomination':2, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
            { 'denomination':5, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
            { 'denomination':10, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
            { 'denomination':20, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
            { 'denomination':50, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
            { 'denomination':100, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
            { 'denomination':200, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
            { 'denomination':500, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
            { 'denomination':1000, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
            { 'denomination':2000, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
            { 'denomination':5000, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
            { 'denomination':10000, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
            { 'denomination':20000, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
            { 'denomination':50000, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
            { 'denomination':100000, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' }
        ],
        reconcileItemList       : [],
        obj                     : null,
        searchDate              : new Date(),
        isEdit                  : false,
        isExisting              : false,
        cashier                 : banhji.source.user_id,
        cashier_name            : banhji.userManagement.getLogin() === null ? "" : banhji.userManagement.getLogin().username,
        pageLoad                : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadReconcile(id);
            }else{
                this.set("isEdit", false);
                this.addEmpty();
                this.loadPayment();
                this.loadPreviousAmount();

                this.checkExisting();
            }
        },
        str_date                : function(){
            var strDate = "", obj = this.get("obj");

            if(obj){
                strDate = kendo.toString(new Date(obj.reconciled_date), "dd-MM-yyyy");
            }

            return strDate;
        },
        loadReconcile           : function(id){
            var self = this, obj = this.get("obj");

            this.dataSource.query({
                filter: { field: "id" , value: id },
                page: 1,
                pageSize: 50
            }).then(function(){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
                self.reconcileItemDS.filter({ field:"reconcile_id", value: id }); });
        },
        loadPreviousAmount          : function(){
            var self = this, obj = this.get("obj");

            this.prevAmountDS.query({
                filter: [
                    { field: "cashier", value: this.get("cashier") },
                    { field: "reconciled_date <=", value: kendo.toString(new Date(), "yyyy-MM-dd") }
                ],
                page: 1,
                pageSize: 1
            }).then(function(){
                var view = self.prevAmountDS.view();

                obj.set("previous_amount", view[0].balance);
            });
        },
        loadPayment             : function(){
            var self = this, obj = this.get("obj");

            this.paymentDS.query({
                filter: [
                    { field: "cashier", value: this.get("cashier") },
                    { field:"type", operator:"where_in", value:["Commercial_Invoice", "Vat_Invoice", "Invoice"] },
                    { field: "payment_date", value: kendo.toString(new Date(), "yyyy-MM-dd") }
                ],
                aggregate: [
                    { field: "amount", aggregate: "sum" }
                ],
                page: 1,
                pageSize: 50
            }).then(function(){
                var results = self.paymentDS.aggregates().amount;

                obj.set("received_amount", results.sum);
            });
        },
        checkExisting           : function(){
            var self = this;

            this.existingDS.query({
                filter: [
                    { field: "cashier", value: this.get("cashier") },
                    { field: "reconciled_date", value: kendo.toString(new Date(), "yyyy-MM-dd") }
                ],
                page: 1,
                pageSize: 50
            }).then(function(){
                var view = self.existingDS.view();

                if(view.length>0){
                    self.set("isExisting", true);
                }else{
                    self.set("isExisting", false);
                }
            });
        },
        change                  : function(){
            var totalD = 0;
            var totalR = 0;
            var totalDT = 0;
            var totalRT = 0;

            for(var i=0; i < this.denominationList.length; i++){
                var data = this.denominationList[i];
                var dem = kendo.parseFloat(data.denomination);

                totalD += kendo.parseFloat(data.qty_usd) * dem;
                totalR += kendo.parseFloat(data.qty_khr) * dem;

                totalDT += kendo.parseFloat(data.qty_usd_transfer) * dem;
                totalRT += kendo.parseFloat(data.qty_khr_transfer) * dem;
            }

            this.set('totalD', kendo.toString(totalD, 'n0'));
            this.set('totalR', kendo.toString(totalR, 'c0'));

            this.set('totalDT', kendo.toString(totalDT, 'n0'));
            this.set('totalRT', kendo.toString(totalRT, 'c0'));
        },
        transferAll             : function(){
            $.each(this.reconcileItemDS.data(), function(index, value){
                if(value.khr_qty>0){
                    value.set("khr_transfer", value.khr_qty);
                }

                if(value.usd_qty>0){
                    value.set("usd_transfer", value.usd_qty);
                }
            });

            this.change();
        },
        change                  : function(){
            var obj = this.get("obj"),
            khr_sum = 0, usd_sum = 0, khr_transfer_sum = 0, usd_transfer_sum = 0,
            usd2khr_amount = 0, usd2khr_transfer_amount = 0;

            $.each(this.reconcileItemDS.data(), function(index, value){
                if(value.khr_qty>0){
                    var khrAmt = kendo.parseFloat(value.denomination) * kendo.parseFloat(value.khr_qty);
                    khr_sum += khrAmt;
                    value.set("khr_amount", khrAmt);
                }

                if(value.usd_qty>0){
                    var usdAmt = kendo.parseFloat(value.denomination) * kendo.parseFloat(value.usd_qty);
                    usd_sum += usdAmt;
                    value.set("usd_amount", usdAmt);
                }

                if(value.khr_transfer>0){
                    var khr_transfer_amt = kendo.parseFloat(value.denomination) * kendo.parseFloat(value.khr_transfer);
                    khr_transfer_sum += khr_transfer_amt;
                    value.set("khr_transfer_amount", khr_transfer_amt);
                }

                if(value.usd_transfer>0){
                    var usd_transfer_amt = kendo.parseFloat(value.denomination) * kendo.parseFloat(value.usd_transfer);
                    usd_transfer_sum += usd_transfer_amt;
                    value.set("usd_transfer_amount", usd_transfer_amt);
                }
            });

            //Refresh lisview
            var listView = $("#lvReconcileItem").data("kendoListView");
            listView.refresh();

            //Total Cash1
            obj.set("total_cash1", kendo.parseFloat(obj.received_amount) + kendo.parseFloat(obj.previous_amount));

            //Actual cash
            obj.set("usd_amount", usd_sum);
            usd2khr_amount = obj.rate * usd_sum;
            obj.set("usd2khr_amount", usd2khr_amount);

            obj.set("khr_amount", khr_sum);

            //Total Cash2
            obj.set("total_cash2", kendo.parseFloat(obj.khr_amount) + kendo.parseFloat(obj.usd2khr_amount));

            //Reconcile
            obj.set("reconciled_amount", kendo.parseFloat(obj.total_cash1) - kendo.parseFloat(obj.total_cash2));

            //Transer
            obj.set("transfer_usd", usd_transfer_sum);
            usd2khr_transfer_amount = kendo.parseFloat(obj.rate) * kendo.parseFloat(usd_transfer_sum);
            obj.set("usd2khr_transfer_amount", usd2khr_transfer_amount);

            obj.set("transfer_khr", khr_transfer_sum);

            //Transfered amount
            obj.set("transfered_amount", kendo.parseFloat(obj.usd2khr_transfer_amount) + kendo.parseFloat(obj.transfer_khr));

            //Balance
            obj.set("balance", kendo.parseFloat(obj.total_cash1) - kendo.parseFloat(obj.transfered_amount));
        },
        addEmpty                : function(){
            var self = this;
            this.set("isEdit", false);
            this.dataSource.data([]);
            this.reconcileItemDS.data([]);

            this.dataSource.add({
                company_id              : 0,
                transfer_account_id     : 2,
                cashier                 : this.get('cashier'),
                rate                    : 4000,
                received_amount         : 0,
                previous_amount         : 0,
                total_cash1             : 0,
                usd_amount              : 0,
                usd2khr_amount          : 0,
                khr_amount              : 0,
                total_cash2             : 0,
                reconciled_amount       : 0,
                transfer_usd            : 0,
                usd2khr_transfer_amount : 0,
                transfer_khr            : 0,
                transfered_amount       : 0,
                balance                 : 0,
                memo                    : "",
                reconciled_date         : new Date(),
                status                  : 1
            });

            //Reconcile Item
            $.each(this.get("denominationList"), function(index, value){
                self.reconcileItemDS.add({
                    "reconcile_id"          : 0,
                    "denomination"          : value.denomination,
                    "khr_qty"               : value.khr_qty,
                    "khr_amount"            : 0,
                    "usd_qty"               : value.usd_qty,
                    "usd_amount"            : 0,
                    "khr_transfer"          : value.khr_transfer,
                    "khr_transfer_amount"   : 0,
                    "usd_transfer"          : value.usd_transfer,
                    "usd_transfer_amount"   : 0
                });
            });

            var data = this.dataSource.data();
            var obj = data[data.length - 1];
            this.set("obj", obj);
        },
        save                    : function(){
            var self = this;

            this.dataSource.sync();
            this.reconcileItemDS.sync();
        },
        addReconcile            : function(){
            var dfd = $.Deferred();

            var tr = this.get("totalReceive");
            var pr = this.get("prevRemain");
            var receiveAmount = Number(tr.replace(/[^0-9\.]+/g,""));
            var prevRemain = Number(pr.replace(/[^0-9\.]+/g,""));

            banhji.ds.reconcileDS.add({
                cashier             : this.get('cashier'),
                reconciled_date     : kendo.toString(new Date(), 'yyyy-MM-dd'),
                rate                : this.get('rate'),
                received_amount     : receiveAmount,
                prev_remain         : prevRemain,
                reconciled_amount   : kendo.parseFloat(this.totalDR()),
                transfered_amount   : kendo.parseFloat(this.totalTransferCash()),
                transfer_account_id : this.get('transfer_account_id'),
                class_id            : this.get('class_id'),
                memo                : this.get('memo')
            });

            banhji.ds.reconcileDS.sync();
            banhji.ds.reconcileDS.bind("requestEnd", function(e){
                dfd.resolve(e.response.results);
            });

            return dfd;
        },
        addJournal              : function(){
            var self = this;
            var totalTransferCash = kendo.parseFloat(this.totalTransferCash());

            //Transfer account on Dr
            banhji.journalEntry.add({
                journal_id  : 0,
                account     : this.get("transfer_account_id"),
                dr          : totalTransferCash,
                cr          : 0,
                class_id    : self.get("class_id"),
                memo        : self.get("memo"),
                exchange_rate: 1,
                main        : 0
            });

            var cashInTillList = {};
            $.each(banhji.ds.invoiceDS.data(), function(index, value){
                var cash_in_till_id = value.account_id;
                var amt = kendo.parseFloat(value.paid)
                if(cash_in_till_id>0){
                    if(cashInTillList[cash_in_till_id]===undefined){
                        cashInTillList[cash_in_till_id]={"id": cash_in_till_id, "amt": amt};
                    }else{
                        if(cashInTillList[cash_in_till_id].id===cash_in_till_id){
                            cashInTillList[cash_in_till_id].amt += amt;
                        }else{
                            cashInTillList[cash_in_till_id]={"id": cash_in_till_id, "amt": amt};
                        }
                    }
                }
            });

            //Cash in till on Cr
            $.each(cashInTillList, function(index, value){
                banhji.journalEntry.add({
                    journal_id  : 0,
                    account     : value.id,
                    dr          : 0,
                    cr          : value.amt,
                    class_id    : self.get("class_id"),
                    memo        : self.get("memo"),
                    exchange_rate: 1,
                    main        : 0
                });
            });

            //Add journal to datasource
            banhji.transaction.addNew();
            var journal = banhji.transaction.get("current");

            journal.set("company_id", banhji.config.userData.company);
            journal.set("people_id", 0);
            journal.set("employee_id", banhji.config.userData.userId);
            journal.set("payment_id", 0);
            journal.set("payment_term_id", 0);
            journal.set("transaction_type", "Reconcile");
            journal.set("payment_method", "");
            journal.set("check_no", null);
            journal.set("memo", "ផ្ទៀងផ្ទាត់ និង ផ្ទេរសាច់ប្រាក់");
            journal.set("date", kendo.toString(new Date(this.get("searchDate")), "yyyy-MM-dd"));
            journal.set("amount_billed", totalTransferCash);
            journal.set("amount_due", 0);
            journal.set("amount_paid", 0);
            journal.set("voucher", null);
            journal.set("class_id", this.get("class_id"));
            journal.set("status", 0);
            journal.set("reference", null);
            journal.set("vat_id", {id: null});
            journal.set("inJournal", 1);

            banhji.transaction.save()
            .then(function(journal){
                $.each(banhji.journalEntry.dataSource.data(), function(index, value){
                    value.set("journal_id", journal.data.id);
                });

                banhji.journalEntry.save();
            });
        }
    });
    banhji.cashReceipt =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        txnDS               : dataStore(apiUrl + "transactions"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "Cash_Receipt" }
        }),
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        contactDS           : banhji.source.customerDS,
        accountDS           : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 10 },
            sort: { field:"number", dir:"asc" }
        }),
        paymentTermDS       : banhji.source.paymentTermDS,
        paymentMethodDS     : banhji.source.paymentMethodDS,
        amtDueColor         : banhji.source.amtDueColor,
        showCheckNo         : false,
        showReceiptNo       : false,
        obj                 : null,
        isEdit              : false,
        saveClose           : false,
        savePrint           : false,
        searchText          : "",
        contact_id          : "",
        invoice_id          : 0,
        total               : 0,
        total_received      : 0,
        deleteVisible       : false,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        loadInvoice         : function(id){
            this.set("invoice_id", id);
            this.search();
        },
        //Contact
        loadContact         : function(id){
            this.set("contact_id", id);
            this.search();
        },
        contactChanges      : function(){
            this.search();
        },
        getContactName      : function(id){
            var raw = banhji.source.customerDS.get(id);
            if(raw){
                return raw.name;
            }else{
                return "";
            }
        },
        //Payment Method
        issuedDateChanges   : function(){
            this.applyTerm();
            this.setRate();
        },
        applyTerm           : function(){
            var self = this, obj = this.get("obj"),
            today = new Date();

            $.each(this.dataSource.data(), function(index, value){
                var term = self.paymentTermDS.get(value.payment_term_id),
                termDate = new Date(value.reference[0].issued_date),
                discountPeriod = 0;

                if(term){
                    discountPeriod = kendo.parseInt(term.discount_period);
                }

                termDate.setDate(termDate.getDate() + discountPeriod);

                if(today<=termDate){
                    if(value.reference[0].amount_paid==0){
                        var amount = value.reference[0].amount * term.discount_percentage;
                        value.set("discount", amount);
                        value.set("amount", value.reference[0].amount - amount);
                    }
                }
            });
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj");

            $.each(this.dataSource.data(), function(index, value){
                var rate = banhji.source.getRate(value.locale, new Date(obj.issued_date));

                value.set("rate", rate);
            });

            this.changes();
        },
        //Segments
        segmentChanges      : function(e) {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //Search
        search              : function(){
            var self = this,
                para = [],
                obj = this.get("obj"),
                searchText = this.get("searchText"),
                invoice_id = this.get("invoice_id"),
                contact_id = this.get("contact_id");

            if(contact_id>0){
                para.push({ field:"contact_id", value: contact_id });
            }

            if(invoice_id>0){
                para.push({ field:"id", value: invoice_id });
            }

            if(searchText!==""){
                para.push({ field:"number", value: searchText });
            }

            if(para.length>0){
                para.push({ field:"type", operator:"where_in", value:["Commercial_Invoice", "Vat_Invoice", "Invoice"] });
                para.push({ field:"status", operator:"where_in", value:[0,2] });

                if(this.dataSource.total()>0){
                    var idList = [];
                    $.each(this.dataSource.data(), function(index, value){
                        idList.push(value.reference_id);
                    });
                    para.push({ field:"id", operator:"where_not_in", value:idList });
                }

                this.txnDS.query({
                    filter: para
                }).then(function(){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        $.each(view, function(index, value){
                            var amount_due = value.amount - (value.amount_paid + value.deposit);

                            self.dataSource.add({
                                transaction_template_id : 0,
                                contact_id          : value.contact_id,
                                account_id          : obj.account_id,
                                payment_term_id     : value.payment_term_id,
                                payment_method_id   : obj.payment_method_id,
                                reference_id        : value.id,
                                user_id             : self.get("user_id"),
                                check_no            : value.check_no,
                                reference_no        : value.number,
                                number              : "",
                                type                : "Cash_Receipt",
                                sub_total           : amount_due,
                                amount              : amount_due,
                                discount            : 0,
                                discount_percentage : 0,
                                rate                : value.rate,
                                locale              : value.locale,
                                issued_date         : obj.issued_date,
                                memo                : obj.memo,
                                memo2               : obj.memo2,
                                status              : 0,
                                segments            : obj.segments,
                                is_journal          : 1,
                                //Recurring
                                recurring_name      : "",
                                start_date          : new Date(),
                                frequency           : "Daily",
                                month_option        : "Day",
                                interval            : 1,
                                day                 : 1,
                                week                : 0,
                                month               : 0,
                                is_recurring        : 0,
                                reference           : [value],
                                contact             : value.contact
                            });
                        });
                        self.applyTerm();
                        self.setRate();
                    }

                    self.set("searchText", "");
                    self.set("contact_id", "");
                    self.set("invoice_id", 0);
                });
            }
        },
        //Obj
        loadObj             : function(id){
            var self = this;

            this.dataSource.query({
                filter: { field:"id", value: id },
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
                self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));
                self.set("total_received", kendo.toString(view[0].amount, "c", view[0].locale));

                self.journalLineDS.filter({ field: "transaction_id", value: id });
            });
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
            total = 0, sub_total = 0, discount = 0, total_received = 0, remaining = 0;

            $.each(this.dataSource.data(), function(index, value) {
                var amt = kendo.parseFloat(value.sub_total) - kendo.parseFloat(value.discount);
                if(kendo.parseFloat(value.amount)>amt){
                    value.set("amount", amt);
                }

                sub_total += kendo.parseFloat(value.sub_total) / value.rate;
                discount += kendo.parseFloat(value.discount) / value.rate;
                total_received += kendo.parseFloat(value.amount) / value.rate;
            });

            total = sub_total - discount;
            remaining = total - total_received;

            obj.set("sub_total", sub_total);
            obj.set("discount", discount);
            this.set("total", kendo.toString(total, "c2", banhji.locale));
            this.set("total_received", kendo.toString(total_received, "c2", banhji.locale));
            obj.set("remaining", remaining);
        },
        removeRow           : function(e){
            this.dataSource.remove(e.data);
            this.changes();
        },
        dataSourceChanges   : function(arg){
            var self = banhji.cashReceipt;

            if(arg.field){
                if(arg.field=="amount" || arg.field=="discount"){
                    self.changes();
                }else if(arg.field=="discount_percentage"){
                    var dataRow = arg.items[0],
                        percentageAmount = dataRow.sub_total * dataRow.discount_percentage;

                    dataRow.set("discount", percentageAmount);
                }
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.txnDS.data([]);
            this.journalLineDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);
            this.set("total_received", 0);

            this.set("obj", {
                transaction_template_id: 6,
                account_id          : 7,
                payment_method_id   : 1,
                rate                : 1,
                sub_total           : 0,
                discount            : 0,
                remaining           : 0,
                locale              : banhji.locale,
                issued_date         : new Date(),
                memo                : "",
                memo2               : "",
                segments            : []
            });
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");

            //Edit Mode
            if(this.get("isEdit")){
                obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

                //Delete Previouse Journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });
            }else{
                //Add brand new transaction
                $.each(this.dataSource.data(), function(index, value){
                    value.set("transaction_template_id", obj.transaction_template_id);
                    value.set("account_id", obj.account_id);
                    value.set("payment_method_id", obj.payment_method_id);
                    value.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));
                    value.set("memo", obj.memo);
                    value.set("memo2", obj.memo2);
                    value.set("segments", obj.segments);
                });
            }

            //Obj
            this.objSync()
            .then(function(data){
                var ids = [];
                //Save journals
                $.each(data, function(index, value){
                    var contact = value.contact;
                    ids.push(value.reference_id);

                    //Cash on Dr
                    self.journalLineDS.add({
                        transaction_id      : value.id,
                        account_id          : obj.account_id,
                        contact_id          : value.contact_id,
                        description         : "",
                        reference_no        : "",
                        segments            : obj.segments,
                        dr                  : value.amount,
                        cr                  : 0,
                        rate                : value.rate,
                        locale              : value.locale
                    });

                    if(value.discount>0){
                        //Discount on Dr
                        self.journalLineDS.add({
                            transaction_id      : value.id,
                            account_id          : contact.settlement_discount_id,
                            contact_id          : value.contact_id,
                            description         : "",
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : value.discount,
                            cr                  : 0,
                            rate                : value.rate,
                            locale              : value.locale
                        });
                    }

                    //AR on Cr
                    self.journalLineDS.add({
                        transaction_id      : value.id,
                        account_id          : contact.account_id,
                        contact_id          : value.contact_id,
                        description         : "",
                        reference_no        : "",
                        segments            : obj.segments,
                        dr                  : 0,
                        cr                  : kendo.parseFloat(value.amount) + kendo.parseFloat(value.discount),
                        rate                : value.rate,
                        locale              : value.locale
                    });
                });

                self.journalLineDS.sync();
                self.updateTxnStatus(ids);

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.cancel();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel              : function(){
            this.dataSource.cancelChanges();

            banhji.userManagement.removeMultiTask("cash_receipt");
        },
        updateTxnStatus     : function(ids){
            var self = this;

            if(ids.length>0){
                this.txnDS.query({
                    filter:{ field:"id", operator:"where_in", value:ids }
                }).then(function(){
                    var view = self.txnDS.view();

                    $.each(view, function(index, value){
                        var total = kendo.parseFloat(value.amount) - kendo.parseFloat(value.deposit);

                        if(value.amount_paid == 0){
                            value.set("status", 0);
                        }else if(value.amount_paid >= total){
                            value.set("status", 1);
                        }else{
                            value.set("status", 2);
                        }
                    });

                    self.txnDS.sync();
                });
            }
        }
    });
    banhji.cashPayment =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        txnDS               : dataStore(apiUrl + "transactions"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "Cash_Payment" }
        }),
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        contactDS           : banhji.source.supplierDS,
        accountDS           : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 10 },
            sort: { field:"number", dir:"asc" }
        }),
        paymentTermDS       : banhji.source.paymentTermDS,
        paymentMethodDS     : banhji.source.paymentMethodDS,
        amtDueColor         : banhji.source.amtDueColor,
        showCheckNo         : false,
        showReceiptNo       : false,
        obj                 : null,
        isEdit              : false,
        saveClose           : false,
        savePrint           : false,
        searchText          : "",
        contact_id          : "",
        invoice_id          : 0,
        total               : 0,
        total_received      : 0,
        original_total      : 0,
        deleteVisible       : false,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Contact
        loadContact         : function(id){
            this.set("contact_id", id);
            this.search();
        },
        contactChanges      : function(){
            this.search();
        },
        getContactName      : function(id){
            var raw = banhji.source.customerDS.get(id);
            if(raw){
                return raw.name;
            }else{
                return "";
            }
        },
        //Payment Term
        issuedDateChanges   : function(){
            this.applyTerm();
            this.setRate();
        },
        applyTerm           : function(){
            var self = this, obj = this.get("obj"),
            today = new Date();

            $.each(this.dataSource.data(), function(index, value){
                var term = self.paymentTermDS.get(value.payment_term_id),
                termDate = new Date(value.reference[0].issued_date),
                discountPeriod = 0;

                if(term){
                    discountPeriod = kendo.parseInt(term.discount_period);
                }

                termDate.setDate(termDate.getDate() + discountPeriod);

                if(today<=termDate){
                    if(value.reference[0].amount_paid==0){
                        var amount = value.reference[0].amount * term.discount_percentage;
                        value.set("discount", amount);
                        value.set("amount", value.reference[0].amount - amount);
                    }
                }
            });
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj");

            $.each(this.dataSource.data(), function(index, value){
                var rate = banhji.source.getRate(value.locale, new Date(obj.issued_date));

                value.set("rate", rate);
            });

            this.changes();
        },
        //Search
        search              : function(){
            var self = this,
            para = [],
            obj = this.get("obj"),
            searchText = this.get("searchText"),
            invoice_id = this.get("invoice_id"),
            contact_id = this.get("contact_id");

            if(contact_id>0){
                para.push({ field:"contact_id", value: contact_id });
            }

            if(invoice_id>0){
                para.push({ field:"id", value: invoice_id });
            }

            if(searchText!==""){
                para.push({ field:"number", value: searchText });
            }

            if(para.length>0){
                para.push({ field:"type", value:"Credit_Purchase" });
                para.push({ field:"status", operator:"where_in", value:[0,2] });

                if(this.dataSource.total()>0){
                    var idList = [];
                    $.each(this.dataSource.data(), function(index, value){
                        idList.push(value.reference_id);
                    });
                    para.push({ field:"id", operator:"where_not_in", value:idList });
                }

                this.txnDS.query({
                    filter: para
                }).then(function(){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        $.each(view, function(index, value){
                            var amount_due = value.amount - (value.amount_paid + value.deposit);

                            self.dataSource.add({
                                transaction_template_id : 0,
                                contact_id          : value.contact_id,
                                account_id          : obj.account_id,
                                payment_term_id     : value.payment_term_id,
                                payment_method_id   : obj.payment_method_id,
                                reference_id        : value.id,
                                user_id             : self.get("user_id"),
                                check_no            : value.check_no,
                                reference_no        : value.number,
                                type                : "Cash_Payment",
                                sub_total           : amount_due,
                                amount              : amount_due,
                                discount            : 0,
                                rate                : value.rate,
                                locale              : value.locale,
                                issued_date         : obj.issued_date,
                                memo                : obj.memo,
                                memo2               : obj.memo2,
                                status              : 0,
                                segments            : obj.segments,
                                is_journal          : 1,
                                //Recurring
                                recurring_name      : "",
                                start_date          : new Date(),
                                frequency           : "Daily",
                                month_option        : "Day",
                                interval            : 1,
                                day                 : 1,
                                week                : 0,
                                month               : 0,
                                is_recurring        : 0,

                                reference           : [value],
                                contact             : value.contact
                            });
                        });
                        self.applyTerm();
                        self.setRate();
                    }

                    self.set("searchText", "");
                    self.set("contact_id", "");
                    self.set("invoice_id", 0);
                });
            }
        },
        segmentChanges      : function(e) {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //Obj
        loadObj             : function(id){
            var self = this;

            this.dataSource.query({
                filter: { field:"id", value: id },
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
                self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));
                self.set("total_received", kendo.toString(view[0].amount, "c", view[0].locale));

                self.journalLineDS.filter({ field: "transaction_id", value: id });
            });
        },
        loadInvoice         : function(id){
            this.set("invoice_id", id);
            this.search();
        },
        dataSourceChanges   : function(arg){
            var self = banhji.cashPayment;

            if(arg.field){
                if(arg.field=="amount" || arg.field=="discount"){
                    self.changes();
                }else if(arg.field=="discount_percentage"){
                    var dataRow = arg.items[0],
                        percentageAmount = dataRow.sub_total * dataRow.discount_percentage;

                    dataRow.set("discount", percentageAmount);
                }
            }
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
            total = 0, sub_total = 0, discount = 0, total_received = 0, remaining = 0;

            $.each(this.dataSource.data(), function(index, value) {
                var amt = kendo.parseFloat(value.sub_total) - kendo.parseFloat(value.discount);
                if(kendo.parseFloat(value.amount)>amt){
                    value.set("amount", amt);
                }

                sub_total += kendo.parseFloat(value.sub_total) / value.rate;
                discount += kendo.parseFloat(value.discount) / value.rate;
                total_received += kendo.parseFloat(value.amount) / value.rate;
            });

            total = sub_total - discount;
            remaining = total - total_received;

            obj.set("sub_total", sub_total);
            obj.set("discount", discount);
            this.set("total", kendo.toString(total, "c2", banhji.locale));
            this.set("total_received", kendo.toString(total_received, "c2", banhji.locale));
            obj.set("remaining", remaining);
        },
        removeRow           : function(e){
            var data = e.data;
            this.dataSource.remove(data);
            this.changes();
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.txnDS.data([]);
            this.journalLineDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);
            this.set("total_received", 0);

            this.set("obj", {
                transaction_template_id : 12,
                account_id          : 7,
                payment_method_id   : 1,
                rate                : 1,
                sub_total           : 0,
                discount            : 0,
                remaining           : 0,
                locale              : banhji.locale,
                issued_date         : new Date(),
                memo                : "",
                memo2               : "",
                segments            : []
            });
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");

            if(this.get("isEdit")){
                obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

                //Delete Previouse Journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });
            }else{
                //Add brand new transaction
                $.each(this.dataSource.data(), function(index, value){
                    value.set("transaction_template_id", obj.transaction_template_id);
                    value.set("account_id", obj.account_id);
                    value.set("payment_method_id", obj.payment_method_id);
                    value.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));
                    value.set("memo", obj.memo);
                    value.set("memo2", obj.memo2);
                    value.set("segments", obj.segments);
                });
            }

            this.objSync()
            .then(function(data){
                var ids = [];
                //Save journals
                $.each(data, function(index, value){
                    var contact = value.contact,
                    ref = self.dataSource.at(index);
                    ids.push(value.reference_id);

                    //AP on Dr
                    self.journalLineDS.add({
                        transaction_id      : value.id,
                        account_id          : ref.reference[0].account_id,
                        contact_id          : value.contact_id,
                        description         : "",
                        reference_no        : "",
                        segments            : obj.segments,
                        dr                  : kendo.parseFloat(value.amount) + kendo.parseFloat(value.discount),
                        cr                  : 0,
                        rate                : value.rate,
                        locale              : value.locale
                    });

                    //Cash on Cr
                    self.journalLineDS.add({
                        transaction_id      : value.id,
                        account_id          : obj.account_id,
                        contact_id          : value.contact_id,
                        description         : "",
                        reference_no        : "",
                        segments            : obj.segments,
                        dr                  : 0,
                        cr                  : value.amount,
                        rate                : value.rate,
                        locale              : value.locale
                    });

                    if(value.discount>0){
                        //Discount on Cr
                        self.journalLineDS.add({
                            transaction_id      : value.id,
                            account_id          : contact.settlement_discount_id,
                            contact_id          : value.contact_id,
                            description         : "",
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : value.discount,
                            rate                : value.rate,
                            locale              : value.locale
                        });
                    }
                });

                self.journalLineDS.sync();
                self.updateTxnStatus(ids);

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveClose")){
                    //Save Close
                    self.set("saveClose", false);
                    self.cancel();
                    window.history.back();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.cancel();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        cancel              : function(){
            this.dataSource.cancelChanges();

            banhji.userManagement.removeMultiTask("cash_payment");
        },
        updateTxnStatus     : function(ids){
            var self = this;

            if(ids.length>0){
                this.txnDS.query({
                    filter:{ field:"id", operator:"where_in", value:ids }
                }).then(function(){
                    var view = self.txnDS.view();

                    $.each(view, function(index, value){
                        if(value.amount_paid == 0){
                            value.set("status", 0);
                        }else if(value.amount_paid >= value.amount){
                            value.set("status", 1);
                        }else{
                            value.set("status", 2);
                        }
                    });

                    self.txnDS.sync();
                });
            }
        }
    });
    banhji.cashFlowForecast = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "budge_lines"),
        dbsDataSource       : banhji.store.dbsDataSource,
        nameList            : [
            "Cash Receipts",
            "Cash Sale",
            "Receivables Collection",
            "Other receipts",
            "Cash Disbursement",
            "A. Operating",
            "B. Capital Expense",
            "C. Tax",
            "D. Drawing/Dividends",
            "E. Financing",
            "Liquidlity Position",
            "Net Cash Position"
        ],
        obj                 : null,
        cellIndex           : 0,
        month_option        : "only",
        amount              : 0,
        showEdit            : false,
        pageLoad            : function(){
            this.addEmpty();
        },
        loadAccountHolder           : function(){
            var self = this;

            banhji.dbsUrl = "https://developers.dbs.com:10443/api/sg/v1/accounts/0282828314/fundsTransfer/transferType=Scheduled";
            this.dbsDataSource.query({
                filter:[],
                page:1,
                pageSize:100
            }).then(function(){
                var view = banhji.store.dbsDataSource.data();
                console.log(view[0]);
                // self.set("customer", view[0].AccountHolder.accountHolderDetl.items[0].accountHolderDetl.partyName);
            });
        },
        addEmpty            : function(){
            this.dataSource.data([]);

            for (var i = 0; i <= 11; i++) {
                this.dataSource.add({
                    name    : this.nameList[i],
                    m0      : 0,
                    m1      : 0,
                    m2      : 0,
                    m3      : 0,
                    m4      : 0,
                    m5      : 0,
                    m6      : 0,
                    m7      : 0,
                    m8      : 0
                });
            }
        },
        changes             : function(){
            var a0 = 0, a1 = 0, a2 = 0, a3 = 0, a4 = 0, a5 = 0, a6 = 0, a7 = 0, a8 = 0,
            b0 = 0, b1 = 0, b2 = 0, b3 = 0, b4 = 0, b5 = 0, b6 = 0, b7 = 0, b8 = 0,
            c0 = 0, c1 = 0, c2 = 0, c3 = 0, c4 = 0, c5 = 0, c6 = 0, c7 = 0, c8 = 0;

            $.each(this.dataSource.data(), function(index, value){
                if(index>0 && index <=3){
                    a0 += value.m0; a1 += value.m1; a2 += value.m2; a3 += value.m3; a4 += value.m4; a5 += value.m5; a6 += value.m6; a7 += value.m7; a8 += value.m8;
                }else if(index>4 && index <=9){
                    b0 += value.m0; b1 += value.m1; b2 += value.m2; b3 += value.m3; b4 += value.m4; b5 += value.m5; b6 += value.m6; b7 += value.m7; b8 += value.m8;
                }else if(index>10){
                    c0 += value.m0; c1 += value.m1; c2 += value.m2; c3 += value.m3; c4 += value.m4; c5 += value.m5; c6 += value.m6; c7 += value.m7; c8 += value.m8;
                }
            });

            var a = this.dataSource.at(0);
            a.set("m0", a0);
            a.set("m1", a1);
            a.set("m2", a2);
            a.set("m3", a3);
            a.set("m4", a4);
            a.set("m5", a5);
            a.set("m6", a6);
            a.set("m7", a7);
            a.set("m8", a8);

            var b = this.dataSource.at(4);
            b.set("m0", b0);
            b.set("m1", b1);
            b.set("m2", b2);
            b.set("m3", b3);
            b.set("m4", b4);
            b.set("m5", b5);
            b.set("m6", b6);
            b.set("m7", b7);
            b.set("m8", b8);

            var c = this.dataSource.at(10);
            c.set("m0", c0);
            c.set("m1", c1);
            c.set("m2", c2);
            c.set("m3", c3);
            c.set("m4", c4);
            c.set("m5", c5);
            c.set("m6", c6);
            c.set("m7", c7);
            c.set("m8", c8);
        },
        selectedRow0        : function(e){
            var data = e.data;
            this.set("obj", data);
            this.set("amount", data.m0);
            this.set("cellIndex", 0);

            this.set("showEdit", true);
        },
        selectedRow1        : function(e){
            var data = e.data;
            this.set("obj", data);
            this.set("amount", data.m1);
            this.set("cellIndex", 1);

            this.set("showEdit", true);
        },
        selectedRow2        : function(e){
            var data = e.data;
            this.set("obj", data);
            this.set("amount", data.m2);
            this.set("cellIndex", 2);

            this.set("showEdit", true);
        },
        selectedRow3        : function(e){
            var data = e.data;
            this.set("obj", data);
            this.set("amount", data.m3);
            this.set("cellIndex", 3);

            this.set("showEdit", true);
        },
        selectedRow4        : function(e){
            var data = e.data;
            this.set("obj", data);
            this.set("amount", data.m4);
            this.set("cellIndex", 4);

            this.set("showEdit", true);
        },
        selectedRow5        : function(e){
            var data = e.data;
            this.set("obj", data);
            this.set("amount", data.m5);
            this.set("cellIndex", 5);

            this.set("showEdit", true);
        },
        selectedRow6        : function(e){
            var data = e.data;
            this.set("obj", data);
            this.set("amount", data.m6);
            this.set("cellIndex", 6);

            this.set("showEdit", true);
        },
        selectedRow7        : function(e){
            var data = e.data;
            this.set("obj", data);
            this.set("amount", data.m7);
            this.set("cellIndex", 7);

            this.set("showEdit", true);
        },
        selectedRow8        : function(e){
            var data = e.data;
            this.set("obj", data);
            this.set("amount", data.m8);
            this.set("cellIndex", 8);

            this.set("showEdit", true);
        },
        save                : function(){
            var obj = this.get("obj"),
            amount = this.get("amount"),
            cellIndex = this.get("cellIndex"),
            month_option = this.get("month_option");

            if(month_option=="only"){
                switch(cellIndex) {
                    case 0:
                        obj.set("m0", amount);
                        break;
                    case 1:
                        obj.set("m1", amount);
                        break;
                    case 2:
                        obj.set("m2", amount);
                        break;
                    case 3:
                        obj.set("m3", amount);
                        break;
                    case 4:
                        obj.set("m4", amount);
                        break;
                    case 5:
                        obj.set("m5", amount);
                        break;
                    case 6:
                        obj.set("m6", amount);
                        break;
                    case 7:
                        obj.set("m7", amount);
                        break;
                    default:
                        obj.set("m8", amount);
                }
            }else{
                for (var i = cellIndex; i <= 11; i++) {
                    switch(i) {
                        case 0:
                            obj.set("m0", amount);
                            break;
                        case 1:
                            obj.set("m1", amount);
                            break;
                        case 2:
                            obj.set("m2", amount);
                            break;
                        case 3:
                            obj.set("m3", amount);
                            break;
                        case 4:
                            obj.set("m4", amount);
                            break;
                        case 5:
                            obj.set("m5", amount);
                            break;
                        case 6:
                            obj.set("m6", amount);
                            break;
                        case 7:
                            obj.set("m7", amount);
                            break;
                        default:
                            obj.set("m8", amount);
                    }
                }
            }

            this.changes();

            this.set("showEdit", false);
        },
        cancel              : function(){
            this.set("showEdit", false);
        }
    });
    // CASH REPORTS
    banhji.cashPositionReport = kendo.observable({
        lang                    : langVM,
        dataSource      : dataStore(apiUrl + "cashReports/cash_position"),
        filterDB            : [
            {id: 'customer', name: 'Customer'},
            {id: 'segment', name: 'Segment'}
        ],
        filteredBy          : "customer",
        sortDB              : [
            {id: 'date', name: 'Date'}
        ],
        search  : function() {

            banhji.cashPositionReport.dataSource.filter({
                logic: banhji.cashPositionReport.get('filteredBy'),
                filters: [
                    {field: "issued_date >=", value: kendo.toString(this.startDate, "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(this.endDate, "yyyy-MM-dd")}
                ]
            });
        },
        filterChange  : function(e){
            banhji.cashPositionReport.set("filteredBy", e.sender.dataSource.at(e.sender.selectedIndex-1).id);
        }
    });
    banhji.cashMovement =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "accounting_modules/general_ledger"),
        accountDS       : new kendo.data.DataSource({
            data: banhji.source.accountList,
            filter:{ field:"account_type_id", value: 10 },
            sort: { field:"number", dir:"asc" }
        }),
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        sortList            : banhji.source.sortList,
        sorter              : "all",
        sdate               : "",
        edate               : "",
        obj                 : { account_id: 0, segments: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        totalBalance        : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        segmentChanges      : function() {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            //Account
            if(obj.account_id>0){
                para.push({ field:"account_id", value:obj.account_id });
            }

            //Segment
            if(obj.segments.length>0){
                var segments = [];
                $.each(obj.segments, function(index, value){
                    segments.push(value);
                });
                para.push({ field:"segments", operator:"like_related_transaction", value:"%"+segments.toString()+"%" });
            }

            //Dates
            if(start && end){
                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(new Date(start), "yyyy-MM-dd") });
                para.push({ field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(end), "yyyy-MM-dd") });

                displayDate = "From " + kendo.toString(new Date(start), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end), "dd-MM-yyyy");
            }else if(start){
                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(new Date(start), "yyyy-MM-dd") });

                displayDate = "On " + kendo.toString(new Date(start), "dd-MM-yyyy");
            }else if(end){
                para.push({ field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(end), "yyyy-MM-dd") });

                displayDate = "As Of " + kendo.toString(new Date(end), "dd-MM-yyyy");
            }else{

            }
            this.set("displayDate", displayDate);

            para.push({ field:"account_type_id", operator:"where_related_account", value:10 });

            this.dataSource.query({
                filter:para,
                sort:[
                    { field:"account_type_id", operator:"order_by_related_account", dir:"asc" },
                    { field:"number", operator:"order_by_related_account", dir:"asc" },
                    { field:"issued_date", operator:"order_by_related_transaction", dir:"asc" },
                    { field:"number", operator:"order_by_related_transaction", dir:"asc" }
                ]
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response.results, res = e.response, balanceCal = 0;
                    self.exArray = [];
                    self.set("totalAmount", kendo.toString(res.totalAmount, "c", banhji.locale));
                    self.set("totalBalance", kendo.toString(res.totalBalance, "c", banhji.locale));

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 7 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Cash Movement",bold: true, fontSize: 20, textAlign: "center", colSpan: 7 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 7 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Type", background: "#496cad", color: "#ffffff" },
                            { value: "Date", background: "#496cad", color: "#ffffff" },
                            { value: "Reference No", background: "#496cad", color: "#ffffff" },
                            { value: "Description", background: "#496cad", color: "#ffffff" },
                            { value: "In", background: "#496cad", color: "#ffffff" },
                            { value: "Out", background: "#496cad", color: "#ffffff" },
                            { value: "Balance", background: "#496cad", color: "#ffffff" }
                        ]
                    });
                    for (var j = 0; j < response.length; j++){
                        self.exArray.push({
                            cells: [
                                { value: response[j].number + " " + response[j].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: kendo.parseFloat(response[j].balance_forward), bold: true },
                            ]
                        });
                        balanceCal = response[j].balance_forward;
                        for (var i = 0; i < response[j].line.length; i++){

                            //for(var j = 0; j < response.results[i].line.length; j++){
                            var IN, OUT;
                            if(kendo.parseFloat(response[j].line[i].amount) > 0){
                                IN = kendo.parseFloat(response[j].line[i].amount);
                                OUT = 0;
                                //totalA += kendo.parseFloat(response[j].line[i].amount);
                            }else{
                                IN = 0;
                                OUT = kendo.parseFloat(Math.abs(response[j].line[i].amount));
                                //totalB += kendo.parseFloat(response[j].line[i].amount);
                            }
                            balanceCal += response[j].line[i].amount;
                            self.exArray.push({
                                cells: [
                                    { value: response[j].line[i].type ? response[j].line[i].type: ""},
                                    { value: kendo.toString(new Date(response[j].line[i].issued_date), "dd-MM-yyyy")  },
                                    { value: response[j].line[i].number },
                                    { value: response[j].line[i].memo },
                                    { value: IN},
                                    { value: OUT},
                                    { value: kendo.parseFloat(balanceCal)}
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "TOTAL " + response[j].number + " " + response[j].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: kendo.parseFloat(balanceCal), bold: true },
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "TOTAL", bold: true,fontSize: 16 },
                            { value: "" },
                            { value: "" },
                            { value: "" },
                            { value: "" },
                            { value: kendo.parseFloat(res.totalAmount), bold: true, fontSize: 16 },
                            { value: kendo.parseFloat(res.totalBalance), bold: true, fontSize: 16 },
                        ]
                    });
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "Cash Movement",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "CashMovement.xlsx"});
        }
    });
    banhji.cashCollection = kendo.observable({
        lang                    : langVM,
        dataSource      : dataStore(apiUrl + "cashReports/cash_collection"),
        filterDB            : [
            {id: 'customer', name: 'Customer'},
            {id: 'segment', name: 'Segment'}
        ],
        filteredBy          : "customer",
        sortDB              : [
            {id: 'date', name: 'Date'}
        ],
        search  : function() {

            banhji.cashCollection.dataSource.filter({
                logic: banhji.cashCollection.get('filteredBy'),
                filters: [
                    {field: "issued_date >=", value: kendo.toString(this.startDate, "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(this.endDate, "yyyy-MM-dd")}
                ]
            });
        },
        filterChange  : function(e){
            banhji.cashCollection.set("filteredBy", e.sender.dataSource.at(e.sender.selectedIndex-1).id);
        }
    });
    banhji.cashPaymentReport = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "cashReports/cash_payment"),
        filterDB            : [
            {id: 'customer', name: 'Customer'},
            {id: 'segment', name: 'Segment'}
        ],
        filteredBy          : "customer",
        sortDB              : [
            {id: 'date', name: 'Date'}
        ],
        search  : function() {

            banhji.cashPaymentReport.dataSource.filter({
                logic: banhji.cashPaymentReport.get('filteredBy'),
                filters: [
                    {field: "issued_date >=", value: kendo.toString(this.startDate, "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(this.endDate, "yyyy-MM-dd")}
                ]
            });
        },
        filterChange  : function(e){
            banhji.cashPaymentReport.set("filteredBy", e.sender.dataSource.at(e.sender.selectedIndex-1).id);
        }
    });
    banhji.cashSales = kendo.observable({
        lang                : langVM,
        locale              : banhji.locale,
        // purchaseSummary      : dataStore(apiUrl + "vendorReports/expense_summary"),
        count               : 0,
        total_avg           : 0,
        supplierCount       : 0,
        saleNumber          : 0,
        gpm                 : 0,
        total_sale          : 0,
        companyName         : null,
        startDate           : "<?php echo date("d-m-y"); ?>",
        endDate             : new Date(),
        sorter              : '',
        openInvoice         : 0,
        company             : banhji.institute,
        sortList            : banhji.source.sortList,
        //line to sale summary
        cashCollection      : banhji.cashCollection,
        cashPaymentReport   : banhji.cashPaymentReport,
        cashPositionReport   : banhji.cashPositionReport,
        // search button
        saleDetailSearch    : function() {
            this.detailSale.filter({
                logic: 'segment',
                filters: [
                    {field: "id", "operator": "segment", value: 9},
                    {field: "issued_date >=", value: kendo.toString(this.startDate, "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(this.endDate, "yyyy-MM-dd")}
                ]
            });
        },
        displayDateStart    : function() {
            return kendo.toString(new Date(this.get('startDate')), 'dd-MM-yyyy');
        },
        displayDateEnd    : function() {
            return kendo.toString(new Date(this.get('endDate')), 'dd-MM-yyyy');
        },
        trnxSearch          : function() {},
        depositDetailSearch : function() {},
        summaryProductSearch: function() {},
        detailProductSearch : function() {},
        saleJobSearch       : function() {},
        saleOrderSearch     : function() {},
        balanaceSearch      : function() {},
        balanceDetailSearch : function() {},
        agingSummarySearch  : function() {},
        agingDetailSearch   : function() {},
        collectingInvSearch : function() {},
        collectedInvSearch  : function() {},
        invoiceListSearch   : function() {},
        customerListSearch  : function() {},
        dateMax             : function(e) {
            $('#edate').css('width', '160px');
            var edate = $('#edate').kendoDatePicker().data("kendoDatePicker");
            edate.min(e.sender.value());
        },
        dateMin             : function(e) {
            $('#sdate').css('width', '160px');
            var sdate = $('#sdate').kendoDatePicker().data("kendoDatePicker");
            sdate.max(e.sender.value());
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=900, height=700'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="<?php echo base_url(); ?>assets/responsive.css" rel="stylesheet" >' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    '*{  } html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: landscape; margin:0mm; } .saleSummaryCustomer .total-customer, .saleSummaryCustomer .total-sale { background-color: #DDEBF7!important; -webkit-print-color-adjust:exact; }.saleSummaryCustomer .table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;-webkit-print-color-adjust:exact;}.saleSummaryCustomer .table.table-borderless.table-condensed  tr th span{ color: #fff!important; }.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td {  background-color: #fff!important; -webkit-print-color-adjust:exact;} .saleSummaryCustomer .table.table-borderless.table-condensed tr td { background-color: #F2F2F2!important;-webkit-print-color-adjust:exact; } </style>' +
                    '</head>' +
                    '<body><div id="example" class="k-content saleSummaryCustomer" style="padding: 30px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        dateChange          : function(){
            // var strDate = "";

            //  if(this.startDate && this.endDate){
            //      strDate = "From " + kendo.toString(this.startDate, "dd-MM-yyyy") + " To " + kendo.toString(this.endDate, "dd-MM-yyyy");
            //  }else if(this.startDate){
            //      strDate = "On " + kendo.toString(this.startDate,"dd-MM-yyyy");
            //  }else if(this.endDate){
            //      strDate = "As Of " + kendo.toString(this.endDate,"dd-MM-yyyy");
            //  }else{
            //      strDate = "";
            //  }

            var today = new Date(),
            day = today.getDate();
            sdate = "",
            edate = "",
            value = this.get('sorter');

            switch(value){
            case "today":
                sdate = today;

                break;
            case "week":
                var first = new Date(today.getTime() - 60*60*24* day*1000),
                last = new Date(today.getTime() + 60*60*24* day*1000);

                sdate = first;
                edate = last;

                break;
            case "month":
                var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
                edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                break;
            case "year":
                var sdate = new Date(today.getFullYear(), 0, 1),
                edate = new Date(today.getFullYear(), 11, 31);

                break;
            default:

            }

            this.set("startDate", sdate);
            this.set("endDate", edate);
            // start.value(sdate);
            // end.value(edate);

            // start.max(end.value());
               //       end.min(start.value());

               //       dateChanges();
               //          });

               //          start.max(end.value());
               //          end.min(start.value());
        }
    });
    banhji.cashAdvanceReport =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "cashReports/cash_advance"),
        contactDS           : banhji.source.employeeDS,
        accountDS           : banhji.source.accountList,
        as_of               : new Date(),
        obj                 : { account_id: 0, employees: [] },
        company             : banhji.institute,
        displayDate         : "",
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                as_of = this.get("as_of"),
                displayDate = "";



            //Account
            if(obj.account_id>0){
                para.push({ field:"account_id", value:obj.account_id });
            }
            //Employees
            if(obj.employees.length>0){
                var employees = [];
                $.each(obj.employees, function(index, value){
                    employees.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:employees });
            }

            if(as_of){
                as_of = new Date(as_of);
                var displayDate = "As Of " + kendo.toString(as_of, "dd-MM-yyyy");
                this.set("displayDate", displayDate);
                as_of.setDate(as_of.getDate()+1);

                para.push({ field:"issued_date <", value:kendo.toString(as_of, "yyyy-MM-dd") });
            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(indexx, x){
                        amount += x.amount;
                    });
                });

                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true }
                  ],
                  title: "General Ledger",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "GeneralLedger.xlsx"});
        }
    });
    // CASH SETTINGS
    banhji.cashSetting =  kendo.observable({
        lang                : langVM,
        contactTypeDS       : banhji.source.contactTypeDS,
        paymentMethodDS     : banhji.source.paymentMethodDS,
        paymentTermDS       : banhji.source.paymentTermDS,
        patternDS           : dataStore(apiUrl + "contacts"),
        txnTemplateDS       : dataStore(apiUrl + "transaction_templates"),
        contactTypeName     : "",
        contactTypeAbbr     : "",
        contactTypeCompany  : 0,
        paymentMethodName   : "",
        paymentTermName     : "",
        paymentTermNetDue   : "",
        paymentTermPeriod   : "",
        paymentTermPercentage   : "",
        pageLoad            : function() {
            this.txnTemplateDS.filter({ field: "moduls", value : "cash_mg" });
        },
        addContactType      : function(){
            var name = this.get("contactTypeName");

            if(name!==""){
                this.contactTypeDS.add({
                    parent_id   : 1,
                    name        : name,
                    abbr        : this.get("contactTypeAbbr"),
                    description : "",
                    is_company  : this.get("contactTypeCompany"),
                    is_system   : 0
                });

                this.contactTypeDS.sync();
                this.contactTypeDS.bind("requestEnd", function(e){
                    if(e.type==="create"){
                        var response = e.response.results[0];
                        self.addPattern(response.id);
                        banhji.source.loadContactTypes();
                    }
                });

                this.set("contactTypeName", "");
                this.set("contactTypeAbbr", "");
                this.set("contactTypeCompany", 0);
            }
        },
        addPattern          : function(id){
            this.patternDS.insert(0, {
                "contact_type_id"       : id,
                "number"                : "",
                "locale"                : banhji.locale,
                "is_pattern"            : 1,
                "status"                : 1
            });
            this.patternDS.sync();
        },
        addPaymentMethod        : function(){
            var name = this.get("paymentMethodName");

            if(name!==""){
                this.paymentMethodDS.add({
                    name        : name,
                    description : "",
                    is_system   : 0
                });

                this.paymentMethodDS.sync();

                this.set("paymentMethodName", "");
            }
        },
        addPaymentTerm      : function(){
            var name = this.get("paymentTermName");

            if(name!==""){
                this.paymentTermDS.add({
                    name                : name,
                    net_due             : this.get("paymentTermNetDue"),
                    discount_period     : this.get("paymentTermPeriod"),
                    discount_percentage : this.get("paymentTermPercentage"),
                    is_system           : 0
                });

                this.paymentTermDS.sync();

                this.set("paymentTermName", "");
                this.set("paymentTermNetDue", "");
                this.set("paymentTermPeriod", "");
                this.set("paymentTermPercentage", "");
            }
        },
        goPattern   : function(e){
            var data = e.data;

            if(kendo.parseInt(data.contact_id)>0){
                banhji.router.navigate('/customer/'+data.contact_id+'/1');
            }else{
                banhji.router.navigate('/customer');
                banhji.customer.set("contact_type_id",data.id);
            }
        },
        deleteForm      : function(e){
            var data = e.data;
            if(confirm("Do you want to delete it?") == true) {
                this.txnTemplateDS.remove(data);
                this.txnTemplateDS.sync();
            }
        },
        goInvoiceCustom : function(){
            banhji.invoiceCustom.set("selectCustom", "cash_mg");
            banhji.invoiceCustom.set("formShow", banhji.view.invoiceForm15);
            banhji.invoiceCustom.set("formTitle", "Cash Transfer");
            banhji.invoiceCustom.set("formType", "Cash_Transfer");
            var obj= banhji.invoiceCustom.get("obj");
            obj.set("type", "Cash_Transfer");
            banhji.invoiceCustom.set("selectTypeList", banhji.source.cashFormList);
            banhji.router.navigate('/invoice_custom');
        }
    });





    /*************************************************
    *   SALE MVVM                                    *
    *************************************************/
    banhji.saleCenter = kendo.observable({
        lang                : langVM,
        transactionDS       : dataStore(apiUrl + 'transactions'),
        // contactDS            : dataStore(apiUrl + 'contacts'),
        contactDS           : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "contacts",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:{ field:"assignee_id", operator:"by_user_id", value:banhji.source.user_id },
            sort:{ field:"number", dir:"asc" },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        employeeDS          : dataStore(apiUrl + 'contacts'),
        contactTypeDS       : new kendo.data.DataSource({
            data: banhji.source.contactTypeList,
            filter: { field:"parent_id", value: 1 }//Customer
        }),
        noteDS              : dataStore(apiUrl + 'notes'),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        summaryDS           : dataStore(apiUrl + "transactions"),
        txnDS               : dataStore(apiUrl + "transactions"),
        sortList            : banhji.source.sortList,
        sorter              : "all",
        sdate               : "",
        edate               : "",
        obj                 : {id:0},
        employee            : [],
        note                : "",
        searchText          : "",
        contact_type_id     : null,
        currency_id         : 0,
        quote               : 0,
        so                  : 0,
        currencyCode        : "",
        pageLoad            : function(id){
            if(id){
                this.loadObj(id);
            }

            //Refresh
            if(this.contactDS.total()>0){
                this.contactDS.fetch();
                this.searchTransaction();
                this.loadSummary();
            }
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        setCurrencyCode     : function(){
            var code = "", obj = this.get("obj");

            $.each(banhji.source.currencyDS.data(), function(index, value){
                if(value.locale == obj.locale){
                    code = value.code;

                    return false;
                }
            });

            this.set("currencyCode", code);
        },
        loadObj             : function(id){
            var self = this;

            this.contactDS.query({
                filter: { field:"id", value:id},
                page:1,
                pageSize:100
            }).then(function(){
                var view = self.contactDS.view();

                if(view.length>0){
                    self.set("obj", view[0]);
                    self.loadData();
                }
            });
        },
        loadData            : function(){
            var obj = this.get("obj");

            this.searchTransaction();
            this.loadSummary(obj.id);
            this.setCurrencyCode();

            this.attachmentDS.filter({ field:"contact_id", value: obj.id });
            this.noteDS.query({
                filter: { field:"contact_id", value: obj.id },
                sort: { field:"noted_date", dir:"desc" },
                page: 1,
                pageSize: 10
            });
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            if(obj!==null){
                // Check the extension of each file and abort the upload if it is not .jpg
                $.each(files, function(index, value){
                    if (value.extension.toLowerCase() === ".jpg"
                        || value.extension.toLowerCase() === ".jpeg"
                        || value.extension.toLowerCase() === ".tiff"
                        || value.extension.toLowerCase() === ".png"
                        || value.extension.toLowerCase() === ".gif"
                        || value.extension.toLowerCase() === ".pdf"){

                        var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                        self.attachmentDS.add({
                            user_id         : self.get("user_id"),
                            contact_id      : obj.id,
                            type            : "Contact",
                            name            : value.name,
                            description     : "",
                            key             : key,
                            url             : banhji.s3 + key,
                            size            : value.size,
                            created_at      : new Date(),
                            file            : value.rawFile
                        });
                    }else{
                        alert("This type of file is not allowed to attach.");
                    }
                });
            }
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
                this.attachmentDS.sync();
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Summary
        loadContact         : function(id){
            var self = this;

            this.contactDS.query({
                filter:[
                    { field:"id", value:id }
                ],
                page: 1,
                pageSize: 50
            }).then(function(e) {
                var view = self.contactDS.data();

                if(view.length>0){
                    self.set("obj", view[0]);
                    self.loadData();
                }
            });
        },
        loadSummary         : function(id){
            var self = this, obj = this.get("obj");

            this.summaryDS.query({
                filter: [
                    { field:"contact_id", value: obj.id },
                    { field:"type", operator:"where_in", value: ["Quote","Sale_Order"] },
                    { field:"status", value: 0 }
                ],
                sort: { field: "issued_date", dir: "desc" },
                page: 1,
                pageSize: 1000
            }).then(function(){
                var view = self.summaryDS.view(),
                quote = 0, so = 0;

                $.each(view, function(index, value){
                    if(value.type=="Quote"){
                        quote++;
                    }else{
                        so++;
                    }
                });

                self.set("quote", kendo.toString(quote, "n0"));
                self.set("so", kendo.toString(so, "n0"));
            });
        },
        loadQuote           : function(){
            var obj = this.get("obj");

            this.transactionDS.query({
                filter: [
                    { field:"contact_id", value: obj.id },
                    { field:"type", value:"Quote" },
                    { field:"status", value: 0 }
                ],
                sort: [
                    { field: "issued_date", dir: "desc" },
                    { field: "id", dir: "desc" }
                ],
                page: 1,
                pageSize: 10
            });
        },
        loadSO              : function(){
            var obj = this.get("obj");

            this.transactionDS.query({
                filter: [
                    { field:"contact_id", value: obj.id },
                    { field:"type", value:"Sale_Order" }
                ],
                sort: [
                    { field: "issued_date", dir: "desc" },
                    { field: "id", dir: "desc" }
                ],
                page: 1,
                pageSize: 10
            });
        },
        selectedRow         : function(e){
            var data = e.data;

            this.set("obj", data);
            this.loadData();
        },
        //Search
        search              : function(){
            var self = this,
            para = [],
            searchText = this.get("searchText"),
            contact_type_id = this.get("contact_type_id");

            if(searchText){
                var textParts = searchText.replace(/([a-z]+)/i, "$1 ").split(/[^0-9a-z]+/ig);

                para.push(
                    { field: "abbr", value: textParts[0] },
                    { field: "number", value: textParts[1] },
                    { field: "name", operator: "or_like", value: searchText }
                );
            }

            if(contact_type_id){
                para.push({ field: "contact_type_id", value: contact_type_id });
            }else{
                para.push({ field: "parent_id", operator:"where_related_contact_type", value: 1 });
            }

            para.push({ field:"assignee_id", operator:"by_user_id", value:banhji.source.user_id });

            this.contactDS.filter(para);

            //Clear search filters
            self.set("searchText", "");
            self.set("contact_type_id", 0);
        },
        searchTransaction   : function(){
            var self = this,
                start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"),
                end = kendo.toString(this.get("edate"), "yyyy-MM-dd"),
                para = [], obj = this.get("obj");

            if(obj!==null){
                para.push({ field:"contact_id", value: obj.id });

                //Dates
                if(start && end){
                    para.push({ field:"issued_date >=", value: start });
                    para.push({ field:"issued_date <=", value: end });
                }else if(start){
                    para.push({ field:"issued_date", value: start });
                }else if(end){
                    para.push({ field:"issued_date <=", value: end });
                }else{

                }

                para.push({ field:"employee_id", value: 10 });
                para.push({ field:"type", operator:"where_in", value: ["Quote","Sale_Order","Customer_Deposit"] });

                this.transactionDS.query({
                    filter: para,
                    sort: [
                        { field: "issued_date", dir: "desc" },
                        { field: "id", dir: "desc" }
                    ],
                    page: 1,
                    pageSize: 10
                });
            }
        },
        //Links
        goEdit              : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/customer/'+obj.id);
            }
        },
        goReference         : function(e){
            var self = this, data = e.data;

            this.txnDS.query({
                filter:{ field:"id", value:data.reference_id}
            }).then(function(){
                var view = self.txnDS.view();

                banhji.router.navigate('/' + view[0].type.toLowerCase() +'/'+ data.reference_id);
            });
        },
        goQuote             : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/quote');
                banhji.quote.setContact(obj);
            }
        },
        goDeposit           : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/customer_deposit');
                banhji.customerDeposit.setContact(obj);
            }
        },
        goSaleOrder         : function(){
            var obj = this.get("obj");

            if(obj!==null){
                banhji.router.navigate('/sale_order_for_sale');
                banhji.saleOrderForSale.setContact(obj);
            }
        },
        //Note
        saveNoteEnter       : function(e){
            e.preventDefault();
            this.saveNote();
        },
        saveNote            : function(){
            var obj = this.get("obj");

            if(obj!==null && this.get("note")!==""){
                this.noteDS.insert(0, {
                    contact_id  : obj.id,
                    note        : this.get("note"),
                    noted_date  : new Date(),
                    created_by  : this.get("user_id"),

                    creator     : ""
                });

                this.noteDS.sync();
                this.set("note", "");
            }else{
                alert("Please select a customer and Memo is required");
            }
        }
    });
    banhji.sale = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + 'items'),
        txnDS               : dataStore(apiUrl + 'item_lines'),
        quoteLineDS         : banhji.quote.lineDS,
        soLineDS            : banhji.saleOrder.lineDS,
        categoryDS          : dataStore(apiUrl + 'categories'),
        obj                 : null,
        searchText          : "",
        isFavorite          : false,
        on_hand             : 0,
        on_so               : 0,
        on_po               : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(){
            if(this.categoryDS.total()==0){
                this.categoryDS.filter({ field:"item_type_id", operator:"where_in", value:[1,4] });
                this.search();
            }
        },
        search              : function(){
            var para = [], searchText = this.get("searchText");

            if(searchText){
                var textParts = searchText.replace(/([a-z]+)/i, "$1 ").split(/[^0-9a-z]+/ig);

                para.push(
                    { field: "abbr", value: textParts[0] },
                    { field: "number", value: textParts[1] },
                    { field: "name", operator: "or_like", value: searchText }
                );
            }

            if(this.get("isFavorite")){
                para.push({ field:"favorite", value:true });
                this.set("isFavorite", false);
            }

            para.push({ field:"item_type_id", operator:"where_in", value:[1,4] });

            this.dataSource.query({
                filter: para,
                page:1,
                pageSize:100
            });
        },
        favorite            : function(){
            this.set("isFavorite", true);
            this.search();
        },
        selectedType        : function(e){
            var data = e.data;

            this.dataSource.query({
                filter: { field:"category_id", value:data.id },
                page:1,
                pageSize:100
            });
        },
        addQuote            : function(e){
            var data = e.data, price = 0;

            if(data.item_prices.length>0){
                price = data.item_prices[0].price;
            }

            var isExisting = false;
            $.each(banhji.quote.lineDS.data(), function(index, value){
                if(value.item_id==data.id){
                    isExisting = true;
                    value.set("quantity", value.quantity+1);

                    return false;
                }
            });

            if(isExisting==false){
                banhji.quote.lineDS.add({
                    transaction_id      : 0,
                    tax_item_id         : "",
                    item_id             : data.id,
                    measurement_id      : 0,
                    description         : data.sale_description,
                    quantity            : 1,
                    price               : price,
                    amount              : price,
                    rate                : 1,
                    locale              : banhji.locale,
                    movement            : -1,

                    item_prices         : data.item_prices
                });
            }
        },
        addSO               : function(e){
            var data = e.data, price = 0;

            if(data.item_prices.length>0){
                price = data.item_prices[0].price;
            }

            var isExisting = false;
            $.each(banhji.quote.lineDS.data(), function(index, value){
                if(value.item_id==data.id){
                    isExisting = true;
                    value.set("quantity", value.quantity+1);

                    return false;
                }
            });

            if(isExisting==false){
                banhji.saleOrder.lineDS.add({
                    transaction_id      : 0,
                    tax_item_id         : "",
                    item_id             : data.id,
                    measurement_id      : 0,
                    description         : data.sale_description,
                    quantity            : 1,
                    price               : price,
                    amount              : price,
                    rate                : 1,
                    locale              : banhji.locale,
                    movement            : -1,

                    item_prices         : data.item_prices
                });
            }
        },
        loadDetail          : function(e){
            var data = e.data;
            this.set("obj", data);
            this.loadData();
        },
        loadData            : function(){
            var self = this, obj = this.get("obj"), on_so = 0, on_po = 0;

            this.txnDS.query({
                filter:[
                    { field:"item_id", value:obj.id },
                    { field:"type", operator:"where_related_transaction", value:"Purchase_Order" },
                    { field:"status", operator:"where_related_transaction", value:0 },
                    { field:"is_recurring", operator:"where_related_transaction", value:0 },
                    { field:"deleted", operator:"where_related_transaction", value:0 }
                ],
                page:1,
                pageSize:1000
            }).then(function(){
                var view = self.txnDS.view();

                $.each(view, function(index, value){
                    on_po += value.quantity;
                });

                self.set("on_po", on_po);
            });

            this.txnDS.query({
                filter:[
                    { field:"item_id", value:obj.id },
                    { field:"type", operator:"where_related_transaction", value:"Sale_Order" },
                    { field:"status", operator:"where_related_transaction", value:0 },
                    { field:"is_recurring", operator:"where_related_transaction", value:0 },
                    { field:"deleted", operator:"where_related_transaction", value:0 }
                ],
                page:1,
                pageSize:1000
            }).then(function(){
                var view = self.txnDS.view();

                $.each(view, function(index, value){
                    on_so += value.quantity;
                });

                self.set("on_so", on_so);
            });
        },
        prevItem            : function(){
            var obj = this.get("obj"),
            index = this.dataSource.indexOf(obj);

            index--;

            if (index === -1) {

                index = this.dataSource.data().length - 1;
            }

            var data = this.dataSource.at(index);
            this.set("obj", data);
            this.loadData();
        },
        nextItem            : function(){
            var obj = this.get("obj"),
            index = this.dataSource.indexOf(obj);

            index++;

            if (index === this.dataSource.data().length) {
                index = 0;
            }

            var data = this.dataSource.at(index);
            this.set("obj", data);
            this.loadData();
        }
    });
    // SALE FUNCTIONS
    banhji.saleOrderForSale =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        poDS                : dataStore(apiUrl + "transactions/with_line"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        assemblyLineDS      : dataStore(apiUrl + "item_lines"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "item_lines"),
        referenceDS         : dataStore(apiUrl + "transactions"),
        referenceLineDS     : dataStore(apiUrl + "item_lines"),
        balanceDS           : dataStore(apiUrl + "transactions/balance"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        assemblyDS          : dataStore(apiUrl + "item_prices"),
        contactDS           : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "contacts",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:{ field:"assignee_id", operator:"by_user_id", value:banhji.source.user_id },
            sort:{ field:"number", dir:"asc" },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "Sale_Order" }
        }),
        jobDS               : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        segmentItemDS       : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        employeeDS          : banhji.source.employeeDS,
        statusObj           : banhji.source.statusObj,
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthOptionList     : banhji.source.monthOptionList,
        monthList           : banhji.source.monthList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        isEdit              : false,
        saveDraft           : false,
        saveClose           : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        notDuplicateNumber  : true,
        recurring           : "",
        recurring_validate  : false,
        enableRef           : false,
        balance             : 0,
        total               : 0,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Contact
        setContact          : function(contact){
            var obj = this.get("obj");

            obj.set("contact", contact);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact){
                var contact = obj.contact;

                obj.set("contact_id", contact.id);
                obj.set("locale", contact.locale);
                obj.set("bill_to", contact.bill_to);
                obj.set("ship_to", contact.ship_to);

                this.setRate();
                this.loadBalance();
                this.loadReference();
                this.jobDS.filter({ field:"contact_id", value: contact.id });
            }

            this.changes();
        },
        employeeChanges         : function(){
            var obj = this.get("obj");

            if(obj.employee){
                var employee = obj.employee;

                obj.set("employee_id", employee.id);
            }else{
                obj.set("employee_id", 0);
            }
        },
        loadBalance         : function(){
            var self = this, obj = this.get("obj");

            this.balanceDS.query({
                filter:[
                    { field:"contact_id", value:obj.contact_id },
                    { field:"type", operator:"where_in", value:["Commercial_Invoice", "Vat_Invoice", "Invoice"] }
                ]
            }).then(function(){
                var view = self.balanceDS.view(),
                    contact = obj.contact,
                    balance = view[0].amount,
                    creditAllowed = 0;

                if(contact.credit_limit > balance){
                    creditAllowed = contact.credit_limit - balance;
                }

                self.set("balance", kendo.toString(balance, "c", obj.locale));
                obj.set("credit_allowed", creditAllowed);
            });
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            //Item Lines
            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });

            //Assembly Lines
            $.each(this.assemblyLineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });
        },
        //Segment
        segmentChanges      : function(e) {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //Item
        addItem             : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            row.set("cost", item.cost * rate);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Get first price
            this.assemblyDS.query({
                filter:[
                    { field:"item_id", value:item.id },
                    { field:"assembly_id", value:0 }
                ],
                page: 1,
                pageSize: 1
            }).then(function(){
                var view = self.assemblyDS.view();

                if(view.length>0){
                    var measurement = {
                        measurement_id  : view[0].measurement_id,
                        price           : kendo.parseFloat(view[0].price),
                        conversion_ratio: view[0].conversion_ratio,
                        measurement     : view[0].measurement
                    };
                    row.set("measurement", measurement);
                }
            });
        },
        addItemCatalog      : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : catalogItem.cost * rate,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : 0,

                        discount_percentage : 0,
                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" },
                        tax_item            : { id:"", name:"" }
                    });
                }
            });
        },
        addItemAssembly     : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            var notExist = true;
            $.each(this.assemblyLineDS.data(), function(index, value){
                if(value.assembly_id==item.id){
                    notExist = false;

                    return false;
                }
            });

            if(notExist){
                row.set("item_id", item.id);
                row.set("measurement_id", item.measurement_id);
                row.set("description", item.sale_description);
                row.set("conversion_ratio", 1);
                row.set("cost", item.cost * rate);
                row.set("price", item.price * rate);
                row.set("rate", rate);
                row.set("locale", item.locale);

                this.assemblyDS.query({
                    filter:{ field:"assembly_id", value:row.item_id }
                }).then(function(){
                    var view = self.assemblyDS.view();

                    $.each(view, function(index, value){
                        var itemAssembly = banhji.source.itemDS.get(value.item_id),
                            itemAssemblyRate = obj.rate / banhji.source.getRate(itemAssembly.locale, new Date(obj.issued_date));

                        self.assemblyLineDS.add({
                            transaction_id      : obj.id,
                            item_id             : value.item_id,
                            assembly_id         : value.assembly_id,
                            measurement_id      : value.measurement_id,
                            description         : itemAssembly.sale_description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : itemAssembly.cost * rate,
                            price               : value.price * itemAssemblyRate,
                            amount              : value.price * itemAssemblyRate,
                            rate                : itemAssemblyRate,
                            locale              : value.locale,
                            movement            : 0,

                            item                : itemAssembly
                        });
                    });
                });
            }else{
                alert("Duplicate Item Assembly!");
                row.set("item_id", 0);
                row.set("item", { id:"", name:"" });
            }
        },
        changes             : function(){
            var self = this, obj = this.get("obj"),
                total = 0, subTotal = 0, discount =0, tax = 0, remaining = 0, amount_due = 0, itemIds = [];

            $.each(this.lineDS.data(), function(index, value) {
                var amt = value.quantity * value.price;
                subTotal += amt;

                //Discount by line
                if(value.discount>0){
                    amt -= value.discount;
                    discount += value.discount;
                }

                //Tax by line
                if(value.tax_item_id>0){
                    var taxAmount = amt * value.tax_item.rate;
                    tax += taxAmount;
                    value.set("tax", taxAmount);
                }else{
                    value.set("tax", 0);
                }

                value.set("amount", amt);

                if(value.item_id>0){
                    itemIds.push(value.item_id);
                }
            });

            //Total
            total = (subTotal + tax) - discount;

            //Warning over credit allowed
            if(obj.credit_allowed>0 && total>obj.credit_allowed){
                this.set("amtDueColor", "Gold");
            }else{
                this.set("amtDueColor", banhji.source.amtDueColor);
            }

            obj.set("sub_total", subTotal);
            obj.set("discount", discount);
            obj.set("tax", tax);
            obj.set("amount", total);

            this.set("total", kendo.toString(total, "c", obj.locale));

            //Remove Assembly Item List
            var raw = this.assemblyLineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (jQuery.inArray(kendo.parseInt(item.assembly_id), itemIds)==-1) {
                    this.assemblyLineDS.remove(item);
                }
            }
        },
        lineDSChanges       : function(arg){
            var self = banhji.saleOrderForSale;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else if(item.is_assembly=="1"){
                        self.addItemAssembly(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity" || arg.field=="price" || arg.field=="discount"){
                    self.changes();
                }else if(arg.field=="measurement"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.measurement.measurement_id);
                    dataRow.set("price", dataRow.measurement.price * dataRow.rate);
                    dataRow.set("conversion_ratio", dataRow.measurement.conversion_ratio);
                }else if(arg.field=="discount_percentage"){
                    var dataRow = arg.items[0],
                        percentageAmount = dataRow.quantity * dataRow.price * dataRow.discount_percentage;

                    dataRow.set("discount", percentageAmount);
                }else if(arg.field=="tax_item"){
                    var dataRow = arg.items[0];

                    dataRow.set("tax_item_id", dataRow.tax_item.id);
                    dataRow.set("tax", 0);

                    self.changes();
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        setStatus           : function(){
            var self = this,
                obj = this.get("obj"),
                statusObj = this.get("statusObj");

            statusObj.set("text", "");
            statusObj.set("date", "");
            statusObj.set("number", "");
            statusObj.set("url", "");

            switch(obj.status) {
                case 0:
                    statusObj.set("text", "open");
                    break;
                case 1:
                    statusObj.set("text", "used");

                    this.txnDS.query({
                        filter:{ field:"reference_id", value: obj.id },
                        sort: { field:"issued_date", dir:"desc" },
                        page:1,
                        pageSize:1
                    }).then(function(){
                        var view = self.txnDS.view();

                        if(view.length>0){
                            statusObj.set("date", kendo.toString(new Date(view[0].issued_date), "dd-MM-yyyy h:mm:ss tt"));
                            statusObj.set("number", view[0].number);

                            var url = "#/" + view[0].type.toLowerCase() + "/" + view[0].id;
                            statusObj.set("url", url);
                        }
                    });
                    break;
                case 2:
                    statusObj.set("text", "partialy used");
                    break;
                case 4:
                    statusObj.set("text", "draft");
                    break;
                default:
                    //Default here
            }
        },
        //Create PO
        addPO               : function(id){
            var obj = this.get("obj"), vendorIds = [];

            $.each(this.lineDS.data(), function(index, value){
                if(value.contact.id>0){
                    vendorIds.push(value.contact.id);
                }
            });

            vendorIds = jQuery.unique( vendorIds );

            for(var i = 0; i < vendorIds.length; i++){
                var lines = [], subTotal = 0, discount = 0, tax = 0, total = 0;

                $.each(this.lineDS.data(), function(index, value){
                    if(value.contact.id==vendorIds[i]){
                        var amt = value.quantity * value.cost;
                        subTotal += amt;

                        //Discount by line
                        if(value.discount>0){
                            amt -= value.discount;
                            discount += value.discount;
                        }

                        //Tax by line
                        if(value.tax_item_id>0){
                            var taxAmount = amt * value.tax_item.rate;

                            if(banhji.source.checkWHT(value.tax_item.tax_type_id) && value.wht_account_id==0){
                                tax -= taxAmount;
                            }else{
                                tax += taxAmount;
                            }
                        }

                        lines.push({
                            transaction_id      : 0,
                            tax_item_id         : value.tax_item_id,
                            item_id             : value.item_id,
                            assembly_id         : value.assembly_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : value.cost,
                            price               : value.price,
                            amount              : value.amount,
                            discount            : value.discount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : 0,
                            required_date       : value.required_date,

                            discount_percentage : value.discount_percentage,
                            item                : value.item,
                            measurement         : value.measurement,
                            tax_item            : value.tax_item,
                            wht_account         : value.wht_account
                        });
                    }
                });

                total = (subTotal + tax) - discount;

                this.poDS.insert(0, {
                    contact_id          : vendorIds[i],
                    transaction_template_id : 11,
                    reference_id        : id,
                    recurring_id        : "",
                    job_id              : 0,
                    user_id             : this.get("user_id"),
                    employee_id         : obj.employee_id,
                    type                : "Purchase_Order",//Required
                    number              : "",
                    sub_total           : subTotal,
                    discount            : discount,
                    amount              : total,
                    tax                 : tax,
                    rate                : obj.rate,
                    locale              : obj.locale,
                    issued_date         : obj.issued_date,
                    due_date            : obj.due_date,
                    bill_to             : obj.bill_to,
                    ship_to             : obj.ship_to,
                    memo                : obj.memo,
                    memo2               : obj.memo2,
                    status              : 0,
                    segments            : [],
                    lines               : lines
                });
            }

            this.poDS.sync();
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [], referenceIds = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 100
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    self.set("total", kendo.toString(view[0].amount, "c2", view[0].locale));
                    self.setStatus();

                    self.lineDS.query({
                        filter: [
                            { field: "transaction_id", value: id },
                            { field: "assembly_id", value: 0 }
                        ],
                    });

                    self.assemblyLineDS.filter([
                        { field: "transaction_id", value: id },
                        { field: "assembly_id >", value: 0 }
                    ]);

                    self.attachmentDS.filter({ field: "transaction_id", value: id });
                    self.referenceDS.filter({ field: "id", value: view[0].reference_id });
                });
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);
            this.set("amtDueColor", banhji.source.amtDueColor);

            //Set Date
            var duedate = new Date();
            duedate.setDate(duedate.getDate() + 30);

            this.dataSource.insert(0, {
                contact_id          : "",
                transaction_template_id : 2,
                reference_id        : "",
                recurring_id        : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                employee_id         : "",
                type                : "Sale_Order",//Required
                number              : "",
                sub_total           : 0,
                amount              : 0,
                credit_allowed      : 0,
                discount            : 0,
                tax                 : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                due_date            : duedate,
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                status              : 0,
                segments            : [],
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0,

                contact             : { id:"", name:"" }
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.setRate();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                contact_id          : 0,
                tax_item_id         : "",
                item_id             : "",
                assembly_id         : 0,
                measurement_id      : 0,
                description         : "",
                quantity            : 1,
                conversion_ratio    : 0,
                cost                : 0,
                price               : 0,
                amount              : 0,
                discount            : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : 0,
                required_date       : "",
                reference_no        : "",

                discount_percentage : 0,
                item                : { id:"", name:"" },
                measurement         : { measurement_id:"", measurement:"" },
                tax_item            : { id:"", name:"" },
                contact             : { id:"", name:"" }
            });
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        removeRow           : function(e){
            var data = e.data;
            if(this.lineDS.total()>1){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");

            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));
            obj.set("due_date", kendo.toString(new Date(obj.due_date), "yyyy-MM-dd"));

            //Warning over credit allowed
            if(obj.credit_limit>0 && obj.amount>obj.credit_allowed){
                alert("Over credit allowed!");
            }

            this.removeEmptyRow();

            //Save Draft
            if(this.get("saveDraft")){
                obj.set("status", 4); //In progress
                obj.set("progress", "Draft");
                obj.set("is_journal", 0);//No Journal
            }

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Edit Mode
            if(obj.isNew()==false){
                //Use draft
                if(obj.status==4){
                    obj.set("status", 0);//Open
                    obj.set("progress", "");
                    obj.set("is_journal", 1);//Add Journal
                }
            }

            //Reference
            if(obj.reference_id>0){
                var ref = this.referenceDS.get(obj.reference_id);
                ref.set("status", 1);
                this.referenceDS.sync();
            }else{
                obj.set("reference_id", 0);
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Assembly Item line
                    $.each(self.assemblyLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                self.addPO(data[0].id);
                self.lineDS.sync();
                self.assemblyLineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveDraft") || self.get("saveClose")){
                    //Save Draft or Save Close
                    self.set("saveDraft", false);
                    self.set("saveClose", false);
                    self.cancel();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.clear();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear               : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.assemblyLineDS.cancelChanges();
            this.attachmentDS.cancelChanges();
            this.referenceDS.cancelChanges();
            this.poDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.assemblyLineDS.data([]);
            this.attachmentDS.data([]);
            this.referenceDS.data([]);
            this.poDS.data([]);

            banhji.userManagement.removeMultiTask("sale_order");
        },
        cancel              : function(){
            this.clear();
            window.history.back();
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id },
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);

                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        validating          : function(){
            var result = true, nonItem = true;

            //Check select non item
            $.each(this.lineDS.data(), function(index, value){
                if(value.item_id>0){
                    nonItem = false;
                }
            });

            if(nonItem){
                $("#ntf1").data("kendoNotification").error("Please select at least one item!");

                result = false;
            }

            return result;
        },
        //Reference
        loadReference       : function(){
            var obj = this.get("obj");

            if(obj.contact_id>0){
                this.set("enableRef", true);

                this.referenceDS.filter([
                    { field: "contact_id", value: obj.contact_id },
                    { field: "status", value: 0 },
                    { field: "type", value: "Quote" },
                    { field: "due_date >=", value: kendo.toString(obj.issued_date, "yyyy-MM-dd") }
                ]);
            }else{
                this.set("enableRef", false);
                obj.set("reference_id", "");
            }
        },
        referenceChanges    : function(){
            var self = this, obj = this.get("obj");

            if(obj.reference_id>0){
                var reference = this.referenceDS.get(obj.reference_id);

                obj.set("employee_id", reference.employee_id);
                obj.set("reference_no", reference.number);
                obj.set("segments", reference.segments);

                this.referenceLineDS.query({
                    filter:[
                        { field: "transaction_id", value: obj.reference_id },
                        { field: "assembly_id", value: 0 }
                    ],
                    page: 1,
                    pageSize: 100
                }).then(function(){
                    var view = self.referenceLineDS.view();

                    self.lineDS.data([]);
                    $.each(view, function(index, value){
                        self.lineDS.add({
                            transaction_id      : 0,
                            reference_id        : reference.id,
                            item_id             : value.item_id,
                            tax_item_id         : value.tax_item_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            cost                : value.cost,
                            price               : value.price,
                            amount              : value.amount,
                            discount            : value.discount,
                            conversion_ratio    : value.conversion_ratio,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : 0,
                            required_date       : value.required_date,
                            reference_no        : reference_no,

                            item                : value.item,
                            measurement         : value.measurement,
                            tax_item            : value.tax_item,
                            contact             : value.contact
                        });
                    });

                    self.changes();
                });
            }
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("contact", view[0].contact);
                obj.set("recurring_id", id);
                obj.set("employee_id", view[0].employee_id);//Sale Rep
                obj.set("job_id", view[0].job_id);
                obj.set("segments", view[0].segments);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
                obj.set("bill_to", view[0].bill_to);
                obj.set("ship_to", view[0].ship_to);

                self.setContact(view[0].contact);
            });

            this.recurringLineDS.query({
                filter:[
                    { field: "transaction_id", value: id },
                    { field: "assembly_id", value: 0 }
                ]
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        tax_item_id         : value.tax_item_id,
                        item_id             : value.item_id,
                        measurement_id      : value.measurement_id,
                        description         : value.description,
                        quantity            : value.quantity,
                        cost                : value.cost,
                        price               : value.price,
                        amount              : value.amount,
                        discount            : value.discount,
                        rate                : value.rate,
                        locale              : value.locale,
                        movement            : 0,
                        required_date       : value.required_date,

                        item                : value.item,
                        measurement         : value.measurement,
                        tax_item            : value.tax_item
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.saleRecurring = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        contactDS           : banhji.source.customerDS,
        contact_id          : "",
        pageLoad            : function(){
            if(this.dataSource.total>0){
                this.search();
            }
        },
        search              : function(){
            var contact_id = this.get("contact_id");

            if(contact_id){
                this.dataSource.filter([
                    { field:"type", operator:"where_in", value:["Quote","Sale_Order"] },
                    { field:"contact_id", value: contact_id },
                    { field:"is_recurring", value: 1 }
                ]);
            }

            this.set("contact_id", "");
        }
    });
    // SALE REPORTS
    banhji.saleOrderListForSale =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "sales/transaction_list"),
        contactDS           : banhji.source.customerDS,
        sortList            : banhji.source.sortList,
        sorter              : "month",
        sdate               : "",
        edate               : "",
        obj                 : { contactIds: [] },
        company             : banhji.institute,
        displayDate         : "",
        orderCount          : 0,
        totalAmount         : 0,
        exArray             : [],
        pageLoad            : function(){
            this.search();
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search              : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate"),
                displayDate = "";

            para.push({ field:"type", value:"Sale_Order" });

            //Customer
            if(obj.contactIds.length>0){
                var contactIds = [];
                $.each(obj.contactIds, function(index, value){
                    contactIds.push(value);
                });
                para.push({ field:"contact_id", operator:"where_in", value:contactIds });
            }

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();

                var amount = 0, orderCount = 0;
                $.each(view, function(index, value){
                    $.each(value.line, function(ind, val){
                        orderCount++;
                        amount += val.amount;
                    });
                });

                self.set("orderCount", kendo.toString(orderCount, "n0"));
                self.set("totalAmount", kendo.toString(amount, "c2", banhji.locale));
            });
            this.dataSource.bind("requestEnd", function(e){
                if(e.type=="read"){
                    var response = e.response, balanceCal = 0, balance= 0;
                    self.exArray = [];

                    self.exArray.push({
                        cells: [
                            { value: self.company.name, textAlign: "center", colSpan: 5}
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Sale Order List",bold: true, fontSize: 20, textAlign: "center", colSpan: 5 }
                        ]
                    });
                    if(self.displayDate){
                        self.exArray.push({
                            cells: [
                                { value: self.displayDate, textAlign: "center", colSpan: 5 }
                            ]
                        });
                    }
                    self.exArray.push({
                        cells: [
                            { value: "", colSpan: 4 }
                        ]
                    });
                    self.exArray.push({
                        cells: [
                            { value: "Number", background: "#496cad", color: "#ffffff" },
                            { value: "Reference", background: "#496cad", color: "#ffffff" },
                            { value: "Date", background: "#496cad", color: "#ffffff" },
                            { value: "Status", background: "#496cad", color: "#ffffff" },
                            { value: "Amount", background: "#496cad", color: "#ffffff" },
                        ]
                    });
                    for (var i = 0; i < response.results.length; i++){
                        self.exArray.push({
                            cells: [
                                { value: response.results[i].name, bold: true, },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                                { value: "" },
                            ]

                        });
                        for(var j = 0; j < response.results[i].line.length; j++){
                            var status = response.results[i].line[j].status
                            if (status==0){
                                status = "Open"
                            }else{
                                status = "Used"
                            }
                            self.exArray.push({
                                cells: [
                                    { value: response.results[i].line[j].number },
                                    { value: response.results[i].line[j].number },
                                    { value: response.results[i].line[j].issued_date},
                                    { value: status },
                                    { value: response.results[i].line[j].amount},
                                ]
                            });
                        }
                        self.exArray.push({
                            cells: [
                                { value: "", colSpan: 4 }
                            ]
                        });
                    }
                }
            });
        },
        printGrid           : function() {
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=990, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/responsive.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:1mm; }'+
                        '.inv1 .main-color {' +

                            '-webkit-print-color-adjust:exact; ' +
                        '} ' +
                        '.table.table-borderless.table-condensed  tr th { background-color: #1E4E78!important;' +
                        '-webkit-print-color-adjust:exact; color:#fff!important;}' +
                        '.table.table-borderless.table-condensed  tr th * { color: #fff!important; -webkit-print-color-adjust:exact;}' +
                        '.inv1 .light-blue-td { ' +
                            'background-color: #c6d9f1!important;' +
                            'text-align: left;' +
                            'padding-left: 5px;' +
                            '-webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr td { ' +
                            'background-color: #F2F2F2!important; -webkit-print-color-adjust:exact;' +
                        '}'+
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tr:nth-child(2n+1) td { ' +
                            ' background-color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span2 *, .journal_block1>.span5 * {color: #fff!important;}' +
                        '.journal_block1>.span2:first-child { ' +
                            'background-color: #bbbbbb!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.journal_block1>.span5:last-child {' +
                            'background-color: #496cad!important; color: #fff!important; -webkit-print-color-adjust:exact; ' +
                        '}' +
                        '.journal_block1>.span5 {' +
                            'background-color: #5cc7dd!important; color: #fff!important; -webkit-print-color-adjust:exact;' +
                        '}' +
                        '.saleSummaryCustomer .table.table-borderless.table-condensed tfoot .bg-total td {' +
                            'background-color: #1C2633!important;' +
                            'color: #fff!important; ' +
                            '-webkit-print-color-adjust:exact;' +
                        '}' +
                        '</style>' +
                    '</head>' +
                    '<body><div class="saleSummaryCustomer" style="padding: 0 10px;">';
            var htmlEnd =
                    '</div></body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        },
        ExportExcel         : function(){
            var workbook = new kendo.ooxml.Workbook({
              sheets: [
                {
                  columns: [
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                    { autoWidth: true },
                  ],
                  title: "Sale Order List",
                  rows: this.exArray
                }
              ]
            });
            //save the file as Excel file with extension xlsx
            kendo.saveAs({dataURI: workbook.toDataURL(), fileName: "saleOrderList.xlsx"});
        }
    });



    /*************************************************
    *   RICE MILL MVVM                              *
    *************************************************/
    banhji.appCenter = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "customer_modules/dashboard"),
        topCustomerDS       : dataStore(apiUrl + "customer_modules/top_customer"),
        topARDS             : dataStore(apiUrl + "customer_modules/top_ar"),
        topProductDS        : dataStore(apiUrl + "inventory_modules/top_sale_product"),
        graphDS             : dataStore(apiUrl + "customer_modules/monthly_sale"),
        windowVisible       : false,
        window1Visible      : false,
        windowItemVisible   : false,
        obj                 : {},
        pageLoad            : function(){
            this.loadData();
        },
        openWindow          : function(){
            //this.addType();

            this.set("windowVisible", true);
        },
        closeWindow         : function(){
            //this.dataSource.cancelChanges();

            this.set("windowVisible", false);
        },
        openWindow1         : function(){
            //this.addType();

            this.set("window1Visible", true);
        },
        closeWindow1        : function(){
            //this.dataSource.cancelChanges();

            this.set("window1Visible", false);
        },
        setObj              : function(){
            this.set("obj", {
                //Sale
                sale            : 0,
                sale_customer   : 0,
                sale_product    : 0,
                sale_ordered    : 0,
                //Order
                so              : 0,
                so_avg          : 0,
                so_open         : 0,
                //AR
                ar              : 0,
                ar_open         : 0,
                ar_customer     : 0,
                ar_overdue      : 0
            });
        },
        loadData            : function(){
            var self = this, obj = this.get("obj");

            this.graphDS.read();

            this.dataSource.query({
                filter: []
            }).then(function(){
                var view = self.dataSource.view();

                obj.set("sale", kendo.toString(view[0].sale, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
                obj.set("sale_customer", kendo.toString(view[0].sale_customer, "n0"));
                obj.set("sale_product", kendo.toString(view[0].sale_product, "n0"));
                obj.set("sale_ordered", kendo.toString(view[0].sale_ordered, "n0"));

                obj.set("so", kendo.toString(view[0].so, "n0"));
                obj.set("so_avg", kendo.toString(view[0].so_avg, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
                obj.set("so_open", kendo.toString(view[0].so_open, "n0"));

                obj.set("ar", kendo.toString(view[0].ar, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
                obj.set("ar_open", kendo.toString(view[0].ar_open, "n0"));
                obj.set("ar_customer", kendo.toString(view[0].ar_customer, "n0"));
                obj.set("ar_overdue", kendo.toString(view[0].ar_overdue, "n0"));
            });

            this.topCustomerDS.query({
                filter: []
            });

            this.topARDS.query({
                filter: []
            });

            this.topProductDS.query({
                filter: []
            });
        }
    });
    banhji.riceMill = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "rice_mill_modules/dashboard"),
        obj                 : {},
        company             : banhji.institute,
        pageLoad            : function(){
            this.loadData();
        },
        loadData            : function(){
            var self = this;

            this.dataSource.query({
                filter: []
            }).then(function(){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
            });
        }
    });
    banhji.riceReportCenter = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl+"accounting_modules/ratio_analysis"),
        quickRatio          : 0,
        currentRatio        : 0,
        cashRatio           : 0,
        wcSale              : 0,
        grossProfitMargin   : 0,
        profitMargin        : 0,
        returnOnAsset       : 0,
        roce                : 0,
        arCollectionPeriod  : 0,
        apPaymentPeriod     : 0,
        inventoryTurnOver   : 0,
        ccc                 : 0,
        pageLoad            : function(){
            var self = this;

            this.dataSource.query({
                filter: [],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.dataSource.view();

                self.set("quickRatio", kendo.toString(view[0].quickRatio, "n"));
                self.set("currentRatio", kendo.toString(view[0].currentRatio, "n"));
                self.set("cashRatio", kendo.toString(view[0].cashRatio, "n"));

                self.set("wcSale", kendo.toString(view[0].wcSale, "p"));
                self.set("grossProfitMargin", kendo.toString(view[0].grossProfitMargin, "p"));
                self.set("profitMargin", kendo.toString(view[0].profitMargin, "p"));
                self.set("returnOnAsset", kendo.toString(view[0].returnOnAsset, "n"));

                self.set("roce", kendo.toString(view[0].roce, "p"));
                self.set("arCollectionPeriod", kendo.toString(view[0].arCollectionPeriod, "n"));
                self.set("apPaymentPeriod", kendo.toString(view[0].apPaymentPeriod, "n"));
                self.set("inventoryTurnOver", kendo.toString(view[0].inventoryTurnOver, "n"));
                self.set("ccc", kendo.toString(view[0].ccc, "n"));
            });
        }
    });
    // RICE MILL FUNCTION
    banhji.receiptNote =  kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        lineDS              : dataStore(apiUrl + "item_lines"),
        txnDS               : dataStore(apiUrl + "transactions"),
        numberDS            : dataStore(apiUrl + "transactions/number"),
        recurringDS         : dataStore(apiUrl + "transactions"),
        recurringLineDS     : dataStore(apiUrl + "item_lines"),
        referenceDS         : dataStore(apiUrl + "transactions"),
        referenceLineDS     : dataStore(apiUrl + "item_lines"),
        itemPriceDS         : dataStore(apiUrl + "item_prices"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        txnTemplateDS       : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{ field: "type", value: "GRN" }
        }),
        contactDS           : banhji.source.supplierDS,
        statusObj           : banhji.source.statusObj,
        amtDueColor         : banhji.source.amtDueColor,
        confirmMessage      : banhji.source.confirmMessage,
        frequencyList       : banhji.source.frequencyList,
        monthOptionList     : banhji.source.monthOptionList,
        monthList           : banhji.source.monthList,
        weekDayList         : banhji.source.weekDayList,
        dayList             : banhji.source.dayList,
        showMonthOption     : false,
        showMonth           : false,
        showWeek            : false,
        showDay             : false,
        obj                 : null,
        isEdit              : false,
        saveDraft           : false,
        saveClose           : false,
        savePrint           : false,
        saveRecurring       : false,
        showConfirm         : false,
        notDuplicateNumber  : true,
        recurring           : "",
        recurring_validate  : false,
        enableRef           : false,
        user_id             : banhji.source.user_id,
        pageLoad            : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        loadContact         : function(id){
            var obj = this.get("obj");

            obj.set("contact_id", id);
            this.contactChanges();
        },
        contactChanges      : function(){
            var self = this, obj = this.get("obj");

            if(obj.contact_id>0){
                var contact = this.contactDS.get(obj.contact_id);

                obj.set("locale", contact.locale);
                obj.set("bill_to", contact.bill_to);
                obj.set("ship_to", contact.ship_to);

                this.setRate();
                this.loadReference();
            }

            this.changes();
        },
        //Currency Rate
        setRate             : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            //Item Lines
            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });
        },
        //Item
        addItem             : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            row.set("rate", rate);
            row.set("locale", item.locale);

            //Get first price
            this.itemPriceDS.query({
                filter:[
                    { field:"item_id", value:item.id },
                    { field:"assembly_id", value:0 }
                ],
                page: 1,
                pageSize: 1
            }).then(function(){
                var view = self.itemPriceDS.view();

                if(view.length>0){
                    var measurement = {
                        measurement_id  : view[0].measurement_id,
                        conversion_ratio: view[0].conversion_ratio,
                        measurement     : view[0].measurement
                    };
                    row.set("measurement", measurement);
                }
            });
        },
        addItemCatalog      : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : 0,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : 1,

                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" }
                    });
                }
            });
        },
        changes             : function(){
            var self = this,
                obj = this.get("obj"),
                total = 0;

            $.each(this.lineDS.data(), function(index, value) {
                total += value.quantity;
            });

            obj.set("amount", total);
        },
        lineDSChanges       : function(arg){
            var self = banhji.receiptNote;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity"){
                    self.changes();
                }else if(arg.field=="gross_weight" || arg.field=="truck_weight" || arg.field=="bag_weight"){
                    var dataRow = arg.items[0], qty = 0;

                    if(dataRow.gross_weight>0){
                        qty = dataRow.gross_weight - dataRow.truck_weight - dataRow.bag_weight;
                    }else if(dataRow.truck_weight>0){
                        qty = dataRow.truck_weight - dataRow.bag_weight;
                    }else if(dataRow.bag_weight>0){
                        qty = dataRow.bag_weight;
                    }

                    dataRow.set("quantity", qty);
                }else if(arg.field=="measurement"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.measurement.measurement_id);
                    dataRow.set("conversion_ratio", dataRow.measurement.conversion_ratio);
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        setStatus           : function(){
            var self = this,
                obj = this.get("obj"),
                statusObj = this.get("statusObj");

            statusObj.set("text", "");
            statusObj.set("date", "");
            statusObj.set("number", "");
            statusObj.set("url", "");

            switch(obj.status) {
                case 0:
                    statusObj.set("text", "open");
                    break;
                case 1:
                    statusObj.set("text", "Received");

                    this.txnDS.query({
                        filter:{ field:"reference_id", value: obj.id },
                        sort: { field:"issued_date", dir:"desc" },
                        page:1,
                        pageSize:1
                    }).then(function(){
                        var view = self.txnDS.view();

                        if(view.length>0){
                            statusObj.set("date", kendo.toString(new Date(view[0].issued_date), "dd-MM-yyyy h:mm:ss tt"));
                            statusObj.set("number", view[0].number);

                            var url = "#/" + view[0].type.toLowerCase() + "/" + view[0].id;
                            statusObj.set("url", url);
                        }
                    });
                    break;
                case 4:
                    statusObj.set("text", "draft");
                    break;
                default:
                    //Default here
            }
        },
        //Obj
        loadObj             : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page: 1,
                    pageSize: 100
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    self.set("total", kendo.toString(view[0].amount, "n0"));
                    self.setStatus();

                    self.lineDS.query({
                        filter: [
                            { field: "transaction_id", value: id },
                            { field: "assembly_id", value: 0 }
                        ],
                    });
                    self.attachmentDS.filter({ field: "transaction_id", value: id });
                    self.referenceDS.filter({ field: "id", value: view[0].reference_id });
                });
            }
        },
        addEmpty            : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("total", 0);

            this.dataSource.insert(0, {
                transaction_template_id : 0,
                contact_id          : "",
                reference_id        : "",
                recurring_id        : "",
                user_id             : this.get("user_id"),
                type                : "Receipt_Note",//Required
                number              : "",
                amount              : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                due_date            : new Date(),
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                status              : 0,
                segments            : [],
                //Concrete
                driver_id           : 0,
                driver_name         : "",
                truck_number        : "",
                time_batched        : "",
                time_of_discharge   : "",
                time_of_completion  : "",
                cubic_meter         : "",
                total_batch         : "",
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.setRate();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
            }
        },
        addRow              : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                tax_item_id         : "",
                item_id             : "",
                measurement_id      : 0,
                description         : "",
                gross_weight        : 0,
                truck_weight        : 0,
                bag_weight          : 0,
                quantity            : 0,
                conversion_ratio    : 1,
                cost                : 0,
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : 0,
                reference_no        : "",

                item                : { id:"", name:"" },
                measurement         : { measurement_id:"", measurement:"" }
            });
        },
        removeRow           : function(e){
            var d = e.data;
            if(this.lineDS.total()>1){
                this.lineDS.remove(d);
                this.changes();
            }
        },
        addExtraRow         : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeEmptyRow      : function(){
            var raw = this.lineDS.data();
            var item, i;
            for(i=raw.length-1; i>=0; i--){
                item = raw[i];

                if (item.item_id==0) {
                    this.lineDS.remove(item);
                }
            }
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = this, obj = this.get("obj");

            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));
            obj.set("due_date", kendo.toString(new Date(obj.due_date), "yyyy-MM-dd"));
            obj.set("time_batched", kendo.toString(new Date(obj.time_batched), "HH:mm:ss"));
            obj.set("time_of_discharge", kendo.toString(new Date(obj.time_of_discharge), "HH:mm:ss"));
            obj.set("time_of_completion", kendo.toString(new Date(obj.time_of_completion), "HH:mm:ss"));

            this.removeEmptyRow();

            //Save Draft
            if(this.get("saveDraft")){
                obj.set("status", 4); //In progress
                obj.set("progress", "Draft");
                obj.set("is_journal", 0);//No Journal
            }

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Edit Mode
            if(obj.isNew()==false){
                //Use draft
                if(obj.status==4){
                    obj.set("status", 0);//Open
                    obj.set("progress", "");
                    obj.set("is_journal", 1);//Add Journal
                }
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                self.lineDS.sync();
                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveDraft") || self.get("saveClose")){
                    //Save Draft or Save Close
                    self.set("saveDraft", false);
                    self.set("saveClose", false);
                    self.cancel();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.clear();
                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear               : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("grn");
        },
        cancel              : function(){
            this.clear();
            window.history.back();
        },
        delete              : function(){
            var self = this, obj = this.get("obj");
            this.set("showConfirm",false);

            this.txnDS.query({
                filter:[
                    { field:"reference_id", value:obj.id },
                ],
                page:1,
                pageSize:1
            }).then(function(){
                var view = self.txnDS.view();

                if(view.length>0){
                    alert("Sorry, you can not delete it.");
                }else{
                    obj.set("deleted", 1);
                    self.dataSource.sync();
                    self.dataSource.bind("requestEnd", function(e){
                        if(e.type==="update"){
                            window.history.back();
                        }
                    });
                }
            });
        },
        openConfirm         : function(){
            this.set("showConfirm", true);
        },
        closeConfirm        : function(){
            this.set("showConfirm", false);
        },
        //Reference
        loadReference       : function(){
            var obj = this.get("obj");

            if(obj.contact_id>0){
                this.set("enableRef", true);

                this.referenceDS.filter([
                    { field: "contact_id", value: obj.contact_id },
                    { field: "status", value: 0 },
                    { field: "type", value: "Purchase_Order" },
                    { field: "due_date >=", value: kendo.toString(obj.issued_date, "yyyy-MM-dd") }
                ]);
            }else{
                this.set("enableRef", false);
                obj.set("reference_id", "");
            }
        },
        referenceChanges    : function(){
            var self = this, obj = this.get("obj");

            if(obj.reference_id>0){
                var reference = this.referenceDS.get(obj.reference_id);

                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
                obj.set("bill_to", view[0].bill_to);
                obj.set("ship_to", view[0].ship_to);

                this.referenceLineDS.query({
                    filter: { field:"transaction_id", value: obj.reference_id },
                    page: 1,
                    pageSize: 100
                }).then(function(){
                    var view = self.referenceLineDS.view();

                    self.lineDS.data([]);
                    $.each(view, function(index, value){
                        self.lineDS.add({
                            transaction_id      : 0,
                            reference_id        : reference.id,
                            item_id             : value.item_id,
                            tax_item_id         : value.tax_item_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            conversion_ratio    : value.conversion_ratio,
                            cost                : value.cost,
                            amount              : value.amount,
                            discount            : value.discount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : value.movement,
                            reference_no        : reference.number,

                            item                : { id:"", name:"" },
                            measurement         : { measurement_id:"", measurement:"" }
                        });
                    });

                    self.changes();
                });
            }
        },
        //Recurring
        loadRecurring       : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("recurring_id", id);
                obj.set("job_id", view[0].job_id);
                obj.set("locale", view[0].locale);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
                obj.set("bill_to", view[0].bill_to);
                obj.set("ship_to", view[0].ship_to);

                self.loadContact(view[0].contact_id);
            });

            this.recurringLineDS.query({
                filter:[
                    { field: "transaction_id", value: id },
                    { field: "assembly_id", value: 0 }
                ]
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);

                $.each(view, function(index, value){
                    self.lineDS.add({
                        transaction_id      : 0,
                        tax_item_id         : value.tax_item_id,
                        item_id             : value.item_id,
                        measurement_id      : value.measurement_id,
                        description         : value.description,
                        quantity            : value.quantity,
                        cost                : value.cost,
                        amount              : value.amount,
                        rate                : value.rate,
                        locale              : value.locale,
                        movement            : value.movement,

                        item                : value.item,
                        measurement         : value.measurement
                    });
                });

                self.changes();
            });
        },
        frequencyChanges    : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges  : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        recurringSync       : function(){
            var dfd = $.Deferred();

            this.recurringDS.sync();
            this.recurringDS.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.recurringDS.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        }
    });
    banhji.riceMillProduction = kendo.observable({
        lang                    : langVM,
        dataSource              : dataStore(apiUrl + "transactions"),
        lineDS                  : dataStore(apiUrl + "item_lines"),
        txnDS                   : dataStore(apiUrl + "transactions"),
        numberDS                : dataStore(apiUrl + "transactions/number"),
        accountLineDS           : dataStore(apiUrl + "account_lines"),
        toItemLineDS            : dataStore(apiUrl + "item_lines"),
        toAccountLineDS         : dataStore(apiUrl + "account_lines"),
        recurringDS             : dataStore(apiUrl + "transactions"),
        recurringLineDS         : dataStore(apiUrl + "item_lines"),
        recurringAccountLineDS  : dataStore(apiUrl + "account_lines"),
        journalLineDS           : dataStore(apiUrl + "journal_lines"),
        attachmentDS            : dataStore(apiUrl + "attachments"),
        wacDS                   : dataStore(apiUrl + "items/weighted_average_costing"),
        txnTemplateDS           : new kendo.data.DataSource({
            data: banhji.source.txnTemplateList,
            filter:{
                logic: "or",
                filters: [
                    { field: "type", value: "Internal_Usage" },
                    { field: "type", value: "Transfer_In" },
                    { field: "type", value: "Transfer_Out" },
                    { field: "type", value: "Usage_Disposal" }
                ]
            }
        }),
        jobDS                   : new kendo.data.DataSource({
            data: banhji.source.jobList,
            sort: { field: "name", dir: "asc" }
        }),
        segmentItemDS           : new kendo.data.DataSource({
            data: banhji.source.segmentItemList,
            sort: [
                { field: "segment_id", dir: "asc" },
                { field: "code", dir: "asc" }
            ]
        }),
        amtDueColor             : banhji.source.amtDueColor,
        confirmMessage          : banhji.source.confirmMessage,
        frequencyList           : banhji.source.frequencyList,
        monthOptionList         : banhji.source.monthOptionList,
        monthList               : banhji.source.monthList,
        weekDayList             : banhji.source.weekDayList,
        dayList                 : banhji.source.dayList,
        showMonthOption         : false,
        showMonth               : false,
        showWeek                : false,
        showDay                 : false,
        obj                     : null,
        isEdit                  : false,
        saveDraft               : false,
        saveClose               : false,
        savePrint               : false,
        saveRecurring           : false,
        showConfirm             : false,
        notDuplicateNumber      : true,
        fromQty                 : 0,
        fromAmount              : 0,
        toQty                   : 0,
        toAmount                : 0,
        user_id                 : banhji.source.user_id,
        pageLoad                : function(id){
            if(id){
                this.set("isEdit", true);
                this.loadObj(id);
            }else{
                if(this.get("isEdit") || this.dataSource.total()==0){
                    this.addEmpty();
                }
            }
        },
        //Upload
        onSelect                : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Transaction",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        removeFile              : function(e){
            var data = e.data;

            if (confirm(banhji.source.confirmMessage)) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile              : function(){
            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                //Delete File
                if(e.type=="destroy"){
                    if(saved==false && e.response){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var params = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(params, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });
        },
        //Currency Rate
        setRate                 : function(){
            var obj = this.get("obj"),
            rate = banhji.source.getRate(obj.locale, new Date(obj.issued_date));

            obj.set("rate", rate);

            //Item Lines
            $.each(this.lineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });

            //Account Line
            $.each(this.accountLineDS.data(), function(index, value){
                value.set("rate", rate);
                value.set("locale", obj.locale);
            });

            //Item Lines To
            $.each(this.toItemLineDS.data(), function(index, value){
                var itemRate = rate / banhji.source.getRate(value.locale, new Date(obj.issued_date));
                value.set("rate", itemRate);
            });

            //Account Line To
            $.each(this.toAccountLineDS.data(), function(index, value){
                value.set("rate", rate);
                value.set("locale", obj.locale);
            });
        },
        //Segment
        segmentChanges          : function(e) {
            var dataArr = this.get("obj").segments,
            lastIndex = dataArr.length - 1,
            last = this.segmentItemDS.get(dataArr[lastIndex]);

            if(dataArr.length > 1) {
                for(var i = 0; i < dataArr.length - 1; i++) {
                    var current_index = dataArr[i],
                    current = this.segmentItemDS.get(current_index);

                    if(current.segment_id === last.segment_id) {
                        dataArr.splice(lastIndex, 1);
                        break;
                    }
                }
            }
        },
        //From Item
        addItem                 : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            // row.set("cost", item.cost * rate);
            row.set("rate", rate);
            row.set("locale", item.locale);
            row.set("measurement", item.measurement);

            //Get cost
            this.wacDS.query({
                filter:[
                    { field:"item_id", value: item.id },
                    { field:"issued_date <=", operator:"where_related_transaction", value: kendo.toString(new Date(obj.issued_date),"yyyy-MM-dd  HH:mm:ss") }
                ]
            }).then(function(){
                var wac = self.wacDS.view();
                row.set("cost", wac[0].cost * rate);
            });

            self.changes();
        },
        addItemCatalog          : function(uid){
            var self = this,
                row = this.lineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.lineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : 0,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : 1,

                        item                : catalogItem,
                        measurement         : { measurement_id:"", measurement:"" }
                    });
                }
            });
        },
        addRow                  : function(){
            var obj = this.get("obj");

            this.lineDS.add({
                transaction_id      : obj.id,
                item_id             : "",
                measurement_id      : 0,
                description         : "",
                quantity            : 0,
                conversion_ratio    : 1,
                cost                : 0,
                price               : 0,
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : -1,
                reference_no        : "",

                item                : { id:"", name:"" },
                measurement         : { measurement_id:"", measurement:"" }
            });
        },
        addExtraRow             : function(uid){
            var row = this.lineDS.getByUid(uid),
                index = this.lineDS.indexOf(row);

            if(index==this.lineDS.total()-1){
                this.addRow();
            }
        },
        removeRow               : function(e){
            var data = e.data;
            if(this.lineDS.total()>1){
                this.lineDS.remove(data);
                this.changes();
            }
        },
        removeEmptyRow          : function(){
            var row, i;

            //Item
            var item = this.lineDS.data();
            for(i=item.length-1; i>=0; i--){
                row = item[i];

                if (row.item_id==0) {
                    this.lineDS.remove(row);
                }
            }

            //Account
            var account = this.accountLineDS.data();
            for(i=account.length-1; i>=0; i--){
                row = account[i];

                if (row.account_id==0) {
                    this.accountLineDS.remove(row);
                }
            }

            //Item To
            var itemTo = this.toItemLineDS.data();
            for(i=itemTo.length-1; i>=0; i--){
                row = itemTo[i];

                if (row.item_id==0) {
                    this.toItemLineDS.remove(row);
                }
            }

            //Account To
            var accountTo = this.toAccountLineDS.data();
            for(i=accountTo.length-1; i>=0; i--){
                row = accountTo[i];

                if (row.account_id==0) {
                    this.toAccountLineDS.remove(row);
                }
            }
        },
        itemLineDSChanges       : function(arg){
            var self = banhji.riceMillProduction;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalog(dataRow.uid);
                    }else{
                        self.addItem(dataRow.uid);
                    }

                    self.addExtraRow(dataRow.uid);
                }else if(arg.field=="quantity"){
                    self.changes();
                }else if(arg.field=="measurement"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.measurement.measurement_id);
                    dataRow.set("conversion_ratio", dataRow.measurement.conversion_ratio);
                }
            }
        },
        //From Account
        addRowAccount           : function(){
            var obj = this.get("obj");

            this.accountLineDS.add({
                transaction_id      : obj.id,
                account_id          : "",
                description         : "",
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : -1, //From Account

                account             : { id:"", name:"" }
            });
        },
        addExtraRowAccount      : function(uid){
            var row = this.accountLineDS.getByUid(uid),
                index = this.accountLineDS.indexOf(row);

            if(index==this.accountLineDS.total()-1){
                this.addRowAccount();
            }
        },
        removeRowAccount        : function(e){
            var d = e.data;

            this.accountLineDS.remove(d);
            this.changes();
        },
        accountLineDSChanges    : function(arg){
            var self = banhji.riceMillProduction;

            if(arg.field){
                if(arg.field=="account"){
                    var dataRow = arg.items[0],
                        account = dataRow.account;

                    dataRow.set("account_id", account.id);

                    self.addExtraRowAccount(dataRow.uid);
                }else if(arg.field=="amount"){
                    self.changes();
                }
            }
        },
        //To Item
        addRowTo                : function(){
            var obj = this.get("obj");

            this.toItemLineDS.add({
                transaction_id      : obj.id,
                item_id             : "",
                measurement_id      : 0,
                description         : "",
                yield               : 0,
                quantity            : 0,
                conversion_ratio    : 1,
                cost                : 0,
                price               : 0,
                amount              : 0,
                markup              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : 1,
                reference_no        : "",

                item                : { id:"", name:"" },
                measurement         : { measurement_id:"", measurement:"" }
            });

            this.changes();
        },
        addExtraRowTo           : function(uid){
            var row = this.toItemLineDS.getByUid(uid),
                index = this.toItemLineDS.indexOf(row);

            if(index==this.toItemLineDS.total()-1){
                this.addRowTo();
            }
        },
        removeRowTo             : function(e){
            var data = e.data;

            this.toItemLineDS.remove(data);
            this.changes();
        },
        addItemTo               : function(uid){
            var self = this,
                row = this.toItemLineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item,
                rate = obj.rate / banhji.source.getRate(item.locale, new Date(obj.issued_date));

            row.set("item_id", item.id);
            row.set("description", item.sale_description);
            row.set("rate", rate);
            row.set("locale", item.locale);
            row.set("measurement", item.measurement);

            self.changes();
        },
        addItemCatalogTo        : function(uid){
            var self = this,
                row = this.toItemLineDS.getByUid(uid),
                obj = this.get("obj"),
                item = row.item;

            this.toItemLineDS.remove(row);

            $.each(item.catalogs, function(index, value){
                var catalogItem = banhji.source.itemDS.get(value);

                if(catalogItem){
                    var rate = obj.rate / banhji.source.getRate(catalogItem.locale, new Date(obj.issued_date));

                    self.lineDS.add({
                        transaction_id      : obj.id,
                        tax_item_id         : 0,
                        item_id             : catalogItem.id,
                        measurement_id      : 0,
                        description         : catalogItem.sale_description,
                        quantity            : 1,
                        conversion_ratio    : 1,
                        cost                : 0,
                        price               : 0,
                        amount              : 0,
                        discount            : 0,
                        rate                : rate,
                        locale              : catalogItem.locale,
                        movement            : 1,

                        item                : catalogItem,
                        measurement         : catalogItem.measurement
                    });
                }
            });
        },
        toItemLineDSChanges     : function(arg){
            var self = banhji.riceMillProduction;

            if(arg.field){
                if(arg.field=="item"){
                    var dataRow = arg.items[0],
                        item = dataRow.item;

                    if(item.is_catalog=="1"){
                        self.addItemCatalogTo(dataRow.uid);
                    }else{
                        self.addItemTo(dataRow.uid);
                    }

                    self.addExtraRowTo(dataRow.uid);
                }else if(arg.field=="quantity" || arg.field=="price" || arg.field=="markup" || arg.field=="cost"){
                    self.changes();
                }else if(arg.field=="measurement"){
                    var dataRow = arg.items[0];

                    dataRow.set("measurement_id", dataRow.measurement.measurement_id);
                    dataRow.set("conversion_ratio", dataRow.measurement.conversion_ratio);
                }
            }
        },
        //To Account
        addRowAccountTo         : function(){
            var obj = this.get("obj");
            this.toAccountLineDS.add({
                transaction_id      : obj.id,
                account_id          : "",
                description         : "",
                amount              : 0,
                rate                : obj.rate,
                locale              : obj.locale,
                movement            : 1, //To Account

                account             : { id:"", name:"" }
            });

            this.changes();
        },
        addExtraRowAccountTo    : function(uid){
            var row = this.toAccountLineDS.getByUid(uid),
                index = this.toAccountLineDS.indexOf(row);

            if(index==this.toAccountLineDS.total()-1){
                this.addRowAccountTo();
            }
        },
        removeRowAccountTo      : function(e){
            var data = e.data;

            this.toAccountLineDS.remove(data);
            this.changes();
        },
        toAccountLineDSChanges  : function(arg){
            var self = banhji.riceMillProduction;

            if(arg.field){
                if(arg.field=="account"){
                    var dataRow = arg.items[0],
                        account = dataRow.account;

                    dataRow.set("account_id", account.id);

                    self.addExtraRowAccountTo(dataRow.uid);
                }else if(arg.field=="amount"){
                    self.changes();
                }
            }
        },
        //Number
        checkExistingNumber     : function(){
            var self = this, para = [],
            obj = this.get("obj");

            if(obj.number!==""){

                if(obj.isNew()==false){
                    para.push({ field:"id", operator:"where_not_in", value: [obj.id] });
                }

                para.push({ field:"number", value: obj.number });
                para.push({ field:"type", value: obj.type });

                this.txnDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 1
                }).then(function(e){
                    var view = self.txnDS.view();

                    if(view.length>0){
                        self.set("notDuplicateNumber", false);
                    }else{
                        self.set("notDuplicateNumber", true);
                    }
                });
            }
        },
        generateNumber      : function(){
            var self = this, obj = this.get("obj"),
                issueDate = new Date(obj.issued_date),
                startDate = new Date(obj.issued_date),
                endDate = new Date(obj.issued_date);

            this.set("notDuplicateNumber", true);

            startDate.setDate(1);
            startDate.setMonth(0);//Set to January
            endDate.setDate(31);
            endDate.setMonth(11);//Set to November

            this.numberDS.query({
                filter:[
                    { field:"type", value:obj.type },
                    { field:"issued_date >=", value:kendo.toString(startDate, "yyyy-MM-dd") },
                    { field:"issued_date <=", value:kendo.toString(endDate, "yyyy-MM-dd") }
                ]
            }).then(function(){
                var view = self.numberDS.view(),
                number = 0, str = "";

                if(view.length>0){
                    number = view[0].number.match(/\d+/g).map(Number);
                }

                number++;
                str = banhji.source.getPrefixAbbr(obj.type) + kendo.toString(issueDate, "yy") + kendo.toString(issueDate, "MM") + kendo.toString(number, "00000");

                obj.set("number", str);
            });
        },
        //Obj
        loadObj                 : function(id){
            var self = this, para = [];

            para.push({ field:"id", value: id });

            if(this.get("recurring")=="use"){
                this.set("recurring","");
                this.addEmpty();
                this.loadRecurring(id);
            }else{
                if(this.get("recurring")=="edit"){
                    this.set("recurring","");
                    para.push({ field:"is_recurring", value: 1 });
                }

                this.dataSource.query({
                    filter: para,
                    page:1,
                    pageSize:100
                }).then(function(e){
                    var view = self.dataSource.view();

                    self.set("obj", view[0]);
                    // self.set("fromQty", fromQty);
                    // self.set("fromAmount", kendo.toString(fromAmount, "c2", obj.locale));
                    // self.set("toQty", toQty);
                    // self.set("toAmount", kendo.toString(toAmount, "c2", obj.locale));

                    self.journalLineDS.filter({ field:"transaction_id", value: id });

                    //From
                    self.lineDS.query({
                        filter: [
                            { field: "transaction_id", value: id },
                            { field: "movement", value: -1 }
                        ]
                    }).then(function(){
                        var lineView = self.lineDS.view(),
                            fromQty = 0, fromAmount = 0;

                        $.each(lineView, function(index, value){
                            var amount = value.quantity * value.cost;
                            fromQty += value.quantity;
                            fromAmount += amount;
                        });

                        self.set("fromQty", fromQty);
                        self.set("fromAmount", kendo.toString(fromAmount, "c2", obj.locale));
                    });
                    self.accountLineDS.filter([
                        { field:"transaction_id", value: id },
                        { field:"movement", value: -1 }
                    ]);

                    //To
                    self.toItemLineDS.query({
                        filter:[
                            { field:"transaction_id", value: id },
                            { field:"movement", value: 1 }
                        ]
                    }).then(function(){
                        var toItemView = self.toItemLineDS.view(),
                            toQty = 0, toAmount = 0;

                        $.each(toItemView, function(index, value){
                            if(index>0){
                                //Cost
                                var cost = 0;
                                if(value.price>0 && value.markup>0){
                                    cost = value.price / (1 + value.markup);
                                }

                                var amount = value.quantity * cost;
                                toQty += value.quantity;
                                toAmount += amount;
                            }
                        });

                        self.set("toQty", toQty);
                        self.set("toAmount", kendo.toString(toAmount, "c2", obj.locale));
                    });
                    self.toAccountLineDS.filter([
                        { field:"transaction_id", value: id },
                        { field:"movement", value: 1 }
                    ]);
                });
            }
        },
        changes                 : function() {
            var obj = this.get("obj"),
                fromQty = 0, fromAmount = 0, toQty = 0, toAmount = 0, miscellaneousAmount = 0;

            //From
            $.each(this.lineDS.data(), function(index, value){
                var amount = value.quantity * value.cost;
                fromQty += value.quantity;
                fromAmount += amount;
                value.set("amount", amount);
            });
            $.each(this.accountLineDS.data(), function(index, value){
                fromAmount += value.amount;
            });

            //To
            $.each(this.toItemLineDS.data(), function(index, value){
                //Yield
                if(value.quantity>0 && fromQty>0){
                    var yieldd = value.quantity / fromQty;
                    value.set("yield", yieldd);
                }else{
                    value.set("yield", 0);
                }

                if(index>0){
                    //Cost
                    var cost = 0;
                    if(value.price>0 && value.markup>0){
                        cost = value.price / (1 + value.markup);
                    }
                    value.set("cost", cost);

                    miscellaneousAmount += value.quantity * cost;

                    var amount = value.quantity * cost;
                    toQty += value.quantity;
                    toAmount += amount;
                    value.set("amount", amount);
                }
            });
            $.each(this.toAccountLineDS.data(), function(index, value){
                toAmount += value.amount;
            });

            //Milled Rice
            if(fromAmount>0 && miscellaneousAmount>0){
                //Amount
                var milledRices = this.toItemLineDS.at(0),
                    milledRiceAmount = fromAmount - miscellaneousAmount;
                    milledRices.set("amount", milledRiceAmount);

                //Cost
                var milledRiceCost = 0;
                if(milledRices.quantity>0){
                    milledRiceCost = milledRiceAmount / milledRices.quantity;
                }
                milledRices.set("cost", milledRiceCost);

                toAmount += milledRiceAmount;

                var grid = $("#grid").data("kendoGrid");
                grid.refresh();
            }

            obj.set("amount", fromAmount);

            this.set("fromQty", fromQty);
            this.set("fromAmount", kendo.toString(fromAmount, "c2", obj.locale));
            this.set("toQty", toQty);
            this.set("toAmount", kendo.toString(toAmount, "c2", obj.locale));
        },
        addEmpty                : function(){
            this.dataSource.data([]);
            this.lineDS.data([]);
            this.accountLineDS.data([]);
            this.toItemLineDS.data([]);
            this.toAccountLineDS.data([]);
            this.journalLineDS.data([]);
            this.attachmentDS.data([]);

            this.set("isEdit", false);
            this.set("obj", null);
            this.set("totalFrom", 0);
            this.set("totalTo", 0);

            this.dataSource.insert(0, {
                transaction_template_id : 0,
                recurring_id        : "",
                item_id             : "",
                job_id              : 0,
                user_id             : this.get("user_id"),
                type                : "Rice_Mill_Production",//Required
                number              : "",
                amount              : 0,
                rate                : 1,
                locale              : banhji.locale,
                issued_date         : new Date(),
                bill_to             : "",
                ship_to             : "",
                memo                : "",
                memo2               : "",
                status              : 0,
                segments            : [],
                is_journal          : 1,
                //Recurring
                recurring_name      : "",
                start_date          : new Date(),
                frequency           : "Daily",
                month_option        : "Day",
                interval            : 1,
                day                 : 1,
                week                : 0,
                month               : 0,
                is_recurring        : 0
            });

            var obj = this.dataSource.at(0);
            this.set("obj", obj);
            this.setRate();
            this.generateNumber();

            //Default rows
            for (var i = 0; i < banhji.source.defaultLines; i++) {
                this.addRow();
                this.addRowAccount();
                this.addRowTo();
                this.addRowAccountTo();
            }
        },
        objSync                 : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                    : function(){
            var self = this, obj = this.get("obj");
            obj.set("issued_date", kendo.toString(new Date(obj.issued_date), "s"));

            this.removeEmptyRow();

            //Save Draft
            if(this.get("saveDraft")){
                obj.set("status", 4); //In progress
                obj.set("progress", "Draft");
                obj.set("is_journal", 0);//No Journal
            }

            //Recurring
            if(this.get("saveRecurring")){
                this.set("saveRecurring", false);

                obj.set("number", "");
                obj.set("is_recurring", 1);
            }

            //Edit Mode
            if(obj.isNew()==false){
                //Use draft
                if(obj.status==4){
                    obj.set("status", 0);//Open
                    obj.set("progress", "");
                    obj.set("is_journal", 1);//Add Journal
                }
            }

            //Save Obj
            this.objSync()
            .then(function(data){ //Success
                if(self.get("isEdit")==false){
                    //Item Line
                    $.each(self.lineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Account Line
                    $.each(self.accountLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //To Item Line
                    $.each(self.toItemLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //To Account Line
                    $.each(self.toAccountLineDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });

                    //Attachment
                    $.each(self.attachmentDS.data(), function(index, value){
                        value.set("transaction_id", data[0].id);
                    });
                }

                //Journal
                if(data[0].is_recurring==0 && data[0].is_journal==1){
                    self.addJournal(data[0].id);
                }

                self.lineDS.sync();
                self.accountLineDS.sync();
                self.toItemLineDS.sync();
                self.toAccountLineDS.sync();

                self.uploadFile();

                return data;
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(result){
                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);

                if(self.get("saveDraft") || self.get("saveClose")){
                    //Save Draft or Save Close
                    self.set("saveDraft", false);
                    self.set("saveClose", false);
                    self.cancel();
                }else if(self.get("savePrint")){
                    //Save Print
                    self.set("savePrint", false);
                    self.cancel();

                    if(result[0].transaction_template_id>0){
                        banhji.router.navigate("/invoice_form/"+result[0].id);
                    }
                }else{
                    //Save New
                    self.addEmpty();
                }
            });
        },
        clear                   : function(){
            this.dataSource.cancelChanges();
            this.lineDS.cancelChanges();
            this.accountLineDS.cancelChanges();
            this.toItemLineDS.cancelChanges();
            this.toAccountLineDS.cancelChanges();
            this.journalLineDS.cancelChanges();
            this.attachmentDS.cancelChanges();

            this.dataSource.data([]);
            this.lineDS.data([]);
            this.accountLineDS.data([]);
            this.toItemLineDS.data([]);
            this.toAccountLineDS.data([]);
            this.journalLineDS.data([]);
            this.attachmentDS.data([]);

            banhji.userManagement.removeMultiTask("internal_usage");
        },
        cancel                  : function(){
            this.clear();
            window.history.back();
        },
        validating              : function(){
            var result = true, obj = this.get("obj");

            if(kendo.toString(this.get("fromAmount"), "n2")!==kendo.toString(this.get("toAmount"), "n2")){
                $("#ntf1").data("kendoNotification").error("Total From must equal to Total To");

                result = false;
            }

            return result;
        },
        //Journal
        addJournal              : function(transaction_id){
            var self = this,
                obj = this.get("obj"),
                raw = "",
                entries = {};

            //Edit Mode
            if(obj.isNew()==false){
                //Delete previous journal
                $.each(this.journalLineDS.data(), function(index, value){
                    value.set("deleted", 1);
                });
            }

            //To on Dr
            $.each(this.toItemLineDS.data(), function(index, value){
                var item = value.item,
                    itemRate = banhji.source.getRate(item.locale, new Date(obj.issued_date));

                //Inventory on Dr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "dr"+inventoryID;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : 0,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : value.amount,
                            cr                  : 0,
                            rate                : itemRate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].dr += value.amount;
                    }
                }
            });
            $.each(this.toAccountLineDS.data(), function(index, value){
                raw = "dr"+value.account_id;

                //Account on Dr
                if(entries[raw]===undefined){
                    entries[raw] = {
                        transaction_id      : transaction_id,
                        account_id          : value.account_id,
                        contact_id          : 0,
                        description         : value.description,
                        reference_no        : "",
                        segments            : value.segments,
                        dr                  : value.amount,
                        cr                  : 0,
                        rate                : obj.rate,
                        locale              : obj.locale
                    };
                }else{
                    entries[raw].dr += value.amount;
                }
            });


            //From on Cr
            $.each(this.lineDS.data(), function(index, value){
                var item = value.item,
                    itemRate = banhji.source.getRate(item.locale, new Date(obj.issued_date));

                //Inventory on Cr
                var inventoryID = kendo.parseInt(item.inventory_account_id);
                if(inventoryID>0){
                    raw = "cr"+inventoryID;

                    if(entries[raw]===undefined){
                        entries[raw] = {
                            transaction_id      : transaction_id,
                            account_id          : inventoryID,
                            contact_id          : 0,
                            description         : value.description,
                            reference_no        : "",
                            segments            : obj.segments,
                            dr                  : 0,
                            cr                  : value.amount,
                            rate                : itemRate,
                            locale              : item.locale
                        };
                    }else{
                        entries[raw].cr += value.amount;
                    }
                }
            });
            $.each(this.accountLineDS.data(), function(index, value){
                raw = "cr"+value.account_id;

                //Account on Cr
                if(entries[raw]===undefined){
                    entries[raw] = {
                        transaction_id      : transaction_id,
                        account_id          : value.account_id,
                        contact_id          : 0,
                        description         : value.description,
                        reference_no        : "",
                        segments            : value.segments,
                        dr                  : 0,
                        cr                  : value.amount,
                        rate                : obj.rate,
                        locale              : obj.locale
                    };
                }else{
                    entries[raw].cr += value.amount;
                }
            });

            //Add to journal entry
            if(!jQuery.isEmptyObject(entries)){
                $.each(entries, function(index, value){
                    self.journalLineDS.add(value);
                });
            }

            this.journalLineDS.sync();
        },
        //Recurring
        loadRecurring           : function(id){
            var self = this;

            this.recurringDS.query({
                filter:[
                    { field:"id", value:id },
                    { field:"is_recurring", value:1 }
                ],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.recurringDS.view(),
                obj = self.get("obj");

                obj.set("recurring_id", id);
                obj.set("employee_id", view[0].employee_id);//Employee
                obj.set("job_id", view[0].job_id);
                obj.set("segments", view[0].segments);
                obj.set("memo", view[0].memo);
                obj.set("memo2", view[0].memo2);
            });

            //Item Line
            this.recurringLineDS.query({
                filter: { field:"transaction_id", value:id }
            }).then(function(){
                var view = self.recurringLineDS.view();
                self.lineDS.data([]);
                self.toItemLineDS.data([]);

                $.each(view, function(index, value){
                    if(value.movement==-1){//FROM
                        self.lineDS.add({
                            transaction_id      : 0,
                            tax_item_id         : value.tax_item_id,
                            item_id             : value.item_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            cost                : value.cost,
                            price               : value.price,
                            amount              : value.amount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : value.movement,

                            item                : value.item,
                            measurement         : value.measurement
                        });
                    }else{//TO
                        self.toItemLineDS.add({
                            transaction_id      : 0,
                            tax_item_id         : value.tax_item_id,
                            item_id             : value.item_id,
                            measurement_id      : value.measurement_id,
                            description         : value.description,
                            quantity            : value.quantity,
                            cost                : value.cost,
                            price               : value.price,
                            amount              : value.amount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : value.movement,

                            item                : value.item,
                            measurement         : value.measurement
                        });
                    }
                });

                self.changes();
            });

            //Account Line
            this.recurringAccountLineDS.query({
                filter: { field:"transaction_id", value:id }
            }).then(function(){
                var view = self.recurringAccountLineDS.view();
                self.accountLineDS.data([]);
                self.toAccountLineDS.data([]);

                $.each(view, function(index, value){
                    if(value.movement==-1){//FROM
                        self.accountLineDS.add({
                            transaction_id      : 0,
                            account_id          : value.account_id,
                            description         : value.description,
                            amount              : value.amount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : value.movement,

                            account             : value.account
                        });
                    }else{//TO
                        self.toAccountLineDS.add({
                            transaction_id      : 0,
                            account_id          : value.account_id,
                            description         : value.description,
                            amount              : value.amount,
                            rate                : value.rate,
                            locale              : value.locale,
                            movement            : value.movement,

                            account             : value.account
                        });
                    }
                });

                self.changes();
            });
        },
        frequencyChanges        : function(){
            var obj = this.get("obj");

            switch(obj.frequency) {
                case "Daily":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", false);

                    break;
                case "Weekly":
                    this.set("showMonthOption", false);
                    this.set("showMonth", false);
                    this.set("showWeek", true);
                    this.set("showDay", false);

                    break;
                case "Monthly":
                    this.set("showMonthOption", true);
                    this.set("showMonth", false);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                case "Annually":
                    this.set("showMonthOption", false);
                    this.set("showMonth", true);
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    //Default here..
            }
        },
        monthOptionChanges      : function(){
            var obj = this.get("obj");

            switch(obj.month_option) {
                case "Day":
                    this.set("showWeek", false);
                    this.set("showDay", true);

                    break;
                default:
                    this.set("showWeek", true);
                    this.set("showDay", false);
            }
        },
        validateRecurring       : function(){
            var result = true, obj = this.get("obj");

            if(obj.recurring_name!==""){
                //Check existing name
                $.each(this.recurringDS.data(), function(index, value){
                    if(value.recurring_name==obj.recurring_name){
                        result = false;
                        alert("This is name is taken.");

                        return false;
                    }
                });
            }
            else{
                result = false;
                alert("Recurring name is required.");
            }

            return result;
        }
    });
    banhji.riceMillRecurring = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "transactions"),
        contactDS           : banhji.source.supplierDS,
        txtSearch           : "",
        pageLoad            : function(){
            this.search();
        },
        search              : function(){
            var para = [],
            contact_id = this.get("contact_id"),
            txtSearch = this.get("txtSearch");

            if(txtSearch){
                para.push({ field:"recurring_name", operator:"startswith", value: txtSearch });
            }

            para.push({ field:"type", operator:"where_in", value:["Receipt_Note","Rice_Mill_Production"] });
            para.push({ field:"is_recurring", value: 1 });

            this.dataSource.filter(para);

            this.set("txtSearch", "");
        },
        edit                : function(e){
            var data = e.data;

            switch(data.type) {
                case "Receipt_Note":
                    banhji.receiptNote.set("recurring", "edit");
                    banhji.router.navigate('/receipt_note/' + data.id);
                    break;
                case "Rice_Mill_Production":
                    banhji.riceMillProduction.set("recurring", "edit");
                    banhji.router.navigate('/rice_mill_production/' + data.id);

                    break;
                default:
                    // default code block
            }
        },
        use                 : function(e){
            var data = e.data;

            switch(data.type) {
                case "Receipt_Note":
                    banhji.receiptNote.set("recurring", "use");
                    banhji.router.navigate('/receipt_note/' + data.id);
                    break;
                case "Rice_Mill_Production":
                    banhji.riceMillProduction.set("recurring", "use");
                    banhji.router.navigate('/rice_mill_production/' + data.id);

                    break;
                default:
                    // default code block
            }
        }
    });
    // RICE MILL REPORTS
    banhji.receiptNoteReport = kendo.observable({
        lang                    : langVM,
        dataSource              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "rice_mill_modules/receipt_note_report",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            group: {
                field: "name", aggregates: [
                    { field: "gross_weight", aggregate: "sum" },
                    { field: "truck_weight", aggregate: "sum" },
                    { field: "bag_weight", aggregate: "sum" },
                    { field: "quantity", aggregate: "sum"}
                ]
            },
            aggregate: [ { field: "item", aggregate: "count" },
                { field: "gross_weight", aggregate: "sum" },
                { field: "truck_weight", aggregate: "sum" },
                { field: "bag_weight", aggregate: "sum" },
                { field: "quantity", aggregate: "sum" }
            ],
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page: 1,
            pageSize: 100
        }),
        contactDS               : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "contacts",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:{ field:"parent_id", operator:"where_related_contact_type", value: 2 },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page: 1,
            pageSize: 100
        }),
        obj                     : {},
        sortList                : banhji.source.sortList,
        sorter                  : "month",
        sdate                   : "",
        edate                   : "",
        institute               : banhji.institute,
        displayDate             : "",
        total                   : 0,
        pageLoad                : function(){
            this.search();
        },
        sorterChanges           : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search                  : function(){
            var self = this, para = [], displayDate = "",
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate");

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.filter(para);
            // this.dataSource.query({
            //  filter:para
            // }).then(function(){
            //  var view = self.dataSource.view();
            // });
        }
    });
    banhji.riceMillProductionReport = kendo.observable({
        lang                    : langVM,
        dataSource              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "rice_mill_modules/rice_mill_production_report",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page: 1,
            pageSize: 100
        }),
        contactDS               : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "contacts",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:{ field:"parent_id", operator:"where_related_contact_type", value: 2 },
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page: 1,
            pageSize: 100
        }),
        obj                     : {},
        sortList                : banhji.source.sortList,
        sorter                  : "month",
        sdate                   : "",
        edate                   : "",
        institute               : banhji.institute,
        displayDate             : "",
        total                   : 0,
        pageLoad                : function(){
            this.search();
        },
        sorterChanges           : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        search                  : function(){
            var self = this, para = [], displayDate = "",
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate");

            //Dates
            if(start && end){
                start = new Date(start);
                end = new Date(end);
                displayDate = "From " + kendo.toString(start, "dd-MM-yyyy") + " To " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date >=", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else if(start){
                start = new Date(start);
                displayDate = "On " + kendo.toString(start, "dd-MM-yyyy");

                para.push({ field:"issued_date", operator:"where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
                end = new Date(end);
                displayDate = "As Of " + kendo.toString(end, "dd-MM-yyyy");
                end.setDate(end.getDate()+1);

                para.push({ field:"issued_date <", operator:"where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{

            }
            this.set("displayDate", displayDate);

            this.dataSource.query({
                filter:para
            }).then(function(){
                var view = self.dataSource.view();
            });
        }
    });




    /*************************************************
    *  RETAIL TRADING MVVM                              *
    *************************************************/
    banhji.appCenter = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "customer_modules/dashboard"),
        topCustomerDS       : dataStore(apiUrl + "customer_modules/top_customer"),
        topARDS             : dataStore(apiUrl + "customer_modules/top_ar"),
        topProductDS        : dataStore(apiUrl + "inventory_modules/top_sale_product"),
        graphDS             : dataStore(apiUrl + "customer_modules/monthly_sale"),
        windowVisible       : false,
        window1Visible      : false,
        windowItemVisible   : false,
        obj                 : {},
        pageLoad            : function(){
            this.loadData();
        },
        openWindow          : function(){
            //this.addType();

            this.set("windowVisible", true);
        },
        closeWindow         : function(){
            //this.dataSource.cancelChanges();

            this.set("windowVisible", false);
        },
        openWindow1         : function(){
            //this.addType();

            this.set("window1Visible", true);
        },
        closeWindow1        : function(){
            //this.dataSource.cancelChanges();

            this.set("window1Visible", false);
        },
        setObj              : function(){
            this.set("obj", {
                //Sale
                sale            : 0,
                sale_customer   : 0,
                sale_product    : 0,
                sale_ordered    : 0,
                //Order
                so              : 0,
                so_avg          : 0,
                so_open         : 0,
                //AR
                ar              : 0,
                ar_open         : 0,
                ar_customer     : 0,
                ar_overdue      : 0
            });
        },
        loadData            : function(){
            var self = this, obj = this.get("obj");

            this.graphDS.read();

            this.dataSource.query({
                filter: []
            }).then(function(){
                var view = self.dataSource.view();

                obj.set("sale", kendo.toString(view[0].sale, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
                obj.set("sale_customer", kendo.toString(view[0].sale_customer, "n0"));
                obj.set("sale_product", kendo.toString(view[0].sale_product, "n0"));
                obj.set("sale_ordered", kendo.toString(view[0].sale_ordered, "n0"));

                obj.set("so", kendo.toString(view[0].so, "n0"));
                obj.set("so_avg", kendo.toString(view[0].so_avg, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
                obj.set("so_open", kendo.toString(view[0].so_open, "n0"));

                obj.set("ar", kendo.toString(view[0].ar, banhji.locale=="km-KH"?"c0":"c2", banhji.locale));
                obj.set("ar_open", kendo.toString(view[0].ar_open, "n0"));
                obj.set("ar_customer", kendo.toString(view[0].ar_customer, "n0"));
                obj.set("ar_overdue", kendo.toString(view[0].ar_overdue, "n0"));
            });

            this.topCustomerDS.query({
                filter: []
            });

            this.topARDS.query({
                filter: []
            });

            this.topProductDS.query({
                filter: []
            });
        }
    });
    banhji.retailTrading = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl + "rice_mill_modules/dashboard"),
        obj                 : {},
        company             : banhji.institute,
        pageLoad            : function(){
            this.loadData();
        },
        loadData            : function(){
            var self = this;

            this.dataSource.query({
                filter: []
            }).then(function(){
                var view = self.dataSource.view();

                self.set("obj", view[0]);
            });
        }
    });
    banhji.retailTradingReportCenter = kendo.observable({
        lang                : langVM,
        dataSource          : dataStore(apiUrl+"accounting_modules/ratio_analysis"),
        quickRatio          : 0,
        currentRatio        : 0,
        cashRatio           : 0,
        wcSale              : 0,
        grossProfitMargin   : 0,
        profitMargin        : 0,
        returnOnAsset       : 0,
        roce                : 0,
        arCollectionPeriod  : 0,
        apPaymentPeriod     : 0,
        inventoryTurnOver   : 0,
        ccc                 : 0,
        pageLoad            : function(){
            var self = this;

            this.dataSource.query({
                filter: [],
                page: 1,
                pageSize: 100
            }).then(function(){
                var view = self.dataSource.view();

                self.set("quickRatio", kendo.toString(view[0].quickRatio, "n"));
                self.set("currentRatio", kendo.toString(view[0].currentRatio, "n"));
                self.set("cashRatio", kendo.toString(view[0].cashRatio, "n"));

                self.set("wcSale", kendo.toString(view[0].wcSale, "p"));
                self.set("grossProfitMargin", kendo.toString(view[0].grossProfitMargin, "p"));
                self.set("profitMargin", kendo.toString(view[0].profitMargin, "p"));
                self.set("returnOnAsset", kendo.toString(view[0].returnOnAsset, "n"));

                self.set("roce", kendo.toString(view[0].roce, "p"));
                self.set("arCollectionPeriod", kendo.toString(view[0].arCollectionPeriod, "n"));
                self.set("apPaymentPeriod", kendo.toString(view[0].apPaymentPeriod, "n"));
                self.set("inventoryTurnOver", kendo.toString(view[0].inventoryTurnOver, "n"));
                self.set("ccc", kendo.toString(view[0].ccc, "n"));
            });
        }
    });



    /*************************************************
    *   Mobile Sell MVVM                             *
    *************************************************/
    banhji.mobileSell = kendo.observable({
        lang                : langVM,
        itemDS              : new kendo.data.DataSource({
            transport: {
                read    : {
                    url: apiUrl + "items",
                    type: "GET",
                    headers: banhji.header,
                    dataType: 'json'
                },
                parameterMap: function(options, operation) {
                    if(operation === 'read') {
                        return {
                            page: options.page,
                            limit: options.pageSize,
                            filter: options.filter,
                            sort: options.sort
                        };
                    } else {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            },
            schema  : {
                model: {
                    id: 'id'
                },
                data: 'results',
                total: 'count'
            },
            filter:[
                { field:"item_type_id <>", value: 3 },
                { field:"item_type_id <>", value: 5 }
            ],
            sort:[
                { field:"item_type_id", dir:"asc" },
                { field:"id", dir:"asc" }
            ],
            batch: true,
            serverFiltering: true,
            serverSorting: true,
            serverPaging: true,
            page:1,
            pageSize: 100
        }),
        itemMovementDS      : dataStore(apiUrl + "item_lines"),
        onHandDS            : dataStore(apiUrl + "item_lines"),
        inventoryValueDS    : dataStore(apiUrl + "journal_lines"),
        sumamryDS           : dataStore(apiUrl + "item_lines"),
        transactionDS       : dataStore(apiUrl + "items/movement"),
        attachmentDS        : dataStore(apiUrl + "attachments"),
        categoryDS          : new kendo.data.DataSource({
            data: banhji.source.categoryList,
            filter:[
                { field:"item_type_id", operator:"neq", value: 3 },
                { field:"item_type_id", operator:"neq", value: 5 }
            ]
        }),
        sortList            : banhji.source.sortList,
        sorter              : "all",
        sdate               : "",
        edate               : "",
        obj                 : null,
        searchText          : "",
        category_id         : null,
        total_value         : 0,
        itemType            : "",
        uom                 : "",
        on_hand             : 0,
        currencyCode        : "",
        pageLoad            : function(id){
            if(id){
                this.loadObj(id);
            }

            //Refresh
            if(this.itemDS.total()>0){
                this.itemDS.fetch();
                this.transactionDS.fetch();
            }
        },
        sorterChanges       : function(){
            var today = new Date(),
            sdate = "",
            edate = "",
            sorter = this.get("sorter");

            switch(sorter){
                case "today":
                    this.set("sdate", today);
                    this.set("edate", "");

                    break;
                case "week":
                    var first = today.getDate() - today.getDay(),
                    last = first + 6;

                    this.set("sdate", new Date(today.setDate(first)));
                    this.set("edate", new Date(today.setDate(last)));

                    break;
                case "month":
                    this.set("sdate", new Date(today.getFullYear(), today.getMonth(), 1));
                    this.set("edate", new Date(today.getFullYear(), today.getMonth() + 1, 0));

                    break;
                case "year":
                    this.set("sdate", new Date(today.getFullYear(), 0, 1));
                    this.set("edate", new Date(today.getFullYear(), 11, 31));

                    break;
                default:
                    this.set("sdate", "");
                    this.set("edate", "");
            }
        },
        setItemType         : function(){
            var itemType = "", obj = this.get("obj");

            $.each(banhji.source.itemTypeDS.data(), function(index, value){
                if(value.id == obj.item_type_id){
                    itemType = value.name;

                    return false;
                }
            });

            this.set("itemType", itemType);
        },
        setCurrencyCode     : function(){
            var code = "", obj = this.get("obj");

            $.each(banhji.source.currencyDS.data(), function(index, value){
                if(value.locale == obj.locale){
                    code = value.code;

                    return false;
                }
            });

            this.set("currencyCode", code);
        },
        setUOM              : function(){
            var measurement = "", obj = this.get("obj");

            $.each(banhji.source.measurementDS.data(), function(index, value){
                if(value.id == obj.measurement_id){
                    measurement = value.name;

                    return false;
                }
            });

            this.set("uom", measurement);
        },
        loadOnHand          : function(){
            var self = this, rateList = {}, obj = this.get("obj");

            if(obj.item_type_id==1 && obj.is_catalog==0 && obj.is_assembly==0){
                this.onHandDS.query({
                    filter:[
                        { field:"item_id", value: obj.id },
                        { field:"type", operator:"where_in_related_transaction", value:["Cash_Purchase", "Credit_Purchase", "Commercial_Invoice", "Vat_Invoice", "Invoice", "Commercial_Cash_Sale", "Vat_Cash_Sale", "Cash_Sale", "Item_Adjustment", "Internal_Usage"] },
                        { field:"is_recurring <>", operator:"where_related_transaction", value: 1 },
                        { field:"deleted <>", operator:"where_related_transaction", value: 1 }
                    ]
                }).then(function(){
                    var view = self.onHandDS.view();

                    var onHand = 0, txnIds = [];
                    $.each(view, function(index, value){
                        txnIds.push(value.transaction_id);

                        if(rateList[value.transaction_id]===undefined){
                            rateList[value.transaction_id] = kendo.parseFloat(value.rate);
                        }

                        onHand += (value.quantity * value.conversion_ratio * value.movement);
                    });

                    self.set("on_hand", kendo.toString(onHand, "n"));

                    if(txnIds.length>0){
                        self.inventoryValueDS.query({
                            filter:[
                                { field:"transaction_id", operator:"where_in", value: txnIds },
                                { field:"account_type_id", operator:"where_in_related_account", value: 13 },
                                { field:"is_recurring <>", operator:"where_related_transaction", value: 1 },
                                { field:"deleted <>", operator:"where_related_transaction", value: 1 },
                                { field:"deleted <>", value: 1 }
                            ]
                        }).then(function(){
                            var view = self.inventoryValueDS.view();

                            if(view.length>0){
                                var inventoryDr = 0, inventoryCr = 0, totalInventory = 0;
                                $.each(view, function(index, value){
                                    if(value.dr>0){
                                        inventoryDr += kendo.parseFloat(value.dr) / rateList[value.transaction_id];
                                    }
                                    if(value.cr>0){
                                        inventoryCr += kendo.parseFloat(value.cr) / rateList[value.transaction_id];
                                    }
                                });

                                totalInventory = inventoryDr - inventoryCr;
                                self.set("total_value", kendo.toString(totalInventory, "c2", obj.locale));
                            }
                        });
                    }
                });
            }
        },
        //Upload
        onSelect            : function(e){
            // Array with information about the uploaded files
            var self = this,
            files = e.files,
            obj = this.get("obj");

            // Check the extension of each file and abort the upload if it is not .jpg
            $.each(files, function(index, value){
                if (value.extension.toLowerCase() === ".jpg"
                    || value.extension.toLowerCase() === ".jpeg"
                    || value.extension.toLowerCase() === ".tiff"
                    || value.extension.toLowerCase() === ".png"
                    || value.extension.toLowerCase() === ".gif"
                    || value.extension.toLowerCase() === ".pdf"){

                    var key = 'ATTACH_' + banhji.institute.id + "_" + Math.floor(Math.random() * 100000000000000001) +'_'+ value.name;

                    self.attachmentDS.add({
                        user_id         : self.get("user_id"),
                        transaction_id  : obj.id,
                        type            : "Item",
                        name            : value.name,
                        description     : "",
                        key             : key,
                        url             : banhji.s3 + key,
                        size            : value.size,
                        created_at      : new Date(),

                        file            : value.rawFile
                    });
                }else{
                    alert("This type of file is not allowed to attach.");
                }
            });
        },
        onRemove            : function(e){
            // Array with information about the uploaded files
            var self = this, files = e.files;
            $.each(this.attachmentDS.data(), function(index, value){
                if(value.name==files[0].name){
                    self.attachmentDS.remove(value);

                    return false;
                }
            });
        },
        removeFile          : function(e){
            var data = e.data;

            if (confirm("Are you sure, you want to delete it?")) {
                this.attachmentDS.remove(data);
            }
        },
        uploadFile          : function(){
            var self = this;

            $.each(this.attachmentDS.data(), function(index, value){
                if(!value.id){
                    var params = {
                        Body: value.file,
                        Key: value.key
                    };
                    bucket.upload(params, function (err, data) {
                        // console.log(err, data);
                        // var url = data.Location;
                    });
                }
            });

            this.attachmentDS.sync();
            var saved = false;
            this.attachmentDS.bind("requestEnd", function(e){
                if(e.type=="destroy"){
                    if(saved==false){
                        saved = true;

                        var response = e.response.results;
                        $.each(response, function(index, value){
                            var paramz = {
                                //Bucket: 'STRING_VALUE', /* required */
                                Delete: { /* required */
                                    Objects: [ /* required */
                                        {
                                            Key: value.data.key /* required */
                                        }
                                      /* more items */
                                    ]
                                }
                            };
                            bucket.deleteObjects(paramz, function(err, data) {
                                //console.log(err, data);
                            });
                        });
                    }
                }
            });

            //Clear upload files
            $(".k-upload-files").remove();
        },
        //Obj
        loadObj             : function(id){
            var self = this;

            this.itemDS.query({
                filter: { field:"id", value:id},
                page:1,
                pageSize:100
            }).then(function(){
                var view = self.itemDS.view();

                if(view.length>0){
                    self.set("obj", view[0]);
                    self.loadData();
                }
            });
        },
        loadData            : function(){
            var obj = this.get("obj");

            if(obj!==null){
                this.searchTransaction();
                this.attachmentDS.query({
                    filter:{ field:"item_id", value: obj.id },
                    page: 1,
                    pageSize:10
                });
                this.setCurrencyCode();
                this.setUOM();
                this.setItemType();
                this.loadOnHand();
            }
        },
        selectedRow         : function(e){
            var id = e.data.id,
            data = e.data;

            this.set("on_hand", 0);
            this.set("total_value", 0);

            this.set("obj", data);
            this.loadData();
        },
        sorterChanges       : function(){
            var value = this.get("sorter");

            switch(value){
            case "today":
                var today = new Date();

                this.set("sdate", today);
                this.set("edate", today);

                break;
            case "week":
                var thisWeek = new Date;
                var first = thisWeek.getDate() - thisWeek.getDay();
                var last = first + 6;

                var firstDayOfWeek = new Date(thisWeek.setDate(first));
                var lastDayOfWeek = new Date(thisWeek.setDate(last));

                this.set("sdate", firstDayOfWeek);
                this.set("edate", lastDayOfWeek);

                break;
            case "month":
                var thisMonth = new Date;
                var firstDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth(), 1);
                var lastDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth() + 1, 0);

                this.set("sdate", firstDayOfMonth);
                this.set("edate", lastDayOfMonth);

                break;
            case "year":
                var thisYear = new Date();
                var firstDayOfYear = new Date(thisYear.getFullYear(), 0, 1);
                var lastDayOfYear = new Date(thisYear.getFullYear(), 11, 31);

                this.set("sdate", firstDayOfYear);
                this.set("edate", lastDayOfYear);

                break;
            default:
                this.set("sdate", "");
                this.set("edate", "");
            }
        },
        enterSearch         : function(e){
            e.preventDefault();

            this.search();
        },
        search              : function(){
            var self = this,
            para = [],
            searchText = this.get("searchText"),
            category_id = this.get("category_id");

            if(searchText){
                var textParts = searchText.replace(/([a-z]+)/i, "$1 ").split(/[^0-9a-z]+/ig);

                para.push(
                    { field: "abbr", value: textParts[0] },
                    { field: "number", value: textParts[1] },
                    { field: "name", operator: "or_like", value: searchText }
                );
            }

            if(category_id){
                para.push({ field:"category_id", value:category_id });
            }

            // para.push({ field:"item_type_id", value:1 });
            // para.push({ field:"is_catalog", value: 0 });
            // para.push({ field:"is_assembly", value: 0 });

            this.itemDS.filter(para);

            this.set("searchText", "");
            this.set("category_id", 0);
        },
        searchTransaction   : function(){
            var self = this, para = [],
                obj = this.get("obj"),
                start = this.get("sdate"),
                end = this.get("edate");

            if(obj!==null){
                para.push({ field:"item_id", value: obj.id });

                //Dates
                if(start && end){
                    start = new Date(start);
                    end = new Date(end);
                    end.setDate(end.getDate()+1);

                    para.push({ field:"issued_date >=", operator: "where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                    para.push({ field:"issued_date <=", operator: "where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
                }else if(start){
                    start = new Date(start);
                    para.push({ field:"issued_date", operator: "where_related_transaction", value: kendo.toString(start, "yyyy-MM-dd") });
                }else if(end){
                    end = new Date(end);
                    end.setDate(end.getDate()+1);
                    para.push({ field:"issued_date <=", operator: "where_related_transaction", value: kendo.toString(end, "yyyy-MM-dd") });
                }else{}

                this.transactionDS.query({
                    filter: para,
                    page: 1,
                    pageSize: 10
                });
            }
        },
        edit                : function(){
            var obj = this.get("obj");

            if(obj!==null){
                if(obj.item_type_id=="1"){
                    if(obj.is_catalog=="1"){
                        banhji.router.navigate('/item_catalog/'+obj.id);
                    }else if(obj.is_assembly=="1"){
                        banhji.router.navigate('/item_assembly/'+obj.id);
                    }else{
                        banhji.router.navigate('/item/'+obj.id);
                    }
                }else if(obj.item_type_id=="2"){
                    banhji.router.navigate('/non_inventory_part/'+obj.id);
                }else if(obj.item_type_id=="3"){
                    banhji.router.navigate('/fixed_assets/'+obj.id);
                }else if(obj.item_type_id=="4"){
                    banhji.router.navigate('/item_service/'+obj.id);
                }else if(obj.item_type_id=="5"){
                    banhji.router.navigate('/txn_item/'+obj.id);
                }else{

                }
            }
        },
        pricing             : function(){
            var obj = this.get("obj");

            if(obj!==null){
                if(obj.is_catalog=="1"){
                    banhji.router.navigate('/item_catalog/'+obj.id);
                }else if(obj.is_assembly=="1"){
                    banhji.router.navigate('/item_assembly/'+obj.id);
                }else{
                    banhji.router.navigate('/item_prices/'+obj.id);
                }
            }
        },
        variant             : function(){
            var obj = this.get("obj");

            if(obj!==null){
                if(obj.variant.length>0){
                    banhji.router.navigate('/item_variant/'+obj.sub_of_id);
                }
            }
        }
    });



    /*************************************************
    *   IMPORT MVVM                                  *
    *************************************************/
    banhji.importContact = kendo.observable({
        dataSource    : dataStore(apiUrl+"imports/contact"),
        onSelected    : function(e) {
            $('li.k-file').remove();
            var files = e.files;
            var reader = new FileReader();
            banhji.importContact.dataSource.data([]);
            reader.onload = function() {
                var data = reader.result;
                var result = {};
                var workbook = XLSX.read(data, {type : 'binary'});
                workbook.SheetNames.forEach(function(sheetName) {
                    var roa = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
                    if(roa.length > 0){
                        result[sheetName] = roa;
                        for(var i = 0; i < roa.length; i++) {
                            banhji.importContact.dataSource.add(roa[i]);
                        }
                    }
                });
            }
            reader.readAsBinaryString(files[0].rawFile);
        },
        save: function() {
            $("#loadImport").css("display","block");
            banhji.importContact.dataSource.sync();
            banhji.importContact.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    $("#ntf1").data("kendoNotification").success("Imported contacts successfully!");
                    $("#loadImport").css("display","none");
                }
            });
            banhji.importContact.dataSource.bind("error", function(e){
                $("#ntf1").data("kendoNotification").error("Error Importing Contact!");
                $("#loadImport").css("display","none");
            });
        }
    });
    banhji.importItem = kendo.observable({
        dataSource    : dataStore(apiUrl+"imports/item"),
        onSelected    : function(e) {
            $('li.k-file').remove();
            var files = e.files;
            var reader = new FileReader();
            banhji.importItem.dataSource.data([]);
            reader.onload = function() {
                var data = reader.result;
                var result = {};
                var workbook = XLSX.read(data, {type : 'binary'});
                workbook.SheetNames.forEach(function(sheetName) {
                    var roa = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
                    if(roa.length > 0){
                        result[sheetName] = roa;
                        for(var i = 0; i < roa.length; i++) {
                            banhji.importItem.dataSource.add(roa[i]);
                        }
                    }
                });
            }
            reader.readAsBinaryString(files[0].rawFile);
        },
        save: function() {
            $("#loadImport").css("display","block");
            banhji.importItem.dataSource.sync();
            banhji.importItem.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    $("#ntf1").data("kendoNotification").success("Imported Inventory successfully!");
                    $("#loadImport").css("display","none");
                }
            });
            banhji.importItem.dataSource.bind("error", function(e){
                $("#ntf1").data("kendoNotification").error("Error Importing Inventory!");
                $("#loadImport").css("display","none");
            });
        }
    });
    banhji.importChartAccount = kendo.observable({
        dataSource    : dataStore(apiUrl+"imports/coa"),
        onSelected    : function(e) {
            $('li.k-file').remove();
            var files = e.files;
            var reader = new FileReader();
            banhji.importChartAccount.dataSource.data([]);
            reader.onload = function() {
                var data = reader.result;
                var result = {};
                var workbook = XLSX.read(data, {type : 'binary'});
                workbook.SheetNames.forEach(function(sheetName) {
                    var roa = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
                    if(roa.length > 0){
                        result[sheetName] = roa;
                        for(var i = 0; i < roa.length; i++) {
                            banhji.importChartAccount.dataSource.add(roa[i]);
                        }
                    }
                });
            }
            reader.readAsBinaryString(files[0].rawFile);
        },
        save: function() {
            $("#loadImport").css("display","block");
            banhji.importChartAccount.dataSource.sync();
            banhji.importChartAccount.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    $("#ntf1").data("kendoNotification").success("Imported Chart of Account successfully!");
                    $("#loadImport").css("display","none");
                }
            });
            banhji.importChartAccount.dataSource.bind("error", function(e){
                $("#ntf1").data("kendoNotification").error("Error Importing Chart of Account!");
                $("#loadImport").css("display","none");
            });
        }
    });
    banhji.importTxn = kendo.observable({
        dataSource          : dataStore(apiUrl + "transactions"),
        itemLineDS          : dataStore(apiUrl + "item_lines"),
        journalLineDS       : dataStore(apiUrl + "journal_lines"),
        contactDS           : dataStore(apiUrl + "contacts/less"),
        itemDS              : dataStore(apiUrl + "items/less"),
        txnList             : [],
        enableImport        : false,
        pageLoad            : function(){
            this.contactDS.query({
                filter:[]
            });
            this.itemDS.query({
                filter:[]
            });
        },
        getCustomerId       : function(name, row){
            var id = 0, self = banhji.importTxn;

            $.each(this.contactDS.data(), function(index, value){
                if(value.name.trim()==name){
                    id = value.id;

                    return false;
                }
            });

            if(id==0){
                self.clear();
                var number = kendo.parseInt(row)+2;
                alert(name + " not found at row number " + number);
            }

            return id;
        },
        getSupplierId       : function(name, row){
            var id = 0, self = banhji.importTxn;

            $.each(this.contactDS.data(), function(index, value){
                if(value.name.trim()==name){
                    id = value.id;

                    return false;
                }
            });

            if(id==0){
                self.clear();
                var number = kendo.parseInt(row)+2;
                alert(name + " not found at row number " + number);
            }

            return id;
        },
        getItemId           : function(name, row){
            var id = 0, self = banhji.importTxn;

            $.each(this.itemDS.data(), function(index, value){
                if(value.name.trim()==name){
                    id = value.id;

                    return false;
                }
            });

            if(id==0){
                self.clear();
                var number = kendo.parseInt(row)+2;
                alert(name + " not found at row number " + number);
            }

            return id;
        },
        getMeasurementId    : function(name){
            var id = 0;

            $.each(banhji.source.measurementList, function(index, value){
                if(value.name.trim()==name){
                    id = value.id;

                    return false;
                }
            });

            return id;
        },
        getTaxId            : function(name, row){
            var id = 0, self = banhji.importTxn;

            $.each(banhji.source.taxList, function(index, value){
                if(value.name.trim()==name){
                    id = value.id;

                    return false;
                }
            });

            if(id==0){
                self.clear();
                var number = kendo.parseInt(row)+2;
                alert(name + " not found at row number " + number);
            }

            return id;
        },
        getAccountId        : function(name, row){
            var id = 0, self = banhji.importTxn;

            $.each(banhji.source.accountList, function(index, value){
                if(value.name.trim()==name){
                    id = value.id;

                    return false;
                }
            });

            if(id==0){
                self.clear();
                var number = kendo.parseInt(row)+2;
                alert(name + " not found at row number " + number);
            }

            return id;
        },
        onSelected          : function(e){
            var self = banhji.importTxn,
                files = e.files,
                reader = new FileReader(),
                isJournal = ["Cash_Purchase","Credit_Purchase","Commercial_Invoice","Vat_Invoice","Invoice","Commercial_Cash_Sale","Vat_Cash_Sale","Cash_Sale"];

            self.set("enableImport", true);

            reader.onload = function() {
                var data = reader.result,
                    transaction_id = 0, is_journal = 0, contact_id = 0, txn_account_id = 0,
                    type = "", issued_date = "", memo = "",
                    raw = "", txn = {}, entries = {},
                    workbook = XLSX.read(data, {type : 'binary'});

                workbook.SheetNames.forEach(function(sheetName) {
                    var roa = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);

                    if(roa.length > 0 && sheetName=="purchases"){
                        for(var i = 0; i < roa.length; i++) {
                            var account_id = 0,
                                tax = 0,
                                tax_item_id = 0,
                                tax_account_id = 0,
                                measurement_id = 0,
                                description = roa[i].description==null?"":roa[i].description,
                                quantity = kendo.parseInt(roa[i].quantity),
                                cost = kendo.parseFloat(roa[i].cost),
                                amount = kendo.parseFloat(roa[i].amount),
                                item_id = self.getItemId(roa[i].item.trim(), i),
                                item = self.itemDS.get(item_id);

                            if(roa[i].name!==undefined){
                                contact_id = self.getSupplierId(roa[i].name.trim(), i);
                            }

                            if(roa[i].account!==undefined){
                                txn_account_id = self.getAccountId(roa[i].account.trim(), i);
                            }

                            if(roa[i].measurement!==undefined){
                                measurement_id = self.getMeasurementId(roa[i].measurement.trim());
                            }

                            if(roa[i].issued_date!==undefined){
                                issued_date = new Date(roa[i].issued_date.trim());
                            }

                            var itemRate = banhji.source.getRate(item.locale, issued_date);

                            //New Transaction
                            if(roa[i].type!==undefined){
                                type = roa[i].type.trim();
                                memo = roa[i].memo==null?"":roa[i].memo;

                                if(jQuery.inArray( type, isJournal )==-1){
                                    is_journal = 0;
                                }else{
                                    is_journal = 1;
                                }

                                txn = {
                                    contact_id              : contact_id,
                                    transaction_template_id : 3,
                                    payment_term_id         : 5,
                                    account_id              : txn_account_id,
                                    reference_no            : roa[i].reference_no,
                                    type                    : type,//Required
                                    number                  : roa[i].number.trim(),
                                    sub_total               : 0,
                                    discount                : 0,
                                    tax                     : 0,
                                    deposit                 : 0,
                                    amount                  : 0,
                                    remaining               : 0,
                                    rate                    : 1,//Required
                                    locale                  : banhji.locale,//Required
                                    issued_date             : kendo.toString(new Date(issued_date), "s"),//Required
                                    due_date                : kendo.toString(new Date(roa[i].due_date.trim()), "yyyy-MM-dd"),
                                    bill_to                 : roa[i].bill_to,
                                    ship_to                 : roa[i].ship_to,
                                    memo                    : memo,
                                    additional_cost         : 0,
                                    additional_apply        : "Equal",
                                    status                  : 0,
                                    is_journal              : is_journal,//Required
                                    //Recurring
                                    recurring_name          : "",
                                    start_date              : new Date(),
                                    frequency               : "Daily",
                                    month_option            : "Day",
                                    interval                : 1,
                                    day                     : 1,
                                    week                    : 0,
                                    month                   : 0,
                                    is_recurring            : 0
                                };
                            }

                            //Tax on Dr
                            if(roa[i].tax!==undefined){
                                raw = "dr"+tax_account_id;
                                tax_item_id = self.getTaxId(roa[i].tax.trim(), i);
                                taxItem = banhji.source.taxItemDS.get(tax_item_id);
                                tax_account_id = taxItem.account_id;
                                tax = amount * taxItem.rate;

                                if(entries[raw]===undefined){
                                    entries[raw] = {
                                        transaction_id      : transaction_id,
                                        account_id          : tax_account_id,
                                        contact_id          : contact_id,
                                        description         : description,
                                        reference_no        : "",
                                        segments            : [],
                                        dr                  : tax,
                                        cr                  : 0,
                                        rate                : 1,
                                        locale              : banhji.locale
                                    };
                                }else{
                                    entries[raw].dr += tax;
                                }
                            }

                            txn.sub_total   += amount;
                            txn.tax         += tax;
                            txn.amount      += amount + tax;

                            //Cash or A/P on Cr
                            if(txn_account_id>0){
                                raw = "cr"+txn_account_id;

                                if(entries[raw]===undefined){
                                    entries[raw] = {
                                        transaction_id      : transaction_id,
                                        account_id          : txn_account_id,
                                        contact_id          : contact_id,
                                        description         : memo,
                                        reference_no        : roa[i].reference_no,
                                        segments            : [],
                                        dr                  : 0,
                                        cr                  : amount + tax,
                                        rate                : 1,
                                        locale              : banhji.locale
                                    };
                                }else{
                                    entries[raw].cr += amount + tax;
                                }
                            }

                            //Item lines
                            self.itemLineDS.add({
                                transaction_id      : transaction_id,
                                tax_item_id         : tax_item_id,
                                wht_account_id      : 0,
                                item_id             : item_id,
                                measurement_id      : measurement_id,
                                description         : description,
                                quantity            : quantity,
                                conversion_ratio            : 1,
                                cost                : cost,
                                amount              : amount,
                                rate                : 1,
                                locale              : banhji.locale,
                                additional_cost     : 0,
                                additional_applied  : false,
                                movement            : 1
                            });

                            if(is_journal==1){
                                //Service on Dr
                                account_id = kendo.parseInt(item.expense_account_id);
                                if(account_id>0 && item.item_type_id==4){
                                    raw = "dr"+account_id;

                                    var serviceAmount = quantity*cost;

                                    if(entries[raw]===undefined){
                                        entries[raw] = {
                                            transaction_id      : transaction_id,
                                            account_id          : account_id,
                                            contact_id          : contact_id,
                                            description         : description,
                                            reference_no        : "",
                                            segments            : [],
                                            dr                  : serviceAmount,
                                            cr                  : 0,
                                            rate                : itemRate,
                                            locale              : item.locale
                                        };
                                    }else{
                                        entries[raw].dr += serviceAmount;
                                    }
                                }

                                //Inventory on Dr
                                account_id = kendo.parseInt(item.inventory_account_id);
                                if(account_id>0){
                                    raw = "dr"+account_id;

                                    var inventoryAmount = amount;
                                    if(item.item_type_id==1 || item.item_type_id==4){
                                        inventoryAmount = quantity*cost;
                                    }

                                    if(entries[raw]===undefined){
                                        entries[raw] = {
                                            transaction_id      : transaction_id,
                                            account_id          : account_id,
                                            contact_id          : contact_id,
                                            description         : description,
                                            reference_no        : "",
                                            segments            : [],
                                            dr                  : inventoryAmount,
                                            cr                  : 0,
                                            rate                : itemRate,
                                            locale              : item.locale
                                        };
                                    }else{
                                        entries[raw].dr += inventoryAmount;
                                    }
                                }
                            }

                            //Last line
                            var nextIndex = i+1;
                            if((nextIndex<roa.length && roa[nextIndex].type!==undefined) || i==roa.length-1){
                                self.dataSource.add(txn);

                                $.each(entries, function(index, value){
                                    self.journalLineDS.add(value);
                                });

                                raw = "";
                                txn = {};
                                entries = {};
                                transaction_id++;
                            }
                        }
                    }

                    if(roa.length > 0 && sheetName=="sales"){
                        for(var i = 0; i < roa.length; i++) {
                            var account_id = 0,
                                tax = 0,
                                tax_item_id = 0,
                                tax_account_id = 0,
                                measurement_id = 0,
                                description = roa[i].description==null?"":roa[i].description,
                                quantity = kendo.parseInt(roa[i].quantity),
                                price = kendo.parseFloat(roa[i].price),
                                amount = kendo.parseFloat(roa[i].amount),
                                item_id = self.getItemId(roa[i].item.trim(), i),
                                item = self.itemDS.get(item_id);

                            if(roa[i].name!==undefined){
                                contact_id = self.getCustomerId(roa[i].name.trim(), i);
                            }

                            if(roa[i].account!==undefined){
                                txn_account_id = self.getAccountId(roa[i].account.trim(), i);
                            }

                            if(roa[i].measurement!==undefined){
                                measurement_id = self.getMeasurementId(roa[i].measurement.trim());
                            }

                            if(roa[i].issued_date!==undefined){
                                issued_date = new Date(roa[i].issued_date.trim());
                            }

                            var itemRate = banhji.source.getRate(item.locale, issued_date);

                            if(roa[i].type!==undefined){
                                type = roa[i].type.trim();
                                memo = roa[i].memo==null?"":roa[i].memo;

                                if(jQuery.inArray( type, isJournal )==-1){
                                    is_journal = 0;
                                }else{
                                    is_journal = 1;
                                }

                                txn = {
                                    contact_id              : contact_id,
                                    transaction_template_id : 3,
                                    payment_term_id         : 5,
                                    account_id              : txn_account_id,
                                    reference_no            : roa[i].reference_no,
                                    type                    : type,//Required
                                    number                  : roa[i].number.trim(),
                                    sub_total               : 0,
                                    discount                : 0,
                                    tax                     : 0,
                                    deposit                 : 0,
                                    amount                  : 0,
                                    remaining               : 0,
                                    rate                    : 1,//Required
                                    locale                  : banhji.locale,//Required
                                    issued_date             : kendo.toString(new Date(issued_date), "s"),//Required
                                    due_date                : kendo.toString(new Date(roa[i].due_date.trim()), "yyyy-MM-dd"),
                                    bill_to                 : roa[i].bill_to,
                                    ship_to                 : roa[i].ship_to,
                                    memo                    : memo,
                                    status                  : 0,
                                    is_journal              : is_journal,//Required
                                    //Recurring
                                    recurring_name          : "",
                                    start_date              : new Date(),
                                    frequency               : "Daily",
                                    month_option            : "Day",
                                    interval                : 1,
                                    day                     : 1,
                                    week                    : 0,
                                    month                   : 0,
                                    is_recurring            : 0
                                };
                            }

                            //Tax on Cr
                            if(roa[i].tax!==undefined){
                                raw = "cr"+tax_account_id;
                                tax_item_id = self.getTaxId(roa[i].tax.trim(), i);
                                taxItem = banhji.source.taxItemDS.get(tax_item_id);
                                tax_account_id = taxItem.account_id;
                                tax = amount * taxItem.rate;

                                if(entries[raw]===undefined){
                                    entries[raw] = {
                                        transaction_id      : transaction_id,
                                        account_id          : tax_account_id,
                                        contact_id          : contact_id,
                                        description         : description,
                                        reference_no        : "",
                                        segments            : [],
                                        dr                  : 0,
                                        cr                  : tax,
                                        rate                : 1,
                                        locale              : banhji.locale
                                    };
                                }else{
                                    entries[raw].cr += tax;
                                }
                            }

                            //Cash or A/R on Dr
                            if(txn_account_id>0){
                                raw = "dr"+txn_account_id;

                                if(entries[raw]===undefined){
                                    entries[raw] = {
                                        transaction_id      : transaction_id,
                                        account_id          : txn_account_id,
                                        contact_id          : contact_id,
                                        description         : memo,
                                        reference_no        : roa[i].reference_no,
                                        segments            : [],
                                        dr                  : amount + tax,
                                        cr                  : 0,
                                        rate                : 1,
                                        locale              : banhji.locale
                                    };
                                }else{
                                    entries[raw].dr += amount + tax;
                                }
                            }

                            txn.sub_total   += amount;
                            txn.tax         += tax;
                            txn.amount      += amount + tax;

                            //Item lines
                            self.itemLineDS.add({
                                transaction_id      : transaction_id,
                                tax_item_id         : tax_item_id,
                                item_id             : item_id,
                                measurement_id      : measurement_id,
                                description         : description,
                                quantity            : quantity,
                                conversion_ratio            : 1,
                                cost                : 0,
                                price               : price,
                                amount              : amount,
                                rate                : 1,
                                locale              : banhji.locale,
                                additional_cost     : 0,
                                movement            : -1
                            });

                            if(is_journal==1){
                                /*//COGS on Dr
                                account_id = kendo.parseInt(item.expense_account_id);
                                if(account_id>0){
                                    raw = "dr"+account_id;

                                    var cogsAmount = amount;
                                    if(item.item_type_id==1 || item.item_type_id==4){
                                        cogsAmount = quantity*item.cost;
                                    }

                                    if(entries[raw]===undefined){
                                        entries[raw] = {
                                            transaction_id      : transaction_id,
                                            account_id          : account_id,
                                            contact_id          : contact_id,
                                            description         : description,
                                            reference_no        : "",
                                            segments            : [],
                                            dr                  : cogsAmount,
                                            cr                  : 0,
                                            rate                : itemRate,
                                            locale              : item.locale
                                        };
                                    }else{
                                        entries[raw].dr += cogsAmount;
                                    }
                                }

                                //Inventory on Cr
                                account_id = kendo.parseInt(item.inventory_account_id);
                                if(account_id>0){
                                    raw = "cr"+account_id;

                                    var inventoryAmount = amount;
                                    if(item.item_type_id==1 || item.item_type_id==4){
                                        inventoryAmount = quantity*item.cost;
                                    }

                                    if(entries[raw]===undefined){
                                        entries[raw] = {
                                            transaction_id      : transaction_id,
                                            account_id          : account_id,
                                            contact_id          : contact_id,
                                            description         : description,
                                            reference_no        : "",
                                            segments            : [],
                                            dr                  : 0,
                                            cr                  : inventoryAmount,
                                            rate                : itemRate,
                                            locale              : item.locale
                                        };
                                    }else{
                                        entries[raw].cr += inventoryAmount;
                                    }
                                }*/

                                //Sale on Cr
                                account_id = kendo.parseInt(item.income_account_id);
                                if(account_id>0){
                                    raw = "cr"+account_id;

                                    if(entries[raw]===undefined){
                                        entries[raw] = {
                                            transaction_id      : transaction_id,
                                            account_id          : account_id,
                                            contact_id          : contact_id,
                                            description         : description,
                                            reference_no        : "",
                                            segments            : [],
                                            dr                  : 0,
                                            cr                  : amount,
                                            rate                : 1,
                                            locale              : banhji.locale
                                        };
                                    }else{
                                        entries[raw].cr += amount;
                                    }
                                }
                            }

                            //Last line
                            var nextIndex = i+1;
                            if((nextIndex<roa.length && roa[nextIndex].type!==undefined) || i==roa.length-1){
                                self.dataSource.add(txn);

                                $.each(entries, function(index, value){
                                    self.journalLineDS.add(value);
                                });

                                raw = "";
                                txn = {};
                                entries = {};
                                transaction_id++;
                            }
                        }
                    }
                });
            }
            reader.readAsBinaryString(files[0].rawFile);
        },
        objSync             : function(){
            var dfd = $.Deferred();

            this.dataSource.sync();
            this.dataSource.bind("requestEnd", function(e){
                if(e.response){
                    dfd.resolve(e.response.results);
                }
            });
            this.dataSource.bind("error", function(e){
                dfd.reject(e.errorThrown);
            });

            return dfd;
        },
        save                : function(){
            var self = banhji.importTxn;

            self.set("enableImport", false);

            self.objSync()
            .then(function(data){ //Success
                $.each(data, function(index, value){
                    //Item Lines
                    $.each(self.itemLineDS.data(), function(ind, val){
                        if(val.transaction_id==index){
                            val.set("transaction_id", value.id);
                        }
                    });

                    //Journal Lines
                    $.each(self.journalLineDS.data(), function(ind, val){
                        if(val.transaction_id==index){
                            val.set("transaction_id", value.id);
                        }
                    });
                });

                self.itemLineDS.sync();
                self.journalLineDS.sync();

                $("#ntf1").data("kendoNotification").success(banhji.source.successMessage);
            }, function(reason) { //Error
                $("#ntf1").data("kendoNotification").error(reason);
            }).then(function(){
                self.clear();
            });
        },
        clear               : function(){
            var self = banhji.importTxn;

            self.dataSource.data([]);
            self.itemLineDS.data([]);
            self.journalLineDS.data([]);

            //Clear upload files
            $(".k-upload-files").remove();
        }
    });
    banhji.importJournal = kendo.observable({
        dataSource    : dataStore(apiUrl+"imports/journal"),
        accountDS     : dataStore(apiUrl+"accounts"),
        noneAccount   : [],
        enabled       : false,
        numberExists  : function(account) {
            var existed = false;

            for(var i = 0; i < banhji.source.accountList.length; i++) {
                if(account == banhji.source.accountList[i].number) {
                    existed = true;
                    break;
                }
            }
            return existed;
        },
        onSelected    : function(e) {
            var self = this;
            $('li.k-file').remove();
            var files = e.files;
            $("#loadImport").css("display","block");
            banhji.importJournal.set('enabled', false);
            banhji.importJournal.noneAccount.splice(0, banhji.importJournal.noneAccount.length);
            var reader = new FileReader();
            banhji.importJournal.dataSource.data([]);
            reader.onload = function() {
                var data = reader.result;
                var result = {};
                var workbook = XLSX.read(data, {type : 'binary'});
                workbook.SheetNames.forEach(function(sheetName) {
                    var roa = XLSX.utils.sheet_to_row_object_array(workbook.Sheets[sheetName]);
                    banhji.importJournal.accountDS.fetch(function(){
                        if(roa.length > 0){
                            result[sheetName] = roa;
                            for(var i = 0; i < roa.length; i++) {
                                var number = banhji.importJournal.numberExists(roa[i].account_number);
                                if(!number) {
                                    banhji.importJournal.noneAccount.push({line: i+1, trans_no:roa[i].trans_no, date: roa[i].date, number: roa[i].number, memo: roa[i].memo,    account_number: roa[i].account_number, dr: roa[i].dr, cr: roa[i].cr});
                                }
                            }

                            if(banhji.importJournal.noneAccount.length > 0){
                                banhji.importJournal.set('enabled', true);
                                $("#loadImport").css("display","none");
                            }else{
                                for(var i = 0; i < roa.length; i++) {
                                    banhji.importJournal.dataSource.add(roa[i]);
                                    $("#loadImport").css("display","none");
                                }
                                banhji.importJournal.set('enabled', false);
                            }
                        }
                    });
                });
            }
            reader.readAsBinaryString(files[0].rawFile);
        },
        save: function() {
            if(banhji.importJournal.dataSource.data().length > 0) {
                $("#loadImport").css("display","block");
                banhji.importJournal.dataSource.sync();
                banhji.importJournal.dataSource.bind("requestEnd", function(e){
                    if(e.response){
                        $("#ntf1").data("kendoNotification").success("Imported Journal successfully!");
                        $("#loadImport").css("display","none");
                    }
                });
                banhji.importJournal.dataSource.bind("error", function(e){
                    $("#ntf1").data("kendoNotification").error("Error Importing Journal!");
                    $("#loadImport").css("display","none");
                });
            }
        }
    });
    banhji.importView = kendo.observable({
        lang                : langVM,
        contact             : banhji.importContact,
        item                : banhji.importItem,
        txn                 : banhji.importTxn,
        journal             : banhji.importJournal,
        caccount            : banhji.importChartAccount,
        printGrid           : function() {
            var obj = this.get('obj');
            var gridElement = $('#grid'),
                printableContent = '',
                win = window.open('', '', 'width=800, height=900'),
                doc = win.document.open();
            var htmlStart =
                    '<!DOCTYPE html>' +
                    '<html>' +
                    '<head>' +
                    '<meta charset="utf-8" />' +
                    '<title></title>' +
                    '<link href="http://kendo.cdn.telerik.com/' + kendo.version + '/styles/kendo.common.min.css" rel="stylesheet" />'+
                    '<link rel="stylesheet" href="<?php echo base_url(); ?>assets/bootstrap.css">' +
                    '<link href="<?php echo base_url(); ?>assets/invoice/invoice.css" rel="stylesheet" />'+
                    '<link href="https://fonts.googleapis.com/css?family=Content:400,700" rel="stylesheet" type="text/css">' +
                    '<link href="https://fonts.googleapis.com/css?family=Moul" rel="stylesheet">' +
                    '<style>' +
                    'html { font: 11pt sans-serif; }' +
                    '.k-grid { border-top-width: 0; }' +
                    '.k-grid, .k-grid-content { height: auto !important; }' +
                    '.k-grid-content { overflow: visible !important; }' +
                    'div.k-grid table { table-layout: auto; width: 100% !important; }' +
                    '.k-grid .k-grid-header th { border-top: 1px solid; }' +
                    '.k-grid-toolbar, .k-grid-pager > .k-link { display: none; }' +
                    '</style><style type="text/css" media="print"> @page { size: portrait; margin:0mm;margin-top: 1mm; }'+
                        '.table-primary thead th {background-color:#496cad!important;color: #fff;-webkit-print-color-adjust:true;}' +
                        '}</style>' +
                    '</head>' +
                    '<body>';
            var htmlEnd =
                    '</body>' +
                    '</html>';

            printableContent = $('#invFormContent').html();
            doc.write(htmlStart + printableContent + htmlEnd);
            doc.close();
            setTimeout(function(){
                win.print();
                win.close();
            },2000);
        }
    });


    /*************************************************
    *   VIEW & LAYOUT                                *
    *************************************************/
    banhji.view = {
        layout      : new kendo.Layout('#layout', {model: banhji.Layout}),
        blank       : new kendo.View('<div></div>'),
        index       : new kendo.Layout("#index", {model: banhji.index}),
        menu        : new kendo.Layout('#menu-tmpl', {model: banhji.userManagement}),
        searchAdvanced: new kendo.Layout("#searchAdvanced", {model: banhji.searchAdvanced}),
        customTable: new kendo.Layout("#customTable", {model: banhji.customTable}),
        underConstruction: new kendo.Layout("#underConstruction"),

        //Accounting
        accountingDashboard: new kendo.Layout("#accountingDashboard", {model: banhji.accountingDashboard}),
        accountingCenter: new kendo.Layout("#accountingCenter", {model: banhji.accountingCenter}),
        account: new kendo.Layout("#account", {model: banhji.account}),
        txnItemList: new kendo.Layout("#txnItemList", {model: banhji.txnItemList}),
        fixedAssetItemList: new kendo.Layout("#fixedAssetItemList", {model: banhji.fixedAssetItemList}),
        txnItem: new kendo.Layout("#txnItem", {model: banhji.txnItem}),
        journal: new kendo.Layout("#journal", {model: banhji.journal}),
        cashTransaction: new kendo.Layout("#cashTransaction", {model: banhji.cashTransaction}),
        cashAdvance: new kendo.Layout("#cashAdvance", {model: banhji.cashAdvance}),
        expense: new kendo.Layout("#expense", {model: banhji.expense}),
        currencyRate: new kendo.Layout("#currencyRate", {model: banhji.currencyRate}),
        journalReport: new kendo.Layout("#journalReport", {model: banhji.journalReport}),
        journalReportBySegment: new kendo.Layout("#journalReportBySegment", {model: banhji.journalReportBySegment}),
        generalLedger: new kendo.Layout("#generalLedger", {model: banhji.generalLedger}),
        generalLedgerBySegment: new kendo.Layout("#generalLedgerBySegment", {model: banhji.generalLedgerBySegment}),
        trialBalance: new kendo.Layout("#trialBalance", {model: banhji.trialBalance}),
        chartOfAccount: new kendo.Layout("#chartOfAccount", {model: banhji.chartOfAccount}),
        accountingReportCenter: new kendo.Layout("#accountingReportCenter", {model: banhji.accountingReportCenter}),
        accountingSetting: new kendo.Layout("#accountingSetting", {model: banhji.accountingSetting}),
        accountingRecurring: new kendo.Layout("#accountingRecurring", {model: banhji.accountingRecurring}),
        addAccountingprefix: new kendo.Layout("#addAccountingprefix", {model: banhji.addAccountingprefix}),

        segment: new kendo.Layout("#segment", {model: banhji.segment}),
        segmentCenter: new kendo.Layout("#segmentCenter", {model: banhji.segmentCenter}),
        transactionListDate: new kendo.Layout("#transactionListDate", {model: banhji.transactionListDate}),
        recentTransactionsList: new kendo.Layout("#recentTransactionsList", {model: banhji.recentTransactionsList}),
        recurringJournalList: new kendo.Layout("#recurringJournalList", {model: banhji.recurringJournalList}),
        statementProfitLoss: new kendo.Layout("#statementProfitLoss", {model: banhji.statementProfitLoss}),
        statementProfitLossByNature: new kendo.Layout("#statementProfitLossByNature", {model: banhji.statementProfitLossByNature}),
        statementProfitLossBySegment: new kendo.Layout("#statementProfitLossBySegment", {model: banhji.statementProfitLossBySegment}),
        statementFinancialPosition: new kendo.Layout("#statementFinancialPosition", {model: banhji.statementFinancialPosition}),
        statementProfitLossComparison: new kendo.Layout("#statementProfitLossComparison", {model: banhji.statementProfitLossComparison}),
        statementFinancialPositionComparison: new kendo.Layout("#statementFinancialPositionComparison", {model: banhji.statementFinancialPositionComparison}),
        statementChangesEquity: new kendo.Layout("#statementChangesEquity", {model: banhji.statementChangesEquity}),
        statementCashFlow: new kendo.Layout("#statementCashFlow", {model: banhji.statementCashFlow}),
        auditTrialReport: new kendo.Layout("#auditTrialReport", {model: banhji.auditTrialReport}),

        //Tax
        tax: new kendo.Layout("#tax", {model: banhji.tax}),
        taxReportCenter: new kendo.Layout("#taxReportCenter", {model: banhji.taxReportCenter}),
        saleJournal: new kendo.Layout("#saleJournal", {model: banhji.saleJournal}),
        purchaseJournal: new kendo.Layout("#purchaseJournal", {model: banhji.purchaseJournal}),
        taxCenter: new kendo.Layout("#taxCenter", {model: banhji.taxCenter}),

        //Employee
        employeeDashboard: new kendo.Layout("#employeeDashboard", {model: banhji.employeeDashboard}),
        employeeCenter: new kendo.Layout("#employeeCenter", {model: banhji.employeeCenter}),
        employee: new kendo.Layout("#employee", {model: banhji.employee}),
        employeeReportCenter: new kendo.Layout("#employeeReportCenter"),

        //Vendor
        vendorDashboard: new kendo.Layout("#vendorDashboard", {model: banhji.vendorDashboard}),
        vendorCenter: new kendo.Layout("#vendorCenter", {model: banhji.vendorCenter}),
        vendor: new kendo.Layout("#vendor", {model: banhji.vendor}),
        purchaseOrder: new kendo.Layout("#purchaseOrder", {model: banhji.purchaseOrder}),
        grn: new kendo.Layout("#grn", {model: banhji.grn}),
        purchase: new kendo.Layout("#purchase", {model: banhji.purchase}),
        purchaseReturn: new kendo.Layout("#purchaseReturn", {model: banhji.purchaseReturn}),
        paymentRefund: new kendo.Layout("#paymentRefund", {model: banhji.paymentRefund}),
        vendorDeposit: new kendo.Layout("#vendorDeposit", {model: banhji.vendorDeposit}),
        vendorSetting: new kendo.Layout("#vendorSetting", {model: banhji.vendorSetting}),
        vendorReportCenter: new kendo.Layout("#vendorReportCenter", {model: banhji.vendorReportCenter}),
        purchaseSummaryProductServices: new kendo.Layout("#purchaseSummaryProductServices", {model: banhji.purchaseSummaryProductServices}),
        purchaseSummaryBrand: new kendo.Layout("#purchaseSummaryBrand", {model: banhji.purchaseSummaryBrand}),
        expensesSummarySupplier: new kendo.Layout("#expensesSummarySupplier", {model: banhji.expensesSummarySupplier}),
        expensesDetailSupplier: new kendo.Layout("#expensesDetailSupplier", {model: banhji.expensesDetailSupplier}),
        purchaseOrderList: new kendo.Layout("#purchaseOrderList", {model: banhji.purchaseOrderList}),
        purchaseDetailProductServices: new kendo.Layout("#purchaseDetailProductServices", {model: banhji.purchaseDetailProductServices}),
        purchaseDetailBrand: new kendo.Layout("#purchaseDetailBrand", {model: banhji.purchaseDetailBrand}),
        supplierTransaction: new kendo.Layout("#supplierTransaction", {model: banhji.supplierTransaction}),
        depositDetailSupplier: new kendo.Layout("#depositDetailSupplier", {model: banhji.depositDetailSupplier}),
        suppliersBalanceSummary: new kendo.Layout("#suppliersBalanceSummary", {model: banhji.suppliersBalanceSummary}),
        suppliersBalanceDetail: new kendo.Layout("#suppliersBalanceDetail", {model: banhji.suppliersBalanceDetail}),
        payablesAgingSummary: new kendo.Layout("#payablesAgingSummary", {model: banhji.payablesAgingSummary}),
        payablesAgingDetail: new kendo.Layout("#payablesAgingDetail", {model: banhji.payablesAgingDetail}),
        listBillsPaid: new kendo.Layout("#listBillsPaid", {model: banhji.listBillsPaid}),
        billPaymentList: new kendo.Layout("#billPaymentList", {model: banhji.billPaymentList}),
        productServiceList: new kendo.Layout("#productServiceList", {model: banhji.vendorSale}),
        supplierList: new kendo.Layout("#supplierList", {model: banhji.supplierList}),
        vendorRecurring: new kendo.Layout("#vendorRecurring", {model: banhji.vendorRecurring}),

        //Customer
        customerDashboard: new kendo.Layout("#customerDashboard", {model: banhji.customerDashboard}),
        customerCenter: new kendo.Layout("#customerCenter", {model: banhji.customerCenter}),
        customer: new kendo.Layout("#customer", {model: banhji.customer}),
        invoice: new kendo.Layout("#invoice", {model: banhji.invoice}),
        invoiceBatch: new kendo.Layout("#invoiceBatch", {model: banhji.invoiceBatch}),
        cashSale: new kendo.Layout("#cashSale", {model: banhji.cashSale}),
        saleOrder: new kendo.Layout("#saleOrder", {model: banhji.saleOrder}),
        quote: new kendo.Layout("#quote", {model: banhji.quote}),
        gdn: new kendo.Layout("#gdn", {model: banhji.gdn}),
        saleReturn: new kendo.Layout("#saleReturn", {model: banhji.saleReturn}),
        cashRefund: new kendo.Layout("#cashRefund", {model: banhji.cashRefund}),
        statement: new kendo.Layout("#statement", {model: banhji.statement}),
        customerDeposit: new kendo.Layout("#customerDeposit", {model: banhji.customerDeposit}),
        customerReportCenter: new kendo.Layout("#customerReportCenter", {model: banhji.customerReportCenter}),
        customerBalance : new kendo.Layout("#customerBalance", {model: banhji.customerBalance}),
        customerSetting: new kendo.Layout("#customerSetting", {model: banhji.customerSetting}),
        customerRecurring : new kendo.Layout("#customerRecurring", {model: banhji.customerRecurring}),
        job: new kendo.Layout("#job", {model: banhji.job}),
        customerGroup: new kendo.Layout("#customerGroup", {model: banhji.customerGroup}),
        contactAssignee: new kendo.Layout("#contactAssignee", {model: banhji.contactAssignee}),
        employeeItemLocation: new kendo.Layout("#employeeItemLocation", {model: banhji.employeeItemLocation}),

        //Membership
        membershipDashboard: new kendo.Layout("#membershipDashboard", {model: banhji.membershipDashboard}),
        membershipCenter: new kendo.Layout("#membershipCenter", {model: banhji.membershipCenter}),
        membership: new kendo.Layout("#membership", {model: banhji.membership}),
        cpdRecord: new kendo.Layout("#cpdRecord", {model: banhji.cpdRecord}),
        invoiceBatchMembership: new kendo.Layout("#invoiceBatchMembership", {model: banhji.invoiceBatchMembership}),
        membershipSetting: new kendo.Layout("#membershipSetting", {model: banhji.membershipSetting}),

        invoiceCustom: new kendo.Layout("#invoiceCustom", {model: banhji.invoiceCustom}),
        batchInvoicePreview: new kendo.Layout("#batchInvoicePreview", {model: banhji.batchInvoicePreview}),
        invoiceForm: new kendo.Layout("#invoiceForm", {model: banhji.invoiceForm}),
        invoiceForm1: new kendo.Layout("#invoiceForm1", {model: banhji.invoiceForm}),
        invoiceForm2: new kendo.Layout("#invoiceForm2", {model: banhji.invoiceForm}),
        //invoiceForm3: new kendo.Layout("#invoiceForm3", {model: banhji.invoiceForm}),
        //invoiceForm4: new kendo.Layout("#invoiceForm4", {model: banhji.invoiceForm}),
        //invoiceForm5: new kendo.Layout("#invoiceForm5", {model: banhji.invoiceForm}),
        invoiceForm6: new kendo.Layout("#invoiceForm6", {model: banhji.invoiceForm}),
        invoiceForm7: new kendo.Layout("#invoiceForm7", {model: banhji.invoiceForm}),
        invoiceForm8: new kendo.Layout("#invoiceForm8", {model: banhji.invoiceForm}),
        invoiceForm9: new kendo.Layout("#invoiceForm9", {model: banhji.invoiceForm}),
        invoiceForm10: new kendo.Layout("#invoiceForm10", {model: banhji.invoiceForm}),
        invoiceForm11: new kendo.Layout("#invoiceForm11", {model: banhji.invoiceForm}),
        invoiceForm12: new kendo.Layout("#invoiceForm12", {model: banhji.invoiceForm}),
        invoiceForm13: new kendo.Layout("#invoiceForm13", {model: banhji.invoiceForm}),
        invoiceForm14: new kendo.Layout("#invoiceForm14", {model: banhji.invoiceForm}),
        invoiceForm15: new kendo.Layout("#invoiceForm15", {model: banhji.invoiceForm}),
        invoiceForm16: new kendo.Layout("#invoiceForm16", {model: banhji.invoiceForm}),
        invoiceForm17: new kendo.Layout("#invoiceForm17", {model: banhji.invoiceForm}),
        invoiceForm18: new kendo.Layout("#invoiceForm18", {model: banhji.invoiceForm}),
        invoiceForm19: new kendo.Layout("#invoiceForm19", {model: banhji.invoiceForm}),
        invoiceForm20: new kendo.Layout("#invoiceForm20", {model: banhji.invoiceForm}),
        invoiceForm21: new kendo.Layout("#invoiceForm21", {model: banhji.invoiceForm}),
        invoiceForm22: new kendo.Layout("#invoiceForm22", {model: banhji.invoiceForm}),
        invoiceForm23: new kendo.Layout("#invoiceForm23", {model: banhji.invoiceForm}),
        invoiceForm24: new kendo.Layout("#invoiceForm24", {model: banhji.invoiceForm}),
        invoiceForm25: new kendo.Layout("#invoiceForm25", {model: banhji.invoiceForm}),
        invoiceForm26: new kendo.Layout("#invoiceForm26", {model: banhji.invoiceForm}),
        invoiceForm27: new kendo.Layout("#invoiceForm27", {model: banhji.invoiceForm}),
        invoiceForm28: new kendo.Layout("#invoiceForm28", {model: banhji.invoiceForm}),
        invoiceForm29: new kendo.Layout("#invoiceForm29", {model: banhji.invoiceForm}),
        invoiceForm30: new kendo.Layout("#invoiceForm30", {model: banhji.invoiceForm}),
        invoiceForm31: new kendo.Layout("#invoiceForm31", {model: banhji.invoiceForm}),
        invoiceForm32: new kendo.Layout("#invoiceForm32", {model: banhji.invoiceForm}),
        invoiceForm33: new kendo.Layout("#invoiceForm33", {model: banhji.invoiceForm}),
        invoiceForm34: new kendo.Layout("#invoiceForm34", {model: banhji.invoiceForm}),
        invoiceForm35: new kendo.Layout("#invoiceForm35", {model: banhji.invoiceForm}),
        invoiceForm36: new kendo.Layout("#invoiceForm36", {model: banhji.invoiceForm}),
        invoiceForm37: new kendo.Layout("#invoiceForm37", {model: banhji.invoiceForm}),
        invoiceForm38: new kendo.Layout("#invoiceForm38", {model: banhji.invoiceForm}),
        invoiceForm39: new kendo.Layout("#invoiceForm39", {model: banhji.invoiceForm}),
        invoiceForm40: new kendo.Layout("#invoiceForm40", {model: banhji.invoiceForm}),
        invoiceForm41: new kendo.Layout("#invoiceForm41", {model: banhji.invoiceForm}),
        invoiceForm42: new kendo.Layout("#invoiceForm42", {model: banhji.invoiceForm}),
        defaultSaleReturn: new kendo.Layout("#defaultSaleReturn", {model: banhji.invoiceForm}),
        defaultCashAdvance: new kendo.Layout("#defaultCashAdvance", {model: banhji.invoiceForm}),
        defaultCashRefund: new kendo.Layout("#defaultCashRefund", {model: banhji.invoiceForm}),
        defaultPurchase: new kendo.Layout("#defaultPurchase", {model: banhji.invoiceForm}),
        invoiceHaveBalance: new kendo.Layout("#invoiceHaveBalance", {model: banhji.invoiceForm}),
        //Max Concrete
        invoiceMAXConcrete: new kendo.Layout("#invoiceMAXConcrete", {model: banhji.invoiceForm}),
        invoiceVATMAXConcrete: new kendo.Layout("#invoiceVATMAXConcrete", {model: banhji.invoiceForm}),
        //Form Heritage Walk
        invoiceHeritageWalk: new kendo.Layout("#invoiceHeritageWalk", {model: banhji.invoiceForm}),
        invoiceVATHeritageWalk: new kendo.Layout("#invoiceVATHeritageWalk", {model: banhji.invoiceForm}),
        depositHeritageWalk: new kendo.Layout("#depositHeritageWalk", {model: banhji.invoiceForm}),
        receiptHeritageWalk: new kendo.Layout("#receiptHeritageWalk", {model: banhji.invoiceForm}),
        normalInvoiceHeritageWalk: new kendo.Layout("#normalInvoiceHeritageWalk", {model: banhji.invoiceForm}),

        purchaseSampleService: new kendo.Layout("#purchaseSampleService", {model: banhji.invoiceForm}),
        invoiceTaxMekong: new kendo.Layout("#invoiceTaxMekong", {model: banhji.invoiceForm}),
        invoiceMsp: new kendo.Layout("#invoiceMsp", {model: banhji.invoiceForm}),
        invoicePcg: new kendo.Layout("#invoicePcg", {model: banhji.invoiceForm}),
        invoiceHDCom: new kendo.Layout("#invoiceHDCom", {model: banhji.invoiceHDCom}),
        //Form REACHS
        invoiceREACHS: new kendo.Layout("#invoiceREACHS", {model: banhji.invoiceForm}),
        invoiceVATREACHS: new kendo.Layout("#invoiceVATREACHS", {model: banhji.invoiceForm}),
        normalInvoiceREACHS: new kendo.Layout("#normalInvoiceREACHS", {model: banhji.invoiceForm}),
        //Form PCG
        invoicePCG: new kendo.Layout("#invoicePCG", {model: banhji.invoiceForm}),
        invoiceVATPCG: new kendo.Layout("#invoiceVATPCG", {model: banhji.invoiceForm}),
        normalInvoicePCG: new kendo.Layout("#normalInvoicePCG", {model: banhji.invoiceForm}),
        advanceVoucherPCG: new kendo.Layout("#advanceVoucherPCG", {model: banhji.invoiceForm}),
        //Form PCG Padee
        invoicePCGPADEE: new kendo.Layout("#invoicePCGPADEE", {model: banhji.invoiceForm}),
        //Caritas Company
        formCaritasExpense: new kendo.Layout("#formCaritasExpense", {model: banhji.invoiceForm}),
        formCaritasJournal: new kendo.Layout("#formCaritasJournal", {model: banhji.invoiceForm}),
        //Form KSLM
        normalInvoiceKSLM: new kendo.Layout("#normalInvoiceKSLM", {model: banhji.invoiceForm}),
        commercialInvoiceKSLM: new kendo.Layout("#commercialInvoiceKSLM", {model: banhji.invoiceForm}),
        vatInvoiceKSLM: new kendo.Layout("#vatInvoiceKSLM", {model: banhji.invoiceForm}),
        //Ricemill form
        recieptNoteRicemill: new kendo.Layout("#recieptNoteRicemill", {model: banhji.invoiceForm}),
        statementDetail: new kendo.Layout("#statementDetail", {model: banhji.statementDetail}),
        saleSummaryByCustomer: new kendo.Layout("#saleSummaryByCustomer", {model: banhji.saleSummaryByCustomer}),
        saleDetailByCustomer: new kendo.Layout("#saleDetailByCustomer", {model: banhji.saleDetailByCustomer}),
        saleSummaryByProduct: new kendo.Layout("#saleSummaryByProduct", {model: banhji.saleSummaryByProduct}),
        saleDetailByProduct : new kendo.Layout("#saleDetailByProduct", {model: banhji.saleDetailByProduct}),
        saleSummaryByBrand: new kendo.Layout("#saleSummaryByBrand", {model: banhji.saleSummaryByBrand}),
        saleDetailByBrand : new kendo.Layout("#saleDetailByBrand", {model: banhji.saleDetailByBrand}),
        customerTransactionList: new kendo.Layout("#customerTransactionList", {model: banhji.customerTransactionList}),
        depositDetailByCustomer: new kendo.Layout("#depositDetailByCustomer", {model: banhji.depositDetailByCustomer}),
        cashSaleSummaryByCustomer: new kendo.Layout("#cashSaleSummaryByCustomer", {model: banhji.cashSaleSummaryByCustomer}),
        cashSaleDetailByCustomer: new kendo.Layout("#cashSaleDetailByCustomer", {model: banhji.cashSaleDetailByCustomer}),
        cashSaleSummaryByProduct: new kendo.Layout("#cashSaleSummaryByProduct", {model: banhji.cashSaleSummaryByProduct}),
        cashSaleDetailByProduct: new kendo.Layout("#cashSaleDetailByProduct", {model: banhji.cashSaleDetailByProduct}),
        saleSummaryByEmployee: new kendo.Layout("#saleSummaryByEmployee", {model: banhji.saleSummaryByEmployee}),
        saleDetailByEmployee: new kendo.Layout("#saleDetailByEmployee", {model: banhji.saleDetailByEmployee}),
        saleProductDetailByEmployee: new kendo.Layout("#saleProductDetailByEmployee", {model: banhji.saleProductDetailByEmployee}),
        customerBalanceSummary : new kendo.Layout("#customerBalanceSummary", {model: banhji.customerBalanceSummary}),
        customerBalanceDetail : new kendo.Layout("#customerBalanceDetail", {model: banhji.customerBalanceDetail}),
        receivableAgingSummary : new kendo.Layout("#receivableAgingSummary", {model: banhji.receivableAgingSummary}),
        receivableAgingDetail : new kendo.Layout("#receivableAgingDetail", {model: banhji.receivableAgingDetail}),
        collectInvoice : new kendo.Layout("#collectInvoice", {model: banhji.collectInvoice}),
        collectionReport : new kendo.Layout("#collectionReport", {model: banhji.collectionReport}),
        invoiceList : new kendo.Layout("#invoiceList", {model: banhji.invoiceList}),
        saleJobEngagement: new kendo.Layout("#saleJobEngagement", {model: banhji.saleJob}),
        saleOrderList: new kendo.Layout("#saleOrderList", {model: banhji.saleOrderList}),
        saleOrderDetailByProduct : new kendo.Layout("#saleOrderDetailByProduct", {model: banhji.saleOrderDetailByProduct}),
        customerList: new kendo.Layout("#customerList", {model: banhji.customerList}),
        draftTransaction: new kendo.Layout("#draftTransaction", {model: banhji.draftTransaction}),

        //Sale
        saleDashboard: new kendo.Layout("#saleDashboard", {model: banhji.saleDashboard}),
        saleCenter: new kendo.Layout("#saleCenter", {model: banhji.saleCenter}),
        saleOrderForSale: new kendo.Layout("#saleOrderForSale", {model: banhji.saleOrderForSale}),
        sale: new kendo.Layout("#sale", {model: banhji.sale}),
        saleDetail: new kendo.Layout("#saleDetail", {model: banhji.saleDetail}),
        saleReportCenter: new kendo.Layout("#saleReportCenter", {model: banhji.saleReportCenter}),
        saleRecurring : new kendo.Layout("#saleRecurring", {model: banhji.saleRecurring}),
        saleInventoryPositionSummary: new kendo.Layout("#saleInventoryPositionSummary", {model: banhji.inventoryPositionSummary}),
        saleOrderListForSale : new kendo.Layout("#saleOrderListForSale", {model: banhji.saleOrderListForSale}),

        //Inventory
        itemDashBoard: new kendo.Layout("#itemDashBoard", {model: banhji.itemDashBoard}),
        itemCenter: new kendo.Layout("#itemCenter", {model: banhji.itemCenter}),
        item: new kendo.Layout("#item", {model: banhji.item}),
        itemService: new kendo.Layout("#itemService", {model: banhji.itemService}),
        nonInventoryPart: new kendo.Layout("#nonInventoryPart", {model: banhji.nonInventoryPart}),
        itemPrice: new kendo.Layout("#itemPrice", {model: banhji.itemPrice}),
        itemVariant: new kendo.Layout("#itemVariant", {model: banhji.itemVariant}),
        itemCatalog: new kendo.Layout("#itemCatalog", {model: banhji.itemCatalog}),
        itemAssembly: new kendo.Layout("#itemAssembly", {model: banhji.itemAssembly}),
        transferOrder: new kendo.Layout("#transferOrder", {model: banhji.transferOrder}),
        itemAdjustment: new kendo.Layout("#itemAdjustment", {model: banhji.itemAdjustment}),
        internalUsage: new kendo.Layout("#internalUsage", {model: banhji.internalUsage}),
        itemSetting: new kendo.Layout("#itemSetting", {model: banhji.itemSetting}),
        serviceSetting: new kendo.Layout("#serviceSetting", {model: banhji.serviceSetting}),
        itemReportCenter: new kendo.Layout("#itemReportCenter", {model: banhji.itemReportCenter}),
        inventoryPositionSummary: new kendo.Layout("#inventoryPositionSummary", {model: banhji.inventoryPositionSummary}),
        inventoryPositionSummaryByLocation: new kendo.Layout("#inventoryPositionSummaryByLocation", {model: banhji.inventoryPositionSummaryByLocation}),
        inventoryPositionDetail: new kendo.Layout("#inventoryPositionDetail", {model: banhji.inventoryPositionDetail}),
        inventoryTurnoverList: new kendo.Layout("#inventoryTurnoverList", {model: banhji.inventorySale}),
        inventorySaleItemAnalysis: new kendo.Layout("#inventorySaleItemAnalysis", {model: banhji.inventorySale}),
        inventoryMovementSummary: new kendo.Layout("#inventoryMovementSummary", {model: banhji.inventorySale}),
        inventoryMovementDetail: new kendo.Layout("#inventoryMovementDetail", {model: banhji.inventorySale}),
        inventorySaleByItem: new kendo.Layout("#inventorySaleByItem", {model: banhji.inventorySaleByItem}),
        inventoryList: new kendo.Layout("#inventoryList", {model: banhji.inventoryList}),
         itemList: new kendo.Layout("#itemList", {model: banhji.itemList}),
        inventoryPurchaseByVendorSummary: new kendo.Layout("#inventoryPurchaseByVendorSummary", {model: banhji.inventoryPurchaseByVendorSummary}),
        inventoryPurchaseByVendorDetail: new kendo.Layout("#inventoryPurchaseByVendorDetail", {model: banhji.inventoryPurchaseByVendorDetail}),
        gdnReport: new kendo.Layout("#gdnReport", {model: banhji.gdnReport}),
        fixedAssets: new kendo.Layout("#fixedAssets", {model: banhji.fixedAssets}),
        itemRecurring: new kendo.Layout("#itemRecurring", {model: banhji.itemRecurring}),
        variants: new kendo.Layout("#variants", {model: banhji.variants}),
        binLocations: new kendo.Layout("#binLocations", {model: banhji.binLocations}),
        warehouses: new kendo.Layout("#warehouses", {model: banhji.warehouses}),

        cashMovement: new kendo.Layout("#cashMovement", {model: banhji.cashMovement}),
        cashPositionReport: new kendo.Layout("#cashPositionReport", {model: banhji.cashPositionReport}),
        cashCollectionReport: new kendo.Layout("#cashCollectionReport", {model: banhji.cashSales}),
        cashPaymentReport: new kendo.Layout("#cashPaymentReport", {model: banhji.cashPaymentReport}),
        cashAdvanceReport: new kendo.Layout("#cashAdvanceReport", {model: banhji.cashAdvanceReport}),

        //Cash Managment
        cashDashboard: new kendo.Layout("#cashDashboard", {model: banhji.cashDashboard}),
        cashCenter: new kendo.Layout("#cashCenter", {model: banhji.cashCenter}),
        cash: new kendo.Layout("#cash", {model: banhji.cash}),
        cashList : new kendo.Layout("#cashList", {model: banhji.cashList}),
        cashDeposit: new kendo.Layout("#cashDeposit", {model: banhji.cashDeposit}),
        cashReportCenter: new kendo.Layout("#cashReportCenter"),
        cashier: new kendo.Layout("#cashier", {model: banhji.cashier}),
        reconcile: new kendo.Layout("#reconcile", {model: banhji.reconcile}),
        cashReceipt: new kendo.Layout("#cashReceipt", {model: banhji.cashReceipt}),
        cashPayment: new kendo.Layout("#cashPayment", {model: banhji.cashPayment}),
        cashFlowForecast: new kendo.Layout("#cashFlowForecast", {model: banhji.cashFlowForecast}),
        cashSetting: new kendo.Layout("#cashSetting", {model: banhji.cashSetting}),

        //Cash Management Dashbaord
        cashManagementDashboard: new kendo.Layout("#cashManagementDashboard", {model: banhji.cashManagementDashboard}),

        //Rice Mill
        riceMill: new kendo.Layout("#riceMill", {model: banhji.riceMill}),
        riceReportCenter: new kendo.Layout("#riceReportCenter", {model: banhji.riceReportCenter}),
        receiptNote: new kendo.Layout("#receiptNote", {model: banhji.receiptNote}),
        riceMillProduction: new kendo.Layout("#riceMillProduction", {model: banhji.riceMillProduction}),
        riceMillRecurring: new kendo.Layout("#riceMillRecurring", {model: banhji.riceMillRecurring}),
        receiptNoteReport: new kendo.Layout("#receiptNoteReport", {model: banhji.receiptNoteReport}),
        riceMillProductionReport: new kendo.Layout("#riceMillProductionReport", {model: banhji.riceMillProductionReport}),

        //Retail Trading
        retailTrading: new kendo.Layout("#retailTrading", {model: banhji.retailTrading}),
        retailTradingReportCenter: new kendo.Layout("#retailTradingReportCenter", {model: banhji.retailTradingReportCenter}),

        //Document
        documents: new kendo.Layout("#documents", {model: banhji.fileManagement}),

        //Report
        reportDashboard: new kendo.Layout("#reportDashboard", {model: banhji.reportDashboard}),
        profitabilitySummaryJob: new kendo.Layout("#profitabilitySummaryJob", {model: banhji.profitabilitySummaryJob}),
        profitabilityDetailJob: new kendo.Layout("#profitabilityDetailJob", {model: banhji.profitabilityDetailJob}),

        //Imports
        imports: new kendo.Layout("#importView", {model: banhji.importView}),


        //MobileSell
        mobileSell: new kendo.Layout("#mobileSell", {model: banhji.mobileSell}),


        //Menu
        accountingMenu: new kendo.View("#accountingMenu", {model: langVM}),
        employeeMenu: new kendo.View("#employeeMenu", {model: langVM}),
        vendorMenu: new kendo.View("#vendorMenu", {model: langVM}),
        customerMenu: new kendo.View("#customerMenu", {model: langVM}),
        membershipMenu: new kendo.View("#membershipMenu", {model: langVM}),
        cashMenu: new kendo.View("#cashMenu", {model: langVM}),
        inventoryMenu: new kendo.View("#inventoryMenu", {model: langVM}),
        taxMenu: new kendo.View("#taxMenu", {model: langVM}),
        saleMenu: new kendo.View("#saleMenu", {model: langVM}),
        riceMillMenu: new kendo.View("#riceMillMenu", {model: langVM}),
        retailTradingMenu: new kendo.View("#retailTradingMenu", {model: langVM}),
    };
    banhji.router = new kendo.Router({
        init: function() {
            var language = JSON.parse(localStorage.getItem('userData/lang'));
            switch(language) {
                case "KH":
                    langVM.set('lang', km_KH);
                    localforage.setItem("lang", language);
                    langVM.set('localeCode', language);
                    break;
                case "EN":
                    langVM.set('lang', en_US);
                    localforage.setItem("lang", language);
                    langVM.set('localeCode', language);
                    break;
                default:
                    langVM.set('lang', en_US);
                    localforage.setItem("lang", language);
                    langVM.set('localeCode', language);
            }
            localforage.getItem('user', function(err, data){
                if (err) {

                } else {
                    $('#current-section').html('|&nbsp;Company');
                    $('#home-menu').addClass('active');
                    banhji.view.layout.render("#wrapperApplication");
                    banhji.index.set('companyName', data.institute.name);
                    banhji.index.set('companyLogo', data.institute.logo);
                    var blank = new kendo.View('#blank-tmpl');
                    banhji.view.layout.showIn('#menu', banhji.view.menu);
                    if(userPool.getCurrentUser() == null) {
                        window.location.replace(baseUrl + "login");
                    }
                    banhji.aws.getImage();
                }
            });
        },
        routeMissing: function(e) {
            // banhji.view.layout.showIn("#layout-view", banhji.view.missing);
            console.log("no resource found.")
        }
    });
    /* Login page */
    banhji.router.route('/', function(){
        var blank = new kendo.View('#blank-tmpl');
        var admin = JSON.parse(localStorage.getItem('userData/user')) != null ? JSON.parse(localStorage.getItem('userData/user')).role : 0;
        if(admin != 1) {
            window.location.replace("<?php echo base_url(); ?>admin");
        } else {
            banhji.view.layout.showIn('#content', banhji.view.index);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            $('#main-top-navigation').append('<li><a href="\#">Home</a></li>');
            $('#current-section').text("");
            $("#secondary-menu").html("");
            banhji.index.getLogo();
            banhji.index.pageLoad();
            banhji.pageLoaded["index"] = true;
        }

    });
    banhji.router.route("/search_advanced", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            var vm = banhji.searchAdvanced;
            banhji.view.layout.showIn("#content", banhji.view.searchAdvanced);

            if(banhji.pageLoaded["search_advanced"]==undefined){
                banhji.pageLoaded["search_advanced"] = true;
            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/custom_table", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            var vm = banhji.customTable;
            banhji.view.layout.showIn("#content", banhji.view.customTable);

            if(banhji.pageLoaded["custom_table"]==undefined){
                banhji.pageLoaded["custom_table"] = true;

            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/under_construction", function(){
        banhji.view.layout.showIn("#content", banhji.view.underConstruction);
    });



    /*************************************************
    *   CUSTOMER ROUTER                              *
    *************************************************/
    banhji.router.route("/customers", function(){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.customerDashboard);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);

                //eraseCookie("isshow");
                var isshow = readCookie("cusVisit");

                if (isshow != 1) {
                    createCookie("cusVisit", 1);
                    $("a.aCustomer").click();
                }

                var vm = banhji.customerDashboard;
                banhji.userManagement.addMultiTask("Customer Dashboard","customers",null);
                if(banhji.pageLoaded["customers"]==undefined){
                    banhji.pageLoaded["customers"] = true;

                }
                vm.pageLoad();
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/customer_center(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.customerCenter);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                // banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);

                var vm = banhji.customerCenter;
                banhji.userManagement.addMultiTask("Customer Center","customer_center",null);
                if(banhji.pageLoaded["customer_center"]==undefined){
                    banhji.pageLoaded["customer_center"] = true;
                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/customer(/:id)(/:is_pattern)", function(id,is_pattern){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.customer);
                // kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.customer;
                banhji.userManagement.addMultiTask("Customer","customer",vm);

                if(banhji.pageLoaded["customer"]==undefined){
                    banhji.pageLoaded["customer"] = true;

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id, is_pattern);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    // CUSTOMER FUNCTIONS
    banhji.router.route("/quote(/:id)", function(id){
        // banhji.accessPage.query({
        //  filter:[
        //      { field:"name", value:"quotation" },
        //      { field:'username', operator:"where_related_user", value: JSON.parse(localStorage.getItem('userData/user')).username }
        //  ]
        // }).then(function(e){
        //  if(banhji.accessPage.data().length > 0) {

                banhji.view.layout.showIn("#content", banhji.view.quote);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.quote;
                banhji.userManagement.addMultiTask("Quotation","quote",vm);

                if(banhji.pageLoaded["quote"]==undefined){
                    banhji.pageLoaded["quote"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveDraft1").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveDraft", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate() && vm.validating()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);

        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/sale_order(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.saleOrder);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.saleOrder;
                banhji.userManagement.addMultiTask("Sale Order","sale_order",vm);

                if(banhji.pageLoaded["sale_order"]==undefined){
                    banhji.pageLoaded["sale_order"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveDraft1").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveDraft", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate() && vm.validating()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/customer_deposit(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.customerDeposit);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.customerDeposit;
                banhji.userManagement.addMultiTask("Customer Deposit","customer_deposit",vm);

                if(banhji.pageLoaded["customer_deposit"]==undefined){
                    banhji.pageLoaded["customer_deposit"] = true;

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate() && vm.validating()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/cash_sale(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.cashSale);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.cashSale;
                banhji.userManagement.addMultiTask("Cash Sale","cash_sale",vm);

                if(banhji.pageLoaded["cash_sale"]==undefined){
                    banhji.pageLoaded["cash_sale"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveDraft1").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveDraft", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate() && vm.validating()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);

        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/commercial_cash_sale(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.cashSale);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.cashSale;
                banhji.userManagement.addMultiTask("Cash Sale","cash_sale",vm);

                if(banhji.pageLoaded["cash_sale"]==undefined){
                    banhji.pageLoaded["cash_sale"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveDraft1").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveDraft", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate() && vm.validating()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);

        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/vat_sale(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.cashSale);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.cashSale;
                banhji.userManagement.addMultiTask("Cash Sale","cash_sale",vm);

                if(banhji.pageLoaded["cash_sale"]==undefined){
                    banhji.pageLoaded["cash_sale"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveDraft1").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveDraft", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate() && vm.validating()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);

        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/invoice(/:id)", function(id){
        banhji.view.layout.showIn("#content", banhji.view.invoice);
        kendo.fx($("#slide-form")).slideIn("down").play();

        var vm = banhji.invoice;
        banhji.userManagement.addMultiTask("Invoice","invoice",vm);

        if(banhji.pageLoaded["invoice"]==undefined){
            banhji.pageLoaded["invoice"] = true;

            vm.lineDS.bind("change", vm.lineDSChanges);

            var validator = $("#example").kendoValidator({
                rules: {
                    customRule1: function(input) {
                        if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                            vm.set("recurring_validate", false);
                            return $.trim(input.val()) !== "";
                        }
                        return true;
                    },
                    customRule2: function(input){
                        if (input.is("[name=txtNumber]")) {
                            return vm.get("notDuplicateNumber");
                        }
                        return true;
                    }
                },
                messages: {
                    customRule1: banhji.source.requiredMessage,
                    customRule2: banhji.source.duplicateNumber
                }
            }).data("kendoValidator");

            $("#saveDraft1").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("saveDraft", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveNew").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveClose").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("saveClose", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#savePrint").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("savePrint", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveRecurring").click(function(e){
                e.preventDefault();

                vm.set("recurring_validate", true);

                if(validator.validate() && vm.validating()){
                    vm.set("saveRecurring", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });
        }

        vm.pageLoad(id);
    });
    banhji.router.route("/invoice_batch", function(){
        banhji.view.layout.showIn("#content", banhji.view.invoiceBatch);
        kendo.fx($("#slide-form")).slideIn("down").play();

        var vm = banhji.invoiceBatch;
        banhji.userManagement.addMultiTask("Batch Invoice","invoice_batch",vm);

        if(banhji.pageLoaded["invoice_batch"]==undefined){
            banhji.pageLoaded["invoice_batch"] = true;

            vm.setObj();
            vm.lineDS.bind("change", vm.lineDSChanges);

            var validator = $("#example").kendoValidator({
                rules: {
                    customRule1: function(input) {
                        if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                            vm.set("recurring_validate", false);
                            return $.trim(input.val()) !== "";
                        }
                        return true;
                    },
                    customRule2: function(input){
                        if (input.is("[name=txtNumber]")) {
                            return vm.get("notDuplicateNumber");
                        }
                        return true;
                    }
                },
                messages: {
                    customRule1: banhji.source.requiredMessage,
                    customRule2: banhji.source.duplicateNumber
                }
            }).data("kendoValidator");

            $("#saveNew").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveClose").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("saveClose", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#savePrint").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("savePrint", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveRecurring").click(function(e){
                e.preventDefault();

                vm.set("recurring_validate", true);

                if(validator.validate() && vm.validating()){
                    vm.set("saveRecurring", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });
        }

        vm.pageLoad();
    });
    banhji.router.route("/commercial_invoice(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.invoice);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.invoice;
                banhji.userManagement.addMultiTask("Invoice","invoice",vm);

                if(banhji.pageLoaded["invoice"]==undefined){
                    banhji.pageLoaded["invoice"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveDraft1").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveDraft", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate() && vm.validating()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/vat_invoice(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.invoice);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.invoice;
                banhji.userManagement.addMultiTask("Invoice","invoice",vm);

                if(banhji.pageLoaded["invoice"]==undefined){
                    banhji.pageLoaded["invoice"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveDraft1").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveDraft", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate() && vm.validating()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/gdn(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.gdn);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.gdn;
            banhji.userManagement.addMultiTask("GDN","gdn",vm);

            if(banhji.pageLoaded["gdn"]==undefined){
                banhji.pageLoaded["gdn"] = true;

                vm.lineDS.bind("change", vm.lineDSChanges);

                var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                $("#saveNew").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveClose").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.set("saveClose", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#savePrint").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.set("savePrint", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveRecurring").click(function(e){
                    e.preventDefault();

                    vm.set("recurring_validate", true);

                    if(validator.validate() && vm.validating()){
                        vm.set("saveRecurring", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });
            }

            vm.pageLoad(id);
        }
    });
    banhji.router.route("/sale_return(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.saleReturn);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.saleReturn;
                banhji.userManagement.addMultiTask("Sale Return","sale_return",vm);

                if(banhji.pageLoaded["sale_return"]==undefined){
                    banhji.pageLoaded["sale_return"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);
                    vm.accountLineDS.bind("change", vm.accountLineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
        //      } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/cash_refund(/:id)", function(id){
        banhji.view.layout.showIn("#content", banhji.view.cashRefund);
        kendo.fx($("#slide-form")).slideIn("down").play();

        var vm = banhji.cashRefund;
        banhji.userManagement.addMultiTask("Cash Refund","cash_refund",vm);

        if(banhji.pageLoaded["cash_refund"]==undefined){
            banhji.pageLoaded["cash_refund"] = true;

            vm.lineDS.bind("change", vm.lineDSChanges);

            var validator = $("#example").kendoValidator({
                rules: {
                    customRule1: function(input){
                        if (input.is("[name=txtNumber]")) {
                            return vm.get("notDuplicateNumber");
                        }
                        return true;
                    }
                },
                messages: {
                    customRule1: banhji.source.duplicateNumber
                }
            }).data("kendoValidator");

            $("#saveNew").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveClose").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("saveClose", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#savePrint").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("savePrint", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });
        }

        vm.pageLoad(id);
    });
    banhji.router.route("/customer_recurring", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.customerRecurring);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);

            var vm = banhji.customerRecurring;
            banhji.userManagement.addMultiTask("Customer Recurring","customer_recurring",null);
            if(banhji.pageLoaded["customer_recurring"]==undefined){
                banhji.pageLoaded["customer_recurring"] = true;

            }

            vm.pageLoad();
        }
    });
    // CUSTOMER REPORTS
    banhji.router.route("/customer_report_center", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.customerReportCenter);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);

            var vm = banhji.customerReportCenter;
            banhji.userManagement.addMultiTask("Customer Reports Center","customer_report_center",null);
            if(banhji.pageLoaded["customer_report_center"]==undefined){
                banhji.pageLoaded["customer_report_center"] = true;

                vm.setObj();
            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/statement(/:id)", function(){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.statement);

                var vm = banhji.statement;
                banhji.userManagement.addMultiTask("Statement","statement",null);

                if(banhji.pageLoaded["statement"]==undefined){
                    banhji.pageLoaded["statement"] = true;

                    vm.sorterChanges();
                }
                banhji.statement.getLogo();
                vm.pageLoad();
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/statement_detail", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.statementDetail);

            var vm = banhji.statementDetail;
            banhji.userManagement.addMultiTask("Sale Detail By Customer","statement_detail",null);

            if(banhji.pageLoaded["statement_detail"]==undefined){
                banhji.pageLoaded["statement_detail"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
            banhji.statementDetail.dataSource.bind('requestEnd', function(e){
                if(e.response) {
                    banhji.statementDetail.set('totalAmount', kendo.toString(e.response.totalAmount, 'c2'));
                }
            });
        }
    });
    banhji.router.route("/customer_balance", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.customerBalance);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);

            var vm = banhji.customerBalance;
            banhji.userManagement.addMultiTask("Customer Balance","customer_balance",null);
            if(banhji.pageLoaded["customer_balance"]==undefined){
                banhji.pageLoaded["customer_balance"] = true;

                vm.search();
            }
        }
    });
    banhji.router.route("/invoice_custom(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.invoiceCustom);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.invoiceCustom;

            if(banhji.pageLoaded["invoice_custom"]==undefined){
                banhji.pageLoaded["invoice_custom"] = true;

                //Function write css to header
                function loadStyle(href){
                    // avoid duplicates
                    for(var i = 0; i < document.styleSheets.length; i++){
                        if(document.styleSheets[i].href == href){
                            return;
                        }
                    }
                    var head  = document.getElementsByTagName('head')[0];
                    var link  = document.createElement('link');
                    link.rel  = 'stylesheet';
                    link.type = 'text/css';
                    link.href = href;
                    head.appendChild(link);
                }
                var Href1 = '<?php echo base_url(); ?>assets/invoice/invoice.css';
                loadStyle(Href1);
                setTimeout(function(){
                    var validator = $("#example").kendoValidator().data("kendoValidator");
                    var notification = $("#notification").kendoNotification({
                        autoHideAfter: 5000,
                        width: 300,
                        height: 50
                    }).data('kendoNotification');
                    // $("#saveNew").click(function(e){
                    //  e.preventDefault();
                    //  if(validator.validate()){
              //            vm.save();

              //            notification.success("Save Successful");
                 //        }else{
                 //         notification.error("Warning, please review it again!");
                 //        }
                    // });
                    // $("#saveClose").click(function(e){
                    //  e.preventDefault();

                    //  if(validator.validate()){
              //            vm.save();
              //            window.history.back();

              //            notification.success("Save Successful");
                 //        }else{
                 //         notification.error("Warning, please review it again!");
                 //        }
                    // });
                },2000);
            };

            vm.pageLoad(id);
        };
    });
    banhji.router.route("/invoice_form(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.invoiceForm);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.invoiceForm;
            banhji.userManagement.addMultiTask("Customer Form","invoice_form",null);
            if(banhji.pageLoaded["invoice_form"]==undefined){
                banhji.pageLoaded["invoice_form"] = true;

                //Function write css to header
                function loadStyle(href){
                    // avoid duplicates
                    for(var i = 0; i < document.styleSheets.length; i++){
                        if(document.styleSheets[i].href == href){
                            return;
                        }
                    }
                    var head  = document.getElementsByTagName('head')[0];
                    var link  = document.createElement('link');
                    link.rel  = 'stylesheet';
                    link.type = 'text/css';
                    link.href = href;
                    head.appendChild(link);
                }
                var Href1 = '<?php echo base_url(); ?>assets/invoice/invoice.css';
                loadStyle(Href1);
            };

            vm.pageLoad(id);
        };
    });
    banhji.router.route("/batch_invoice_preview", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.batchInvoicePreview);
            kendo.fx($("#slide-form")).slideIn("down").play();
            banhji.batchInvoicePreview.pageLoad();
            //Function write css to header
            function loadStyle(href){
                // avoid duplicates
                for(var i = 0; i < document.styleSheets.length; i++){
                    if(document.styleSheets[i].href == href){
                        return;
                    }
                }
                var head  = document.getElementsByTagName('head')[0];
                var link  = document.createElement('link');
                link.rel  = 'stylesheet';
                link.type = 'text/css';
                link.href = href;
                head.appendChild(link);
            }
            var Href1 = '<?php echo base_url(); ?>assets/invoice/invoice.css';
            loadStyle(Href1);
        };
    });
    banhji.router.route("/sale_summary_by_customer", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.saleSummaryByCustomer);

            var vm = banhji.saleSummaryByCustomer;
            banhji.userManagement.addMultiTask("Sale Summary By Customer","sale_summary_by_customer",null);

            if(banhji.pageLoaded["sale_summary_by_customer"]==undefined){
                banhji.pageLoaded["sale_summary_by_customer"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/sale_detail_by_customer", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.saleDetailByCustomer);

            var vm = banhji.saleDetailByCustomer;
            banhji.userManagement.addMultiTask("Sale Detail By Customer","sale_detail_by_customer",null);

            if(banhji.pageLoaded["sale_detail_by_customer"]==undefined){
                banhji.pageLoaded["sale_detail_by_customer"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/customer_transaction_list", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.customerTransactionList);

            var vm = banhji.customerTransactionList;
            banhji.userManagement.addMultiTask("Customer Transaction List","customer_transaction_list",null);

            if(banhji.pageLoaded["customer_transaction_list"]==undefined){
                banhji.pageLoaded["customer_transaction_list"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/deposit_detail_by_customer", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.depositDetailByCustomer);

            var vm = banhji.depositDetailByCustomer;
            banhji.userManagement.addMultiTask("Deposit Detail By Customer","deposit_detail_by_customer",null);

            if(banhji.pageLoaded["deposit_detail_by_customer"]==undefined){
                banhji.pageLoaded["deposit_detail_by_customer"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/cashSale_summary_by_customer", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashSaleSummaryByCustomer);

            var vm = banhji.cashSaleSummaryByCustomer;
            banhji.userManagement.addMultiTask("Cash Sale Summary By Customer","cashSale_summary_by_customer",null);

            if(banhji.pageLoaded["cashSale_summary_by_customer"]==undefined){
                banhji.pageLoaded["cashSale_summary_by_customer"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/cashSale_detail_by_customer", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashSaleDetailByCustomer);

            var vm = banhji.cashSaleDetailByCustomer;
            banhji.userManagement.addMultiTask("Cash Sale Summary By Customer","cashSale_detail_by_customer",null);

            if(banhji.pageLoaded["cashSale_detail_by_customer"]==undefined){
                banhji.pageLoaded["cashSale_detail_by_customer"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/cashSale_summary_by_product", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashSaleSummaryByProduct);

            var vm = banhji.cashSaleSummaryByProduct;
            banhji.userManagement.addMultiTask("Cash Sale Summary By Product","cashSale_summary_by_product",null);

            if(banhji.pageLoaded["cashSale_summary_by_product"]==undefined){
                banhji.pageLoaded["cashSale_summary_by_product"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/cashSale_detail_by_product", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashSaleDetailByProduct);

            var vm = banhji.cashSaleDetailByProduct;
            banhji.userManagement.addMultiTask("Cash Sale Summary By Product","cashSale_detail_by_product",null);

            if(banhji.pageLoaded["cashSale_detail_by_product"]==undefined){
                banhji.pageLoaded["cashSale_detail_by_product"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/sale_summary_by_product", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.saleSummaryByProduct);

            var vm = banhji.saleSummaryByProduct;
            banhji.userManagement.addMultiTask("Sale Summary By Product","sale_summary_by_product",null);

            if(banhji.pageLoaded["sale_summary_by_product"]==undefined){
                banhji.pageLoaded["sale_summary_by_product"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/sale_detail_by_product", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.saleDetailByProduct);

            var vm = banhji.saleDetailByProduct;
            banhji.userManagement.addMultiTask("Sale Detail By Product","sale_detail_by_product",null);

            if(banhji.pageLoaded["sale_detail_by_product"]==undefined){
                banhji.pageLoaded["sale_detail_by_product"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/sale_summary_by_brand", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.saleSummaryByBrand);

            var vm = banhji.saleSummaryByBrand;
            banhji.userManagement.addMultiTask("Sale Summary By Product","sale_summary_by_brand",null);

            if(banhji.pageLoaded["sale_summary_by_brand"]==undefined){
                banhji.pageLoaded["sale_summary_by_brand"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/sale_detail_by_brand", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.saleDetailByBrand);

            var vm = banhji.saleDetailByBrand;
            banhji.userManagement.addMultiTask("Sale Detail By Product","sale_detail_by_brand",null);

            if(banhji.pageLoaded["sale_detail_by_brand"]==undefined){
                banhji.pageLoaded["sale_detail_by_brand"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/sale_summary_by_employee", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.saleSummaryByEmployee);

            var vm = banhji.saleSummaryByEmployee;
            banhji.userManagement.addMultiTask("Sale Summary By Employee","sale_summary_by_employee",null);

            if(banhji.pageLoaded["sale_summary_by_employee"]==undefined){
                banhji.pageLoaded["sale_summary_by_employee"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/sale_detail_by_employee", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.saleDetailByEmployee);

            var vm = banhji.saleDetailByEmployee;
            banhji.userManagement.addMultiTask("Sale Detail By Employee","sale_detail_by_employee",null);

            if(banhji.pageLoaded["sale_detail_by_employee"]==undefined){
                banhji.pageLoaded["sale_detail_by_employee"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/saleProduct_detail_by_employee", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.saleProductDetailByEmployee);

            var vm = banhji.saleProductDetailByEmployee;
            banhji.userManagement.addMultiTask("Sale Product Detail By Employee","saleProduct_detail_by_employee",null);

            if(banhji.pageLoaded["saleProduct_detail_by_employee"]==undefined){
                banhji.pageLoaded["saleProduct_detail_by_employee"] = true;

                vm.sorterChanges();
            }
            banhji.saleProductDetailByEmployee.dataSource.bind('requestEnd', function(e){
                if(e.response) {
                    banhji.saleProductDetailByEmployee.set('total', kendo.toString(e.response.total, 'c2'));
                }
            });
            vm.pageLoad();
        }
    });
    banhji.router.route("/customer_balance_summary", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.customerBalanceSummary);

            var vm = banhji.customerBalanceSummary;
            banhji.userManagement.addMultiTask("Customer Balance Summary","customer_balance_summary",null);

            if(banhji.pageLoaded["customer_balance_summary"]==undefined){
                banhji.pageLoaded["customer_balance_summary"] = true;
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/customer_balance_detail", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            var vm = banhji.customerBalanceDetail;
            banhji.userManagement.addMultiTask("Customer Balance Detail","customer_balance_detail",null);
            banhji.view.layout.showIn("#content", banhji.view.customerBalanceDetail);
            if(banhji.pageLoaded["customer_balance_detail"]==undefined){
                banhji.pageLoaded["customer_balance_detail"] = true;
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/receivable_aging_summary", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.receivableAgingSummary);

            var vm = banhji.receivableAgingSummary;
            banhji.userManagement.addMultiTask("Receivable Aging Summary","receivable_aging_summary",null);

            if(banhji.pageLoaded["receivable_aging_summary"]==undefined){
                banhji.pageLoaded["receivable_aging_summary"] = true;
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/receivable_aging_detail", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.receivableAgingDetail);

            var vm = banhji.receivableAgingDetail;
            banhji.userManagement.addMultiTask("Receivable Aging Detail","receivable_aging_detail",null);

            if(banhji.pageLoaded["receivable_aging_detail"]==undefined){
                banhji.pageLoaded["receivable_aging_detail"] = true;
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/collect_invoice", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.collectInvoice);

            var vm = banhji.collectInvoice;
            banhji.userManagement.addMultiTask("List Invoice Collect","collect_invoice",null);

            if(banhji.pageLoaded["collect_invoice"]==undefined){
                banhji.pageLoaded["collect_invoice"] = true;
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/collection_report", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            var vm = banhji.collectionReport;
            banhji.userManagement.addMultiTask("Collection Report","collection_report",null);
            banhji.view.layout.showIn("#content", banhji.view.collectionReport);

            if(banhji.pageLoaded["collection_report"]==undefined){
                banhji.pageLoaded["collection_report"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/invoice_list", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.invoiceList);

            var vm = banhji.invoiceList;
            banhji.userManagement.addMultiTask("Invoice List","invoice_list",null);

            if(banhji.pageLoaded["collect_invoice"]==undefined){
                banhji.pageLoaded["collect_invoice"] = true;
                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/sale_job_engagement", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            var vm = banhji.saleJobEngagement;
            banhji.userManagement.addMultiTask("Sale Job Engagement","sale_job_engagement",null);

            banhji.view.layout.showIn("#content", banhji.view.saleJobEngagement);
            banhji.saleJob.set('startDate', new Date().getFullYear() + "-01-01");
            banhji.saleJob.dataSource.filter({
                logic: banhji.saleSummaryCustomer.get('filteredBy'),
                filters: [
                    {field: "issued_date >=", value: kendo.toString(new Date().getFullYear() + "-01-01", "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(new Date(), "yyyy-MM-dd")}
                ]
            });
            banhji.saleJob.dataSource.bind('requestEnd', function(e){
                if(e.response) {
                    banhji.saleJob.set('count', e.response.count);
                    kendo.culture(banhji.locale);
                    banhji.saleJob.set('total', kendo.toString(e.response.total, 'c2'));
                    banhji.saleJob.set('saleNumber', kendo.toString(e.response.saleNumber, 'c2'));
                }
            });
        }
    });
    banhji.router.route("/sale_order_list", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.saleOrderList);

            var vm = banhji.saleOrderList;
            banhji.userManagement.addMultiTask("List of Sale Order","sale_order_list",null);

            if(banhji.pageLoaded["sale_order_list"]==undefined){
                banhji.pageLoaded["sale_order_list"] = true;
                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/saleOrder_detail_by_product", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.saleOrderDetailByProduct);

            var vm = banhji.saleOrderDetailByProduct;
            banhji.userManagement.addMultiTask("Sale Order Detail By Product","saleOrder_detail_by_product",null);

            if(banhji.pageLoaded["saleOrder_detail_by_product"]==undefined){
                banhji.pageLoaded["saleOrder_detail_by_product"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/customer_list", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.customerList);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);

            var vm = banhji.customerList;

            if(banhji.pageLoaded["customer_list"]==undefined){
                banhji.pageLoaded["customer_list"] = true;

            }
        }
    });
    banhji.router.route("/draft_list", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.draftTransaction);

            var vm = banhji.draftTransaction;
            banhji.userManagement.addMultiTask("Draft Transaction List","draft_list",null);

            if(banhji.pageLoaded["draft_list"]==undefined){
                banhji.pageLoaded["draft_list"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    // CUSTOMER SETTINGS
    banhji.router.route("/customer_setting", function(){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.customerSetting);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);

                var vm = banhji.customerSetting;
                banhji.userManagement.addMultiTask("Customer Setting","customer_setting",null);
                if(banhji.pageLoaded["customer_setting"]==undefined){
                    banhji.pageLoaded["customer_setting"] = true;

                    vm.contactTypeDS.filter({ field:"parent_id", value:1 });
                }

                vm.pageLoad();
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/job", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.job);
            banhji.view.layout.showIn('#menu', banhji.view.menu);

            var vm = banhji.job;
            banhji.userManagement.addMultiTask("Job","job",null);
            if(banhji.pageLoaded["job"]==undefined){
                banhji.pageLoaded["job"] = true;
            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/customer_group", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.customerGroup);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);

            var vm = banhji.customerGroup;
            banhji.userManagement.addMultiTask("Group Customer","customer_group",null);
            if(banhji.pageLoaded["customer_group"]==undefined){
                banhji.pageLoaded["customer_group"] = true;

                vm.dataSource.filter({ field:"type", value: "customer" });
                vm.contactTypeDS.filter({ field:"parent_id", value: 1 });
                vm.setObj();
            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/customer_assignee", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.contactAssignee);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);

            var vm = banhji.contactAssignee;
            banhji.userManagement.addMultiTask("Customer Assignee","customer_assignee",null);
            if(banhji.pageLoaded["customer_assignee"]==undefined){
                banhji.pageLoaded["customer_assignee"] = true;

                vm.contactTypeDS.filter({ field:"parent_id", value: 1 });
                vm.employeeDS.filter({ field:"parent_id", operator:"where_related_contact_type", value: 3 });
                vm.setObj();
            }

            vm.pageLoad();
        }
    });




    /*************************************************
    *   MEMBERSHIP ROUTER                            *
    *************************************************/
    banhji.router.route("/memberships", function(){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.membershipDashboard);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.membershipMenu);

                var vm = banhji.membershipDashboard;
                banhji.userManagement.addMultiTask("Membership Dashboard","memberships",null);
                if(banhji.pageLoaded["memberships"]==undefined){
                    banhji.pageLoaded["memberships"] = true;

                }
                vm.pageLoad();
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/membership_center(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.membershipCenter);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                // banhji.view.menu.showIn('#secondary-menu', banhji.view.membershipMenu);

                var vm = banhji.membershipCenter;
                banhji.userManagement.addMultiTask("Membership Center","membership_center",null);
                if(banhji.pageLoaded["membership_center"]==undefined){
                    banhji.pageLoaded["membership_center"] = true;
                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/membership(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.membership);

                var vm = banhji.membership;
                banhji.userManagement.addMultiTask("Membership","membership",vm);

                if(banhji.pageLoaded["membership"]==undefined){
                    banhji.pageLoaded["membership"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/cpd_record(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.cpdRecord);

                var vm = banhji.cpdRecord;
                banhji.userManagement.addMultiTask("CPD Record","cpd_record",vm);

                if(banhji.pageLoaded["cpd_record"]==undefined){
                    banhji.pageLoaded["cpd_record"] = true;

                    var validator = $("#example").kendoValidator().data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/invoice_batch_membership", function(){
        banhji.view.layout.showIn("#content", banhji.view.invoiceBatchMembership);
        kendo.fx($("#slide-form")).slideIn("down").play();

        var vm = banhji.invoiceBatchMembership;
        banhji.userManagement.addMultiTask("Batch Invoice","invoice_batch_membership",vm);

        if(banhji.pageLoaded["invoice_batch_membership"]==undefined){
            banhji.pageLoaded["invoice_batch_membership"] = true;

            function onChange(arg) {
                vm.set("selectList", this.selectedKeyNames());
            }

            $("#grid").kendoGrid({
                dataSource: vm.membershipTxnDS,
                autoBind: false,
                editable: true,
                pageable: true,
                scrollable: false,
                persistSelection: true,
                sortable: true,
                change: onChange,
                columns: [
                    { selectable: true, width: "50px" },
                    {
                        title:'NO',
                        width: '50px',
                        attributes: { style: 'text-align: center;' },
                        template: function (dataItem) {
                            var rowIndex = banhji.invoiceBatchMembership.membershipTxnDS.indexOf(dataItem)+1;
                            return rowIndex;
                        }
                    },
                    { field: 'contacts', title: 'NUMBER', editable: 'false', template: '#=contacts.abbr##=contacts.number#' },
                    { field: 'contacts', title:'NAME', editable: 'false', template: '#=contacts.name#' },
                    { field: 'number', title:'INVOICE NUMBER' },
                    { field: 'amount', title:'AMOUNT', format: '{0:n}', editable: 'false', attributes: { style: 'text-align: right;' } }
                ]
            });

            var validator = $("#example").kendoValidator({
                rules: {
                    customRule1: function(input) {
                        if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                            vm.set("recurring_validate", false);
                            return $.trim(input.val()) !== "";
                        }
                        return true;
                    },
                    customRule2: function(input){
                        if (input.is("[name=txtNumber]")) {
                            return vm.get("notDuplicateNumber");
                        }
                        return true;
                    }
                },
                messages: {
                    customRule1: banhji.source.requiredMessage,
                    customRule2: banhji.source.duplicateNumber
                }
            }).data("kendoValidator");

            $("#saveNew").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveClose").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("saveClose", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#savePrint").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("savePrint", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });
        }

        vm.pageLoad();
    });
    // MEMBERSHIP SETTINGS
    banhji.router.route("/membership_setting", function(){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.membershipSetting);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.membershipMenu);

                var vm = banhji.membershipSetting;
                banhji.userManagement.addMultiTask("Membership Setting","membership_setting",null);
                if(banhji.pageLoaded["membership_setting"]==undefined){
                    banhji.pageLoaded["membership_setting"] = true;

                    vm.contactTypeDS.filter({ field:"parent_id", value:1 });
                }

                vm.pageLoad();
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });




    /*************************************************
    *   VENDOR ROUTER                                *
    *************************************************/
    banhji.router.route("/vendors", function(){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("supplier" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.vendorDashboard);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.vendorMenu);

                var vm = banhji.vendorDashboard;
                banhji.userManagement.addMultiTask("Supplier Dashboard","vendors",null);
                if(banhji.pageLoaded["vendors"]==undefined){
                    banhji.pageLoaded["vendors"] = true;
                }

                vm.pageLoad();
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/vendor_center(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("supplier" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.vendorCenter);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                //banhji.view.menu.showIn('#secondary-menu', banhji.view.vendorMenu);

                var vm = banhji.vendorCenter;
                banhji.userManagement.addMultiTask("Supplier Center","vendor_center",null);

                if(banhji.pageLoaded["vendor_center"]==undefined){
                    banhji.pageLoaded["vendor_center"] = true;
                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/vendor(/:id)(/:is_pattern)", function(id, is_pattern){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("supplier" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                var vm = banhji.vendor;
                banhji.userManagement.addMultiTask("Supplier","vendor",vm);

                banhji.view.layout.showIn("#content", banhji.view.vendor);
                kendo.fx($("#slide-form")).slideIn("down").play();

                if(banhji.pageLoaded["vendor"]==undefined){
                    banhji.pageLoaded["vendor"] = true;

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id, is_pattern);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    // VENDOR FUNCTIONS
    banhji.router.route("/purchase_order(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("supplier" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.purchaseOrder);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.purchaseOrder;
                banhji.userManagement.addMultiTask("Purchase Order","purchase_order",vm);

                if(banhji.pageLoaded["purchase_order"]==undefined){
                    banhji.pageLoaded["purchase_order"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveDraft1").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveDraft", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();
                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate() && vm.validating()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/grn(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.grn);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.grn;
            banhji.userManagement.addMultiTask("Goods Receive Note","grn",vm);

            if(banhji.pageLoaded["grn"]==undefined){
                banhji.pageLoaded["grn"] = true;

                vm.lineDS.bind("change", vm.lineDSChanges);

                var validator = $("#example").kendoValidator({
                    rules: {
                        customRule1: function(input) {
                            if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                vm.set("recurring_validate", false);
                                return $.trim(input.val()) !== "";
                            }
                            return true;
                        },
                        customRule2: function(input){
                            if (input.is("[name=txtNumber]")) {
                                return vm.get("notDuplicateNumber");
                            }
                            return true;
                        }
                    },
                    messages: {
                        customRule1: banhji.source.requiredMessage,
                        customRule2: banhji.source.duplicateNumber
                    }
                }).data("kendoValidator");

                $("#saveDraft1").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.set("saveDraft", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveNew").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveClose").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.set("saveClose", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#savePrint").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.set("savePrint", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveRecurring").click(function(e){
                    e.preventDefault();

                    vm.set("recurring_validate", true);

                    if(validator.validate() && vm.validating()){
                        vm.set("saveRecurring", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });
            }

            vm.pageLoad(id);
        }
    });
    banhji.router.route("/vendor_deposit(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("supplier" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.vendorDeposit);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.vendorDeposit;
                banhji.userManagement.addMultiTask("Supplier Deposit","vendor_deposit",vm);

                if(banhji.pageLoaded["vendor_deposit"]==undefined){
                    banhji.pageLoaded["vendor_deposit"] = true;

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/purchase(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("supplier" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.purchase);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.purchase;
                banhji.userManagement.addMultiTask("Purchase","purchase",vm);

                if(banhji.pageLoaded["purchase"]==undefined){
                    banhji.pageLoaded["purchase"] = true;

                    vm.lineDS.bind("change", vm.itemLineDSChanges);
                    vm.accountLineDS.bind("change", vm.accountLineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveDraft1").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveDraft", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate() && vm.validating()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/credit_purchase(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("supplier" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.purchase);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.purchase;
                banhji.userManagement.addMultiTask("Purchase","purchase",vm);

                if(banhji.pageLoaded["purchase"]==undefined){
                    banhji.pageLoaded["purchase"] = true;

                    vm.lineDS.bind("change", vm.itemLineDSChanges);
                    vm.accountLineDS.bind("change", vm.accountLineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveDraft1").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveDraft", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate() && vm.validating()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/cash_purchase(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("supplier" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.purchase);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.purchase;
                banhji.userManagement.addMultiTask("Purchase","purchase",vm);

                if(banhji.pageLoaded["purchase"]==undefined){
                    banhji.pageLoaded["purchase"] = true;

                    vm.lineDS.bind("change", vm.itemLineDSChanges);
                    vm.accountLineDS.bind("change", vm.accountLineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveDraft1").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveDraft", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate() && vm.validating()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/purchase_return(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("supplier" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.purchaseReturn);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.purchaseReturn;
                banhji.userManagement.addMultiTask("Purchase Return","purchase_return",vm);

                if(banhji.pageLoaded["purchase_return"]==undefined){
                    banhji.pageLoaded["purchase_return"] = true;

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/payment_refund(/:id)", function(id){
        banhji.view.layout.showIn("#content", banhji.view.paymentRefund);
        kendo.fx($("#slide-form")).slideIn("down").play();

        var vm = banhji.paymentRefund;
        banhji.userManagement.addMultiTask("Payment Refund","payment_refund",vm);

        if(banhji.pageLoaded["payment_refund"]==undefined){
            banhji.pageLoaded["payment_refund"] = true;

            var validator = $("#example").kendoValidator({
                rules: {
                    customRule1: function(input){
                        if (input.is("[name=txtNumber]")) {
                            return vm.get("notDuplicateNumber");
                        }
                        return true;
                    }
                },
                messages: {
                    customRule1: banhji.source.duplicateNumber
                }
            }).data("kendoValidator");

            $("#saveNew").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveClose").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("saveClose", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#savePrint").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("savePrint", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });
        }

        vm.pageLoad(id);
    });
    banhji.router.route("/vendor_recurring", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.vendorRecurring);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.vendorMenu);

            var vm = banhji.vendorRecurring;
            banhji.userManagement.addMultiTask("Supplier Recurring","vendor_recurring",null);
            if(banhji.pageLoaded["vendor_recurring"]==undefined){
                banhji.pageLoaded["vendor_recurring"] = true;

            }

            vm.pageLoad();
        }
    });
    // VENDOR REPORTS
    banhji.router.route("/vendor_report_center", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.vendorReportCenter);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.vendorMenu);

            var vm = banhji.vendorReportCenter;
            banhji.userManagement.addMultiTask("Supplier Report Center","vendor_report_center");

            var vm = banhji.vendorReportCenter;
            banhji.userManagement.addMultiTask("Expense/Purchase Managment Reports","vendor_report_center",null);

            if(banhji.pageLoaded["vendor_report_center"]==undefined){
                banhji.pageLoaded["vendor_report_center"] = true;

                vm.setObj();
            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/expenses_purchase_summary_supplier", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.expensesSummarySupplier);

            var vm = banhji.expensesSummarySupplier;
            banhji.userManagement.addMultiTask("Expense/ Purchase Summary by Supplier","expenses_purchase_summary_supplier",null);

            if(banhji.pageLoaded["expenses_purchase_summary_supplier"]==undefined){
                banhji.pageLoaded["expenses_purchase_summary_supplier"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/suppliers_transaction_list", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.supplierTransaction);

            var vm = banhji.supplierTransaction;
            banhji.userManagement.addMultiTask("Supplier Transaction List","suppliers_transaction_list");

            if(banhji.pageLoaded["suppliers_transaction_list"]==undefined){
                banhji.pageLoaded["suppliers_transaction_list"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/expenses_purchase_detail_supplier", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.expensesDetailSupplier);

            var vm = banhji.expensesDetailSupplier;
            banhji.userManagement.addMultiTask("Expense/ Purchase Detail by Supplier","expenses_purchase_detail_supplier",null);

            if(banhji.pageLoaded["expenses_purchase_detail_supplier"]==undefined){
                banhji.pageLoaded["expenses_purchase_detail_supplier"] = true;

                vm.sorterChanges();
            }
            banhji.expensesDetailSupplier.dataSource.bind('requestEnd', function(e){
                if(e.response) {
                    banhji.expensesDetailSupplier.set('count', e.response.count);
                    kendo.culture(banhji.locale);
                    banhji.expensesDetailSupplier.set('total', kendo.toString(e.response.total, 'c2'));
                }
            });
            vm.pageLoad();
        }
    });
    banhji.router.route("/deposit_detail_supplier", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.depositDetailSupplier);

            var vm = banhji.depositDetailSupplier;
            banhji.userManagement.addMultiTask("Deposit Detail Supplier","deposit_detail_supplier",null);

            if(banhji.pageLoaded["deposit_detail_supplier"]==undefined){
                banhji.pageLoaded["deposit_detail_supplier"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/purchase_summary_product_services", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.purchaseSummaryProductServices);

            var vm = banhji.purchaseSummaryProductServices;
            banhji.userManagement.addMultiTask("Purchase Summary Product/Service","purchase_summary_product_services", null);

            if(banhji.pageLoaded["purchase_summary_product_services"]==undefined){
                banhji.pageLoaded["purchase_summary_product_services"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/purchase_summary_brand", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.purchaseSummaryBrand);

            var vm = banhji.purchaseSummaryBrand;
            banhji.userManagement.addMultiTask("Purchase Summary Product/Service","purchase_summary_brand", null);

            if(banhji.pageLoaded["purchase_summary_brand"]==undefined){
                banhji.pageLoaded["purchase_summary_brand"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/open_purchase_order", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.purchaseOrderList);

            var vm = banhji.purchaseOrderList;
            banhji.userManagement.addMultiTask("Open Purchase Order","open_purchase_order", null);

            if(banhji.pageLoaded["open_purchase_order"]==undefined){
                banhji.pageLoaded["open_purchase_order"] = true;
                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/purchase_detail_product_services", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.purchaseDetailProductServices);

            var vm = banhji.purchaseDetailProductServices;
            banhji.userManagement.addMultiTask("Purchase Detail Product/Service","purchase_detail_product_services", null);

            if(banhji.pageLoaded["purchase_detail_product_services"]==undefined){
                banhji.pageLoaded["purchase_detail_product_services"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/purchase_detail_brand", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.purchaseDetailBrand);

            var vm = banhji.purchaseDetailBrand;
            banhji.userManagement.addMultiTask("Purchase Detail Product/Service","purchase_detail_brand", null);

            if(banhji.pageLoaded["purchase_detail_brand"]==undefined){
                banhji.pageLoaded["purchase_detail_brand"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/suppliers_balance_summary", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.suppliersBalanceSummary);

            var vm = banhji.suppliersBalanceSummary;
            banhji.userManagement.addMultiTask("Supplier Balance Summary","suppliers_balance_summary", null);

            if(banhji.pageLoaded["suppliers_balance_summary"]==undefined){
                banhji.pageLoaded["suppliers_balance_summary"] = true;
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/suppliers_balance_detail", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            var vm = banhji.suppliersBalanceDetail;
            banhji.userManagement.addMultiTask("Supplier Balance Detail","suppliers_balance_detail", null);
            banhji.view.layout.showIn("#content", banhji.view.suppliersBalanceDetail);
            if(banhji.pageLoaded["suppliers_balance_detail"]==undefined){
                banhji.pageLoaded["suppliers_balance_detail"] = true;
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/payables_aging_summary", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.payablesAgingSummary);

            var vm = banhji.payablesAgingSummary;
            banhji.userManagement.addMultiTask("Payables Aging Summary ","payables_aging_summary", null);

            if(banhji.pageLoaded["payables_aging_summary"]==undefined){
                banhji.pageLoaded["payables_aging_summary"] = true;
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/payables_aging_detail", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.payablesAgingDetail);

            var vm = banhji.payablesAgingDetail;
            banhji.userManagement.addMultiTask("Payables Aging Detail ","payables_aging_detail", null);

            if(banhji.pageLoaded["payables_aging_detail"]==undefined){
                banhji.pageLoaded["payables_aging_detail"] = true;
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/list_bills_paid", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.listBillsPaid);

            var vm = banhji.listBillsPaid;
            banhji.userManagement.addMultiTask("List Bills Paid ","list_bills_paid", null);

            if(banhji.pageLoaded["collect_invoice"]==undefined){
                banhji.pageLoaded["collect_invoice"] = true;
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/bill_payment_list", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            var vm = banhji.billPaymentList;
            banhji.userManagement.addMultiTask("List of Payment","bill_payment_list", null);
            banhji.view.layout.showIn("#content", banhji.view.billPaymentList);

            if(banhji.pageLoaded["bill_payment_list"]==undefined){
                banhji.pageLoaded["bill_payment_list"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/product_service_list", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.productServiceList);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.vendorMenu);

            //var vm = banhji.customerReportCenter;
            banhji.userManagement.addMultiTask("Product/Service List","product_service_list",null);
            if(banhji.pageLoaded["product_service_list"]==undefined){
                banhji.pageLoaded["product_service_list"] = true;

                function startChange() {
                    var startDate = start.value(),
                    endDate = end.value();

                    if (startDate) {
                        startDate = new Date(startDate);
                        startDate.setDate(startDate.getDate());
                        end.min(startDate);
                    } else if (endDate) {
                        start.max(new Date(endDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function endChange() {
                    var endDate = end.value(),
                    startDate = start.value();

                    if (endDate) {
                        endDate = new Date(endDate);
                        endDate.setDate(endDate.getDate());
                        start.max(endDate);
                    } else if (startDate) {
                        end.min(new Date(startDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function dateChanges(){
                    var strDate = "";

                    if(start.value() && end.value()){
                        strDate = "From " + kendo.toString(new Date(start.value()), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end.value()), "dd-MM-yyyy");
                    }else if(start.value()){
                        strDate = "On " + kendo.toString(new Date(start.value()),"dd-MM-yyyy");
                    }else if(end.value()){
                        strDate = "As Of " + kendo.toString(new Date(end.value()),"dd-MM-yyyy");
                    }else{
                        strDate = "";
                    }

                    $("#strDate").text(strDate);
                }

                var start = $("#sdate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: startChange
                }).data("kendoDatePicker");

                var end = $("#edate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: endChange
                }).data("kendoDatePicker");

                var sorter = $("#sorter").change(function(){
                    var today = new Date(),
                    sdate = "",
                    edate = "",
                    value = $("#sorter").val();
                    switch(value){
                    case "today":
                        sdate = today;
                        break;
                    case "week":
                        var first = today.getDate() - today.getDay(),
                        last = first + 6;
                        var sdate = new Date(today.setDate(first)),
                        edate = new Date(today.setDate(last));
                        break;
                    case "month":
                        var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
                        edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                        break;
                    case "year":
                        var sdate = new Date(today.getFullYear(), 0, 1),
                        edate = new Date(today.getFullYear(), 11, 31);

                        break;
                    default:
                    }

                    start.value(sdate);
                    end.value(edate);

                    start.max(end.value());
                    end.min(start.value());

                    dateChanges();
                });

                start.max(end.value());
                end.min(start.value());
            }
        }
    });
    banhji.router.route("/supplier_list", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.supplierList);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.supplierMenu);

            var vm = banhji.supplierList;

            if(banhji.pageLoaded["supplier_list"]==undefined){
                banhji.pageLoaded["supplier_list"] = true;

            }
        }
    });
    // VENDOR SETTINGS
    banhji.router.route("/vendor_setting", function(){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("supplier" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.vendorSetting);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.vendorMenu);

                var vm = banhji.vendorSetting;
                banhji.userManagement.addMultiTask("Supplier Setting","vendor_setting",null);

                if(banhji.pageLoaded["vendor_setting"]==undefined){
                    banhji.pageLoaded["vendor_setting"] = true;

                    vm.contactTypeDS.filter({ field:"parent_id", value: 2 });
                }

                vm.pageLoad();
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });





    /*************************************************
    *   EMPLOYEE ROUTER                              *
    *************************************************/
    banhji.router.route("/employees", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.employeeDashboard);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.employeeMenu);

            var vm = banhji.employeeDashboard;

            banhji.userManagement.addMultiTask("Employees Dashboard","employees",null);


            if(banhji.pageLoaded["employees"]==undefined){
                banhji.pageLoaded["employees"] = true;
            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/employee_center", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.employeeCenter);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.employeeMenu);

            var vm = banhji.employeeCenter;

            banhji.userManagement.addMultiTask("Employees Center","employee_center",null);

            if(banhji.pageLoaded["employee_center"]==undefined){
                banhji.pageLoaded["employee_center"] = true;
                vm.contactTypeDS.filter({ field:"parent_id", value:2 });

                vm.contactDS.query({
                    filter:{ field:"parent_id", operator:"where_related_contact_type", value:2 },
                    page: 1,
                    pageSize: 50
                }).then(function(e) {
                    var view = vm.contactDS.data();

                    if(view.length>0){
                        vm.set("obj", view[0]);
                        vm.loadSummary(view[0].id);
                        vm.loadTransaction(view[0].id);
                        vm.loadNote(view[0].id);
                    }
                });

                function startChange() {
                    var startDate = start.value(),
                    endDate = end.value();

                    if (startDate) {
                        startDate = new Date(startDate);
                        startDate.setDate(startDate.getDate());
                        end.min(startDate);
                    } else if (endDate) {
                        start.max(new Date(endDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function endChange() {
                    var endDate = end.value(),
                    startDate = start.value();

                    if (endDate) {
                        endDate = new Date(endDate);
                        endDate.setDate(endDate.getDate());
                        start.max(endDate);
                    } else if (startDate) {
                        end.min(new Date(startDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function dateChanges(){
                    var strDate = "";

                    if(start.value() && end.value()){
                        strDate = "From " + kendo.toString(new Date(start.value()), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end.value()), "dd-MM-yyyy");
                    }else if(start.value()){
                        strDate = "On " + kendo.toString(new Date(start.value()),"dd-MM-yyyy");
                    }else if(end.value()){
                        strDate = "As Of " + kendo.toString(new Date(end.value()),"dd-MM-yyyy");
                    }else{
                        strDate = "";
                    }

                    $("#strDate").text(strDate);
                }

                var start = $("#sdate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: startChange
                }).data("kendoDatePicker");

                var end = $("#edate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: endChange
                }).data("kendoDatePicker");

                var sorter = $("#sorter").change(function(){
                    var today = new Date(),
                    sdate = "",
                    edate = "",
                    value = $("#sorter").val();

                    switch(value){
                    case "today":
                        sdate = today;
                        break;
                    case "week":
                        var first = today.getDate() - today.getDay(),
                        last = first + 6;

                        var sdate = new Date(today.setDate(first)),
                        edate = new Date(today.setDate(last));

                        break;
                    case "month":
                        var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
                        edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                        break;
                    case "year":
                        var sdate = new Date(today.getFullYear(), 0, 1),
                        edate = new Date(today.getFullYear(), 11, 31);

                        break;
                    default:

                    }

                    start.value(sdate);
                    end.value(edate);
                    start.max(end.value());
                    end.min(start.value());
                    dateChanges();
                });
                start.max(end.value());
                end.min(start.value());
            }
        }
    });
    banhji.router.route("/employee(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            var vm = banhji.employee;
            vm.pageLoad(id);

            banhji.userManagement.addMultiTask("Employees","employee",null);

            banhji.view.layout.showIn("#content", banhji.view.employee);
            kendo.fx($("#slide-form")).slideIn("down").play();

            if(banhji.pageLoaded["employee"]==undefined){
                banhji.pageLoaded["employee"] = true;

                var validator = $("#example").kendoValidator().data("kendoValidator");
                var notification = $("#notification").kendoNotification({
                    autoHideAfter: 5000,
                    width: 300,
                    height: 50
                }).data('kendoNotification');

                $("#save").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.save();

                        notification.success("Save Successful");
                    }else{
                        notification.error("Warning, please review it again!");
                    }
                });
            }
        }
    });
    // EMPLOYEE REPORTS
    banhji.router.route("/employee_report_center", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.employeeReportCenter);

            banhji.userManagement.addMultiTask("Employee Reports","employee_report_center",null);

            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.employeeMenu);

            //var vm = banhji.customerReportCenter;

            if(banhji.pageLoaded["employee_report_center"]==undefined){
                banhji.pageLoaded["employee_report_center"] = true;
            }
        }
    });





    /*************************************************
    *   INVENTORY ROUTER                             *
    *************************************************/
    banhji.router.route("/inventories", function(){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("products/services" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.itemDashBoard);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

                var vm = banhji.itemDashBoard;
                banhji.userManagement.addMultiTask("Products/Services Dashboard","inventories",null);

                if(banhji.pageLoaded["inventories"]==undefined){
                    banhji.pageLoaded["inventories"] = true;
                }
                vm.pageLoad();
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/item_center(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("products/services" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.itemCenter);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                //banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

                var vm = banhji.itemCenter;

                banhji.userManagement.addMultiTask("Inventory Center","item_center",null);

                if(banhji.pageLoaded["item_center"]==undefined){
                    banhji.pageLoaded["item_center"] = true;
                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/item(/:id)(/:category_id)", function(id, category_id){
        // var allowed = banhji.source.checkAccessModule("Products/Services");

        // if(allowed) {
            var vm = banhji.item;

            banhji.view.layout.showIn("#content", banhji.view.item);
            banhji.userManagement.addMultiTask("Inventory For Sale","item",null);

            if(banhji.pageLoaded["item"]==undefined){
                banhji.pageLoaded["item"] = true;

                // vm.accessModule();

                var validator = $("#example").kendoValidator({
                    rules: {
                        customRule1: function(input){
                            if (input.is("[name=txtNumber]")) {
                                return vm.get("notDuplicateNumber");
                            }
                            return true;
                        }
                    },
                    messages: {
                        customRule1: banhji.source.duplicateNumber
                    }
                }).data("kendoValidator");

                $("#saveNew").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveClose").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("saveClose", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });
            }

            vm.pageLoad(id, category_id);
        // } else {
        //  // window.location.replace(baseUrl + "admin");
        // }
    });
    banhji.router.route("/item_prices/:id", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("products/services" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                var vm = banhji.itemPrice;

                banhji.userManagement.addMultiTask("Inventory Price","item_prices",null);

                banhji.view.layout.showIn("#content", banhji.view.itemPrice);

                if(banhji.pageLoaded["item_prices"]==undefined){
                    banhji.pageLoaded["item_prices"] = true;

                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/item_variant/:id", function(id){
        banhji.view.layout.showIn("#content", banhji.view.itemVariant);
        banhji.userManagement.addMultiTask("Item Variant","item_variant",vm);

        var vm = banhji.itemVariant;
        if(banhji.pageLoaded["item_variant"]==undefined){
            banhji.pageLoaded["item_variant"] = true;
        }

        vm.pageLoad(id);
    });
    banhji.router.route("/item_catalog(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("products/services" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                var vm = banhji.itemCatalog;

                banhji.userManagement.addMultiTask("Inventory Catalog","item_catalog",vm);

                banhji.view.layout.showIn("#content", banhji.view.itemCatalog);

                if(banhji.pageLoaded["item_catalog"]==undefined){
                    banhji.pageLoaded["item_catalog"] = true;

                    var validator = $("#example").kendoValidator().data("kendoValidator");
                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/item_assembly(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("products/services" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                var vm = banhji.itemAssembly;

                banhji.view.layout.showIn("#content", banhji.view.itemAssembly);
                banhji.userManagement.addMultiTask("Inventory Assembly","item_assembly",vm);

                if(banhji.pageLoaded["item_assembly"]==undefined){
                    banhji.pageLoaded["item_assembly"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/item_service(/:id)(/:category_id)", function(id, category_id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("products/services" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                var vm = banhji.itemService;

                banhji.userManagement.addMultiTask("Service","item_service",vm);

                banhji.view.layout.showIn("#content", banhji.view.itemService);

                if(banhji.pageLoaded["item_service"]==undefined){
                    banhji.pageLoaded["item_service"] = true;

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id, category_id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/non_inventory_part(/:id)(/:category_id)", function(id, category_id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("products/services" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                var vm = banhji.nonInventoryPart;

                banhji.userManagement.addMultiTask("Other Inventory","non_inventory_part",vm);

                banhji.view.layout.showIn("#content", banhji.view.nonInventoryPart);

                if(banhji.pageLoaded["non_inventory_part"]==undefined){
                    banhji.pageLoaded["non_inventory_part"] = true;

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id, category_id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/fixed_assets(/:id)(/:category_id)", function(id, category_id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("products/services" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.fixedAssets);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

                var vm = banhji.fixedAssets;

                banhji.userManagement.addMultiTask("Fixed Assets","fixed_assets",vm);

                if(banhji.pageLoaded["fixed_assets"]==undefined){
                    banhji.pageLoaded["fixed_assets"] = true;
                    var validator = $("#example").kendoValidator().data("kendoValidator");
                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id, category_id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/txn_item_list", function(){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("products/services" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                var vm = banhji.txnItemList;
                banhji.userManagement.addMultiTask("Transaction Item List","txn_item_list",vm);

                banhji.view.layout.showIn("#content", banhji.view.txnItemList);

                if(banhji.pageLoaded["txn_item_list"]==undefined){
                    banhji.pageLoaded["txn_item_list"] = true;
                }
                vm.pageLoad();
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/txn_item(/:id)(/:category_id)", function(id, category_id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("products/services" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                var vm = banhji.txnItem;
                banhji.userManagement.addMultiTask("Transaction Item","txn_item",vm);

                banhji.view.layout.showIn("#content", banhji.view.txnItem);

                if(banhji.pageLoaded["txn_item"]==undefined){
                    banhji.pageLoaded["txn_item"] = true;

                    var validator = $("#example").kendoValidator().data("kendoValidator");
                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id, category_id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    // INVENTORY FUNCTIONS
    banhji.router.route("/transfer_order(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.transferOrder);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.transferOrder;
            banhji.userManagement.addMultiTask("Transfer Order","transfer_order",vm);

            if(banhji.pageLoaded["transfer_order"]==undefined){
                banhji.pageLoaded["transfer_order"] = true;

                vm.lineDS.bind("change", vm.lineDSChanges);

                var validator = $("#example").kendoValidator({
                    rules: {
                        customRule1: function(input) {
                            if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                vm.set("recurring_validate", false);
                                return $.trim(input.val()) !== "";
                            }
                            return true;
                        },
                        customRule2: function(input){
                            if (input.is("[name=txtNumber]")) {
                                return vm.get("notDuplicateNumber");
                            }
                            return true;
                        }
                    },
                    messages: {
                        customRule1: banhji.source.requiredMessage,
                        customRule2: banhji.source.duplicateNumber
                    }
                }).data("kendoValidator");

                $("#saveNew").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").warning(banhji.source.errorMessage);
                    }
                });

                $("#saveClose").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.set("saveClose", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").warning(banhji.source.errorMessage);
                    }
                });

                $("#savePrint").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.set("savePrint", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").warning(banhji.source.errorMessage);
                    }
                });

                $("#saveRecurring").click(function(e){
                    e.preventDefault();

                    vm.set("recurring_validate", true);

                    if(validator.validate() && vm.validating()){
                        vm.set("saveRecurring", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });
            }

            vm.pageLoad(id);
        }
    });
    banhji.router.route("/shelving(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.transferOrder);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.transferOrder;
            banhji.userManagement.addMultiTask("Transfer Order","transfer_order",vm);

            if(banhji.pageLoaded["transfer_order"]==undefined){
                banhji.pageLoaded["transfer_order"] = true;

                vm.lineDS.bind("change", vm.lineDSChanges);

                var validator = $("#example").kendoValidator({
                    rules: {
                        customRule1: function(input) {
                            if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                vm.set("recurring_validate", false);
                                return $.trim(input.val()) !== "";
                            }
                            return true;
                        },
                        customRule2: function(input){
                            if (input.is("[name=txtNumber]")) {
                                return vm.get("notDuplicateNumber");
                            }
                            return true;
                        }
                    },
                    messages: {
                        customRule1: banhji.source.requiredMessage,
                        customRule2: banhji.source.duplicateNumber
                    }
                }).data("kendoValidator");

                $("#saveNew").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").warning(banhji.source.errorMessage);
                    }
                });

                $("#saveClose").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.set("saveClose", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").warning(banhji.source.errorMessage);
                    }
                });

                $("#savePrint").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.set("savePrint", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").warning(banhji.source.errorMessage);
                    }
                });

                $("#saveRecurring").click(function(e){
                    e.preventDefault();

                    vm.set("recurring_validate", true);

                    if(validator.validate() && vm.validating()){
                        vm.set("saveRecurring", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });
            }

            vm.pageLoad(id);
        }
    });
    banhji.router.route("/packing(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.transferOrder);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.transferOrder;
            banhji.userManagement.addMultiTask("Transfer Order","transfer_order",vm);

            if(banhji.pageLoaded["transfer_order"]==undefined){
                banhji.pageLoaded["transfer_order"] = true;

                vm.lineDS.bind("change", vm.lineDSChanges);

                var validator = $("#example").kendoValidator({
                    rules: {
                        customRule1: function(input) {
                            if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                vm.set("recurring_validate", false);
                                return $.trim(input.val()) !== "";
                            }
                            return true;
                        },
                        customRule2: function(input){
                            if (input.is("[name=txtNumber]")) {
                                return vm.get("notDuplicateNumber");
                            }
                            return true;
                        }
                    },
                    messages: {
                        customRule1: banhji.source.requiredMessage,
                        customRule2: banhji.source.duplicateNumber
                    }
                }).data("kendoValidator");

                $("#saveNew").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").warning(banhji.source.errorMessage);
                    }
                });

                $("#saveClose").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.set("saveClose", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").warning(banhji.source.errorMessage);
                    }
                });

                $("#savePrint").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.validating()){
                        vm.set("savePrint", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").warning(banhji.source.errorMessage);
                    }
                });

                $("#saveRecurring").click(function(e){
                    e.preventDefault();

                    vm.set("recurring_validate", true);

                    if(validator.validate() && vm.validating()){
                        vm.set("saveRecurring", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });
            }

            vm.pageLoad(id);
        }
    });
    banhji.router.route("/item_adjustment(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("products/services" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.itemAdjustment);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

                var vm = banhji.itemAdjustment;
                banhji.userManagement.addMultiTask("Inventory Adjustment","item_adjustment",vm);

                if(banhji.pageLoaded["item_adjustment"]==undefined){
                    banhji.pageLoaded["item_adjustment"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage
                        }
                    }).data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/internal_usage(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("products/services" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.internalUsage);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

                var vm = banhji.internalUsage;

                banhji.userManagement.addMultiTask("Internal Usage","internal_usage",null);

                if(banhji.pageLoaded["internal_usage"]==undefined){
                    banhji.pageLoaded["internal_usage"] = true;

                    vm.lineDS.bind("change", vm.itemLineDSChanges);
                    vm.accountLineDS.bind("change", vm.accountLineDSChanges);
                    vm.toItemLineDS.bind("change", vm.toItemLineDSChanges);
                    vm.toAccountLineDS.bind("change", vm.toAccountLineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveDraft1").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveDraft", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate() && vm.validating()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/item_recurring", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.itemRecurring);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

            var vm = banhji.itemRecurring;
            banhji.userManagement.addMultiTask("Item Recurring","item_recurring",null);
            if(banhji.pageLoaded["item_recurring"]==undefined){
                banhji.pageLoaded["item_recurring"] = true;

            }

            vm.pageLoad();
        }
    });
    // INVENTORY REPORTS
    banhji.router.route("/item_report_center", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.itemReportCenter);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.itemReportCenter;
            banhji.userManagement.addMultiTask("Inventory Report Center","item_report_center",null);

            if(banhji.pageLoaded["item_report_center"]==undefined){
                banhji.pageLoaded["item_report_center"] = true;

                vm.setObj();
            }
            vm.pageLoad();
        };
    });
    banhji.router.route("/inventory_position_summary", function(){
        // banhji.view.layout.showIn("#content", banhji.view.underConstruction);
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.inventoryPositionSummary);

            var vm = banhji.inventoryPositionSummary;
            banhji.userManagement.addMultiTask("Inventory Position Summary","inventory_position_summary",null);

            if(banhji.pageLoaded["inventory_position_summary"]==undefined){
                banhji.pageLoaded["inventory_position_summary"] = true;
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/inventory_position_summary_by_location", function(){
        // banhji.view.layout.showIn("#content", banhji.view.underConstruction);
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.inventoryPositionSummaryByLocation);

            var vm = banhji.inventoryPositionSummaryByLocation;
            banhji.userManagement.addMultiTask("Inventory Position Summary By Location","inventory_position_summary_by_location",null);

            if(banhji.pageLoaded["inventory_position_summary_by_location"]==undefined){
                banhji.pageLoaded["inventory_position_summary_by_location"] = true;
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/inventory_position_detail", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.inventoryPositionDetail);

            var vm = banhji.inventoryPositionDetail;
            banhji.userManagement.addMultiTask("Inventory Position Detail","inventory_position_detail",null);

            if(banhji.pageLoaded["inventory_position_detail"]==undefined){
                banhji.pageLoaded["inventory_position_detail"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/inventory_sale_item_analysis", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            var vm = banhji.inventorySaleItemAnalysis;
            banhji.userManagement.addMultiTask("Inventory Sale Item Analysis","inventory_sale_item_analysis",null);

            banhji.view.layout.showIn("#content", banhji.view.inventorySaleItemAnalysis);
            banhji.inventorySale.set('startDate', new Date().getFullYear() + "-01-01");
            banhji.inventorySale.inventorySaleDB.dataSource.filter({
                logic: banhji.saleSummaryCustomer.get('filteredBy'),
                filters: [
                    {field: "issued_date >=", value: kendo.toString(new Date().getFullYear() + "-01-01", "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(new Date(), "yyyy-MM-dd")}
                ]
            });
            banhji.inventorySale.inventorySaleDB.dataSource.bind('requestEnd', function(e){
                if(e.response) {
                    banhji.inventorySale.set('count', e.response.count);
                    kendo.culture(banhji.locale);
                    banhji.inventorySale.set('onHand', kendo.toString(e.response.onHand, 'n0'));
                    banhji.inventorySale.set('sale', kendo.toString(e.response.sale, 'c2'));
                    banhji.inventorySale.set('grossProfitMargin', kendo.toString(e.response.grossProfitMargin, 'p'));
                }
            });
        }
    });
    banhji.router.route("/inventory_turnover_list", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.inventoryTurnoverList);
            banhji.inventorySale.inventoryTurnoverList.dataSource.read();
            banhji.inventorySale.inventoryTurnoverList.dataSource.bind('requestEnd', function(e){
                if(e.response) {
                    banhji.inventorySale.set('count', e.response.count);
                    kendo.culture(banhji.locale);
                    banhji.inventorySale.set('onHand', kendo.toString(e.response.onHand, 'n0'));
                    banhji.inventorySale.set('turnover', kendo.toString(e.response.turnover, 'n0'));
                }
            });
        }
    });
    banhji.router.route("/inventory_movement_summary", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.inventoryMovementSummary);
            banhji.inventorySale.inventoryMovementSummary.dataSource.read();
            banhji.inventorySale.inventoryMovementSummary.dataSource.bind('requestEnd', function(e){
                if(e.response) {
                    banhji.inventorySale.set('count', e.response.count);
                    kendo.culture(banhji.locale);
                    banhji.inventorySale.set('onHand', kendo.toString(e.response.onHand, 'n0'));
                    banhji.inventorySale.set('sale', kendo.toString(e.response.sale, 'n0'));
                }
            });
        }
    });
    banhji.router.route("/inventory_movement_detail", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.inventoryMovementDetail);
            banhji.inventorySale.inventoryMovementDetail.dataSource.read();
            banhji.inventorySale.inventoryMovementDetail.dataSource.bind('requestEnd', function(e){
                if(e.response) {
                    banhji.inventorySale.set('count', e.response.count);
                    kendo.culture(banhji.locale);
                    banhji.inventorySale.set('total', kendo.toString(e.response.total, 'c2'));
                }
            });
        }
    });
    banhji.router.route("/inventory_sale_by_item", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.inventorySaleByItem);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

            var vm = banhji.inventorySaleByItem;

            banhji.userManagement.addMultiTask("Inventory Sale By Item Analysis","inventory_sale_by_item",null);

            if(banhji.pageLoaded["inventory_sale_by_item"]==undefined){
                banhji.pageLoaded["inventory_sale_by_item"] = true;
            }
        }
    });
    banhji.router.route("/inventory_list", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.inventoryList);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

            var vm = banhji.inventoryList;

            banhji.userManagement.addMultiTask("Inventory List","inventory_list",null);

            if(banhji.pageLoaded["inventory_list"]==undefined){
                banhji.pageLoaded["inventory_list"] = true;

                vm.vendorDS.filter({ field:"parent_id", operator:"where_related_contact_type", value: 2 });

                var categories = $("#categories").kendoDropDownList({
                    optionLabel: "(--- Category ---)",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.categoryDS,
                    change: function(e) {
                        //var value = this.value();
                        vm.set("item_group_id", 0);
                    }
                }).data("kendoDropDownList");

                var itemGroups = $("#itemGroups").kendoDropDownList({
                    autoBind: false,
                    cascadeFrom: "categories",
                    cascadeFromField: "category_id",
                    optionLabel: "(--- Group ---)",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.itemGroupDS
                }).data("kendoDropDownList");


                function startChange() {
                    var startDate = start.value(),
                    endDate = end.value();

                    if (startDate) {
                        startDate = new Date(startDate);
                        startDate.setDate(startDate.getDate());
                        end.min(startDate);
                    } else if (endDate) {
                        start.max(new Date(endDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function endChange() {
                    var endDate = end.value(),
                    startDate = start.value();

                    if (endDate) {
                        endDate = new Date(endDate);
                        endDate.setDate(endDate.getDate());
                        start.max(endDate);
                    } else if (startDate) {
                        end.min(new Date(startDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function dateChanges(){
                    var strDate = "";

                    if(start.value() && end.value()){
                        strDate = "From " + kendo.toString(new Date(start.value()), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end.value()), "dd-MM-yyyy");
                    }else if(start.value()){
                        strDate = "On " + kendo.toString(new Date(start.value()),"dd-MM-yyyy");
                    }else if(end.value()){
                        strDate = "As Of " + kendo.toString(new Date(end.value()),"dd-MM-yyyy");
                    }else{
                        strDate = "";
                    }

                    $("#strDate").text(strDate);
                }

                var start = $("#sdate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: startChange
                }).data("kendoDatePicker");

                var end = $("#edate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: endChange
                }).data("kendoDatePicker");

                var sorter = $("#sorter").change(function(){
                    var today = new Date(),
                    sdate = "",
                    edate = "",
                    value = $("#sorter").val();

                    switch(value){
                    case "today":
                        sdate = today;
                        break;
                    case "week":
                        var first = today.getDate() - today.getDay(),
                        last = first + 6;

                        var sdate = new Date(today.setDate(first)),
                        edate = new Date(today.setDate(last));
                        break;
                    case "month":
                        var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
                        edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                        break;
                    case "year":
                        var sdate = new Date(today.getFullYear(), 0, 1),
                        edate = new Date(today.getFullYear(), 11, 31);

                        break;
                    default:
                    }

                    start.value(sdate);
                    end.value(edate);

                    start.max(end.value());
                    end.min(start.value());

                    dateChanges();
                });

                start.max(end.value());
                end.min(start.value());

            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/item_list", function(){
      if(!banhji.userManagement.getLogin()){
        banhji.router.navigate('/manage');
      }else{
        banhji.view.layout.showIn("#content", banhji.view.itemList);
        banhji.view.layout.showIn('#menu', banhji.view.menu);
        banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

        var vm = banhji.itemList;

        if(banhji.pageLoaded["item_list"]==undefined){
          banhji.pageLoaded["item_list"] = true;

        }
      }
    });
    banhji.router.route("/inventory_purchase_by_vendor_summary", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.inventoryPurchaseByVendorSummary);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

            var vm = banhji.inventoryPurchaseByVendorSummary;

            banhji.userManagement.addMultiTask("Purchase By Supplier Summary","inventory_purchase_by_vendor_summary",null);

            if(banhji.pageLoaded["inventory_purchase_by_vendor_summary"]==undefined){
                banhji.pageLoaded["inventory_purchase_by_vendor_summary"] = true;

            }
        }
    });
    banhji.router.route("/inventory_purchase_by_vendor_detail", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.inventoryPurchaseByVendorDetail);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

            var vm = banhji.inventoryPurchaseByVendorDetail;

            banhji.userManagement.addMultiTask("Purchase By Supplier Detail","inventory_purchase_by_vendor_detail",null);

            if(banhji.pageLoaded["inventory_purchase_by_vendor_detail"]==undefined){
                banhji.pageLoaded["inventory_purchase_by_vendor_detail"] = true;

            }
        }
    });
    banhji.router.route("/gdn_report", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.gdnReport);

            var vm = banhji.gdnReport;
            banhji.userManagement.addMultiTask("Good Recieve Note Report","gdn_report",null);

            if(banhji.pageLoaded["gdn_report"]==undefined){
                banhji.pageLoaded["gdn_report"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    //INVENTORY SETTINGS
    banhji.router.route("/item_setting", function(){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("products/services" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.itemSetting);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

                var vm = banhji.itemSetting;

                banhji.userManagement.addMultiTask("General Products/ Services Setting","item_setting",null);

                if(banhji.pageLoaded["item_setting"]==undefined){
                    banhji.pageLoaded["item_setting"] = true;

                    vm.categoryDS.bind("requestEnd", vm.categoryChanges);

                    vm.itemTypeDS.filter({ field:"id <>", value:3 });
                    vm.categoryDS.filter({ field:"item_type_id <>", value:3 });
                    vm.measurementDS.query({
                        filter:{ operator:"measurement_category" },
                        sort:{ field:"measurement_category_id", dir:"asc" }
                    });
                }
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/service_setting", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.serviceSetting);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

            var vm = banhji.serviceSetting;

            banhji.userManagement.addMultiTask("General Service Setting","service_setting",null);

            if(banhji.pageLoaded["service_setting"]==undefined){
                banhji.pageLoaded["service_setting"] = true;

                vm.categoryDS.filter({ field:"item_type_id", operator:"where_in", value: [4,6] });
                vm.itemTypeDS.filter({ field:"id", operator:"where_in", value: [4,6] });
                vm.itemGroupDS.filter({ field:"id", operator:"where_in", value: [3,4] });
            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/variants", function(){
        banhji.view.layout.showIn("#content", banhji.view.variants);

        var vm = banhji.variants;
        banhji.userManagement.addMultiTask("Variants","variants",null);
        if(banhji.pageLoaded["variants"]==undefined){
            banhji.pageLoaded["variants"] = true;

        }
    });
    banhji.router.route("/warehouses", function(){
        banhji.view.layout.showIn("#content", banhji.view.warehouses);

        var vm = banhji.warehouses;
        banhji.userManagement.addMultiTask("Warehouses","warehouses",null);
        if(banhji.pageLoaded["warehouses"]==undefined){
            banhji.pageLoaded["warehouses"] = true;

            vm.binLocationDS.bind("change", vm.binLocationDSChanges);
        }
    });
    banhji.router.route("/bin_locations", function(){
        banhji.view.layout.showIn("#content", banhji.view.binLocations);

        var vm = banhji.binLocations;
        banhji.userManagement.addMultiTask("Bin Locations","bin_locations",null);
        if(banhji.pageLoaded["bin_locations"]==undefined){
            banhji.pageLoaded["bin_locations"] = true;

        }
    });
    banhji.router.route("/employee_item_location", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.employeeItemLocation);
            banhji.view.layout.showIn('#menu', banhji.view.menu);

            var vm = banhji.employeeItemLocation;
            banhji.userManagement.addMultiTask("Employee Item Location","employee_item_location",null);
            if(banhji.pageLoaded["employee_item_location"]==undefined){
                banhji.pageLoaded["employee_item_location"] = true;

                vm.employeeDS.filter({ field:"parent_id", operator:"where_related_contact_type", value: 3 });
                vm.setObj();
            }

            vm.pageLoad();
        }
    });





    /*************************************************
    *   ACCOUNTING ROUTER                            *
    *************************************************/
    banhji.router.route("/accounting", function(){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("accounting" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.accountingDashboard);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

                var vm = banhji.accountingDashboard;
                banhji.userManagement.addMultiTask("Accounting Dashboard","accounting",null);

                if(banhji.pageLoaded["accounting"]==undefined){
                    banhji.pageLoaded["accounting"] = true;

                }

                vm.pageLoad();
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/accounting_center(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("accounting" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                var vm = banhji.accountingCenter;
                banhji.userManagement.addMultiTask("Account Center","accounting_center",null);

                banhji.view.layout.showIn("#content", banhji.view.accountingCenter);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

                if(banhji.pageLoaded["accounting_center"]==undefined){
                    banhji.pageLoaded["accounting_center"] = true;

                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/account(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("accounting" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                var vm = banhji.account;
                banhji.userManagement.addMultiTask("Account","account",vm);

                banhji.view.layout.showIn("#content", banhji.view.account);
                // kendo.fx($("#slide-form")).slideIn("down").play();

                if(banhji.pageLoaded["account"]==undefined){
                    banhji.pageLoaded["account"] = true;

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    // ACCOUNTING FUNCTIONS
    banhji.router.route("/journal(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("accounting" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.journal);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.journal;
                banhji.userManagement.addMultiTask("Journal Entry","journal",vm);

                if(banhji.pageLoaded["journal"]==undefined){
                    banhji.pageLoaded["journal"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveDraft1").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.set("saveDraft", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveDraftPrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveDraftPrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate() && vm.validating()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/cash_transaction(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashTransaction);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.cashTransaction;
            banhji.userManagement.addMultiTask("Cash Transaction","cash_transaction",vm);

            if(banhji.pageLoaded["cash_transaction"]==undefined){
                banhji.pageLoaded["cash_transaction"] = true;

                var validator = $("#example").kendoValidator({
                    rules: {
                        customRule1: function(input) {
                            if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                vm.set("recurring_validate", false);
                                return $.trim(input.val()) !== "";
                            }
                            return true;
                        },
                        customRule2: function(input){
                            if (input.is("[name=txtNumber]")) {
                                return vm.get("notDuplicateNumber");
                            }
                            return true;
                        }
                    },
                    messages: {
                        customRule1: banhji.source.requiredMessage,
                        customRule2: banhji.source.duplicateNumber
                    }
                }).data("kendoValidator");

                $("#saveDraft1").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("saveDraft", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveNew").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveClose").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("saveClose", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#savePrint").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("savePrint", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveDraftPrint").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("saveDraftPrint", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveRecurring").click(function(e){
                    e.preventDefault();

                    vm.set("recurring_validate", true);

                    if(validator.validate()){
                        vm.set("saveRecurring", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });
            }

            vm.pageLoad(id);
        }
    });
    banhji.router.route("/deposit(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashTransaction);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.cashTransaction;
            banhji.userManagement.addMultiTask("Cash Transaction","cash_transaction",vm);

            if(banhji.pageLoaded["cash_transaction"]==undefined){
                banhji.pageLoaded["cash_transaction"] = true;

                var validator = $("#example").kendoValidator({
                    rules: {
                        customRule1: function(input) {
                            if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                vm.set("recurring_validate", false);
                                return $.trim(input.val()) !== "";
                            }
                            return true;
                        },
                        customRule2: function(input){
                            if (input.is("[name=txtNumber]")) {
                                return vm.get("notDuplicateNumber");
                            }
                            return true;
                        }
                    },
                    messages: {
                        customRule1: banhji.source.requiredMessage,
                        customRule2: banhji.source.duplicateNumber
                    }
                }).data("kendoValidator");

                $("#saveNew").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveClose").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("saveClose", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#savePrint").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("savePrint", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveRecurring").click(function(e){
                    e.preventDefault();

                    vm.set("recurring_validate", true);

                    if(validator.validate()){
                        vm.set("saveRecurring", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });
            }

            vm.pageLoad(id);
        }
    });
    banhji.router.route("/withdraw(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashTransaction);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.cashTransaction;
            banhji.userManagement.addMultiTask("Cash Transaction","cash_transaction",vm);

            if(banhji.pageLoaded["cash_transaction"]==undefined){
                banhji.pageLoaded["cash_transaction"] = true;

                var validator = $("#example").kendoValidator({
                    rules: {
                        customRule1: function(input) {
                            if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                vm.set("recurring_validate", false);
                                return $.trim(input.val()) !== "";
                            }
                            return true;
                        },
                        customRule2: function(input){
                            if (input.is("[name=txtNumber]")) {
                                return vm.get("notDuplicateNumber");
                            }
                            return true;
                        }
                    },
                    messages: {
                        customRule1: banhji.source.requiredMessage,
                        customRule2: banhji.source.duplicateNumber
                    }
                }).data("kendoValidator");

                $("#saveNew").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveClose").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("saveClose", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#savePrint").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("savePrint", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveRecurring").click(function(e){
                    e.preventDefault();

                    vm.set("recurring_validate", true);

                    if(validator.validate()){
                        vm.set("saveRecurring", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });
            }

            vm.pageLoad(id);
        }
    });
    banhji.router.route("/transfer(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashTransaction);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.cashTransaction;
            banhji.userManagement.addMultiTask("Cash Transaction","cash_transaction",vm);

            if(banhji.pageLoaded["cash_transaction"]==undefined){
                banhji.pageLoaded["cash_transaction"] = true;

                var validator = $("#example").kendoValidator({
                    rules: {
                        customRule1: function(input) {
                            if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                vm.set("recurring_validate", false);
                                return $.trim(input.val()) !== "";
                            }
                            return true;
                        },
                        customRule2: function(input){
                            if (input.is("[name=txtNumber]")) {
                                return vm.get("notDuplicateNumber");
                            }
                            return true;
                        }
                    },
                    messages: {
                        customRule1: banhji.source.requiredMessage,
                        customRule2: banhji.source.duplicateNumber
                    }
                }).data("kendoValidator");

                $("#saveNew").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveClose").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("saveClose", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#savePrint").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("savePrint", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveRecurring").click(function(e){
                    e.preventDefault();

                    vm.set("recurring_validate", true);

                    if(validator.validate()){
                        vm.set("saveRecurring", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });
            }

            vm.pageLoad(id);
        }
    });
    banhji.router.route("/cash_advance(/:id)", function(id){
        banhji.view.layout.showIn("#content", banhji.view.cashAdvance);
        kendo.fx($("#slide-form")).slideIn("down").play();

        var vm = banhji.cashAdvance;
        banhji.userManagement.addMultiTask("Cash Advance","cash_advance",vm);

        if(banhji.pageLoaded["cash_advance"]==undefined){
            banhji.pageLoaded["cash_advance"] = true;

            var validator = $("#example").kendoValidator({
                rules: {
                    customRule1: function(input) {
                        if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                            vm.set("recurring_validate", false);
                            return $.trim(input.val()) !== "";
                        }
                        return true;
                    },
                    customRule2: function(input){
                        if (input.is("[name=txtNumber]")) {
                            return vm.get("notDuplicateNumber");
                        }
                        return true;
                    }
                },
                messages: {
                    customRule1: banhji.source.requiredMessage,
                    customRule2: banhji.source.duplicateNumber
                }
            }).data("kendoValidator");

            $("#saveDraft1").click(function(e){
                e.preventDefault();

                if(validator.validate()){
                    vm.set("saveDraft", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveNew").click(function(e){
                e.preventDefault();

                if(validator.validate()){
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveClose").click(function(e){
                e.preventDefault();

                if(validator.validate()){
                    vm.set("saveClose", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#savePrint").click(function(e){
                e.preventDefault();

                if(validator.validate()){
                    vm.set("savePrint", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveDraftPrint").click(function(e){
                e.preventDefault();

                if(validator.validate()){
                    vm.set("saveDraftPrint", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveRecurring").click(function(e){
                e.preventDefault();

                vm.set("recurring_validate", true);

                if(validator.validate()){
                    vm.set("saveRecurring", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });
        }

        vm.pageLoad(id);
    });
    banhji.router.route("/expense(/:id)", function(id){
        banhji.view.layout.showIn("#content", banhji.view.expense);
        kendo.fx($("#slide-form")).slideIn("down").play();

        var vm = banhji.expense;
        banhji.userManagement.addMultiTask("Expense","expense",vm);

        if(banhji.pageLoaded["expense"]==undefined){
            banhji.pageLoaded["expense"] = true;

            vm.lineDS.bind("change", vm.lineDSChanges);

            var validator = $("#example").kendoValidator({
                rules: {
                    customRule1: function(input) {
                        if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                            vm.set("recurring_validate", false);
                            return $.trim(input.val()) !== "";
                        }
                        return true;
                    },
                    customRule2: function(input){
                        if (input.is("[name=txtNumber]")) {
                            return vm.get("notDuplicateNumber");
                        }
                        return true;
                    }
                },
                messages: {
                    customRule1: banhji.source.requiredMessage,
                    customRule2: banhji.source.duplicateNumber
                }
            }).data("kendoValidator");

            $("#saveDraft1").click(function(e){
                e.preventDefault();

                if(validator.validate()){
                    vm.set("saveDraft", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveNew").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveClose").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("saveClose", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#savePrint").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("savePrint", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveDraftPrint").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("saveDraftPrint", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveRecurring").click(function(e){
                e.preventDefault();

                vm.set("recurring_validate", true);

                if(validator.validate()){
                    vm.set("saveRecurring", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });
        }

        vm.pageLoad(id);
    });
    banhji.router.route("/direct_expense(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("accounting" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.expense);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.expense;
                banhji.userManagement.addMultiTask("Expense","expense",vm);

                if(banhji.pageLoaded["expense"]==undefined){
                    banhji.pageLoaded["expense"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/reimbursement(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("accounting" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.expense);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.expense;
                banhji.userManagement.addMultiTask("Expense","expense",vm);

                if(banhji.pageLoaded["expense"]==undefined){
                    banhji.pageLoaded["expense"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/advance_settlement(/:id)", function(id){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("accounting" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.expense);
                kendo.fx($("#slide-form")).slideIn("down").play();

                var vm = banhji.expense;
                banhji.userManagement.addMultiTask("Expense","expense",vm);

                if(banhji.pageLoaded["expense"]==undefined){
                    banhji.pageLoaded["expense"] = true;

                    vm.lineDS.bind("change", vm.lineDSChanges);

                    var validator = $("#example").kendoValidator({
                        rules: {
                            customRule1: function(input) {
                                if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                    vm.set("recurring_validate", false);
                                    return $.trim(input.val()) !== "";
                                }
                                return true;
                            },
                            customRule2: function(input){
                                if (input.is("[name=txtNumber]")) {
                                    return vm.get("notDuplicateNumber");
                                }
                                return true;
                            }
                        },
                        messages: {
                            customRule1: banhji.source.requiredMessage,
                            customRule2: banhji.source.duplicateNumber
                        }
                    }).data("kendoValidator");

                    $("#saveNew").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("saveClose", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#savePrint").click(function(e){
                        e.preventDefault();

                        if(validator.validate() && vm.validating()){
                            vm.set("savePrint", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });

                    $("#saveRecurring").click(function(e){
                        e.preventDefault();

                        vm.set("recurring_validate", true);

                        if(validator.validate()){
                            vm.set("saveRecurring", true);
                            vm.save();
                        }else{
                            $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                        }
                    });
                }

                vm.pageLoad(id);
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/accounting_recurring", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.accountingRecurring);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.accountingRecurring;
            banhji.userManagement.addMultiTask("Accounting Recurring","accounting_recurring",null);

            if(banhji.pageLoaded["accounting_recurring"]==undefined){
                banhji.pageLoaded["accounting_recurring"] = true;

            }

            vm.pageLoad();
        }
    });
    // ACCOUNTING REPORTS
    banhji.router.route("/accounting_report_center", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.accountingReportCenter);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.accountingReportCenter;
            banhji.userManagement.addMultiTask("Accounting Report Center","accounting_report_center",null);
            if(banhji.pageLoaded["accounting_report_center"]==undefined){
                banhji.pageLoaded["accounting_report_center"] = true;
            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/journal_report", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.journalReport);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.journalReport;
            banhji.userManagement.addMultiTask("Journal Entry Reports","journal_report",null);

            if(banhji.pageLoaded["journal_report"]==undefined){
                banhji.pageLoaded["journal_report"] = true;
                vm.sorterChanges();
            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/journal_report_by_segment", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.journalReportBySegment);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.journalReportBySegment;
            banhji.userManagement.addMultiTask("Journal Entry Reports By Segment","journal_report_by_segment",null);

            if(banhji.pageLoaded["journal_report_by_segment"]==undefined){
                banhji.pageLoaded["journal_report_by_segment"] = true;

                vm.sorterChanges();
            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/trial_balance", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.trialBalance);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);
            var vm = banhji.trialBalance;
            banhji.userManagement.addMultiTask("Trial Balance","trial_balance",null);

            if(banhji.pageLoaded["trial_balance"]==undefined){
                banhji.pageLoaded["trial_balance"] = true;

            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/chart_of_account", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.chartOfAccount);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.chartOfAccount;
            banhji.userManagement.addMultiTask("Chart of Account","chart_of_account",null);

            if(banhji.pageLoaded["chart_of_account"]==undefined){
                banhji.pageLoaded["chart_of_account"] = true;

            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/add_accountingprefix(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.addAccountingprefix);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.addAccountingprefix;
            banhji.userManagement.addMultiTask("Add Accounting Prefix","add_accountingprefix",null);
            if(banhji.pageLoaded["add_accountingprefix"]==undefined){
                banhji.pageLoaded["add_accountingprefix"] = true;
                setTimeout(function(){
                    var validator = $("#example").kendoValidator().data("kendoValidator");
                    var notification = $("#notification").kendoNotification({
                        autoHideAfter: 5000,
                        width: 300,
                        height: 50
                    }).data('kendoNotification');
                    $("#saveNew").click(function(e){

                        e.preventDefault();
                        if(validator.validate()){
                            vm.save();

                            notification.success("Save Successful");
                        }else{
                            notification.error("Warning, please review it again!");
                        }
                    });
                    $("#saveClose").click(function(e){
                        e.preventDefault();

                        if(validator.validate()){
                            vm.save();
                            window.history.back();

                            notification.success("Save Successful");
                        }else{
                            notification.error("Warning, please review it again!");
                        }
                    });
                },2000);

            };

            vm.pageLoad(id);
        };
    });
    banhji.router.route("/segment", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.segment);

            banhji.userManagement.addMultiTask("Segment","segment",null);

            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.segment;

            if(banhji.pageLoaded["segment"]==undefined){
                banhji.pageLoaded["segment"] = true;
            }
        }
    });
    banhji.router.route("/segment_center(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("accounting" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                var vm = banhji.segmentCenter;
                banhji.userManagement.addMultiTask("Segment Center","segment_center",null);

                banhji.view.layout.showIn("#content", banhji.view.segmentCenter);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

                if(banhji.pageLoaded["segment_center"]==undefined){
                    banhji.pageLoaded["segment_center"] = true;

                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/fixed_asset_item_list", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.fixedAssetItemList);

            banhji.userManagement.addMultiTask("Fixed Asset Item List","fixed_asset_item_list",null);

            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.fixedAssetItemList;

            if(banhji.pageLoaded["fixed_asset_item_list"]==undefined){
                banhji.pageLoaded["fixed_asset_item_list"] = true;
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/general_ledger", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.generalLedger);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.generalLedger;
            banhji.userManagement.addMultiTask("General Ledger","general_ledger",null);

            if(banhji.pageLoaded["general_ledger"]==undefined){
                banhji.pageLoaded["general_ledger"] = true;

            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/general_ledger_by_segment", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.generalLedgerBySegment);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.generalLedgerBySegment;
            banhji.userManagement.addMultiTask("General Ledger By Segment","general_ledger_by_segment",null);

            if(banhji.pageLoaded["general_ledger_by_segment"]==undefined){
                banhji.pageLoaded["general_ledger_by_segment"] = true;

                vm.sorterChanges();
            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/transaction_list_date", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.transactionListDate);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.journalReport;
            banhji.userManagement.addMultiTask("Transaction List by Date","transaction_list_date",null);

            if(banhji.pageLoaded["transaction_list_date"]==undefined){
                banhji.pageLoaded["transaction_list_date"] = true;

                function startChange() {
                    var startDate = start.value(),
                    endDate = end.value();

                    if (startDate) {
                        startDate = new Date(startDate);
                        startDate.setDate(startDate.getDate());
                        end.min(startDate);
                    } else if (endDate) {
                        start.max(new Date(endDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function endChange() {
                    var endDate = end.value(),
                    startDate = start.value();

                    if (endDate) {
                        endDate = new Date(endDate);
                        endDate.setDate(endDate.getDate());
                        start.max(endDate);
                    } else if (startDate) {
                        end.min(new Date(startDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function dateChanges(){
                    var strDate = "";

                    if(start.value() && end.value()){
                        strDate = "From " + kendo.toString(new Date(start.value()), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end.value()), "dd-MM-yyyy");
                    }else if(start.value()){
                        strDate = "On " + kendo.toString(new Date(start.value()),"dd-MM-yyyy");
                    }else if(end.value()){
                        strDate = "As Of " + kendo.toString(new Date(end.value()),"dd-MM-yyyy");
                    }else{
                        strDate = "";
                    }

                    $("#strDate").text(strDate);
                }

                var start = $("#sdate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: startChange
                }).data("kendoDatePicker");

                var end = $("#edate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: endChange
                }).data("kendoDatePicker");

                var sorter = $("#sorter").change(function(){
                    var today = new Date(),
                    sdate = "",
                    edate = "",
                    value = $("#sorter").val();

                    switch(value){
                    case "today":
                        sdate = today;

                        break;
                    case "week":
                        var first = today.getDate() - today.getDay(),
                        last = first + 6;

                        var sdate = new Date(today.setDate(first)),
                        edate = new Date(today.setDate(last));

                        break;
                    case "month":
                        var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
                        edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                        break;
                    case "year":
                        var sdate = new Date(today.getFullYear(), 0, 1),
                        edate = new Date(today.getFullYear(), 11, 31);

                        break;
                    default:

                    }

                    start.value(sdate);
                    end.value(edate);

                    start.max(end.value());
                    end.min(start.value());

                    dateChanges();
                });

                start.max(end.value());
                end.min(start.value());

                $("#search").click(function(e){
                    e.preventDefault();

                    var para = [],
                    sdate = kendo.toString(start.value(), "yyyy-MM-dd"),
                    edate = kendo.toString(end.value(), "yyyy-MM-dd");

                    //Dates
                    if(start.value() && end.value()){
                        para.push({ field:"issued_date >=", value: sdate });
                        para.push({ field:"issued_date <=", value: edate });
                    }else if(start.value()){
                        para.push({ field:"issued_date", value: sdate });
                    }else if(end.value()){
                        para.push({ field:"issued_date <=", value: edate });
                    }else{

                    }

                    vm.dataSource.filter(para);
                });

            }
        }
    });
    banhji.router.route("/recent_transactions_list", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.recentTransactionsList);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.journalReport;
            banhji.userManagement.addMultiTask("Recent Transactions List","recent_transactions_list",null);

            if(banhji.pageLoaded["recent_transactions_list"]==undefined){
                banhji.pageLoaded["recent_transactions_list"] = true;

                function startChange() {
                    var startDate = start.value(),
                    endDate = end.value();

                    if (startDate) {
                        startDate = new Date(startDate);
                        startDate.setDate(startDate.getDate());
                        end.min(startDate);
                    } else if (endDate) {
                        start.max(new Date(endDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function endChange() {
                    var endDate = end.value(),
                    startDate = start.value();

                    if (endDate) {
                        endDate = new Date(endDate);
                        endDate.setDate(endDate.getDate());
                        start.max(endDate);
                    } else if (startDate) {
                        end.min(new Date(startDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function dateChanges(){
                    var strDate = "";

                    if(start.value() && end.value()){
                        strDate = "From " + kendo.toString(new Date(start.value()), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end.value()), "dd-MM-yyyy");
                    }else if(start.value()){
                        strDate = "On " + kendo.toString(new Date(start.value()),"dd-MM-yyyy");
                    }else if(end.value()){
                        strDate = "As Of " + kendo.toString(new Date(end.value()),"dd-MM-yyyy");
                    }else{
                        strDate = "";
                    }

                    $("#strDate").text(strDate);
                }

                var start = $("#sdate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: startChange
                }).data("kendoDatePicker");

                var end = $("#edate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: endChange
                }).data("kendoDatePicker");

                var sorter = $("#sorter").change(function(){
                    var today = new Date(),
                    sdate = "",
                    edate = "",
                    value = $("#sorter").val();

                    switch(value){
                    case "today":
                        sdate = today;
                        break;
                    case "week":
                        var first = today.getDate() - today.getDay(),
                        last = first + 6;

                        var sdate = new Date(today.setDate(first)),
                        edate = new Date(today.setDate(last));

                        break;
                    case "month":
                        var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
                        edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                        break;
                    case "year":
                        var sdate = new Date(today.getFullYear(), 0, 1),
                        edate = new Date(today.getFullYear(), 11, 31);

                        break;
                    default:
                    }

                    start.value(sdate);
                    end.value(edate);

                    start.max(end.value());
                    end.min(start.value());

                    dateChanges();
                });

                start.max(end.value());
                end.min(start.value());

                $("#search").click(function(e){
                    e.preventDefault();

                    var para = [],
                    sdate = kendo.toString(start.value(), "yyyy-MM-dd"),
                    edate = kendo.toString(end.value(), "yyyy-MM-dd");

                    //Dates
                    if(start.value() && end.value()){
                        para.push({ field:"issued_date >=", value: sdate });
                        para.push({ field:"issued_date <=", value: edate });
                    }else if(start.value()){
                        para.push({ field:"issued_date", value: sdate });
                    }else if(end.value()){
                        para.push({ field:"issued_date <=", value: edate });
                    }else{

                    }

                    vm.dataSource.filter(para);
                });
            }
        }
    });
    banhji.router.route("/recurring_journal_list", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.recurringJournalList);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.journalReport;

            banhji.userManagement.addMultiTask("Recurring Journal List","recurring_journal_list",null);

            if(banhji.pageLoaded["recurring_journal_list"]==undefined){
                banhji.pageLoaded["recurring_journal_list"] = true;

                function startChange() {
                    var startDate = start.value(),
                    endDate = end.value();

                    if (startDate) {
                        startDate = new Date(startDate);
                        startDate.setDate(startDate.getDate());
                        end.min(startDate);
                    } else if (endDate) {
                        start.max(new Date(endDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function endChange() {
                    var endDate = end.value(),
                    startDate = start.value();

                    if (endDate) {
                        endDate = new Date(endDate);
                        endDate.setDate(endDate.getDate());
                        start.max(endDate);
                    } else if (startDate) {
                        end.min(new Date(startDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function dateChanges(){
                    var strDate = "";

                    if(start.value() && end.value()){
                        strDate = "From " + kendo.toString(new Date(start.value()), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end.value()), "dd-MM-yyyy");
                    }else if(start.value()){
                        strDate = "On " + kendo.toString(new Date(start.value()),"dd-MM-yyyy");
                    }else if(end.value()){
                        strDate = "As Of " + kendo.toString(new Date(end.value()),"dd-MM-yyyy");
                    }else{
                        strDate = "";
                    }

                    $("#strDate").text(strDate);
                }

                var start = $("#sdate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: startChange
                }).data("kendoDatePicker");

                var end = $("#edate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: endChange
                }).data("kendoDatePicker");

                var sorter = $("#sorter").change(function(){
                    var today = new Date(),
                    sdate = "",
                    edate = "",
                    value = $("#sorter").val();

                    switch(value){
                    case "today":
                        sdate = today;
                        break;
                    case "week":
                        var first = today.getDate() - today.getDay(),
                        last = first + 6;

                        var sdate = new Date(today.setDate(first)),
                        edate = new Date(today.setDate(last));

                        break;
                    case "month":
                        var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
                        edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                        break;
                    case "year":
                        var sdate = new Date(today.getFullYear(), 0, 1),
                        edate = new Date(today.getFullYear(), 11, 31);

                        break;
                    default:
                    }

                    start.value(sdate);
                    end.value(edate);

                    start.max(end.value());
                    end.min(start.value());

                    dateChanges();
                });

                start.max(end.value());
                end.min(start.value());

                $("#search").click(function(e){
                    e.preventDefault();

                    var para = [],
                    sdate = kendo.toString(start.value(), "yyyy-MM-dd"),
                    edate = kendo.toString(end.value(), "yyyy-MM-dd");

                    //Dates
                    if(start.value() && end.value()){
                        para.push({ field:"issued_date >=", value: sdate });
                        para.push({ field:"issued_date <=", value: edate });
                    }else if(start.value()){
                        para.push({ field:"issued_date", value: sdate });
                    }else if(end.value()){
                        para.push({ field:"issued_date <=", value: edate });
                    }else{

                    }

                    vm.dataSource.filter(para);
                });
            }
        }
    });
    banhji.router.route("/audit_trial_report", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.auditTrialReport);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);
            var vm = banhji.journalReport;

            banhji.userManagement.addMultiTask("Audit Trial Report","audit_trial_report",null);

            if(banhji.pageLoaded["audit_trial_report"]==undefined){
                banhji.pageLoaded["audit_trial_report"] = true;

                function startChange() {
                    var startDate = start.value(),
                    endDate = end.value();

                    if (startDate) {
                        startDate = new Date(startDate);
                        startDate.setDate(startDate.getDate());
                        end.min(startDate);
                    } else if (endDate) {
                        start.max(new Date(endDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function endChange() {
                    var endDate = end.value(),
                    startDate = start.value();

                    if (endDate) {
                        endDate = new Date(endDate);
                        endDate.setDate(endDate.getDate());
                        start.max(endDate);
                    } else if (startDate) {
                        end.min(new Date(startDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function dateChanges(){
                    var strDate = "";

                    if(start.value() && end.value()){
                        strDate = "From " + kendo.toString(new Date(start.value()), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end.value()), "dd-MM-yyyy");
                    }else if(start.value()){
                        strDate = "On " + kendo.toString(new Date(start.value()),"dd-MM-yyyy");
                    }else if(end.value()){
                        strDate = "As Of " + kendo.toString(new Date(end.value()),"dd-MM-yyyy");
                    }else{
                        strDate = "";
                    }

                    $("#strDate").text(strDate);
                }

                var start = $("#sdate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: startChange
                }).data("kendoDatePicker");

                var end = $("#edate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: endChange
                }).data("kendoDatePicker");

                var sorter = $("#sorter").change(function(){
                    var today = new Date(),
                    sdate = "",
                    edate = "",
                    value = $("#sorter").val();

                    switch(value){
                    case "today":
                        sdate = today;
                        break;
                    case "week":
                        var first = today.getDate() - today.getDay(),
                        last = first + 6;

                        var sdate = new Date(today.setDate(first)),
                        edate = new Date(today.setDate(last));

                        break;
                    case "month":
                        var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
                        edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                        break;
                    case "year":
                        var sdate = new Date(today.getFullYear(), 0, 1),
                        edate = new Date(today.getFullYear(), 11, 31);

                        break;
                    default:
                    }

                    start.value(sdate);
                    end.value(edate);

                    start.max(end.value());
                    end.min(start.value());

                    dateChanges();
                });

                start.max(end.value());
                end.min(start.value());

                $("#search").click(function(e){
                    e.preventDefault();

                    var para = [],
                    sdate = kendo.toString(start.value(), "yyyy-MM-dd"),
                    edate = kendo.toString(end.value(), "yyyy-MM-dd");

                    //Dates
                    if(start.value() && end.value()){
                        para.push({ field:"issued_date >=", value: sdate });
                        para.push({ field:"issued_date <=", value: edate });
                    }else if(start.value()){
                        para.push({ field:"issued_date", value: sdate });
                    }else if(end.value()){
                        para.push({ field:"issued_date <=", value: edate });
                    }else{

                    }

                    vm.dataSource.filter(para);
                });
            }
        }
    });
    banhji.router.route("/statement_profit_loss", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.statementProfitLoss);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.statementProfitLoss;
            banhji.userManagement.addMultiTask("Statement of Profit or Loss","statement_profit_loss",null);

            if(banhji.pageLoaded["statement_profit_loss"]==undefined){
                banhji.pageLoaded["statement_profit_loss"] = true;

            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/statement_profit_loss_by_nature", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.statementProfitLossByNature);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.statementProfitLossByNature;
            banhji.userManagement.addMultiTask("Statement of Profit or Loss By Nature","statement_profit_loss_by_nature",null);

            if(banhji.pageLoaded["statement_profit_loss_by_nature"]==undefined){
                banhji.pageLoaded["statement_profit_loss_by_nature"] = true;

            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/statement_profit_loss_by_segment", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.statementProfitLossBySegment);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.statementProfitLossBySegment;
            banhji.userManagement.addMultiTask("Statement of Profit or Loss by Segment","statement_profit_loss_by_segment",null);

            if(banhji.pageLoaded["statement_profit_loss_by_segment"]==undefined){
                banhji.pageLoaded["statement_profit_loss_by_segment"] = true;

                vm.sorterChanges();
            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/statement_financial_position", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.statementFinancialPosition);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.statementFinancialPosition;
            banhji.userManagement.addMultiTask("Statement of Financial Position","statement_financial_position",null);

            if(banhji.pageLoaded["statement_financial_position"]==undefined){
                banhji.pageLoaded["statement_financial_position"] = true;

            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/statement_profit_loss_comparison", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.statementProfitLossComparison);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.statementProfitLossComparison;

            banhji.userManagement.addMultiTask("Statement of Profit or Loss Comparison","statement_profit_loss_comparison",null);

            if(banhji.pageLoaded["statement_profit_loss_comparison"]==undefined){
                banhji.pageLoaded["statement_profit_loss_comparison"] = true;

            }
        }
    });
    banhji.router.route("/statement_financial_position_comparison", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.statementFinancialPositionComparison);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.journalReport;

            banhji.userManagement.addMultiTask("Statement of Financial Position Comparison","statement_financial_position_comparison",null);

            if(banhji.pageLoaded["statement_financial_position_comparison"]==undefined){
                banhji.pageLoaded["statement_financial_position_comparison"] = true;

                function startChange() {
                    var startDate = start.value(),
                    endDate = end.value();

                    if (startDate) {
                        startDate = new Date(startDate);
                        startDate.setDate(startDate.getDate());
                        end.min(startDate);
                    } else if (endDate) {
                        start.max(new Date(endDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function endChange() {
                    var endDate = end.value(),
                    startDate = start.value();

                    if (endDate) {
                        endDate = new Date(endDate);
                        endDate.setDate(endDate.getDate());
                        start.max(endDate);
                    } else if (startDate) {
                        end.min(new Date(startDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function dateChanges(){
                    var strDate = "";

                    if(start.value() && end.value()){
                        strDate = "From " + kendo.toString(new Date(start.value()), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end.value()), "dd-MM-yyyy");
                    }else if(start.value()){
                        strDate = "On " + kendo.toString(new Date(start.value()),"dd-MM-yyyy");
                    }else if(end.value()){
                        strDate = "As Of " + kendo.toString(new Date(end.value()),"dd-MM-yyyy");
                    }else{
                        strDate = "";
                    }

                    $("#strDate").text(strDate);
                }

                var start = $("#sdate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: startChange
                }).data("kendoDatePicker");

                var end = $("#edate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: endChange
                }).data("kendoDatePicker");

                var sorter = $("#sorter").change(function(){
                    var today = new Date(),
                    sdate = "",
                    edate = "",
                    value = $("#sorter").val();

                    switch(value){
                    case "today":
                        sdate = today;
                        break;
                    case "week":
                        var first = today.getDate() - today.getDay(),
                        last = first + 6;

                        var sdate = new Date(today.setDate(first)),
                        edate = new Date(today.setDate(last));

                        break;
                    case "month":
                        var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
                        edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                        break;
                    case "year":
                        var sdate = new Date(today.getFullYear(), 0, 1),
                        edate = new Date(today.getFullYear(), 11, 31);

                        break;
                    default:
                    }

                    start.value(sdate);
                    end.value(edate);

                    start.max(end.value());
                    end.min(start.value());

                    dateChanges();
                });

                start.max(end.value());
                end.min(start.value());

                $("#search").click(function(e){
                    e.preventDefault();

                    var para = [],
                    sdate = kendo.toString(start.value(), "yyyy-MM-dd"),
                    edate = kendo.toString(end.value(), "yyyy-MM-dd");

                    //Dates
                    if(start.value() && end.value()){
                        para.push({ field:"issued_date >=", value: sdate });
                        para.push({ field:"issued_date <=", value: edate });
                    }else if(start.value()){
                        para.push({ field:"issued_date", value: sdate });
                    }else if(end.value()){
                        para.push({ field:"issued_date <=", value: edate });
                    }else{

                    }

                    vm.dataSource.filter(para);
                });
            }
        }
    });
    banhji.router.route("/statement_changes_equity", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.statementChangesEquity);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

            var vm = banhji.journalReport;

            banhji.userManagement.addMultiTask("Statement Changes Equity","statement_changes_equity",null);

            if(banhji.pageLoaded["statement_changes_equity"]==undefined){
                banhji.pageLoaded["statement_changes_equity"] = true;

                function startChange() {
                    var startDate = start.value(),
                    endDate = end.value();

                    if (startDate) {
                        startDate = new Date(startDate);
                        startDate.setDate(startDate.getDate());
                        end.min(startDate);
                    } else if (endDate) {
                        start.max(new Date(endDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function endChange() {
                    var endDate = end.value(),
                    startDate = start.value();

                    if (endDate) {
                        endDate = new Date(endDate);
                        endDate.setDate(endDate.getDate());
                        start.max(endDate);
                    } else if (startDate) {
                        end.min(new Date(startDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function dateChanges(){
                    var strDate = "";

                    if(start.value() && end.value()){
                        strDate = "From " + kendo.toString(new Date(start.value()), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end.value()), "dd-MM-yyyy");
                    }else if(start.value()){
                        strDate = "On " + kendo.toString(new Date(start.value()),"dd-MM-yyyy");
                    }else if(end.value()){
                        strDate = "As Of " + kendo.toString(new Date(end.value()),"dd-MM-yyyy");
                    }else{
                        strDate = "";
                    }

                    $("#strDate").text(strDate);
                }

                var start = $("#sdate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: startChange
                }).data("kendoDatePicker");

                var end = $("#edate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: endChange
                }).data("kendoDatePicker");

                var sorter = $("#sorter").change(function(){
                    var today = new Date(),
                    sdate = "",
                    edate = "",
                    value = $("#sorter").val();

                    switch(value){
                    case "today":
                        sdate = today;
                        break;
                    case "week":
                        var first = today.getDate() - today.getDay(),
                        last = first + 6;

                        var sdate = new Date(today.setDate(first)),
                        edate = new Date(today.setDate(last));

                        break;
                    case "month":
                        var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
                        edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                        break;
                    case "year":
                        var sdate = new Date(today.getFullYear(), 0, 1),
                        edate = new Date(today.getFullYear(), 11, 31);

                        break;
                    default:
                    }

                    start.value(sdate);
                    end.value(edate);

                    start.max(end.value());
                    end.min(start.value());

                    dateChanges();
                });

                start.max(end.value());
                end.min(start.value());

                $("#search").click(function(e){
                    e.preventDefault();

                    var para = [],
                    sdate = kendo.toString(start.value(), "yyyy-MM-dd"),
                    edate = kendo.toString(end.value(), "yyyy-MM-dd");

                    //Dates
                    if(start.value() && end.value()){
                        para.push({ field:"issued_date >=", value: sdate });
                        para.push({ field:"issued_date <=", value: edate });
                    }else if(start.value()){
                        para.push({ field:"issued_date", value: sdate });
                    }else if(end.value()){
                        para.push({ field:"issued_date <=", value: edate });
                    }else{

                    }

                    vm.dataSource.filter(para);
                });
            }
        }
    });
    banhji.router.route("/statement_cash_flow", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.statementCashFlow);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);
            var vm = banhji.journalReport;

            banhji.userManagement.addMultiTask("Statement of Cash Flow","statement_cash_flow",null);

            if(banhji.pageLoaded["statement_cash_flow"]==undefined){
                banhji.pageLoaded["statement_cash_flow"] = true;

                function startChange() {
                    var startDate = start.value(),
                    endDate = end.value();

                    if (startDate) {
                        startDate = new Date(startDate);
                        startDate.setDate(startDate.getDate());
                        end.min(startDate);
                    } else if (endDate) {
                        start.max(new Date(endDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function endChange() {
                    var endDate = end.value(),
                    startDate = start.value();

                    if (endDate) {
                        endDate = new Date(endDate);
                        endDate.setDate(endDate.getDate());
                        start.max(endDate);
                    } else if (startDate) {
                        end.min(new Date(startDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function dateChanges(){
                    var strDate = "";

                    if(start.value() && end.value()){
                        strDate = "From " + kendo.toString(new Date(start.value()), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end.value()), "dd-MM-yyyy");
                    }else if(start.value()){
                        strDate = "On " + kendo.toString(new Date(start.value()),"dd-MM-yyyy");
                    }else if(end.value()){
                        strDate = "As Of " + kendo.toString(new Date(end.value()),"dd-MM-yyyy");
                    }else{
                        strDate = "";
                    }

                    $("#strDate").text(strDate);
                }

                var start = $("#sdate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: startChange
                }).data("kendoDatePicker");

                var end = $("#edate").kendoDatePicker({
                    format: "dd-MM-yyyy",
                    change: endChange
                }).data("kendoDatePicker");

                var sorter = $("#sorter").change(function(){
                    var today = new Date(),
                    sdate = "",
                    edate = "",
                    value = $("#sorter").val();

                    switch(value){
                    case "today":
                        sdate = today;
                        break;
                    case "week":
                        var first = today.getDate() - today.getDay(),
                        last = first + 6;

                        var sdate = new Date(today.setDate(first)),
                        edate = new Date(today.setDate(last));

                        break;
                    case "month":
                        var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
                        edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

                        break;
                    case "year":
                        var sdate = new Date(today.getFullYear(), 0, 1),
                        edate = new Date(today.getFullYear(), 11, 31);

                        break;
                    default:
                    }

                    start.value(sdate);
                    end.value(edate);

                    start.max(end.value());
                    end.min(start.value());

                    dateChanges();
                });

                start.max(end.value());
                end.min(start.value());

                $("#search").click(function(e){
                    e.preventDefault();

                    var para = [],
                    sdate = kendo.toString(start.value(), "yyyy-MM-dd"),
                    edate = kendo.toString(end.value(), "yyyy-MM-dd");

                    //Dates
                    if(start.value() && end.value()){
                        para.push({ field:"issued_date >=", value: sdate });
                        para.push({ field:"issued_date <=", value: edate });
                    }else if(start.value()){
                        para.push({ field:"issued_date", value: sdate });
                    }else if(end.value()){
                        para.push({ field:"issued_date <=", value: edate });
                    }else{

                    }

                    vm.dataSource.filter(para);
                });
            }
        }
    });
    // ACCOUNTING SETTINGS
    banhji.router.route("/accounting_setting", function(){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("accounting" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.accountingSetting);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);

                var vm = banhji.vendorSetting;
                banhji.userManagement.addMultiTask("General Accounting Setting","accounting_setting",null);

                if(banhji.pageLoaded["accounting_setting"]==undefined){
                    banhji.pageLoaded["accounting_setting"] = true;

                    vm.contactTypeDS.filter({ field:"parent_id", value: 2 });
                }

                vm.pageLoad();
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/currency_rate", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.currencyRate);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.currencyRate;
            banhji.userManagement.addMultiTask("Currency Rate","currency_rate",null);

            if(banhji.pageLoaded["currency_rate"]==undefined){
                banhji.pageLoaded["currency_rate"] = true;
            }

            vm.pageLoad();
        }
    });





    /*************************************************
    *   TAX ROUTER                                   *
    *************************************************/
    banhji.router.route("/tax", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.tax);

            banhji.userManagement.addMultiTask("Tax","tax",null);

            banhji.view.layout.showIn('#menu', banhji.view.menu);
            //banhji.view.menu.showIn('#secondary-menu', banhji.view.taxMenu);

            var vm = banhji.tax;

            if(banhji.pageLoaded["tax"]==undefined){
                banhji.pageLoaded["tax"] = true;
            }
        }
    });
    // TAX REPORTS
    banhji.router.route("/tax_report_center", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.taxReportCenter);

            banhji.userManagement.addMultiTask("Tax Report Center","tax_report_center",null);

            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.taxMenu);

            // var vm = banhji.tax_report_center;

            if(banhji.pageLoaded["tax_report_center"]==undefined){
                banhji.pageLoaded["tax_report_center"] = true;
            }
        }
    });
    banhji.router.route("/sale_journal", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.saleJournal);

            banhji.userManagement.addMultiTask("Sale Journal","sale_journal",null);

            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.taxMenu);

            var vm = banhji.tax_report_center;

            if(banhji.pageLoaded["sale_journal"]==undefined){
                banhji.pageLoaded["sale_journal"] = true;
            }
        }
    });
    banhji.router.route("/purchase_journal", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.purchaseJournal);

            banhji.userManagement.addMultiTask("Purchase Journal","purchase_journal",null);

            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.taxMenu);

            var vm = banhji.tax_report_center;

            if(banhji.pageLoaded["purchase_journal"]==undefined){
                banhji.pageLoaded["purchase_journal"] = true;
            }
        }
    });
    banhji.router.route("/tax_center(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.taxCenter);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                // banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);

                var vm = banhji.taxCenter;
                banhji.userManagement.addMultiTask("tax Center","tax_center",null);
                if(banhji.pageLoaded["tax_center"]==undefined){
                    banhji.pageLoaded["tax_center"] = true;
                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });





    /*************************************************
    *   REPORTS ROUTER                               *
    *************************************************/
    banhji.router.route("/reports", function(){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("report" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.reportDashboard);

                var vm = banhji.reportDashboard;
                banhji.userManagement.addMultiTask("Reports Dashboard","reports",null);

                if(banhji.pageLoaded["reports"]==undefined){
                    banhji.pageLoaded["reports"] = true;
                }
                vm.pageLoad();
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/profitability_summary_job", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.profitabilitySummaryJob);

            var vm = banhji.profitabilitySummaryJob;
            banhji.userManagement.addMultiTask("Profitability Summary by Job","profitability_summary_job",null);

            if(banhji.pageLoaded["profitability_summary_job"]==undefined){
                banhji.pageLoaded["profitability_summary_job"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/profitability_detail_job", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.profitabilityDetailJob);

            var vm = banhji.profitabilityDetailJob;
            banhji.userManagement.addMultiTask("Profitability Detail by Job","profitability_detail_job",null);

            if(banhji.pageLoaded["profitability_detail_job"]==undefined){
                banhji.pageLoaded["profitability_detail_job"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });





    /*************************************************
    *   CASH ROUTER                                  *
    *************************************************/
    banhji.router.route("/cashs", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashDashboard);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.cashMenu);

            var vm = banhji.cashDashboard;
            banhji.userManagement.addMultiTask("Cash Dashboard","cashs",null);

            if(banhji.pageLoaded["cashs"]==undefined){
                banhji.pageLoaded["cashs"] = true;
                banhji.cashDashboard.graphDS.fetch();
                banhji.cashDashboard.topCashDS.read();
                banhji.cashDashboard.topCashDS.bind('requestEnd', function(e) {
                    if(e.response) {
                        kendo.culture(banhji.locale);
                        banhji.cashDashboard.set('balance', kendo.toString(e.response.balance, 'c2'));
                        banhji.cashDashboard.set('cashACNumber', e.response.cashACNumber);
                    }
                });

                banhji.cashDashboard.topAdvaDS.read();
                banhji.cashDashboard.topAdvaDS.bind('requestEnd', function(e) {
                    if(e.response) {
                        kendo.culture(banhji.locale);
                        banhji.cashDashboard.set('open', e.response.open);
                        banhji.cashDashboard.set('overDue', e.response.overDue);
                        banhji.cashDashboard.set('totalAdvance', kendo.toString(e.response.total_advance, 'c2'));
                    }
                });
            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/cash_center", function(){
        banhji.view.layout.showIn("#content", banhji.view.cashCenter);
        banhji.view.layout.showIn('#menu', banhji.view.menu);
        banhji.view.menu.showIn('#secondary-menu', banhji.view.cashMenu);
        var blank = new kendo.View('#blank-tmpl');
        var vm = banhji.cashCenter;
        banhji.cashCenter.accountTypeDS.read();
        banhji.userManagement.addMultiTask("Cash Center","cash_center",null);

        if(banhji.pageLoaded["cash_center"]==undefined){
            banhji.pageLoaded["cash_center"] = true;
        }
    });
    // CASH FUNCTIONS
    banhji.router.route("/cash(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            var vm = banhji.cash;

            banhji.userManagement.addMultiTask("Cash","cash",vm);

            banhji.view.layout.showIn("#content", banhji.view.cash);
            kendo.fx($("#slide-form")).slideIn("down").play();

            if(banhji.pageLoaded["cash"]==undefined){
                banhji.pageLoaded["cash"] = true;

                var validator = $("#example").kendoValidator().data("kendoValidator");
                var notification = $("#notification").kendoNotification({
                    autoHideAfter: 5000,
                    width: 300,
                    height: 50
                }).data('kendoNotification');

                $("#save").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.get("isDuplicateNumber")==false){
                        vm.save();

                        notification.success("Save Successful");
                    }else{
                        notification.error("Warning, please review it again!");
                    }
                });
            }

            vm.pageLoad(id);
        }
    });
    banhji.router.route("/cash_deposit(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashDeposit);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.cashDeposit;
            banhji.userManagement.addMultiTask("Cash Deposit","cash_deposit",vm);

            if(banhji.pageLoaded["cash_deposit"]==undefined){
                banhji.pageLoaded["cash_deposit"] = true;

                var validator = $("#example").kendoValidator({
                    rules: {
                        customRule1: function(input) {
                            if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                vm.set("recurring_validate", false);
                                return $.trim(input.val()) !== "";
                            }
                            return true;
                        }
                    },
                    messages: {
                        customRule1: banhji.source.requiredMessage
                    }
                }).data("kendoValidator");

                $("#saveNew").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveClose").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("saveClose", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#savePrint").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("savePrint", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveRecurring").click(function(e){
                    e.preventDefault();

                    vm.set("recurring_validate", true);

                    if(validator.validate()){
                        vm.set("saveRecurring", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });
            }

            vm.pageLoad(id);
        }
    });
    banhji.router.route("/cashier(/:id)", function(id){
        banhji.view.layout.showIn("#content", banhji.view.cashier);
        kendo.fx($("#slide-form")).slideIn("down").play();

        var vm = banhji.cashier;
        banhji.userManagement.addMultiTask("Cashier Dashboard","cashier",null);
        if(banhji.pageLoaded["cashier"]==undefined){
            banhji.pageLoaded["cashier"] = true;

            $("#ddlContact").kendoComboBox({
                placeholder: "លេខកូដ...",
                valuePrimitive: true,
                dataTextField: "fullname",
                dataValueField: "id",
                filter: "search",
                autoBind: false,
                minLength: 3,
                height: 400,
                dataSource: vm.contactDS,
                change: function(e) {
                    var value = this.value(),
                    data = this.dataSource.get(value);

                    vm.set("customer", data);
                    vm.transactionDS.filter({ field:"contact_id", value: value });
                    vm.loadInvoice(value, data.fullname, data.account_id);
                },
                template:'#=number# #=fullname#'
            });

            $("#ddlCashAccount").kendoDropDownList({
                optionLabel: "(--- Select ---)",
                valuePrimitive: true,
                dataTextField: "name",
                dataValueField: "id",
                dataSource: {
                    transport: {
                        read: {
                            url: apiUrl + "accounts",
                            headers: {
                                "Entity": getDB()
                            },
                            type: "GET",
                            dataType: "json"
                        }
                    },
                    schema  : {
                        model: {
                            id: 'id'
                        },
                        data: 'results',
                        total: 'count'
                    },
                    serverFiltering: true,
                    filter: { field:"account_type_id", value: 6 }
                },
                template: '#=number# #=name#'
            }).data("kendoDropDownList");

            var validator = $("#example").kendoValidator().data("kendoValidator");
            var notification = $("#notification").kendoNotification({
                autoHideAfter: 5000,
                width: 300,
                height: 50
            }).data('kendoNotification');

            $("#save").click(function(e){
                e.preventDefault();

                if(validator.validate()){
                    vm.save();

                    notification.success("Save Successful");
                }else{
                    notification.error("Warning, please review it again!");
                }
            });
        }
        vm.pageLoad(id);
    });
    banhji.router.route("/reconcile(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.reconcile);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.reconcile;
            banhji.userManagement.addMultiTask("Reconcile & Transfer","reconcile",vm);

            vm.pageLoad(id);

            if(banhji.pageLoaded["reconcile"]==undefined){
                banhji.pageLoaded["reconcile"] = true;

                $("#ddlCashAccount").kendoDropDownList({
                    optionLabel: "(--- Select ---)",
                    valuePrimitive: true,
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: {
                        transport: {
                            read: {
                                url: apiUrl + "accounts",
                                headers: {
                                    "Entity": getDB()
                                },
                                type: "GET",
                                dataType: "json"
                            }
                        },
                        schema  : {
                            model: {
                                id: 'id'
                            },
                            data: 'results',
                            total: 'count'
                        },
                        serverFiltering: true,
                        filter: { field:"account_type_id", value: 6 }
                    },
                    template: '#=number# #=name#'
                }).data("kendoDropDownList");

                var validator = $("#example").kendoValidator().data("kendoValidator");
                var notification = $("#notification").kendoNotification({
                    autoHideAfter: 5000,
                    width: 300,
                    height: 50
                }).data('kendoNotification');

                $("#save").click(function(e){
                    e.preventDefault();

                    if(validator.validate() && vm.get("isExisting")==false && vm.get("obj").transfered_amount>0){
                        vm.save();

                        notification.success("Save Successful");
                    }else{
                        notification.error("Warning, please review it again!");
                    }
                });
            }
        }
    });
    banhji.router.route("/cash_receipt(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else {
            banhji.view.layout.showIn("#content", banhji.view.cashReceipt);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.cashReceipt;
            banhji.userManagement.addMultiTask("Cash Receipt","cash_receipt",vm);

            if(banhji.pageLoaded["cash_receipt"]==undefined){
                banhji.pageLoaded["cash_receipt"] = true;

                vm.dataSource.bind("change", vm.dataSourceChanges);

                var validator = $("#example").kendoValidator().data("kendoValidator");
                $("#saveNew").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveClose").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("saveClose", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#savePrint").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("savePrint", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });
            }

            vm.pageLoad(id);
        }
    });
    banhji.router.route("/cash_payment(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashPayment);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.cashPayment;
            banhji.userManagement.addMultiTask("Cash Payment","cash_payment",vm);

            if(banhji.pageLoaded["cash_payment"]==undefined){
                banhji.pageLoaded["cash_payment"] = true;

                vm.dataSource.bind("change", vm.dataSourceChanges);

                var validator = $("#example").kendoValidator().data("kendoValidator");
                $("#saveNew").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveClose").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("saveClose", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#savePrint").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("savePrint", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });
            }

            vm.pageLoad(id);
        }
    });
    banhji.router.route("/cash_flow_forecast(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashFlowForecast);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.cashFlowForecast;
            banhji.userManagement.addMultiTask("Cash Flow Forecast","cash_flow_forecast",vm);

            if(banhji.pageLoaded["cash_flow_forecast"]==undefined){
                banhji.pageLoaded["cash_flow_forecast"] = true;

            }

            vm.pageLoad(id);
        }
    });
    // CASH REPORTS
    banhji.router.route("/cash_report_center", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashReportCenter);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.cashMenu);

            //var vm = banhji.customerReportCenter;
            banhji.userManagement.addMultiTask("Cash Position","cash_report_center",null);

            if(banhji.pageLoaded["cash_report_center"]==undefined){
                banhji.pageLoaded["cash_report_center"] = true;
            }
        }
    });
    banhji.router.route("/cash_list", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashList);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.cashMenu);

            var vm = banhji.cashList;
            banhji.userManagement.addMultiTask("Cash List","cash_list",null);

            if(banhji.pageLoaded["cash_list"]==undefined){
                banhji.pageLoaded["cash_list"] = true;

                vm.contactTypeDS.filter({ field:"parent_id", value:1 });
                vm.dataSource.filter({ field:"parent_id", operator:"where_related_contact_type", value:1 });

                $("#grid").kendoGrid({
                    dataSource: vm.dataSource,
                    toolbar: ["excel"],
                    excel: {
                        fileName: "Cash_List.xlsx",
                        filterable: true
                    },
                    reorderable: true,
                    groupable: true,
                    sortable: true,
                    pageable: true,
                    columns:[
                        { field: "number", title:"Number" },
                        { field: "surname", title:"Surname" },
                        { field: "name", title:"Name" },
                        { field: "contact_type", title:"Type" }
                    ]
                });
            }
        }
    });
    banhji.router.route("/cash_movement", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashMovement);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            //banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);
            let self = this;
            // this.cashAccount= [];
            var vm = banhji.cashMovement;
            // banhji.source.loadAcct()
            // .then(function(data){
            //  self.cashAccount = data.filter(function(x){
            //      return x.account_type_id == 10;
            //  }).map(function(value){
            //      return value.id;
            //  });
            //  vm.dataSource.filter({
            //      field:'account_id', operator:'where_in', value:self.cashAccount
            //  });
            //  // console.log(self.cashAccount);
            // });

            // if(banhji.source.accountList.length>0) {
            //  var cashAccount = banhji.source.accountList.map(function(x){
            //  return x;
            //  });
            //  console.log(cashAccount);
            // } else {
            //  console.log('no data');
            // }

            banhji.userManagement.addMultiTask("Cash Movement","cash_movement",null);

            if(banhji.pageLoaded["cash_movement"]==undefined){
                banhji.pageLoaded["cash_movement"] = true;

            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/cash_position_report", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            var vm = banhji.cashPositionReport;
            banhji.userManagement.addMultiTask("Cash Position Report","cash_position_report");

            banhji.view.layout.showIn("#content", banhji.view.cashPositionReport);
            banhji.cashSales.set('startDate', new Date().getFullYear() + "-01-01");
            banhji.cashSales.cashPositionReport.dataSource.filter({
                logic: banhji.saleSummaryCustomer.get('filteredBy'),
                filters: [
                    {field: "issued_date >=", value: kendo.toString(new Date().getFullYear() + "-01-01", "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(new Date(), "yyyy-MM-dd")}
                ]
            });
            banhji.cashSales.cashPositionReport.dataSource.bind('requestEnd', function(e){
                if(e.response) {
                    banhji.cashSales.set('count', e.response.count);
                    kendo.culture(banhji.locale);
                    banhji.cashSales.set('total', kendo.toString(e.response.total, 'c2'));
                    banhji.cashSales.set('totalCashSale', kendo.toString(e.response.totalCashSale, 'n0'));
                    banhji.cashSales.set('totalCashReceipt', kendo.toString(e.response.totalCashReceipt, 'n0'));
                    banhji.cashSales.set('cashPayment', kendo.toString(e.response.cashPayment, 'n0'));
                    banhji.cashSales.set('cashExpense', kendo.toString(e.response.cashExpense, 'n0'));
                    banhji.cashSales.set('cashPurchase', kendo.toString(e.response.cashPurchase, 'n0'));
                    banhji.cashSales.set('totalSale', kendo.toString(e.response.totalSale, 'n0'));
                    banhji.cashSales.set('totalPurchase', kendo.toString(e.response.totalPurchase, 'n0'));
                }
            });
        }
    });
    banhji.router.route("/cash_collection_report", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            var vm = banhji.cashCollectionReport;
            banhji.userManagement.addMultiTask("Cash Collection Report","cash_collection_report");

            banhji.view.layout.showIn("#content", banhji.view.cashCollectionReport);
            banhji.cashSales.set('startDate', new Date().getFullYear() + "-01-01");
            banhji.cashSales.cashCollection.dataSource.filter({
                logic: banhji.saleSummaryCustomer.get('filteredBy'),
                filters: [
                    {field: "issued_date >=", value: kendo.toString(new Date().getFullYear() + "-01-01", "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(new Date(), "yyyy-MM-dd")}
                ]
            });
            banhji.cashSales.cashCollection.dataSource.bind('requestEnd', function(e){
                if(e.response) {
                    banhji.cashSales.set('count', e.response.count);
                    kendo.culture(banhji.locale);
                    banhji.cashSales.set('total', kendo.toString(e.response.total, 'c2'));
                    banhji.cashSales.set('segments', kendo.toString(e.response.segments, 'n0'));
                }
            });
        }
    });
    banhji.router.route("/cash_payment_report", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            var vm = banhji.cashPaymentReport;
            banhji.userManagement.addMultiTask("Cash Payment Report","cash_payment_report");

            banhji.view.layout.showIn("#content", banhji.view.cashPaymentReport);
            banhji.cashSales.set('startDate', new Date().getFullYear() + "-01-01");
            banhji.cashSales.cashPaymentReport.dataSource.filter({
                logic: banhji.saleSummaryCustomer.get('filteredBy'),
                filters: [
                    {field: "issued_date >=", value: kendo.toString(new Date().getFullYear() + "-01-01", "yyyy-MM-dd")},
                    {field: "issued_date <=", value: kendo.toString(new Date(), "yyyy-MM-dd")}
                ]
            });
            banhji.cashSales.cashPaymentReport.dataSource.bind('requestEnd', function(e){
                if(e.response) {
                    banhji.cashSales.set('count', e.response.count);
                    kendo.culture(banhji.locale);
                    banhji.cashSales.set('total', kendo.toString(e.response.total, 'c2'));
                    banhji.cashSales.set('segments', kendo.toString(e.response.segments, 'n0'));
                }
            });
        }
    });
    banhji.router.route("/cash_advance_report", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            var vm = banhji.cashAdvanceReport;
            banhji.userManagement.addMultiTask("Cash Advance Report","cash_advance_report",null);
            banhji.view.layout.showIn("#content", banhji.view.cashAdvanceReport);

            if(banhji.pageLoaded["cash_advance_report"]==undefined){
                banhji.pageLoaded["cash_advance_report"] = true;

                vm.sorterChanges();
            }
            banhji.cashAdvanceReport.dataSource.bind('requestEnd', function(e){
                if(e.response) {
                    banhji.cashAdvanceReport.set('count', e.response.count);
                    kendo.culture(banhji.locale);
                    banhji.cashAdvanceReport.set('people', kendo.toString(e.response.people, 'n0'));
                }
            });
            vm.pageLoad();
        }
    });
    // CASH SETTINGS
    banhji.router.route("/cash_setting", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashSetting);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.cashMenu);

            var vm = banhji.cashSetting;

            banhji.userManagement.addMultiTask("General Cash Setting","cash_setting",null);

            if(banhji.pageLoaded["cash_setting"]==undefined){
                banhji.pageLoaded["cash_setting"] = true;

                vm.contactTypeDS.filter({ field:"parent_id", value: 1 });
            }

            vm.pageLoad();
        }
    });
    /*Cash Management Dashboard*/
    banhji.router.route("/cash_management_dashboard", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.cashManagementDashboard);
            //banhji.view.layout.showIn('#menu', banhji.view.menu);
            //banhji.view.menu.showIn('#secondary-menu', banhji.view.cashMenu);

            var vm = banhji.cashDashboard;
            banhji.userManagement.addMultiTask("Cash Management Dashboard","cash_management_dashboard",null);

            if(banhji.pageLoaded["cash_management_dashboard"]==undefined){
                banhji.pageLoaded["cash_management_dashboard"] = true;
                banhji.cashDashboard.graphDS.fetch();
                banhji.cashDashboard.topCashDS.read();
                banhji.cashDashboard.topCashDS.bind('requestEnd', function(e) {
                    if(e.response) {
                        kendo.culture(banhji.locale);
                        banhji.cashDashboard.set('balance', kendo.toString(e.response.balance, 'c2'));
                        banhji.cashDashboard.set('cashACNumber', e.response.cashACNumber);
                    }
                });

                banhji.cashDashboard.topAdvaDS.read();
                banhji.cashDashboard.topAdvaDS.bind('requestEnd', function(e) {
                    if(e.response) {
                        kendo.culture(banhji.locale);
                        banhji.cashDashboard.set('open', e.response.open);
                        banhji.cashDashboard.set('overDue', e.response.overDue);
                        banhji.cashDashboard.set('totalAdvance', kendo.toString(e.response.total_advance, 'c2'));
                    }
                });
            }

            vm.pageLoad();
        }
    });





    /*************************************************
    *   SALE ROUTER                                  *
    *************************************************/
    banhji.router.route("/sales", function(){
        // banhji.accessMod.query({
        //  filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        // }).then(function(e){
        //  var allowed = false;
        //  if(banhji.accessMod.data().length > 0) {
        //      for(var i = 0; i < banhji.accessMod.data().length; i++) {
        //          if("Sales" == banhji.accessMod.data()[i].name.toLowerCase()) {
        //              allowed = true;
        //              break;
        //          }
        //      }
        //  }
        //  if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.saleCenter);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.saleMenu);

                var vm = banhji.saleCenter;
                banhji.userManagement.addMultiTask("Sales","sales",null);
                if(banhji.pageLoaded["sales"]==undefined){
                    banhji.pageLoaded["sales"] = true;
                }
                vm.pageLoad();
        //  } else {
        //      window.location.replace(baseUrl + "admin");
        //  }
        // });
    });
    banhji.router.route("/sale_center(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.saleCenter);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.saleMenu);

                var vm = banhji.customerCenter;
                banhji.userManagement.addMultiTask("Sale Center","sale_center",null);
                if(banhji.pageLoaded["sale_center"]==undefined){
                    banhji.pageLoaded["sale_center"] = true;
                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/sale_order_for_sale(/:id)", function(id){
        banhji.view.layout.showIn("#content", banhji.view.saleOrderForSale);
        kendo.fx($("#slide-form")).slideIn("down").play();

        var vm = banhji.saleOrderForSale;
        banhji.userManagement.addMultiTask("Sale Order For Sale","sale_order_for_sale",vm);

        if(banhji.pageLoaded["sale_order_for_sale"]==undefined){
            banhji.pageLoaded["sale_order_for_sale"] = true;

            vm.lineDS.bind("change", vm.lineDSChanges);

            var validator = $("#example").kendoValidator({
                rules: {
                    customRule1: function(input) {
                        if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                            vm.set("recurring_validate", false);
                            return $.trim(input.val()) !== "";
                        }
                        return true;
                    },
                    customRule2: function(input){
                        if (input.is("[name=txtNumber]")) {
                            return vm.get("notDuplicateNumber");
                        }
                        return true;
                    }
                },
                messages: {
                    customRule1: banhji.source.requiredMessage,
                    customRule2: banhji.source.duplicateNumber
                }
            }).data("kendoValidator");

            $("#saveDraft1").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("saveDraft", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveNew").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveClose").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("saveClose", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#savePrint").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("savePrint", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveRecurring").click(function(e){
                e.preventDefault();

                vm.set("recurring_validate", true);

                if(validator.validate() && vm.validating()){
                    vm.set("saveRecurring", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });
        }

        vm.pageLoad(id);
    });
    banhji.router.route("/sale", function(){
        banhji.view.layout.showIn("#content", banhji.view.sale);
        banhji.view.layout.showIn('#menu', banhji.view.menu);
        banhji.view.menu.showIn('#secondary-menu', banhji.view.saleMenu);

        var vm = banhji.sale;
        banhji.userManagement.addMultiTask("Sale","sale",null);
        if(banhji.pageLoaded["sale"]==undefined){
            banhji.pageLoaded["sale"] = true;
        }
        vm.pageLoad();
    });
    banhji.router.route("/sale_recurring", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.saleRecurring);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.saleMenu);

            var vm = banhji.customerRecurring;
            banhji.userManagement.addMultiTask("Sale Recurring","sale_recurring",null);
            if(banhji.pageLoaded["sale_recurring"]==undefined){
                banhji.pageLoaded["sale_recurring"] = true;

            }

            vm.pageLoad();
        }
    });
    // SALE REPORTS
    banhji.router.route("/sale_report_center", function(){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.saleReportCenter);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.saleMenu);

                var vm = banhji.saleReportCenter;
                banhji.userManagement.addMultiTask("Sale Report Center","sale_report_center",null);
                if(banhji.pageLoaded["sale_report_center"]==undefined){
                    banhji.pageLoaded["sale_report_center"] = true;
                }
                vm.pageLoad();
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/sale_detail", function(){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("customer" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.saleDetail);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                banhji.view.menu.showIn('#secondary-menu', banhji.view.saleMenu);

                var vm = banhji.saleDetail;
                banhji.userManagement.addMultiTask("Sale Detail","sale_detail",null);
                if(banhji.pageLoaded["sale_detail"]==undefined){
                    banhji.pageLoaded["sale_detail"] = true;
                }
                vm.pageLoad();
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });
    banhji.router.route("/sale_inventory_position_summary", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            var vm = banhji.inventoryPositionSummary;
            banhji.userManagement.addMultiTask("Sale Inventory Position Summary","sale_inventory_position_summary",null);

            banhji.view.layout.showIn("#content", banhji.view.saleInventoryPositionSummary);
            banhji.inventorySale.inventoryPositionSummary.dataSource.read();
            banhji.inventorySale.inventoryPositionSummary.dataSource.bind('requestEnd', function(e){
                if(e.response) {
                    banhji.inventorySale.set('count', e.response.count);
                    kendo.culture(banhji.locale);
                    banhji.inventorySale.set('onHand', kendo.toString(e.response.onHand, 'n0'));
                }
            });
        }
    });
    banhji.router.route("/sale_order_list_for_sale", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.saleOrderListForSale);

            var vm = banhji.saleOrderListForSale;
            banhji.userManagement.addMultiTask("List of Sale Order","sale_order_list_for_sale",null);

            if(banhji.pageLoaded["sale_order_list_for_sale"]==undefined){
                banhji.pageLoaded["sale_order_list_for_sale"] = true;
                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });



    /*************************************************
    *   RICE MILL ROUTER                             *
    *************************************************/
    banhji.router.route("/rice_mill", function(){
        banhji.view.layout.showIn("#content", banhji.view.riceMill);
        banhji.view.layout.showIn('#menu', banhji.view.menu);
        banhji.view.menu.showIn('#secondary-menu', banhji.view.riceMillMenu);

        var vm = banhji.riceMill;
        banhji.userManagement.addMultiTask("Rice Mill Home","rice_mill",null);
        if(banhji.pageLoaded["rice_mill"]==undefined){
            banhji.pageLoaded["rice_mill"] = true;
        }
        vm.pageLoad();
    });
    banhji.router.route("/receipt_note(/:id)", function(id){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.receiptNote);
            kendo.fx($("#slide-form")).slideIn("down").play();

            var vm = banhji.receiptNote;
            banhji.userManagement.addMultiTask("Receipt Note","receipt_note",vm);

            if(banhji.pageLoaded["receipt_note"]==undefined){
                banhji.pageLoaded["receipt_note"] = true;

                vm.lineDS.bind("change", vm.lineDSChanges);

                var validator = $("#example").kendoValidator({
                    rules: {
                        customRule1: function(input) {
                            if (input.is("[name=txtRecurringName]") && vm.recurring_validate) {
                                vm.set("recurring_validate", false);
                                return $.trim(input.val()) !== "";
                            }
                            return true;
                        },
                        customRule2: function(input){
                            if (input.is("[name=txtNumber]")) {
                                return vm.get("notDuplicateNumber");
                            }
                            return true;
                        }
                    },
                    messages: {
                        customRule1: banhji.source.requiredMessage,
                        customRule2: banhji.source.duplicateNumber
                    }
                }).data("kendoValidator");

                $("#saveDraft1").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("saveDraft", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveNew").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveClose").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("saveClose", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#savePrint").click(function(e){
                    e.preventDefault();

                    if(validator.validate()){
                        vm.set("savePrint", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });

                $("#saveRecurring").click(function(e){
                    e.preventDefault();

                    vm.set("recurring_validate", true);

                    if(validator.validate()){
                        vm.set("saveRecurring", true);
                        vm.save();
                    }else{
                        $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                    }
                });
            }

            vm.pageLoad(id);
        }
    });
    banhji.router.route("/rice_mill_production(/:id)", function(id){
        banhji.view.layout.showIn("#content", banhji.view.riceMillProduction);
        banhji.view.layout.showIn('#menu', banhji.view.menu);
        //banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

        var vm = banhji.riceMillProduction;

        banhji.userManagement.addMultiTask("Internal Usage For Rice Mill","rice_mill_production",null);

        if(banhji.pageLoaded["rice_mill_production"]==undefined){
            banhji.pageLoaded["rice_mill_production"] = true;

            vm.lineDS.bind("change", vm.itemLineDSChanges);
            vm.accountLineDS.bind("change", vm.accountLineDSChanges);
            vm.toItemLineDS.bind("change", vm.toItemLineDSChanges);
            vm.toAccountLineDS.bind("change", vm.toAccountLineDSChanges);

            var validator = $("#example").kendoValidator({
                rules: {
                    customRule1: function(input){
                        if (input.is("[name=txtNumber]")) {
                            return vm.get("notDuplicateNumber");
                        }
                        return true;
                    }
                },
                messages: {
                    customRule1: banhji.source.duplicateNumber
                }
            }).data("kendoValidator");

            $("#saveDraft1").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("saveDraft", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveNew").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveClose").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("saveClose", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#savePrint").click(function(e){
                e.preventDefault();

                if(validator.validate() && vm.validating()){
                    vm.set("savePrint", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });

            $("#saveRecurring").click(function(e){
                e.preventDefault();

                vm.set("recurring_validate", true);

                if(validator.validate() && vm.validating()){
                    vm.set("saveRecurring", true);
                    vm.save();
                }else{
                    $("#ntf1").data("kendoNotification").error(banhji.source.errorMessage);
                }
            });
        }

        vm.pageLoad(id);
    });
    banhji.router.route("/rice_mill_recurring", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.riceMillRecurring);
            banhji.view.layout.showIn('#menu', banhji.view.menu);

            var vm = banhji.riceMillRecurring;
            banhji.userManagement.addMultiTask("Rice Mill Recurring","rice_mill_recurring",null);
            if(banhji.pageLoaded["rice_mill_recurring"]==undefined){
                banhji.pageLoaded["rice_mill_recurring"] = true;

            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/rice_mill_report_center", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.riceReportCenter);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.riceMillMenu);

            var vm = banhji.riceReportCenter;
            banhji.userManagement.addMultiTask("Rice Mill Reports Center","rice_mill_report_center",null);
            if(banhji.pageLoaded["rice_mill_report_center"]==undefined){
                banhji.pageLoaded["rice_mill_report_center"] = true;
            }

            vm.pageLoad();
        }
    });
    banhji.router.route("/receipt_note_report", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.receiptNoteReport);

            var vm = banhji.receiptNoteReport;
            banhji.userManagement.addMultiTask("Receipt Note Report","receipt_note_report",null);

            if(banhji.pageLoaded["receipt_note_report"]==undefined){
                banhji.pageLoaded["receipt_note_report"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });
    banhji.router.route("/rice_mill_production_report", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.riceMillProductionReport);

            var vm = banhji.riceMillProductionReport;
            banhji.userManagement.addMultiTask("Rice Mill Production Report","rice_mill_production_report",null);

            if(banhji.pageLoaded["rice_mill_production_report"]==undefined){
                banhji.pageLoaded["rice_mill_production_report"] = true;

                vm.sorterChanges();
            }
            vm.pageLoad();
        }
    });



    /*************************************************
    *   RETAIL TRADING ROUTER                            *
    *************************************************/
    banhji.router.route("/retail_trading", function(){
        banhji.view.layout.showIn("#content", banhji.view.retailTrading);
        banhji.view.layout.showIn('#menu', banhji.view.menu);
        banhji.view.menu.showIn('#secondary-menu', banhji.view.retailTradingMenu);

        var vm = banhji.retailTrading;
        banhji.userManagement.addMultiTask("Retail Trading Home","retail_trading",null);
        if(banhji.pageLoaded["retail_trading"]==undefined){
            banhji.pageLoaded["retail_trading"] = true;
        }
        vm.pageLoad();
    });
    banhji.router.route("/retail_trading_report_center", function(){
        if(!banhji.userManagement.getLogin()){
            banhji.router.navigate('/manage');
        }else{
            banhji.view.layout.showIn("#content", banhji.view.retailTradingReportCenter);
            banhji.view.layout.showIn('#menu', banhji.view.menu);
            banhji.view.menu.showIn('#secondary-menu', banhji.view.retailTradingMenu);

            var vm = banhji.retailTradingReportCenter;
            banhji.userManagement.addMultiTask("Retail Trading Reports Center","retail_trading_report_center",null);
            if(banhji.pageLoaded["retail_trading_report_center"]==undefined){
                banhji.pageLoaded["retail_trading_report_center"] = true;
            }

            vm.pageLoad();
        }
    });



    /*************************************************
    *   DOCUMENT ROUTER                              *
    *************************************************/
    banhji.router.route("/documents", function(){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
                if(banhji.accessMod.data().length > 0) {
                    for(var i = 0; i < banhji.accessMod.data().length; i++) {
                        if("documents" == banhji.accessMod.data()[i].name.toLowerCase()) {
                            banhji.view.layout.showIn("#content", banhji.view.documents);
                            //banhji.view.layout.showIn('#menu', banhji.view.menu);
                            //banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);

                            var vm = banhji.fileManagement;
                            banhji.userManagement.addMultiTask("Attached Documents","documents",null);
                            if(banhji.pageLoaded["documents"]==undefined){
                                banhji.pageLoaded["documents"] = true;
                            }
                            vm.dataSource.read();
                            vm.dataSource.bind('requestEnd', function(e){
                                if(e.type == 'read') {
                                    vm.set('contactNu', e.response.contactNumber);
                                    vm.set('contactSize', kendo.toString(e.response.contactSize, "n2"));
                                    vm.set('transactionNu', e.response.transactionNumber);
                                    vm.set('transactionSize', kendo.toString(e.response.transactionSize, "n2"));
                                    vm.set('totalSize', kendo.toString(e.response.total, 'n2'));
                                    vm.set('allowSize', kendo.toString(e.response.allowedSize, 'n2'));
                                }
                            });
                            break;
                        }
                    }
                } else {
                    window.location.replace(baseUrl + "admin");
                }
            }
        );
        // if(!checkRole("documents")){
        //  window.location.replace(baseUrl + "admin");
        // }else{
        //  banhji.view.layout.showIn("#content", banhji.view.documents);
        //  //banhji.view.layout.showIn('#menu', banhji.view.menu);
        //  //banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);

        //  var vm = banhji.fileManagement;
        //  banhji.userManagement.addMultiTask("Attached Documents","documents",null);
        //  if(banhji.pageLoaded["documents"]==undefined){
        //      banhji.pageLoaded["documents"] = true;
        //  }
        //  vm.dataSource.read();
        //  vm.dataSource.bind('requestEnd', function(e){
        //      if(e.type == 'read') {
        //          vm.set('contactNu', e.response.contactNumber);
        //          vm.set('contactSize', e.response.contactSize);
        //          vm.set('transactionNu', e.response.transactionNumber);
        //          vm.set('transactionSize', e.response.transactionSize);
        //          vm.set('totalSize', e.response.total);
        //      }
        //  });
        // }
    });


    /*************************************************
    *   RICE MILL ROUTER                             *
    *************************************************/



    /*************************************************
    *   IMPORT ROUTER                                *
    *************************************************/
    banhji.router.route("/imports", function(){
        banhji.view.layout.showIn("#content", banhji.view.imports);

        if(banhji.pageLoaded["imports"]==undefined){
            banhji.pageLoaded["imports"] = true;

            banhji.importTxn.pageLoad();
        }
    });

    /*************************************************
    *   Mobile Sell ROUTER                           *
    *************************************************/
    banhji.router.route("/mobile_sell(/:id)", function(id){
        banhji.accessMod.query({
            filter: {field: 'username', value: JSON.parse(localStorage.getItem('userData/user')).username}
        }).then(function(e){
            var allowed = false;
            if(banhji.accessMod.data().length > 0) {
                for(var i = 0; i < banhji.accessMod.data().length; i++) {
                    if("products/services" == banhji.accessMod.data()[i].name.toLowerCase()) {
                        allowed = true;
                        break;
                    }
                }
            }
            if(allowed) {
                banhji.view.layout.showIn("#content", banhji.view.mobileSell);
                banhji.view.layout.showIn('#menu', banhji.view.menu);
                //banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

                var vm = banhji.mobileSell;

                banhji.userManagement.addMultiTask("Mobile Sell","mobile_sell",null);

                if(banhji.pageLoaded["mobile_sell"]==undefined){
                    banhji.pageLoaded["mobile_sell"] = true;
                }

                vm.pageLoad(id);
            } else {
                window.location.replace(baseUrl + "admin");
            }
        });
    });


    $(function() {
        banhji.router.start();
        banhji.source.pageLoad();
        console.log($(location).attr('hash').substr(1));

        var cognitoUser = userPool.getCurrentUser();
        cognitoUser.getSession(function(err, session) {
            if(session) {
                // window.location.replace(baseUrl + "rrd/");
            } else {
                window.location.replace(baseUrl + "login/");
            }
        });

        function createCookie(name,value,days) {
            if (days) {
                var date = new Date();
                date.setTime(date.getTime()+(days*24*60*60*1000000000000000));
                var expires = "; expires="+date.toGMTString();
            }
            else var expires = "";
            document.cookie = name+"="+value+expires+"; path=/";
        }
        function readCookie(name) {
            var nameEQ = name + "=";
            var ca = document.cookie.split(';');
            for(var i=0;i < ca.length;i++) {
                var c = ca[i];
                while (c.charAt(0)==' ') c = c.substring(1,c.length);
                if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
            }
            return null;
        }
        function eraseCookie(name) {
            createCookie(name,"");
        }
    });
</script>