<div id="wrapperApplication" class="container-fluid"></div>
<!-- template section starts -->
<script type="text/x-kendo-template" id="layout">
	<div id="menu"></div>			
	<div id="content" class="row-fluid"></div>
</script>
<script type="text/x-kendo-template" id="blank-tmpl">
</script>
<script type="text/x-kendo-template" id="menu-tmpl">
	<div class="menu-hidden sidebar-hidden-phone menu-left hidden-print">
		<div class="navbar main" id="main-menu">
			<ul class="topnav">
				<li><a href="#"><img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/banhji-logo.png" style="height: 40px;"></a></li>
			</ul>
			<form class="navbar-form pull-left">
				<div class="btn-group">
				  	<a class="btn btn-inverse dropdown-toggle" data-toggle="dropdown" href="#">
				    	<i class="icon-th"></i>
				    	<span class="caret"></span>
				  	</a>
				  	<ul class="dropdown-menu">
				    	<li data-bind="click: searchContact"><a href="#"><i class="icon-user"></i> Contact</a></li>
				    	<li data-bind="click: searchTransaction"><a href="#"><i class="icon-random"></i> Transaction</a></li>
				    	<li data-bind="click: searchItem"><a href="#"><i class="icon-th-list"></i> Item</a></li>
				  	</ul>
				</div>
			  	<input type="text" class="span2 search-query" placeholder="Search Contact" id="search-placeholder" style="background-color: #555555; color: #ffffff; border-color: #333333; height: 22px;">
			  	<button type="submit" class="btn btn-inverse" data-bind="click: searchBotton"><i class="icon-search"></i></button>
			</form>
			<ul class="topnav" id="secondary-menu">
			</ul>
			<ul class="topnav pull-right">
				<li role="presentation" class="dropdown">
			  		<a class="dropdown-toggle" data-toggle="dropdown" href="#" role="button" aria-haspopup="true" aria-expanded="false">[<span data-bind="text: getUsername"></span>] <span class="caret"></span></a>
		  			<ul class="dropdown-menu">  				  				
		  				<li><a href="#" data-bind="click: lang.changeToKh">ភាសាខ្មែរ</a></li>
    					<li><a href="#" data-bind="click: lang.changeToEn">English</a></li>
						<li class="divider"></li>	
						<li><a href="#/manage" data-bind="click: logout"><i class="icon-power-off"></i> Logout</a></li> 				
		  			</ul>
			  	</li>
				
			</ul>
		</div>
	</div>
</script>
<script type="text/x-kendo-template" id="menu-search-contact-tmpl">
	Contact
</script>
<script type="text/x-kendo-template" id="menu-search-transaction-tmpl">
	Transaction
</script>
<script type="text/x-kendo-template" id="menu-search-item-tmpl">
	Item
</script>
<script type="text/x-kendo-template" id="index">
	<div class="row">
		<div class="span6">
			<div class="row">
				<div class="span12" style="padding-left: 0; margin-left: 0; margin-top: 0;">
					<ul id="module-image">
						<li style="text-align:center;">
							<a href="#/customers">
								<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/customers.png" alt="Customer">
							</a>
							<span style="margin-top: 5px; font-size: 14px; font-weight: bold; color: #000000"><span data-bind="text: lang.lang.customer"></span></span>
						</li>
						<li style="text-align:center;">
							<a href="#/employees">
								<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/employee.png" alt="Employee">
							</a>
							<span style="margin-top: 5px; font-size: 14px; font-weight: bold; color: #000000"><span data-bind="text: lang.lang.employee"></span></span>
						</li>
						<li style="text-align:center;">
							<a href="#/vendors">
								<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/supplier.png" alt="Vendor">
							</a>
							<span style="margin-top: 5px; font-size: 14px; font-weight: bold; color: #000000"><span data-bind="text: lang.lang.vendor"></span></span>
						</li>
						<li style="text-align:center;">
							<a href="#/inventories">
								<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/inventory.png" alt="Inventory">
							</a>
							<span style="margin-top: 5px; font-size: 14px; font-weight: bold; color: #000000"><span data-bind="text: lang.lang.inventory"></span></span>
						</li>
					</ul>
					<ul id="module-image">
						<li style="text-align:center;">
							
								<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/1.png" alt="Cash Management">
							
							<span style="margin-top: 5px; font-size: 14px; font-weight: bold; color: #000000"><span data-bind="text: lang.lang.cashier"></span></span>
						</li>
						<li style="text-align:center;">
							<a href="#/accounts">
								<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/accounting.png" alt="Customer">							
								<span style="margin-top: 5px; font-size: 14px; font-weight: bold; color: #000000"><span data-bind="text: lang.lang.accounting"></span></span>
							</a>
						</li>
						<li style="text-align:center;">
							
								<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/report.png" alt="Vendor">
							
							<span style="margin-top: 5px; font-size: 14px; font-weight: bold; color: #000000"><span data-bind="text: lang.lang.report"></span></span>
						</li>
						<li style="text-align:center;">
							<a href="<?php echo base_url(); ?>admin">
								<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/setting.png" alt="Admin">
								<span style="margin-top: 5px; font-size: 14px; font-weight: bold; color: #000000"><span data-bind="text: lang.lang.settings"></span></span>
							</a>
						</li>
					</ul>
				</div>
				
				<div class="span12" style="padding-left: 0; margin-left: 0; margin-top: 30px;">
					<h4 style="margin-left: 35px; width: 450px;"><span data-bind="text: lang.lang.subcribed_industry_modules"></span></h4>
					<ul id="module-image">
						<li style="text-align:center;">
							<a href="#">
								<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/web_store.png" alt="Customer">
							</a>
							<span style="margin-top: 5px; font-size: 14px; font-weight: bold; color: #000000"><span data-bind="text: lang.lang.web_store"></span></span>
						</li>
						<li style="text-align:center;">
							<a href="#">
								<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/services.png" alt="Service">
							</a>
							<span style="margin-top: 5px; font-size: 14px; font-weight: bold; color: #000000"><span data-bind="text: lang.lang.service"></span></span>
						</li>
						<li style="text-align:center;">
							<a href="#">
								<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/attach_file.png" alt="Attachment">
							</a>
							<span style="margin-top: 5px; font-size: 14px; font-weight: bold; color: #000000"><span data-bind="text: lang.lang.attachment"></span></span>
						</li>
						<li style="text-align:center;">
							<a href="#">
								<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/tax.png" alt="Inventory">
							</a>
							<span style="margin-top: 5px; font-size: 14px; font-weight: bold; color: #000000"><span data-bind="text: lang.lang.tax"></span></span>
						</li>
					</ul>	
				</div>
			</div>	
		</div>
		<div class="span6">
			<div class="row">
				<div class="span12">
					<div>fjdsklfj</div>
				</div>
			</div>
			<div class="row" style="background-color: #ffffff;">
				<div class="span8" style="margin-left:25px; margin-top: 10px;">
					<h4 data-bind="text: companyName"></h4>
					<h2 style="color: #113051;">Financial Snapshot</h2>
					<span style="color: #000000;">As of:&nbsp;<span id="today-date" data-bind="text: curDate"></span></span><br/>
				</div>
				<div class="span12"><hr/></div>
				
				</div>
				<div class="span11">
					
					<div style="height: 300px;" id="index-income-graph"></div>
				</div>
				
				<div class="span12">
					<div class="row">
						<div class="padding-bottom-none-phone span6">
							<a href="" class="widget-stats widget-stats-primary widget-stats-4">
								<span class="txt"><span data-bind="text: lang.lang.cash_balance"></span></span>
								<span class="count" style="font-size: 25px;" data-bind="text: cashBal"></span>
								<div class="clearfix"></div>
								<i class="icon-play-circle"></i>
							</a>
						</div>
						<div class="padding-bottom-none-phone span6">
							<a href="" class="widget-stats widget-stats-primary widget-stats-4">
								<span class="txt"><span data-bind="text: lang.lang.total_sale"></span></span>
								<span class="count" style="font-size: 25px;" data-bind="text: totalSale"></span>
								<div class="clearfix"></div>
								<i class="icon-play-circle"></i>
							</a>
						</div>
					</div>						
				</div>
				<br>
				<div class="span12">
					<div class="widget widget-heading-simple widget-body-simple">		
		
						<div class="widget-body">

							<!-- Row -->
							<div class="row-fluid">
								<div class="span3">
								
									<!-- Stats Widget -->
									<a href="" class="widget-stats widget-stats-gray widget-stats-1">
										<span class="txt"><span data-bind="text: lang.lang.open_invoice"></span></span>
										<div class="clearfix"></div>
										<span class="count" data-bind="text: totalOpenInvoice"></span>
									</a>
									<!-- // Stats Widget END -->
									
								</div>
								<div class="span3">
								
									<!-- Stats Widget -->
									<a href="" class="widget-stats widget-stats-1">
										<span class="txt"><span data-bind="text: lang.lang.unpaid_bill"></span></span>
										<div class="clearfix"></div>
										<span class="count" data-bind="text: totalUnbill"></span>
									</a>
									<!-- // Stats Widget END -->
									
								</div>
								<div class="span3">
								
									<!-- Stats Widget -->
									<a href="" class="widget-stats widget-stats-gray widget-stats-2">
										<span class="count" data-bind="text: totalCustomer"></span>
										<span class="txt"><span data-bind="text: lang.lang.customers"></span></span>
									</a>
									<!-- // Stats Widget END -->
									
								</div>
								<div class="span3">
								
									<!-- Stats Widget -->
									<a href="" class="widget-stats widget-stats-2">
										<span class="count" data-bind="text: totalOrder"></span>
										<span class="txt"><span data-bind="text: lang.lang.order"></span></span>
									</a>
									<!-- // Stats Widget END -->
									
								</div>								
							</div>
							<!-- // Row END -->
							
						</div>
					</div>

				</div>
			</div>
		</div>
	</div>

	<div class="row-fluid">
		<div style="margin-top: 10px; margin-left: 0;" align="center">
			<p>© 2016 BanhJi PTE. Ltd. All rights reserved.</p>
		</div>	
	</div>		
</script>

<!-- employee section -->
<script type="text/x-kendo-template" id="employee-section-tmpl">
	<div class="widget widget-heading-simple widget-body-white widget-employees">				
		<div class="widget-body padding-none">	
			<div class="row-fluid row-merge">
				<div class="span3 listWrapper" style="height: 755px;">
					<div class="innerAll">
						<form autocomplete="off" class="form-inline">
							<div class="widget-search separator bottom">
								<button type="button" class="btn btn-default pull-right" id="search" data-bind="click: findVendor"><i class="icon-search"></i></button>
								<div class="overflow-hidden">
									<input type="search" data-bind="value: key" placeholder="Search" id="searchField">
								</div>
							</div>
						</form>
					</div>
					<span class="results" data-bind="text: dataSource.total"></span>
					<div class="table table-condensed" id="sidebar" style="width: 292px"
						 data-role="grid" data-bind="source: dataSource" 
						 data-row-template="employee-list-section-tmpl"
						 data-columns="[{title: 'Name'}]"
						 data-selectable=true
						 data-height="655"
						 data-pageable="true"
						 data-scrollable="{virtual: true}"></div>
				</div>
				<div class="span9 innerAll">
					<div id="employeeDashboard" class="row" style="margin-left: 5px;"></div>					
				</div>
			</div>	
		</div>
	</div>
</script>
<script type="text/x-kendo-template" id="employee-section-dashboard-tmpl">
	<div class="row">
		
		<div class="span12 innerL">
			<div class="row">
				<div class="span6">
					<a href="#/cash_advance">
					<div class="widget-stats widget-stats-inverse widget-stats-5">
						<span class="glyphicons briefcase"><i></i></span>
						<span class="txt" style="font-size: 10pt">Cash Advance<span data-bind="text: poNum" ></span></span>
						<div class="clearfix"></div>
					</div>
					</a>
				</div>
				<div class="span6">
					<a href="#/expense">
					<div class="widget-stats widget-stats-primary widget-stats-5" data-bind="click: doNothing">
						<span class="glyphicons coins"><i></i></span>
						<span class="txt" style="font-size: 10pt">Expense<span style="font-size: 17px;" data-bind="text: monthlyExpense"></span></span>
						<div class="clearfix"></div>
					</div>
					</a>
				</div>
			</div>			
		</div>
	</div><br/>
	<div class="row">
		<div class="span12">
			<div style="text-align: center;">
				<input type="text" data-role="dropdownlist" data-bind="source: dateType, events: {change: dateTypeSelect}" data-index="1" class="dateSelect" />
				<input type="text" data-role="datepicker" data-bind="value: startDate, events: {change: dateChange}"/>
				<input type="text" data-role="datepicker" data-bind="value: endDate" />
				<span data-bind="click: filterBill" class="k-button" data-role="button"><i class="icon-search"></i></span>
			</div>
		</div><br/>
		<div class="well span12">
			<div data-role="grid" class='table table-white table-condensed' 
	    		     data-bind="source: billDS"
	    		     data-columns="[
	    		     	{title: '<i class=icon-th-list></i>', width: '30px'},
	    		     	{field: 'type', title: 'Type', width: '90px'},
	    		     	{field: 'invoice_number', title: 'Reference', width: '120px'},
	    		     	{field: 'amount', title: 'Amount'},
	    		     	{field: 'paid', title: 'Paid'},
	    		     	{title: 'Over Due', width: '100px'},
	    		     	{field: 'status', title: 'Status', width: '100px'},
	    		     	{field: 'due_date', title: 'Due Date', width: '90px'},
	    		     	{field: '&nbsp;', title: 'Action'}
	    		     ]"
	    		     data-height="370"
	    		     data-pageable="{
	    		     	numeric: false,
	    		     	messages: {
	    		     		display: 'Disply {0}-{1} of {2}',
	    		     		empty: 'There is no data'
	    		     	}
	    		     }"
	    		     data-selectable=true
	    		     data-no-records="true"
	    		     data-messages="{noRecords: 'There is no data'}"
	    		     data-row-template="vendor-single-bill-list-tmpl"
	    		     >
	    		</div>
		</div>
	</div>			
</script>
<script type="text/x-kendo-template" id="employee-list-section-tmpl">
	<tr><td>#=surname# #=name#</td></tr>
</script>
<!-- employee section-->


<!-- DAWINE ================================================================================================================================= -->

<!-- ***************************
 *	Accounting Section        *
**************************** -->
<script id="journal" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">				
					
			    <div class="hidden-print">
			    	<div class="pull-right">

			    		<span class="glyphicons no-js remove_2" 
							data-bind="click: cancel"><i></i></span>						
					</div>

			        <h2>JOURNAL ENTRY</h2>				        				        				        	
			    </div>			   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 150px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>
								<tr>
									<td>Type</td>
									<td>
										<input id="ddlType" name="ddlType"
											   data-role="dropdownlist"								                   
							                   data-value-primitive="true"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.journal_type,
							                              source: types"							                   
							                   data-option-label="(--- Select ---)"
							                   required data-required-msg="required" 
							                   style="width: 100%;" />
									</td>
								</tr>
								<tr>
									<td>Currency</td>
									<td>
										<input id="cbbCurrency" name="cbbCurrency"
												data-bind="value: obj.locale,
							                              events:{change:setRate}" 
							                    placeholder="Select currency ..." 
							                    required data-required-msg="required" 
							                    style="width: 100%;" />
									</td>
								</tr>									
							</table>
						</div>
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 150px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						            <li class="span3 glyphicons pencil active"><a href="#tab1-3" data-toggle="tab"><i></i> Memo</a>
						            </li>
						            <li class="span3 glyphicons paperclip"><a href="#tab2-3" data-toggle="tab"><i></i> Attach</a>
						            </li>
						            <li class="span3 glyphicons history"><a href="#tab3-3" data-toggle="tab"><i></i> Recuring</a>
						            </li>								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						        <!-- Memo Tab content -->
						        <div class="tab-pane active" id="tab1-3">
						        	<textarea id="memo2" cols="0" rows="4" class="k-textbox" 
						        		data-bind="value: obj.memo2" style="width:100%;" 
						        		placeholder="Please enter transaction purpose here ..."></textarea>
						        </div>
						        <!-- // Memo Tab content END -->

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab2-3">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab3-3">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->								        

						    </div>
						</div>

				    </div>
				</div>

				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th style="width: 1%;">No.</th>
			                <th style="width: 20%;">ACCOUNT</th>
			                <th>DESCRIPTION</th>
			                <th data-bind="visible: showRef" style="width: 7%;">REF</th>
			                <th data-bind="visible: showName" style="width: 15%;">NAME</th>
			                <th data-bind="visible: showSegment" style="width: 15%;">SEGMENT</th>
			                <th style="width: 15%;">DEBITS (Dr)</th>
			                <th style="width: 15%;">CREDITS (Cr)</th>			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview"
			        		data-template="journal-template" 
			        		data-auto-bind="false"
			        		data-bind="source: lineDS"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span6 hidden-print">
						
						<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>												

						<div class="btn-group">
							<div class="leadcontainer">
								
							</div>
							<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
							<ul class="dropdown-menu" style="padding-left: 10px">
								<li>
									<input type="checkbox" data-bind="checked: showRef" /> REF
								</li>
								<li>
									<input type="checkbox" data-bind="checked: showName" /> NAME
								</li>
								<li>
									<input type="checkbox" data-bind="checked: showSegment" /> SEGMENT
								</li>								
							</ul>
						</div>

						<span class="btn btn-default">Add New Account</span>						
						
					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span6">
						<div class="box-generic">						
							<div class="row-fluid row-merge">
								<div class="span6">
									<div class="center">
										<h5 class="strong muted text-uppercase">Total Debit</h5>
										<span class="text-large strong text-primary" data-bind="text: dr"></span>
									</div>
								</div>
								<div class="span6">
									<div class="center muted">
										<h5 class="strong muted text-uppercase">Total Credit</h5>
										<span class="text-large strong" data-bind="text: cr"></span>
									</div>
								</div>
							</div>
						</div>
					</div>
					<!-- // Column END -->
					
				</div>
	           
	            <br>
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>										
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>
					<span class="btn btn-icon btn-warning glyphicons remove_2" data-bind="click: cancel" style="width: 80px;"><i></i> Cancel</span>
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="journal-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td class="center">
			<i class="icon-trash" data-bind="events: { click: remove }"></i>
			#:banhji.journal.lineDS.indexOf(data)+1#			
		</td>		
		<td>
			<input id="cbbAccounts" name="cbbAccounts" 
				   data-role="combobox"                   
                   data-value-primitive="true"
                   data-template="journal-account-list-tmpl"
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: account_id,
                              source: accountDS"
                   data-placeholder="Add Account.."                                     
                   required data-required-msg="required" style="width: 100%" />	
		</td>		
		<td>
			<input name="description" 
					type="text" class="k-textbox" 
					data-bind="value: description"					
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td data-bind="visible: showRef">
			<input type="text" class="k-textbox" 
					data-bind="value: reference_no"				
					style="width: 100%; margin-bottom: 0;" />		
		</td>					
		<td data-bind="visible: showName">
			<input data-role="combobox"                   
                   data-value-primitive="true"
                   data-template="journal-contact-list-tmpl"
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: contact_id,
                              source: contactDS"
                   data-placeholder="Add Name.."                    
                   style="width: 100%" />
		</td>		
		<td data-bind="visible: showSegment">
			<select data-role="multiselect"
				   data-value-primitive="true"				   
				   data-item-template="journal-segment-tmpl"				    
				   data-value-field="id" 
				   data-text-field="code"
				   data-bind="value: segments, 
				   			source: segmentItemDS,
				   			events:{ change: segmentChanges }"
				   data-placeholder="Add Segment.."				   
				   style="width: 100%" /></select>					
		</td>
		<td class="right">
			<input id="ntbDr" name="ntbDr" 
					data-role="numerictextbox" 
					data-format="n0" 
					data-bind="value: dr, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" /> 						
		</td>
		<td class="right">
			<input id="ntbCr" name="ntbCr" 
					data-role="numerictextbox" 
					data-format="n0" 
					data-bind="value: cr, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" />										
		</td>		
    </tr>   
</script>
<script id="journal-account-list-tmpl" type="text/x-kendo-template">
	<span>
		#=code# #=name#
	</span>
</script>
<script id="journal-contact-list-tmpl" type="text/x-kendo-template">
	<span>
		#=number# #=surname# #=name#
	</span>
</script>
<script id="journal-segment-tmpl" type="text/x-kendo-template">
	<span>
		#=name# (#=segment.name#)
	</span>
</script>
<script id="journal-tooltip-template" type="text/x-kendo-template">
    Journal entries transaction records are used for <br>
	mainly non-cash transactions and specific trasactions <br> 
	that requires accounting knowledge. Those transactions <br>
	include: correcting entries, adjustments, opening balance, <br>
	closing balance, reclassification, accraul, depreciation, and others
</script>

<script id="currencyRate" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">

				<!-- Collapsible Widget -->			
				<div class="widget">
				    <div class="widget-head">
				    	<span class="btn btn-primary pull-right" 
								onclick="javascript:window.history.back()">X</span>
				        
				        <h4 class="heading glyphicons notes"><i></i>Exchange Rate</h4>							        	
				    </div>
				    <div class="widget-body">

				    	<div class="row-fluid">
					    	<div class="span6 alert alert-primary">Company currency: <span data-bind="text: baseCode"></span> </div>
					    	<div class="span6 alert alert-primary">Reporting currency: <span data-bind="text: reportCode"></span> </div>
				    	</div>

				    	<div class="hidden-print well">
				    		<input id="cbbCurrency" placeholder="Select currency ..." style="width: 300px;" />

				            <input id="sorter" name="sorter"
					    	   data-role="dropdownlist"                   
					           data-value-primitive="true"
					           data-text-field="text"
					           data-value-field="value"
					           data-bind="value: sorter,
					                      source: sortList" />
					                                   
					        <input id="sdate" name="sdate"						           
					           data-bind="value: sdate"
					           placeholder="From ..." />
					        
					       	<input id="edate" name="edate"						           
					           data-bind="value: edate"
					           placeholder="To ..." />

				            <button id="search" type="button" data-role="button"><i class="icon-search"></i></button>
			          		|
							<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>							
				    	</div>						

						<div align="center">
							<span id="strDate"></span>
						</div>

						<br>					
						
						<button class="btn btn-inverse hidden-print" data-bind="click: openWindow"><i class="icon-plus icon-white"></i> Add New Rate</button>
						&nbsp;
						<span class="hidden-print">Please click on the column header to sort based on currency.</span>

						<div data-role="grid"
							 data-sortable="true"							 
							 data-row-template="currencyRate-row-template"			                
			                 data-columns="[
                                { 'field': 'date', 'title':'Date', width: 90 },
                                { 'field': 'currency_id', 'title':'Code', width: 60 },
                                { 'field': 'currency_id', 'title':'Country' },
                                { 'field': 'rate', 'title':'Rate', width: 140 },
                                { 'field': 'source', 'title':'Source', width: 70 },
                                { 'field': 'method', 'title':'Method', width: 70 },
                                { 'title':'', width: 130 }
                             ]"
			                 data-bind="source: dataSource"></div>

			            <div data-role="pager" 
						    	data-auto-bind="false"
					            data-bind="source: dataSource"></div>

					    <span id="notification"></span>

					    <div id="window" data-role="window" data-visible="false" data-modal="true" data-resizable="false" data-iframe="true">				    	
							<table class="table table-borderless table-condensed cart_total" style="width: 400px;">
								<tr>
									<td>										
								    	<input data-role="combobox"
							                   data-placeholder="Select Currency"
							                   data-value-primitive="true"
							                   data-text-field="code"
							                   data-value-field="id"
							                   data-template="currencyRate-currency-template"
							                   data-bind="value: obj.locale,
							                              source: currencyDS"
							                   style="width: 100%" />
						            </td>
				            	</tr>
				            	<tr>
									<td>
						                <input id="date" name="date" 
						            		data-role="datepicker"			            		
				        					data-bind="value: obj.date" 
				        					data-format="dd-MM-yyyy"
				        					data-parse-formats="yyyy-MM-dd" 
				        					placeholder="dd-MM-yyyy" required data-required-msg="required"
				        					style="width: 100%" />
				        			</td>
				            	</tr>
				            	<tr>
									<td>
				        				<input type="textbox" class="k-textbox" 		                   
						                   data-bind="value: obj.rate"
						                   placeholder="Rate(per 1 unit of base currency) ..."
						                   style="width: 100%" />
						            </td>
				            	</tr>
			                </table>

			                <p>
			                	Note: The exchange rate here is equivalent to 1 unit of base currency.
			                </p>			               
				            
				            <div align="center">
								<span class="btn btn-success btn-icon glyphicons ok_2" data-bind="click: save"><i></i>Save</span>
								<span class="btn btn-danger btn-icon glyphicons remove_2" data-bind="click: closeWindow"><i></i>Close</span>
							</div>					  
						</div>						

					</div> <!-- End Widget-Body List -->
				</div>
				<!-- // Collapsible Widget END -->

			</div>							
		</div>
	</div>
</script>
<script id="currencyRate-row-template" type="text/x-kendo-tmpl">		
	<tr>			
		<td>#=kendo.toString(new Date(date), "dd-MM-yyyy")#</td>		
		<td>#=currency.length>0?currency[0].code:""#</td>
		<td>#=currency.length>0?currency[0].country:""#</td>
		<td align="right">#=rate#</td>					
		<td>#=source#</td>
		<td>#=method#</td>				
		<td>
			<span data-bind="click: edit"><i class="icon-edit"></i> Edit</span>
    		|
    		<span data-bind="click: delete"><i class="icon-remove"></i> Delete</span>			
		</td>		
    </tr>   
</script>
<script id="currencyRate-currency-template" type="text/x-kendo-template">	
	#=code# #=country#
</script>

<script id="recurring" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">				
					
			    <div class="hidden-print">
			    	<div class="pull-right">

			    		<span class="glyphicons no-js remove_2" 
							data-bind="click: cancel"><i></i></span>						
					</div>

			        <h2>RECURING TRANSACTION LISTS</h2>				        				        				        	
			    </div>

			    <br>			   
			   
				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th style="width: 1%;">No.</th>
			                <th style="width: 30%">NAME</th>
			                <th class="center" style="width: 10%">TYPE</th>
			                <th class="center">START DATE</th>
			                <th class="center">FREQUENCY</th>
			                <th></th>			                			                
			            </tr> 
			        </thead>
			        <tbody data-template="recurring-template"
			        		data-auto-bind="false"			        		
			        		data-bind="source: dataSource"></tbody>			        
			    </table>											

			</div>							
		</div>
	</div>
</script>
<script id="recurring-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td class="center">			
			#:banhji.recurring.dataSource.indexOf(data)+1#			
		</td>		
		<td>#=recurring_name#</td>
		<td class="center">#=type#</td>		
		<td class="center">#=kendo.toString(start_date, "dd-MMMM-yyyy")#</td>
		<td class="center">#=frequency#</td>
		<td class="right">
			<span class="btn btn-success btn-icon glyphicons notes" data-bind="click: goToTemplate" style="width: 80px;"><i></i> Template</span>
			<span class="btn btn-danger btn-icon glyphicons delete" data-bind="click: delete" style="width: 80px;"><i></i> Delete</span>
		</td>
    </tr>   
</script>

<script id="journalReport" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-fluid">					
			<div id="example" class="k-content">

		    	<div class="hidden-print well">
		    		<span class="glyphicons no-js remove_2 pull-right" 
							onclick="javascript: window.history.back()"><i></i></span>	    		

		            <input id="sorter" name="sorter"
			    	   data-role="dropdownlist"                   
			           data-value-primitive="true"
			           data-text-field="text"
			           data-value-field="value"
			           data-bind="value: sorter,
			                      source: sortList" />
			                                   
			        <input id="sdate" name="sdate"						           
				           data-bind="value: sdate"
				           placeholder="From ..." />
			        
			       	<input id="edate" name="edate"						           
				           data-bind="value: edate"
				           placeholder="To ..." />

		            <button id="search" type="button" data-role="button"><i class="icon-search"></i></button>
	          		|
					<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>
					|					
				    <div class="btn-group dropdown">
				        <button class="dropdown-toggle" data-toggle="dropdown">Sort <span class="caret"></span></button>
				        <ul class="dropdown-menu">
				            <li>
				            	<span class="btn btn-block btn-primary" data-bind="click: sort">TYPE</span>				            	
				            </li>
				            <li>
				            	<span class="btn btn-block btn-info" data-bind="click: sort">DATE</span>
				            </li>
				            <li>
				            	<span class="btn btn-block btn-primary" data-bind="click: sort">ACCOUNT</span>
				            </li>				            			           				            				            
				        </ul>
				    </div>
									
		    	</div>						

				<div align="center">
					<h3>JOURNAL REPORT</h3>
					<span id="strDate"></span>
				</div>

				<br>

				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th>TYPE</th>
			                <th>DATE</th>
			                <th>TXN#</th>			                
			                <th>TXN DESCRIPTION</th>
			                <th>ACCOUNT</th>			                		                
			                <th>DEBITS (Dr)</th>
			                <th>CREDITS (Cr)</th>			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview"
			        		data-template="journalReport-template"			        		
			        		data-bind="source: dataSource"></tbody>			        
			    </table>

	            <div data-role="pager" data-bind="source: dataSource"></div>					  

			</div>							
		</div>
	</div>
</script>
<script id="journalReport-template" type="text/x-kendo-tmpl">
	#var sumDr =0, sumCr = 0;#
	#for(var i=0; i<line.length; i++){#
	#sumDr += line[i].dr / line[i].rate;#
	#sumCr += line[i].cr / line[i].rate;#
	<tr>
		<td style="color: black;">
			#if(i==0){#
				#if(type=="Invoice" || type=="Cash_Sale" || type=="Sale_Order" || type=="GDN" || type=="Sale_Return" || type=="Purchase_Return" || type=="Cash_Advance" || type=="Cash_Receipt" || type=="Cash_Payment" || type=="Expense" || type=="Journal"){#
					<a href="\#/#=type.toLowerCase()#/#=id#"><i></i> #=type#</a>					
				#}else if(type=="Cash_Purchase" || type=="Credit_Purchase"){#
					<a href="\#/purchase/#=id#"><i></i> #=type#</a>
				#}else if(type=="Deposit" || type=="Witdraw" || type=="Transfer"){#
					<a href="\#/cash_transaction/#=id#"><i></i> #=type#</a>				
				#}else{#
					#=type#
				#}#
			#}#
		</td>		
		<td style="color: black;">
			#if(i==0){#
				#=kendo.toString(new Date(issued_date), "dd-MMMM-yyyy")#
			#}#
		</td>
		<td style="color: black;">
			#if(i==0){#
				#if(type=="Invoice" || type=="Cash_Sale" || type=="Sale_Order" || type=="GDN" || type=="Sale_Return" || type=="Purchase_Return" || type=="Cash_Advance" || type=="Cash_Receipt" || type=="Cash_Payment" || type=="Expense" || type=="Journal"){#
					<a href="\#/#=type.toLowerCase()#/#=id#"><i></i> #=number#</a>					
				#}else if(type=="Cash_Purchase" || type=="Credit_Purchase"){#
					<a href="\#/purchase/#=id#"><i></i> #=number#</a>
				#}else if(type=="Deposit" || type=="Witdraw" || type=="Transfer"){#
					<a href="\#/cash_transaction/#=id#"><i></i> #=number#</a>				
				#}else{#
					#=type#
				#}#
			#}#
		</td>		
		<td style="color: black;">
			#if(i==0){#
				#=memo#
			#}#
		</td>
		<td style="color: black;">#=line[i].account[0].name#</td>			
		<td class="right" style="color: black;">
			#if(line[i].dr>0){#
				#=kendo.toString(line[i].dr / line[i].rate, "c0", banhji.institute.locale)#
			#}#
		</td>
		<td class="right" style="color: black;">
			#if(line[i].cr>0){#
				#=kendo.toString(line[i].cr / line[i].rate, "c0", banhji.institute.locale)#
			#}#
		</td>		
    </tr>    
    #}# 
    <tr>
    	<td style="color: black;">Total:</td>
    	<td></td>    	
    	<td></td>
    	<td></td>
    	<td></td>    	
    	<td class="right strong" style="border-top-color: black; color: black;">
    		#=kendo.toString(sumDr, "c0", banhji.institute.locale)#
    	</td>
    	<td class="right strong" style="border-top-color: black; color: black;">
    		#=kendo.toString(sumCr, "c0", banhji.institute.locale)#
    	</td>    	
    </tr>  
</script>

<script id="saleTax" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">

				<div class="hidden-print">
			    	<div class="pull-right">

			    		<span class="glyphicons no-js remove_2" 
							data-bind="click: cancel"><i></i></span>						
					</div>

			        <h2>TAX SETTING</h2>				        				        				        	
			    </div>			   

			    <br>
			    <div id="saleTax-window" data-role="window" data-visible="false" data-modal="true" data-resizable="false" data-iframe="true">				    	
						<table>
							<tr>
								<td>Tax System</td>
								<td>
									<input data-role="dropdownlist"				            			               			   		                   
					                   data-value-primitive="true"
					                   data-text-field="name"
					                   data-value-field="id"
					                   data-bind="value: obj.tax_system,
					                              source: typeList"
					                   style="width: 100%;" />
								</td>
							</tr>
							<tr>
								<td>Tax Registration No.</td>
								<td>
									<input class="k-textbox" placeholder="type number ..." data-bind="value: obj.number" style="width: 100%;">
								</td>
							</tr>
							<tr>
								<td>Agency</td>
								<td>
									<input class="k-textbox" placeholder="type agency ..." data-bind="value: obj.agency" style="width: 100%;">
								</td>
							</tr>
							<tr>
								<td>Name</td>
								<td>
									<input class="k-textbox" placeholder="type name ..." data-bind="value: obj.name" style="width: 100%;">
								</td>
							</tr>
							<tr>
								<td>Last End Date</td>
								<td>
									<input data-role="datepicker"
										data-format="dd-MM-yyyy"
										data-parse-formats="yyyy-MM-dd" 
										data-bind="value: obj.end_date"
										style="width: 100%;" />
								</td>
							</tr>
							<tr>
								<td>Last Submission Date</td>
								<td>
									<input data-role="datepicker"
										data-format="dd-MM-yyyy"
										data-parse-formats="yyyy-MM-dd" 
										data-bind="value: obj.submission_date"
										style="width: 100%;" />
							</td>
							</tr>
						</table>

						<br>

						<span class="btn btn-success btn-icon glyphicons ok_2" data-bind="click: save"><i></i>Save</span>
						<span class="btn btn-danger btn-icon glyphicons remove_2" data-bind="click: closeWindow"><i></i>Close</span>  
				</div>
				<button class="btn btn-inverse" data-bind="click: openWindow"><i class="icon-plus icon-white"></i></button>
					Set New Tax			
                <div class="row-fluid">
	                <div class="span12">	                					
		            	<table class="table table-condensed">
		            		<thead style="background-color: blue; color: #fff; font-weight: bold">
		            			<tr>
		            				<th>NUMBER</th>
		            				<th>NAME</th>
		            				<th>SYSTEM</th>
		            				<th>AGENCY</th>
		            				<th>END DATE</th>
		            				<th>SUBMISSION DATE</th>	            				
		            				<th></th>
		            			</tr>
		            		</thead>
		            		<tbody data-role="listview"			            			
					                data-template="saleTax-type-template"
					                data-bind="source: dataSource"></tbody>
		            	</table>
	            	</div>


            	<div id="item-window" data-role="window" data-visible="false" data-modal="true" data-resizable="false" data-iframe="true">				    	
					<table>
						<tr>
							<td>Item Name</td>
							<td>
								<input class="k-textbox" placeholder="type name ..." data-bind="value: item.name" style="width: 100%;">
							</td>
						</tr>
						<tr>
							<td>Item Rate</td>
							<td>
								<input data-role="numerictextbox"
				                   data-format="p"
				                   data-min="0"
				                   data-max="0.99"
				                   data-step="0.1"                   
				                   data-bind="value: item.rate"
				                   style="width: 100%;">
							</td>
						</tr>
						<tr>
							<td>Account</td>
							<td>
								<input id="ddlIncome" name="ddlIncome"
									data-bind="value: item.account_id" 
									required data-required-msg="required" style="width: 100%;" />
							</td>
						</tr>
						
					</table>

					<br>

					<span class="btn btn-success btn-icon glyphicons ok_2" data-bind="click: saveItem"><i></i>Save</span>
					<span class="btn btn-danger btn-icon glyphicons remove_2" data-bind="click: closeWindowItem"><i></i>Close</span>  
				</div>
				<div class="row-fluid">
	            	<div class="span8">		                	
					    <table class="table table-bordered table-white">
		            		<thead>
		            			<tr>
		            				<th>Name</th>
		            				<th>Rate</th>
		            				<th>Account</th>		            					            				
		            				<th></th>
		            			</tr>
		            		</thead>
		            		<tbody data-role="listview"			            				
					                data-template="saleTax-item-template"
					                data-auto-bind="false"
					                data-bind="source: itemDS"></tbody>
		            	</table>
	            	</div>
            	</div>
			</div>							
		</div>
	</div>
</script>
<script id="saleTax-type-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>#=number#</td>
    	<td>#=name#</td>
    	<td>#=tax_system#</td>
    	<td>#=agency#</td>
    	<td>#=kendo.toString(new Date(end_date), "dd-MM-yyyy")#</td>
    	<td>#=kendo.toString(new Date(submission_date), "dd-MM-yyyy")#</td>
    	<td>
    		<span data-bind="click: edit"><i class="icon-edit"></i> Edit</span>
    		|
    		<span data-bind="click: delete"><i class="icon-remove"></i> Delete</span>
    		|
    		<span data-bind="click: view"><i class="icon-view"></i> View Item</span>
    		|
    		<span data-bind="click: addItem"><i class="icon-plus icon-white"></i> Add Item</span>
    	</td>
   	</tr>
</script>
<script id="saleTax-item-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>#=name#</td>
    	<td>#=rate#</td>
    	<td>#=account[0].name#</td>     	 		
   		<td>
    		<span data-bind="click: editItem"><i class="icon-edit"></i> Edit</span>
    		|
    		<span data-bind="click: deleteItem"><i class="icon-remove"></i> Delete</span>
    	</td>
   	</tr>
</script>


<!-- ***************************
 *	Employee Section            *
**************************** -->
<script id="cashAdvance" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>CASH ADVANCE</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 150px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>								
								<tr>
									<td>Currency</td>
									<td>
										<input id="cbbCurrency" name="cbbCurrency"
												data-bind="value: obj.locale,
							                              events:{change:setRate}" 
							                    placeholder="Select currency ..." 
							                    required data-required-msg="required" 
							                    style="width: 100%;" />
									</td>
								</tr>
								<tr>
									<td>Employee</td>
									<td>
										<input id="cbbContact" name="cbbContact"
											   data-role="combobox"
											   data-auto-bind="false"                   
							                   data-value-primitive="true"
							                   data-template="cashAdvance-contact-list-tmpl"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.contact_id,
							                              source: contactDS"
							                   data-placeholder="Type Name.."                    
							                   required data-required-msg="required" style="width: 100%" />
									</td>
								</tr>																							
							</table>
						</div>
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 150px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						            <li class="span3 glyphicons pencil active"><a href="#tab1-3" data-toggle="tab"><i></i> Memo</a>
						            </li>
						            <li class="span3 glyphicons paperclip"><a href="#tab2-3" data-toggle="tab"><i></i> Attach</a>
						            </li>
						            <li class="span3 glyphicons history"><a href="#tab3-3" data-toggle="tab"><i></i> Recuring</a>
						            </li>								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						        <!-- Memo Tab content -->
						        <div class="tab-pane active" id="tab1-3">
						        	<textarea id="memo2" cols="0" rows="4" class="k-textbox" 
						        		data-bind="value: obj.memo2" style="width:100%;" 
						        		placeholder="Please enter transaction purpose here ..."></textarea>
						        </div>
						        <!-- // Memo Tab content END -->

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab2-3">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab3-3">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->								        

						    </div>
						</div>

				    </div>
				</div>

				<div class="box-generic">
					<div class="row-fluid">
						<div class="span3">
							<!-- Group -->
							<div class="control-group">										
								<label for="txtExpectedDate">Expected Date</label>
								<input id="txtExpectedDate" name="txtExpectedDate" 
										data-role="datepicker"
										data-format="dd-MM-yyyy"
										data-parse-formats="yyyy-MM-dd" 
										data-bind="value: obj.due_date" 
										required data-required-msg="required"
										style="width:100%;" />									            
							</div>
							<!-- // Group END -->
						</div>

						<div class="span3">
							<!-- Group -->
							<div class="control-group">										
								<label for="ddlPaymentMethod">Method</label>
								<input id="ddlPaymentMethod" name="ddlPaymentMethod"
									   data-role="dropdownlist"								                   
					                   data-value-primitive="true"
					                   data-text-field="name"
					                   data-value-field="id"
					                   data-bind="value: obj.payment_method_id,
					                              source: paymentMethodDS"							                   
					                   data-option-label="(--- Select ---)"
					                   required data-required-msg="required" 
					                   style="width: 100%;" />									            
							</div>
							<!-- // Group END -->
						</div>

						<div class="span3">
							<!-- Group -->
							<div class="control-group">										
								<label for="cbbAccount">Cash Account</label>
								<input id="cbbAccount" name="cbbAccount"
									   data-role="combobox"                   
					                   data-value-primitive="true"                   
					                   data-template="account-list-tmpl"
					                   data-text-field="name"
					                   data-value-field="id"
					                   data-bind="value: obj.account_id,
					                              source: cashAccountDS"
					                   data-placeholder="Select Account.."					                                      
					                   required data-required-msg="required" style="width: 100%" />									            
							</div>
							<!-- // Group END -->
						</div>

						<div class="span3">
							<!-- Group -->
							<div class="control-group">										
								<label for="cbbAccount">Segment</label>
								<select data-role="multiselect"
									   data-value-primitive="true"								   
									   data-item-template="cashAdvance-segment-tmpl"				    
									   data-value-field="id" 
									   data-text-field="code"
									   data-bind="value: obj.segments, 
									   			source: segmentItemDS,
									   			events:{ change: transactionSegmentChanges }"
									   data-placeholder="Add Segment.."				   
									   style="width: 100%" /></select>									            
							</div>
							<!-- // Group END -->
						</div>
					</div>
				</div>				
				
				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th style="width: 1%;">No.</th>			                
			                <th style="width: 20%;">ACCOUNT</th>
			                <th>DESCRIPTION</th>
			                <th data-bind="visible: showRef" style="width: 7%;">REF</th>			                
			                <th data-bind="visible: showSegment" style="width: 15%;">SEGMENT</th>
			                <th style="width: 15%;">AMOUNT</th>			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="cashAdvance-template" 
			        		data-auto-bind="false"
			        		data-bind="source: lineDS"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span6 hidden-print">
						
						<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>												

						<div class="btn-group">
							<div class="leadcontainer">
								
							</div>
							<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
							<ul class="dropdown-menu" style="padding-left: 10px">
								<li>
									<input type="checkbox" data-bind="checked: showRef" /> REF
								</li>
								<li>
									<input type="checkbox" data-bind="checked: showSegment" /> SEGMENT
								</li>								
							</ul>
						</div>

						<span class="btn btn-default">Add New Account</span>						
						
					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span6">
						<table class="table table-borderless table-condensed cart_total">
							<tbody>								
								<tr>
									<td class="right">Total:</td>
									<td class="right strong"><span data-bind="text: total"></span></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>
	           
	            <br>
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>										
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>
					<span class="btn btn-icon btn-warning glyphicons remove_2" data-bind="click: cancel" style="width: 80px;"><i></i> Cancel</span>
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="cashAdvance-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td class="center">
			<i class="icon-trash" data-bind="events: { click: remove }"></i>
			#:banhji.cashAdvance.lineDS.indexOf(data)+1#			
		</td>			
		<td>
			<input id="cbbAccounts" name="cbbAccounts"
				   data-role="combobox"                   
                   data-value-primitive="true"                   
                   data-template="cashAdvance-account-list-tmpl"
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: account_id,
                              source: accountDS"
                   data-placeholder="Add Account.."
                   data-list-width="400"                    
                   required data-required-msg="required" style="width: 100%" />	
		</td>		
		<td>
			<input name="description" 
					type="text" class="k-textbox" 
					data-bind="value: description"					
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td data-bind="visible: showRef">
			<input type="text" class="k-textbox" 
					data-bind="value: reference_no"				
					style="width: 100%; margin-bottom: 0;" />		
		</td>			
		<td data-bind="visible: showSegment">
			<select data-role="multiselect"
				   data-value-primitive="true"				   
				   data-item-template="cashAdvance-segment-tmpl"				    
				   data-value-field="id" 
				   data-text-field="code"
				   data-bind="value: segments, 
				   			source: segmentItemDS,
				   			events:{ change: segmentChanges }"
				   data-placeholder="Add Segment.."				   
				   style="width: 100%" /></select>					
		</td>
		<td class="right">
			<input id="txtAmount" name="txtAmount" 
					data-role="numerictextbox" 
					data-format="n0" 
					data-bind="value: amount, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" /> 						
		</td>			
    </tr>   
</script>
<script id="cashAdvance-account-list-tmpl" type="text/x-kendo-tmpl">
	<span>
		#=code# #=name#
	</span>
</script>
<script id="cashAdvance-contact-list-tmpl" type="text/x-kendo-tmpl">
	<span>
		#=number# #=surname# #=name#
	</span>
</script>
<script id="cashAdvance-segment-tmpl" type="text/x-kendo-tmpl">
	<span>
		#=name# (#=segment.name#)
	</span>
</script>

<script id="expense" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>EXPENSE</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 190px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>								
								<tr>
									<td>Employee</td>
									<td>
										<input id="cbbContact" name="cbbContact"
											   data-role="combobox"
											   data-auto-bind="false"                   
							                   data-value-primitive="true"
							                   data-template="contact-list-tmpl"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.contact_id,
							                              source: contactDS,
							                              events:{ change: contactChanges }"
							                   data-placeholder="Type Name.."                    
							                   required data-required-msg="required" style="width: 100%" />
									</td>
								</tr>																							
							</table>

							<div class="strong" style="width: 90%; padding: 10px;" align="center"
								data-bind="style: {
								        backgroundColor: bgColor}">
								<div align="left">AMOUNT PAID</div>
								<h2 data-bind="text: total" align="right"></h2>
							</div>
						</div>
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 190px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						            <li class="span2 glyphicons cogwheels active"><a href="#tab1-4" data-toggle="tab"><i></i></a>
						            </li>
						            <li class="span2 glyphicons circle_info"><a href="#tab2-4" data-toggle="tab"><i></i></a>
						            </li>
						            <li class="span2 glyphicons paperclip"><a href="#tab3-4" data-toggle="tab"><i></i></a>
						            </li>
						            <li class="span3 glyphicons history"><a href="#tab4-4" data-toggle="tab"><i></i> Recuring</a>
						            </li>								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						        <!-- Option Tab content -->
						        <div class="tab-pane active" id="tab1-4">
						        	<table class="table table-borderless table-condensed cart_total">
						        		<tr>
							        		<td colspan="2">
							        			<table>
						            				<tr>
						            					<td>
									            			<input type="radio" value="Direct_Expense" class="k-radio"
									            					name="payOption" id="payOption1"
									            					data-bind="checked: obj.type, 
									            								events:{ change: typeChanges }"> 
									            			<label class="k-radio-label" for="payOption1">DIRECT PAYMENT</label>
									            		</td>
									            		<td>
												            <input type="radio" value="Reimbursement" class="k-radio"
												            		name="payOption" id="payOption2"
												            		data-bind="checked: obj.type, 
												            					events:{ change: typeChanges }"> 
												            <label class="k-radio-label" for="payOption2">REIMBURSEMENT</label>
										            	</td>
										            	<td>
												            <input type="radio" value="Advance_Settlement" class="k-radio"
												            		name="payOption" id="payOption3"
												            		data-bind="checked: obj.type, 
												            					events:{ change: typeChanges }"> 
												            <label class="k-radio-label" for="payOption3">ADVANCE SETTLEMENT</label>
										            	</td>
										            </tr>
									            </table>
							        		</td>
						        		</tr>
							        	<tr>
							        		<td>Cash Account</td>
							        		<td>
							        			<input id="cbbAccount" name="cbbAccount"
													   data-role="combobox"                   
									                   data-value-primitive="true"                   
									                   data-template="account-list-tmpl"
									                   data-text-field="name"
									                   data-value-field="id"
									                   data-bind="value: obj.account_id,
									                              source: cashAccountDS"
									                   data-placeholder="Select Account.."					                                      
									                   required data-required-msg="required" style="width: 100%" />
							        		</td>
							        	</tr>
							        	<tr data-bind="visible: showCashAdvance">
							        		<td>Cash Advance</td>
							        		<td>
							        			<input data-role="combobox"                   
									                   data-value-primitive="true"
									                   data-auto-bind="false"                   
									                   data-template="reference-list-tmpl"
									                   data-text-field="number"
									                   data-value-field="id"
									                   data-bind="value: obj.reference_id,
									                              source: referenceDS,
									                              events: { change: referenceChanges }"
									                   data-placeholder="Select Cash Advance.." style="width: 100%" />	
							        		</td>
							        	</tr>
						        	</table>
						        </div>
						        <!-- // Option Tab content END -->

						        <!-- Info Tab content -->
						        <div class="tab-pane" id="tab2-4">
						        	<table class="table table-borderless table-condensed cart_total">						        		
						        		<tr>
											<td>Currency</td>
											<td>
												<input id="cbbCurrency" name="cbbCurrency"
													   data-role="combobox"											                    
									                   data-value-primitive="true"
									                   data-template="currency-list-tmpl"
									                   data-text-field="code"
									                   data-value-field="id"
									                   data-bind="value: obj.locale,
									                              source: currencyDS,
									                              events:{ change: setRate }"
									                   data-placeholder="Type Name.."                    
									                   required data-required-msg="required" style="width: 100%" />
											</td>
										</tr>
							        	<tr>
											<td>Segments</td>
											<td>
												<select data-role="multiselect"
													   data-value-primitive="true"								   
													   data-item-template="segment-list-tmpl"				    
													   data-value-field="id" 
													   data-text-field="code"
													   data-bind="value: obj.segments, 
													   			source: segmentItemDS,
													   			events:{ change: transactionSegmentChanges }"
													   data-placeholder="Add Segment.."				   
													   style="width: 100%" /></select>
											</td>
										</tr>							        	
						        	</table>
						        </div>
						        <!-- // Info Tab content END -->

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab3-4">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab4-4">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->								        

						    </div>
						</div>

				    </div>
				</div>							
				
				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th style="width: 1%;">No.</th>			                
			                <th style="width: 20%;">ACCOUNT</th>
			                <th>DESCRIPTION</th>
			                <th style="width: 15%;">SUPPLIER</th>
			                <th style="width: 8%;">INVOICE#</th>
			                <th style="width: 13%;">DATE</th>			                			                
			                <th data-bind="visible: showSegment" style="width: 10%;">SEGMENT</th>			                
			                <th style="width: 15%;">AMOUNT</th>
			                <th style="width: 11%;">TAX</th>			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="expense-template" 
			        		data-auto-bind="false"
			        		data-bind="source: lineDS"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span5 hidden-print">
						
						<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>												

						<div class="btn-group">
							<div class="leadcontainer">
								
							</div>
							<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
							<ul class="dropdown-menu" style="padding-left: 10px">
								<li>
									<input type="checkbox" id="chbSegment" class="k-checkbox" data-bind="checked: showSegment" />												
									<label class="k-checkbox-label" for="chbSegment">SEGMENT</label>
								</li>								
							</ul>
						</div>

						<a href="#/account" class="btn btn-default">Add New Account</a>
						<a href="#/vendor" class="btn btn-default">Add New Supplier</a>

						<br><br>

						<textarea cols="0" rows="2" class="k-textbox" style="width:49%" data-bind="value: obj.memo2" placeholder="memo for internal ..."></textarea>													
						<textarea cols="0" rows="2" class="k-textbox" style="width:49%" data-bind="value: obj.memo" placeholder="memo for external ..."></textarea>
						
					</div>
					<!-- Column END -->

					<div class="span3">
						<table class="table table-condensed table-striped table-white" data-bind="visible: showCashAdvance">
							<tbody>								
								<tr>
									<td class="right">Total Cash Advanced:</td>
									<td class="right strong"><span data-bind="text: credit"></span></td>
								</tr>
								<tr>
									<td class="right">Amount Due:</td>
									<td class="right strong"><span data-bind="text: remain"></span></td>
								</tr>								
							</tbody>
						</table>
					</div>
					
					<!-- Column -->
					<div class="span4">
						<table class="table table-condensed table-striped table-white">
							<tbody>
								<tr>
									<td class="right">Sub Total:</td>
									<td class="right strong" width="40%"><span data-bind="text: sub_total"></span></td>
								</tr>								
								<tr>
									<td class="right">Total Tax:</td>
									<td class="right strong"><span data-bind="text: tax"></span></td>
								</tr>																
								<tr>
									<td class="right"><h4>Total:</h4></td>
									<td class="right strong"><h4 data-bind="text: total"></h4></td>
								</tr>																
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>
	           
	            <br>
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>										
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>
					<span class="btn btn-icon btn-warning glyphicons remove_2" data-bind="click: cancel" style="width: 80px;"><i></i> Cancel</span>
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="expense-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td class="center">
			<i class="icon-trash" data-bind="events: { click: remove }"></i>
			#:banhji.expense.lineDS.indexOf(data)+1#			
		</td>			
		<td>
			<input id="cbbAccounts-#:uid#" name="cbbAccounts-#:uid#"
				   data-role="combobox"                   
                   data-value-primitive="true"                   
                   data-template="account-list-tmpl"
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: account_id,
                              source: accountDS"
                   data-placeholder="Add Account.."                                     
                   required data-required-msg="required" style="width: 100%" />	
		</td>
		<td>
			<input type="text" class="k-textbox" 
					data-bind="value: description"					
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td>
			<input data-role="combobox"                   
                   data-value-primitive="true"                   
                   data-template="contact-list-tmpl"
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: contact_id,
                              source: supplierDS"
                   data-placeholder="Add Supplier.." style="width: 100%" />	
		</td>
		<td>
			<input type="text" class="k-textbox" 
					data-bind="value: reference_no"				
					style="width: 100%; margin-bottom: 0;" />		
		</td>
		<td>
			<input id="issuedDate" name="issuedDate" 
					data-role="datepicker"
					data-format="dd-MM-yyyy"
					data-parse-formats="yyyy-MM-dd" 
					data-bind="value: reference_date" 
					required data-required-msg="required"
					style="width:100%;" />
		</td>							
		<td data-bind="visible: showSegment">
			<select data-role="multiselect"
				   data-value-primitive="true"				   
				   data-item-template="segment-list-tmpl"				    
				   data-value-field="id" 
				   data-text-field="code"
				   data-bind="value: segments, 
				   			source: segmentItemDS,
				   			events:{ change: segmentChanges }"
				   data-placeholder="Add Segment.."				   
				   style="width: 100%" /></select>					
		</td>
		<td class="right">
			<input id="txtAmount-#:uid#" name="txtAmount-#:uid#" 
					data-role="numerictextbox" 
					data-format="n0" 
					data-bind="value: amount, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" /> 						
		</td>
		<td>
			<input data-role="combobox"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: tax_item_id, 
                   			  source: taxItemDS,
                   			  events:{ change: changes }"
                   style="width: 100%" />			
		</td>			
    </tr>   
</script>


<!-- ***************************
 *	Vendor Section            *
**************************** -->
<script id="vendorDashboard" type="text/x-kendo-template">

	<div class="row-fluid">

		<!-- Left Side -->
		<div class="span4">

			<!-- Logo of the page -->
			<table width="100%" cellpadding="10">
				<tr>
					<td>
			           	<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/supplier.png" />
			        </td>
			        <td valign="top">
			        	<h2>SUPPLIER</h2>
			        	<p>
			        		In here, you can manage your supplier information, and other related transactions.
			        	</p>
			        </td>
			 	</tr>
			</table>

			<br>

			<table class="table table-borderless table-condensed table-vertical-center">
				<tr>
					<td class="center">
						<a href="#/purchase_order">
							<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/function_logo/purchase_order.png" width="110" height="200" />
							PO
						</a>						
					</td>
					<td class="center">
						<a href="#/grn">
							<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/function_logo/received_note.png" width="110" height="200" />
							GRN
						</a>
					</td>
					<td class="center">
						<a href="#/vendor_deposit">
							<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/function_logo/supplier_deposit.png" width="110" height="200" />
							Deposit
						</a>						
					</td>					
				</tr>
				<tr>
					<td class="center">
						<a href="#/purchase">
							<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/function_logo/purchase.png" width="110" height="200" />
							Purchase
						</a>
					</td>
					<td class="center">
						<a href="#/purchase_return">
							<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/function_logo/purchase_return.png" width="110" height="200" />
							Pur.Return
						</a>
					</td>
					<td class="center">						
						<a href="#/cash_payment">
							<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/function_logo/cash_payment.png" width="110" height="200" />
							PayBill
						</a>						
					</td>										
				</tr>				
			</table>

		</div>

		<!-- Right Side -->
		<div class="span8">

			<!-- Summary -->
			<div class="row-fluid">
	
				<!-- Column -->
				<div class="span4">
				
					<!-- Widget -->
					<div class="widget widget-3">
					
						<!-- Widget heading -->
						<div class="widget-head">
							<h4 class="heading"><span class="glyphicons coins"><i></i></span>Purchase</h4>
						</div>
						<!-- // Widget heading END -->
						
						<div class="widget-body" style="background-color: LightGreen;">
							
							<div align="center" class="text-large strong" data-bind="text: sale"></div>

							<br>
						
							<table width="100%">
								<tr align="center">
									<td>										
										<span data-bind="text: sale_customer"></span>
										<br>
										<span>Supplier</span>
									</td>
									<td>
										<span data-bind="text: sale_product"></span>
										<br>
										<span>Product</span>
									</td>
									<td>
										<span data-bind="text: sale_order"></span>
										<br>
										<span>Order</span>
									</td>
								</tr>
							</table>
						</div>
						<!-- // Widget footer END -->
						
					</div>
					<!-- // Widget END -->
					
				</div>
				<!-- // Column END -->
				
				<!-- Column -->
				<div class="span4">
				
					<!-- Widget -->
					<div class="widget widget-3">
					
						<!-- Widget heading -->
						<div class="widget-head">
							<h4 class="heading"><span class="glyphicons cart_in"><i></i></span>Purchase Order</h4>
						</div>
						<!-- // Widget heading END -->
						
						<div class="widget-body" style="background-color: LightBlue;">
							
							<div align="center" class="text-large strong" data-bind="text: order"></div>

							<br>
						
							<table width="100%">
								<tr align="center">
									<td>										
										<span data-bind="text: order_avg"></span>
										<br>
										<span>Average</span>
									</td>
									<td>
										<span data-bind="text: order_open"></span>
										<br>
										<span>Open</span>
									</td>									
								</tr>
							</table>
						</div>
						<!-- // Widget footer END -->
						
					</div>
					<!-- // Widget END -->
					
				</div>
				<!-- // Column END -->
				
				<!-- Column -->
				<div class="span4">
				
					<!-- Widget -->
					<div class="widget widget-3">
					
						<!-- Widget heading -->
						<div class="widget-head">
							<h4 class="heading"><span class="glyphicons credit_card"><i></i></span>Payable</h4>
						</div>
						<!-- // Widget heading END -->
						
						<div class="widget-body" style="background-color: LightCoral;">
							
							<div align="center" class="text-large strong" data-bind="text: ar"></div>

							<br>
						
							<table width="100%">
								<tr align="center">
									<td>										
										<span data-bind="text: ar_open"></span>
										<br>
										<span>Open</span>
									</td>
									<td>
										<span data-bind="text: ar_customer"></span>
										<br>
										<span>Supplier</span>
									</td>
									<td>
										<span data-bind="text: ar_overdue"></span>
										<br>
										<span>Overdue</span>
									</td>
								</tr>
							</table>
						</div>
						<!-- // Widget footer END -->
						
					</div>
					<!-- // Widget END -->
					
				</div>
				<!-- // Column END -->
				
			</div>

			<!-- Top 5 -->
			<div class="row-fluid">
				<div class="span4">
					<h4>Top 5 Suppliers</h4>					
					<table class="table table-bordered table-primary table-striped table-vertical-center">
				        <thead>
				            <tr>
				                <th style="width: 1%;" class="center">#</th>
				                <th>Name</th>			                
				            </tr>
				        </thead>
				        <tbody data-role="listview"
				        	 data-auto-bind="false"				        	                 
			                 data-template="customerDashBoard-top-customer-template"
			                 data-bind="source: topCustomerDS"></tbody>			        
				    </table>			
				</div>
				<div class="span4">
					<h4>Top 5 A/P Balance</h4>
					<table class="table table-bordered table-primary table-striped table-vertical-center">
				        <thead>
				            <tr>
				                <th style="width: 1%;" class="center">#</th>
				                <th>Name</th>		                
				            </tr>
				        </thead>
				        <tbody data-role="listview"
				        	 data-auto-bind="false"				        	                  
			                 data-template="customerDashBoard-top-ar-template"
			                 data-bind="source: topARDS"></tbody>			        
				    </table>
				</div>
				<div class="span4">
					<h4>Top 5 Products</h4>
					<table class="table table-bordered table-primary table-striped table-vertical-center">
				        <thead>
				            <tr>
				                <th style="width: 1%;" class="center">#</th>
				                <th>Name</span></th>			                		                
				            </tr>
				        </thead>
				        <tbody data-role="listview"
				        	 data-auto-bind="false"                
			                 data-template="customerDashBoard-top-product-template"
			                 data-bind="source: topProductDS"></tbody>			        
				    </table>
				</div>		
			</div>

			<!-- Graph -->
			<div>
				<div id="graph" style="height: 100%;"></div>
			</div>

		</div>		

	</div>		

	<p class="separator text-center"><i class="icon-ellipsis-horizontal icon-3x"></i></p>
</script>
<script id="vendorDashBoard-top-customer-template" type="text/x-kendo-tmpl">	
	<tr data-uid="#: uid #">
		<td>#:banhji.customerDashboard.topCustomerDS.indexOf(data)+1#</td>		
		<td>
			<span>#=name#</span>
			<span class="pull-right">#=kendo.toString(amount, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale)#</span>
		</td>		
	</tr>
</script>
<script id="vendorDashBoard-top-ar-template" type="text/x-kendo-tmpl">
	<tr>
		<td>#:banhji.customerDashboard.topARDS.indexOf(data)+1#</td>		
		<td>
			<span>#=name#</span>
			<span class="pull-right">#=kendo.toString(amount, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale)#</span>
		</td>
	</tr>
</script>
<script id="vendorDashBoard-top-product-template" type="text/x-kendo-tmpl">
	<tr>
		<td>#:banhji.customerDashboard.topProductDS.indexOf(data)+1#</td>		
		<td>
			<span>#=name#</span>
			<span class="pull-right">#=kendo.toString(quantity, "n0")#</span>
		</td>
	</tr>
</script>

<script id="vendorCenter" type="text/x-kendo-template">	
	<div class="widget widget-heading-simple widget-body-gray widget-employees">		
		<div class="widget-body padding-none">			
			<div class="row-fluid row-merge">
				<div class="span3 listWrapper" style="height: 700px;">
					<div class="innerAll">							
						<form autocomplete="off" class="form-inline">
							<div class="widget-search separator bottom">
								<button type="button" class="btn btn-default pull-right" data-bind="click: search"><i class="icon-search"></i></button>
								<div class="overflow-hidden">
									<input type="search" placeholder="number or name ..." data-bind="value: searchText, events:{change: enterSearch}">
								</div>
							</div>
							<div class="select2-container" style="width: 100%;">								
																
							</div>
						</form>					
					</div>
					
					<span class="results"><span data-bind="text: contactDS.total()"></span> <span data-bind="text: lang.lang.found_search"></span></span>

					<div class="table table-condensed" style="height: 580px;"						 
						 data-role="grid" 
						 data-bind="source: contactDS"
						 data-auto-bind="false" 
						 data-row-template="vendorCenter-vendor-list-tmpl"
						 data-columns="[{title: ''}]"
						 data-selectable=true
						 data-height="600"						 
						 data-scrollable="{virtual: true}"></div>									
				</div>
				<div class="span9 detailsWrapper">
					<div class="row-fluid">					
						<div class="span6">
							<div class="widget widget-4 widget-tabs-icons-only margin-bottom-none">

							    <!-- Widget Heading -->
							    <div class="widget-head">

							        <!-- Tabs -->
							        <ul class="pull-right">
							            <li style="font-size: large; color: black; font-weight: bold;">							            	
							            	<span data-bind="text: obj.surname"></span>
							            	<span data-bind="text: obj.name"></span>
							            </li>
							            <li class="glyphicons text_bigger active"><span data-toggle="tab" data-target="#tab1-4"><i></i></span>
							            </li>							            
							            <li class="glyphicons riflescope"><span data-toggle="tab" data-target="#tab2-4"><i></i></span>
							            </li>							            
							            <li class="glyphicons circle_info"><span data-toggle="tab" data-target="#tab3-4"><i></i></span>
							            </li>							            
							            <li class="glyphicons pen"><span data-toggle="tab" data-target="#tab4-4"><i></i></span>
							            </li>
							            <li class="glyphicons edit"><span data-bind="click: goEditContact"><i></i></span>
							            </li>							            
							            <li class="glyphicons user_add"><a href="#/vendor"><i></i></a>
							            </li>							            							            
							        </ul>
							        <div class="clearfix"></div>
							        <!-- // Tabs END -->

							    </div>
							    <!-- Widget Heading END -->

							    <div class="widget-body">
							        <div class="tab-content">							           

							            <!-- INVOICE Tab content -->
							            <div id="tab1-4" class="tab-pane active box-generic">
							            	<table class="table table-borderless table-condensed cart_total">
								            	<tr>
								            		<td width="50%">
								            			<span class="btn btn-block btn-inverse" data-bind="click: goPO">Purchase Order</span>
								            		</td>
								            		<td width="50%">
								            			<span class="btn btn-block btn-primary" data-bind="click: goPurchase">Purchase</span>								            											            			
								            		</td>
								            	</tr>
								            	<tr>
								            		<td>
								            			<span class="btn btn-block btn-inverse" data-bind="click: goGRN">Goods Received Note</span>								            			
								            		</td>
								            		<td>
								            			<span class="btn btn-block btn-primary" data-bind="click: goPurchaseReturn">Purchase Return</span>								            			
								            		</td>
								            	</tr>								            	
								            	<tr>
								            		<td>
								            			<span class="btn btn-block btn-primary" data-bind="click: goDeposit">Deposit</span>
								            		</td>
								            		<td>
								            			<span class="btn btn-block btn-primary" data-bind="click: goPayBill">Pay Bills</span>								            			
								            		</td>
								            	</tr>								            	
							            	</table>
							            </div>
							            <!-- // INVOICE Tab content END -->

							            <!-- SEARCH Tab content -->
							            <div id="tab2-4" class="tab-pane box-generic">
							                <input data-role="dropdownlist"
							                	   data-auto-bind="false"
						            			   data-option-label="(--- Vendor Type ---)"					            			   		                   
								                   data-value-primitive="true"
								                   data-text-field="name"
								                   data-value-field="id"
								                   data-bind="value: contact_type_id,
								                              source: contactTypeDS"
								                   style="width: 100%"/>

							                <input data-role="dropdownlist"
						            			   data-option-label="(--- Currency ---)"					            			   		                   
								                   data-value-primitive="true"
								                   data-text-field="code"
								                   data-value-field="id"
								                   data-bind="value: currency_id,
								                              source: currencyDS"
								                   style="width: 100%"/>

								            <br><br>
								            <span class="btn btn-primary btn-icon glyphicons search pull-right" data-bind="click: search"><i></i> <span data-bind="text: lang.lang.search"></span></span>
								            <br>
							            </div>
							            <!-- // SEARCH Tab content END -->							            

							            <!-- INFO Tab content -->
							            <div id="tab3-4" class="tab-pane box-generic">
							            	<div class="row-fluid">
								            	<div class="span6">
										
													<!-- Bio -->
													<div class="widget widget-heading-simple widget-body-gray margin-none">
														<div class="widget-head">
															<h4 class="heading glyphicons user"><i></i> <span data-bind="text: obj.number"></span> <span data-bind="text: obj.fullname"></span></h4>
														</div>
														<div class="widget-body">
															<ul class="unstyled icons margin-none">
																<li class="glyphicons group"><i></i> Type: <span data-bind="text: obj.contact_type"></span></li>
																<li class="glyphicons phone"><i></i> Phone: <span data-bind="text: obj.phone"></span></li>
																<li class="glyphicons envelope"><i></i> Email: <span data-bind="text: obj.email"></span></li>
																<li class="glyphicons calendar"><i></i> Registered: <span data-bind="text: obj.registered_date"></span></li>
															</ul>
														</div>
													</div>
													<!-- // Bio END -->
													
												</div>
												<div class="span6">
													<!-- Bio -->
													<div class="widget widget-heading-simple widget-body-gray margin-none">
														<div class="widget-head">
															<h4 class="heading glyphicons edit" data-bind="click: goEditContact"><i></i> <span data-bind="text: lang.lang.edit"></span></h4>
														</div>
														<div class="widget-body">
															<p><i class="icon-home"></i> <span data-bind="text: obj.address"></span></p>
														</div>
													</div>
													<!-- // Bio END -->
												</div>
											</div>
							            </div>
							            <!-- // INFO Tab content END -->

							            <!-- NOTE Tab content -->
							            <div id="tab4-4" class="tab-pane box-generic">

										    <div class="chat-controls">															
												<form class="margin-none">
													<div class="row-fluid">
														<div class="span10">
															<input type="text" name="message" class="input-block-level margin-none" data-bind="value: note" placeholder="កំណត់Memo ...">
														</div>
														<div class="span2">
															<span class="btn btn-block btn-primary" data-bind="click: saveNote"><span data-bind="text: lang.lang.save"></span></span>
														</div>
													</div>
												</form>															
											</div>

											<br>

									    	<div data-role="grid"
									    	 	 data-height="100"
					 							 data-scrollable="{virtual: true}"									                 
								                 data-row-template="vendorCenter-note-tmpl"
								                 data-bind="source: noteDS"
								                 data-columns="[{title: ''}]"></div>
											
							            </div>
							            <!-- // NOTE Tab content END -->							            								            

							        </div>
							    </div>
							</div>
						</div>

						<div class="span6">
							<div class="row-fluid">
								<div class="span6">
									<div class="widget-stats widget-stats-primary widget-stats-5" data-bind="click: loadBalance">
										<span class="glyphicons coins"><i></i></span>
										<span class="txt">Balance<span data-bind="text: balance" style="font-size:medium;"></span></span>
										<div class="clearfix"></div>
									</div>
								</div>
								<div class="span6">
									<div class="widget-stats widget-stats-inverse widget-stats-5" data-bind="click: loadPO">
										<span class="glyphicons truck"><i></i></span>
										<span class="txt">PO<span data-bind="text: po" style="font-size:medium;"></span></span>
										<div class="clearfix"></div>
									</div>
								</div>
							</div>							
							
							<div class="row-fluid">
								<div class="span6">
									<div class="widget-stats widget-stats-info widget-stats-5" data-bind="click: loadBalance">
										<span class="glyphicons circle_exclamation_mark"><i></i></span>
										<span class="txt"><span data-bind="text: openInvoice"></span> Open</span>
										<div class="clearfix"></div>
									</div>
								</div>
								<div class="span6">
									<div class="widget-stats widget-stats-default widget-stats-5" data-bind="click: loadOverInvoice">
										<span class="glyphicons turtle"><i></i></span>
										<span class="txt"><span data-bind="text: overInvoice"></span> Over Due</span>
										<div class="clearfix"></div>
									</div>
								</div>
							</div>														
						</div>											          	
		          	</div>
					
					<div>
						<input data-role="dropdownlist"                   
					           data-value-primitive="true"
					           data-text-field="text"
					           data-value-field="value"
					           data-bind="value: sorter,
					                      source: sortList,                              
					                      events: { change: sorterChanges }" />

						<input data-role="datepicker"
							   data-format="dd-MM-yyyy"
					           data-bind="value: sdate,
					                      events: { change: dateChanges }"
					           placeholder="From ..." >

					    <input data-role="datepicker"
					    	   data-format="dd-MM-yyyy"
					           data-bind="value: edate,
					                      events: { change: dateChanges }"
					           placeholder="To ..." >
					    
					    <button type="button" data-role="button" data-bind="click: searchTransaction"><i class="icon-search"></i></button>
					</div>

					<table class="table table-bordered table-striped table-white">
						<thead>
							<tr>
								<th>Date</th>
								<th>Type</th>								
								<th>Reference No</th>
								<th>Amount</th>
								<th>Status</th>
								<th>Action</th>
							</tr>
						</thead>	            		
	            		<tbody data-role="listview"
	            				data-auto-bind="false"	            					            					            					            			
				                data-template="vendorCenter-transaction-tmpl"
				                data-bind="source: transactionDS" >
				        </tbody>
	            	</table>

	            	<div id="pager" class="k-pager-wrap"
				    	 data-auto-bind="false"
			             data-role="pager" data-bind="source: transactionDS"></div>	            	
				</div>
			</div>			
		</div>
	</div>		
</script>
<script id="vendorCenter-transaction-tmpl" type="text/x-kendo-tmpl">
    <tr>    	  	
    	<td>#=kendo.toString(new Date(issued_date), "dd-MM-yyyy")#</td>
    	<td>#=type#</td>
        <td>
        	#if(type=="Purchase_Order" || type=="GRN" || type=="Purchase_Return"){#
				<a href="\#/#=type.toLowerCase()#/#=id#"><i></i> #=number#</a>
			#}else if(type=="Cash_Purchase" || type=="Credit_Purchase"){#
					<a href="\#/purchase/#=id#"><i></i> #=type#</a>						
			#}else{#
				#=number#
			#}#        	
        </td>
    	<td class="right">
    		#if(type=="GRN"){#
    			#=kendo.toString(amount, "n0")#
    		#}else{#
    			#=kendo.toString(amount, locale=="km-KH"?"c0":"c", locale)#
    		#}#
    	</td>
    	<td>        	
        	#if(type==="Purchase" || type==="Expense"){#
        		#if(status==="0" || status==="2") {#
        			# var date = new Date(), dueDate = new Date(due_date).getTime(), toDay = new Date(date).getTime(); #
					#if(dueDate < toDay) {#
						Over Due #:Math.floor((toDay - dueDate)/(1000*60*60*24))# days
					#} else {#
						#:Math.floor((dueDate - toDay)/(1000*60*60*24))# days to pay
					#}#
				#} else {#
					Paid
				#}#
        	#}else if(type==="PO" || type==="GRN"){#
        		#if(status==="0"){#
        			Open
        		#}else{#
        			Done        			
        		#}#        	
        	#}#			
		</td>    	
    	<td align="center">
			#if(type==="Purchase"){#
				<a href="\#/purchase/#=id#"><i></i> Send</a>

				#if(status==="0" || status==="2"){#					
					| <a href="\#/purchase/#=id#"><i></i> Pay</a>
				#}#
			#}else if(type==="Expense"){#
        		<a href="\#/expense/#=id#"><i></i> Send</a>

				#if(status==="0" || status==="2"){#					
					| <a href="\#/expense/#=id#"><i></i> Pay</a>
				#}#        	
        	#}else if(type==="GDN"){#        		
        		#if(status==="0"){#
        			
        		#}#
        	#}#
		</td>     	
    </tr>
</script>
<script id="vendorCenter-vendor-list-tmpl" type="text/x-kendo-tmpl">
	<tr data-bind="click: selectedRow">
		<td>
			<div class="media-body">
				<span class="strong">
					#=number# #=fullname#				
				</span>
			</div>
		</td>
	</tr>
</script>
<script id="vendorCenter-note-tmpl" type="text/x-kendo-template">
	<tr>
		<td>			
			<blockquote>
				<small class="author">
					<span class="strong">#=creator#</span> :
					<cite>#=kendo.toString(new Date(noted_date), "g")#</cite>
				</small>					
				<p>#=note#</p>
			</blockquote>				
		</td>
	</tr>	
</script>

<script id="vendor" type="text/x-kendo-template">
	<div class="container-960">	
		<div class="row-fluid">		    
			<div class="span12">			
				<div id="example" class="k-content">

					<!-- Collapsible Widget -->			
					<div class="widget">
					    <div class="widget-head">
					    	<span class="btn btn-primary pull-right" 
									onclick="javascript:window.history.back()">X</span>
					        
					        <h4 class="heading glyphicons circle_info"><i></i> Supplier</h4>							        	
					    </div>
					    <div class="widget-body">

					    	<div class="row-fluid">
					    		<div class="span6 well">

									<div class="row-fluid">

										<div class="span6">														
											<!-- Group -->
											<div class="control-group">										
												<label for="ddlContactType">Supplier Type <span style="color:red">*</span></label>
												<input id="ddlContactType" name="ddlContactType"
													   data-role="dropdownlist"
													   data-option-label="(--- Select ---)"									                   
									                   data-value-primitive="true"
									                   data-text-field="name"
									                   data-value-field="id"
									                   data-bind="value: obj.contact_type_id,
									                   			  disabled: obj.is_pattern, 
									                              source: contactTypeDS,
									                              events:{change: contactTypeChanges}"
									                   required data-required-msg="required"
									                   style="width: 100%;" />									            
											</div>
											<!-- // Group END -->
										</div>

										<div class="span6">	
											<!-- Group -->
											<div class="control-group">							
												<label for="number"><span data-bind="text: lang.lang.number"></span> <span style="color:red">*</span></label>
						              			<input id="number" name="number" class="k-textbox"
							              				data-bind="value: obj.number, disabled: obj.is_pattern" 
							              				placeholder="e.g. ID0001" required data-required-msg="required"
							              				style="width: 100%;" />
							              		<span data-bind="visible: isDuplicateNumber" style="color: red;"><span data-bind="text: lang.lang.duplicate_number"></span></span>
											</div>
											<!-- // Group END -->											
										</div>
									</div>
									
									<div class="row-fluid">
										<div class="span6">						
											<!-- Group -->
											<div class="control-group">
												<label for="surname"><span data-bind="text: lang.lang.surname"></span> <span style="color:red">*</span></label>
							              		<input id="surname" name="surname" class="k-textbox" data-bind="value: obj.surname, disabled: obj.is_pattern" 
									              		placeholder="surname ..." required data-required-msg="required"
									              		style="width: 100%;" />
											</div>
											<!-- // Group END -->
										</div>

										<div class="span6">	
											<!-- Group -->
											<div class="control-group">								
												<label for="name"><span data-bind="text: lang.lang.name"></span> <span style="color:red">*</span></label>
									            <input id="name" name="name" class="k-textbox" data-bind="value: obj.name, disabled: obj.is_pattern" 
									              		placeholder="name ..." required data-required-msg="required"
									              		style="width: 100%;" />
											</div>																		
											<!-- // Group END -->
										</div>
									</div>
									
									<div class="row-fluid">
										<div class="span6">
											<!-- Group -->
											<div class="control-group">
												<label for="companyName"><span data-bind="text: lang.lang.organization_name"></span> </label>
												<input id="companyName" name="companyName" class="k-textbox" data-bind="value: obj.company"									
														placeholder="e.g. PCG & Partner"
														style="width: 100%;" />	
											</div>
											<!-- // Group END -->
										</div>

										<div class="span6">	
											<!-- Group -->
											<div class="control-group">
												<label for="vatNo">Sale TAX Number</label>								
							            		<input id="vatNo" name="vatNo" class="k-textbox" data-bind="value: obj.vat_no" 
														placeholder="e.g. 01234567897"
														style="width: 100%;" />												
											</div>					
											<!-- // Group END -->
										</div>
									</div>

								</div>

								<div class="span6">
									<div class="row-fluid">	
										<!-- Map -->
										<div id="map" class="span12" style="height: 130px;"></div>
									</div>

									<div class="separator line bottom"></div>

									<div class="row-fluid">	
										<div class="span6">									
											<!-- Group -->
											<div class="control-group">
								    			<label for="latitute"><span data-bind="text: lang.lang.latitute"></span> </label>
												<div class="input-prepend">
													<span class="add-on glyphicons direction"><i></i></span>
													<input type="text" class="input-large span12" data-bind="value: obj.latitute, events:{change: loadMap}" placeholder="012345.67897">
												</div>
											</div>									
											<!-- // Group END -->
										</div>	
										
										<div class="span6">	
											<!-- Group -->
											<div class="control-group">
								    			<label for="longtitute"><span data-bind="text: lang.lang.longtitute"></span> </label>
								    			<div class="input-prepend">
													<span class="add-on glyphicons google_maps"><i></i></span>
													<input type="text" class="input-large span12" data-bind="value: obj.longtitute, events:{change: loadMap}" placeholder="012345.67897">
												</div>										
											</div>
											<!-- // Group END -->
										</div>										
									</div>
								</div>
							</div>								
									
							<!-- // Inner Tabs -->
							<div class="row-fluid">								
								<div class="box-generic">
								    <!-- //Tabs Heading -->
								    <div class="tabsbar tabsbar-1">
								        <ul class="row-fluid row-merge">						            
								            <li class="span2 glyphicons usd active">
								            	<a href="#tab1" data-toggle="tab"><i></i> <span data-bind="text: lang.lang.account"></span></a>
								            </li>
								            <li class="span2 glyphicons credit_card">
								            	<a href="#tab2" data-toggle="tab"><i></i> Payment</a>
								            </li>								            
								            <li class="span2 glyphicons nameplate_alt">
								            	<a href="#tab3" data-toggle="tab"><i></i> <span data-bind="text: lang.lang.info"></span></a>
								            </li>								            
								            <li class="span2 glyphicons parents">
								            	<a href="#tab4" data-toggle="tab"><i></i> <span data-bind="text: lang.lang.agents"></span></a>
								            </li>						            					            
								        </ul>
								    </div>
								    <!-- // Tabs Heading END -->

								    <div class="tab-content">
								        <!-- //ACCOUNTING INFO -->
								        <div class="tab-pane active" id="tab1">
								        	
								        	<div class="row-fluid">

								            	<div class="span3">													
													<!-- Group -->
													<div class="control-group">										
														<label for="ddlAP">Account Payable <span style="color:red">*</span></label>
														<input id="ddlAP" name="ddlAP"
															   data-role="dropdownlist"
															   data-option-label="(--- Select ---)"											                   
											                   data-value-primitive="true"
											                   data-text-field="name"
											                   data-value-field="id"
											                   data-bind="value: obj.account_id,
											                              source: apDS"
											                   required data-required-msg="required"											                              
											                   style="width: 100%;" />									            
													</div>
													<!-- // Group END -->													
												</div>												
												<div class="span3">
													<!-- Group -->
													<div class="control-group">
														<label for="ddlDiscountAccount"><span data-bind="text: lang.lang.discount_account"></span> <span style="color:red">*</span></label>
														<input id="ddlDiscountAccount" name="ddlDiscountAccount"
																   data-role="dropdownlist"
																   data-option-label="(--- Select ---)"												                   
												                   data-value-primitive="true"
												                   data-text-field="name"
												                   data-value-field="id"
												                   data-bind="value: obj.discount_account_id,
												                              source: discountDS"
												                   required data-required-msg="required"											                              
												                   style="width: 100%;" />
												    </div>
													<!-- // Group END -->	
												</div>
												<div class="span3">
													<!-- Group -->
													<div class="control-group">
														<label for="ddlPrePaymentAccount">Prepayment Account <span style="color:red">*</span></label>
														<input id="ddlPrePaymentAccount" name="ddlPrePaymentAccount"
																   data-role="dropdownlist"
																   data-option-label="(--- Select ---)"
																   data-template="account-list-tmpl"												                   
												                   data-value-primitive="true"
												                   data-text-field="name"
												                   data-value-field="id"
												                   data-bind="value: obj.deposit_account_id,
												                              source: prepaymentDS"
												                   required data-required-msg="required"											                              
												                   style="width: 100%;" />
												    </div>
													<!-- // Group END -->	
												</div>

												<div class="span3">
													<!-- Group -->
													<div class="control-group">
														<label for="ddlTax">Tax</label>
														<input id="ddlTax" name="ddlTax"
																   data-role="dropdownlist"
																   data-option-label="(--- Select ---)"																   												                   
												                   data-value-primitive="true"
												                   data-text-field="name"
												                   data-value-field="id"
												                   data-bind="value: obj.tax_item_id,
												                              source: taxItemDS"											                              
												                   style="width: 100%;" />
												    </div>
													<!-- // Group END -->
												</div>
																																				
									        </div>								        										        

									        <div class="separator line bottom"></div>

									        <div class="row-fluid">

									        	<div class="span3">
													<!-- Group -->
													<div class="control-group">
														<label for="currency"><span data-bind="text: lang.lang.currency"></span> <span style="color:red">*</span></label>
											            <input id="currency" name="currency" 
											            	data-role="dropdownlist"
											            	data-value-primitive="true"
											                data-text-field="code"
											                data-value-field="id"
															data-bind="value: obj.currency_id, source: currencyDS"
															data-option-label="(--- Select ---)" 
															required data-required-msg="required" style="width: 100%;" />
													</div>	
													<!-- // Group END -->
												</div>

												<!-- Group -->
												<div class="span3">	
											        <div class="control-group">
														<label for="txtCreditLimit"><span data-bind="text: lang.lang.credit_limit"></span> </label>								              		
											            <input data-role="numerictextbox"
											                   data-format="n"
											                   data-min="0"										                   
											                   data-bind="value: obj.credit_limit"										                  
											                   style="width: 100%;">
													</div>
												</div>												

											</div>
							        	</div>
								        <!-- //ACCOUNTING INFO END -->

								        <!-- //PAYMENT INFO -->
								        <div class="tab-pane" id="tab2">
								        	
							            	<table class="table table-borderless table-condensed cart_total">						            	
							            		<tr>							            			
									                <td>Payment Method</td>
									              	<td>
									              		<input id="ddlPaymentMethod" name="ddlPaymentMethod"
															data-role="dropdownlist"
											            	data-value-primitive="true"
											                data-text-field="name"
											                data-value-field="id"
															data-bind="value: obj.payment_method_id, source: paymentMethodDS"
															data-option-label="(--- Select ---)" 
															style="width: 100%;" />
									              	</td>
									              	<td>Payment Term</td>
									              	<td>
									              		<input id="ddlPaymentTerm" name="ddlPaymentTerm"
															data-role="dropdownlist"
											            	data-value-primitive="true"
											                data-text-field="name"
											                data-value-field="id"
															data-bind="value: obj.payment_term_id, source: paymentTermDS" 
															data-option-label="(--- Select ---)"
															style="width: 100%;" />
									              	</td>									            	
									            </tr>
									            <tr>
									                <td>Bank Name</td>
									              	<td><input class="k-textbox" data-bind="value: obj.bank_name" placeholder="bank name ..." style="width: 100%;" /></td>							              	
									            	<td>Account Number</td>
									              	<td><input class="k-textbox" data-bind="value: obj.bank_account_number" placeholder="account number ..." style="width: 100%;" /></td>
									            </tr>									           							            
									            <tr>
									            	<td>Account Name</td>
									              	<td><input class="k-textbox" data-bind="value: obj.bank_account_name" placeholder="account name ..." style="width: 100%;" />							              	
									            	<td>Bank Address</td>
									              	<td><input class="k-textbox" data-bind="value: obj.bank_address" placeholder="bank address ..." style="width: 100%;" /></td>
									            </tr>
									            <tr>
									            	<td>Name On Check</td>
									            	<td><input class="k-textbox" data-bind="value: obj.name_on_cheque" placeholder="name on check ..." style="width: 100%;" /></td>
									            	<td></td>
									            	<td></td>
									            </tr>									            						            							            								            								            			            
									        </table>
							        	</div>
								        <!-- //PAYMENT INFO END -->

								        <!-- //GENERAL INFO -->
								        <div class="tab-pane" id="tab3">
							            	<table class="table table-borderless table-condensed cart_total">						            	
							            		<tr>
									                <td><span data-bind="text: lang.lang.status"></span> <span style="color:red">*</span></td>
									              	<td>
									              		<input id="customerStatus" name="customerStatus" 
									              				data-role="dropdownlist"
											            		data-text-field="name"
								           						data-value-field="id"
								           						data-value-primitive="true" 
											            		data-bind="source: statusList, value: obj.status"
											            		data-option-label="(--- Select ---)"
											            		required data-required-msg="ត្រូវការ ស្ថានភាព" />
									              	</td>							              	
									            	<td><span data-bind="text: lang.lang.register_date"></span> <span style="color:red">*</span></td>
									              	<td>
									              		<input id="registered_date" name="registered_date" 
										            		data-role="datepicker"			            		
							            					data-bind="value: obj.registered_date" 
							            					data-format="dd-MM-yyyy"
							            					data-parse-formats="yyyy-MM-dd" 
							            					placeholder="dd-MM-yyyy" required data-required-msg="required" />
									              	</td>
									            </tr>
									            <tr>
									                <td>Business Type</td>
									              	<td>
									              		<input data-role="dropdownlist"
											            		data-text-field="type"
								           						data-value-field="id"
								           						data-value-primitive="true" 
											            		data-bind="source: businessTypeDS, value: obj.business_type_id"
											            		data-option-label="(--- Select ---)" />
									              	</td>							              	
									            	<td>Is Local Business</td>
									              	<td>
									              		<input type="checkbox" data-bind="checked: obj.is_local" />
									              	</td>
									            </tr>
									            <tr>
									                <td><span data-bind="text: lang.lang.email"></span></td>
									              	<td><input class="k-textbox" data-bind="value: obj.email" placeholder="e.g. me@email.com" /></td>							              	
									            	<td><span data-bind="text: lang.lang.phone"></span></td>
									              	<td><input class="k-textbox" data-bind="value: obj.phone" placeholder="e.g. 012 333 444" /></td>
									            </tr>									           							            
									            <tr>
									            	<td><span data-bind="text: lang.lang.address"></span></td>
									              	<td><input class="k-textbox" data-bind="value: obj.address" placeholder="where you live ..." />							              	
									            	<td><span data-bind="text: lang.lang.memo"></span></td>
									              	<td><input class="k-textbox" data-bind="value: obj.memo" placeholder="memo ..." /></td>
									            </tr>
									            <tr>
									            	<td><label for="txtBillTo" data-bind="click: copyBillTo"><span data-bind="text: lang.lang.bill_to"></span> <i class="icon-share"></i></label></td>
									              	<td><input class="k-textbox" data-bind="value: obj.bill_to" placeholder="bill to ..." />							              	
									            	<td><span data-bind="text: lang.lang.ship_to"></span></td>
									              	<td><input class="k-textbox" data-bind="value: obj.ship_to" placeholder="ship to ..." /></td>									              	
									            </tr>							            							            								            								            			            
									        </table>
							        	</div>
								        <!-- //GENERAL INFO END -->

								        <!-- //CONTACT PERSON -->
								        <div class="tab-pane" id="tab4">
								        	<span class="btn btn-primary btn-icon glyphicons circle_plus" data-bind="click: addEmptyContactPerson"><i></i> <span data-bind="text: lang.lang.new_agent"></span></span>
								        	
								        	<table class="table table-bordered table-white">
										        <thead>
										            <tr>
										                <th><span data-bind="text: lang.lang.name"></span></th>
										                <th><span data-bind="text: lang.lang.department"></span></th>						                
										                <th><span data-bind="text: lang.lang.phone"></span></th>
										                <th><span data-bind="text: lang.lang.email"></span></th>
										                <th width="20px"></th>										               
										            </tr>
										        </thead>
										        <tbody data-role="listview"										        		
										        		data-auto-bind="false"										        						        		 
										        		data-template="vendor-contact-person-row-tmpl" 
										        		data-bind="source: contactPersonDS">
										        </tbody>										        						        
										    </table>
							        	</div>
								        <!-- //CONTACT PERSON END -->
								    </div>
								</div>
							</div>

							<br>											
							
							<!-- Form actions -->
							<div align="center">
								<span id="notification"></span>

								<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i><span data-bind="text: lang.lang.save"></span></span>
								<span class="btn btn-danger btn-icon glyphicons delete" data-bind="click: delete, visible: isEdit"><i></i><span data-bind="text: lang.lang.delete"></span></span>
								<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i><span data-bind="text: lang.lang.cancel"></span></span>
							</div>
							<!-- // Form actions END -->

						</div> <!-- End Widget-Body List -->
					</div>
					<!-- // Collapsible Widget END -->				          					                
			    											
				</div> <!-- // End div example-->  
			</div> <!-- // End div span12-->
		</div> <!-- // End div row-fluid-->	
	</div> 	
</script>
<script id="vendor-contact-person-row-tmpl" type="text/x-kendo-tmpl">
	<tr>		
		<td>
			<input id="name" name="name" 
					type="text" class="k-textbox" 
					data-bind="value: name"
					placeholder="eg: Mr. John" 
					required="required" validationMessage="required" style="width: 190px;" />
            <span data-for="name" class="k-invalid-msg"></span>
		</td>
		<td>
			<input type="text" class="k-textbox" data-bind="value: department" placeholder="eg: Accounting" style="width: 190px;" />
		</td>		
		<td>
			<input type="text" class="k-textbox" data-bind="value: phone" placeholder="eg: 012 333 444" style="width: 190px;" />
		</td>
		<td>
			<input type="text" class="k-textbox" data-bind="value: email" placeholder="eg: john@email.com" style="width: 190px;" />
		</td>		
		<td align="center">            
			<span class="glyphicons no-js delete" data-bind="click: deleteContactPerson"><i></i></span>									
		</td>		
	</tr>
</script>

<script id="po" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>PURCHASE ORDER</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 190px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>								
								<tr>
									<td>Supplier</td>
									<td>
										<input id="cbbContact" name="cbbContact"
											   data-role="combobox"											                    
							                   data-value-primitive="true"
							                   data-template="contact-list-tmpl"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.contact_id,
							                              source: contactDS,
							                              events:{ change: contactChanges }"
							                   data-placeholder="Type Name.."                    
							                   required data-required-msg="required" style="width: 100%" />
									</td>
								</tr>																															
							</table>

							<div class="strong" style="width: 90%; padding: 10px;" align="center"
								data-bind="style: {
								        backgroundColor: bgColor}">
								<div align="left">AMOUNT DUE</div>
								<h2 data-bind="text: total" align="right"></h2>

							</div>

						</div>						
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 190px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						        	<li class="span2 glyphicons cogwheels active"><a href="#tab1-5" data-toggle="tab"><i></i> </a>
						            </li>
						            <li class="span2 glyphicons adress_book"><a href="#tab2-5" data-toggle="tab"><i></i> </a>
						            </li>
						            <li class="span2 glyphicons circle_info"><a href="#tab3-5" data-toggle="tab"><i></i> </a>
						            </li>
						            <li class="span2 glyphicons paperclip"><a href="#tab4-5" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span3 glyphicons history"><a href="#tab5-5" data-toggle="tab"><i></i> Recuring</a>
						            </li>						            								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						    	<!-- Options Tab content -->
						        <div class="tab-pane active" id="tab1-5">						            
						            <table class="table table-borderless table-condensed cart_total">							            
										
							            <tr>
							            	<td>Expected Date</td>
							            	<td>
							            		<input id="txtDueDate" name="txtDueDate" 
														data-role="datepicker"
														data-format="dd-MM-yyyy"
														data-parse-formats="yyyy-MM-dd" 
														data-bind="value: obj.due_date" 
														required data-required-msg="required"
														style="width:100%;" />
							            	</td>
							            </tr>											
						            </table>						            
						        </div>
						        <!-- // Options Tab content END -->

						        <!-- Address Tab content -->
						        <div class="tab-pane" id="tab2-5">
						        	Billing Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.bill_to" placeholder="Billing to ..."></textarea>								
									
									Shipping Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.ship_to" placeholder="Shipping to ..."></textarea>	
											
						        </div>
						        <!-- // Address Tab content END -->

						        <!-- Info Tab content -->
						        <div class="tab-pane" id="tab3-5">
						        	
									<table class="table table-borderless table-condensed cart_total">
										<tr>
											<td>Balance</td>
											<td>
												<span data-bind="text: balance"></span>
											</td>
										</tr>
										<tr>
											<td>Credit Allowed</td>
											<td>												
												<span data-format="n" data-bind="text: obj.credit_allowed"></span>
											</td>
										</tr>							            
							            <tr>
											<td>Currency</td>
											<td>
												<input id="cbbCurrency" name="cbbCurrency"
													   data-role="combobox"				                
									                   data-value-primitive="true"
									                   data-template="currency-list-tmpl"				   
									                   data-text-field="code"
									                   data-value-field="locale"
									                   data-bind="value: obj.locale, 
									                   			source: currencyDS, 
									                   			events: {change : setRate}"
									                   placeholder="Add currency..." 
									                   required data-required-msg="required" style="width: 100%" />										
											</td>
										</tr>						            	
										<tr>
											<td>Segments</td>
											<td>
												<select data-role="multiselect"
													   data-value-primitive="true"								   
													   data-item-template="segment-list-tmpl"				    
													   data-value-field="id" 
													   data-text-field="code"
													   data-bind="value: obj.segments, 
													   			source: segmentItemDS,
													   			events:{ change: segmentChanges }"
													   data-placeholder="Add Segment.."				   
													   style="width: 100%" /></select>
											</td>
										</tr>											
						            </table>
											
						        </div>
						        <!-- // Info Tab content END -->

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab4-5">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->						        

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab5-5">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->						        								        

						    </div>
						</div>

				    </div>
				</div>

				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th class="center" style="width: 1%;">No.</th>			                
			                <th>ITEM</th>
			                <th>DESCRIPTION</th>
			                <th style="width: 20%;">QUANTITY</th>
			                <th style="width: 13%;">COST</th>
			                <th style="width: 1%;" data-bind="visible: showDiscount">DISCOUNT</th>			                
			                <th style="width: 10%;">AMOUNT</th>
			                <th style="width: 11%;">TAX</th>			                			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="po-template" 
			        		data-auto-bind="false"
			        		data-bind="source: lineDS"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span8">						
						
						<div class="row-fluid">							
							<div class="span6">
								<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>												

								<div class="btn-group">
									<div class="leadcontainer">
										
									</div>
									<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
									<ul class="dropdown-menu" style="padding-left: 10px">
										<li>
											<input type="checkbox" id="chbDiscount" class="k-checkbox" data-bind="checked: showDiscount">
          									<label class="k-checkbox-label" for="chbDiscount">DISCOUNT</label>
										</li>															
									</ul>
								</div>

								<a href="#/item" class="btn btn-default">Add New Item</a>
								
								<br><br>
								<div class="well">
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo2" placeholder="memo for internal ..."></textarea>
									<br>						
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo" placeholder="memo for internal ..."></textarea>
								</div>
							</div>
							<div class="span6">
							
							</div>
						</div>

					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span4">
						<table class="table table-condensed table-striped table-white">
							<tbody>
								<tr>
									<td class="right">Subtotal:</td>
									<td class="right strong" width="40%"><span data-bind="text: sub_total"></span></td>
								</tr>								
								<tr>
									<td class="right">Total Discount:</td>
									<td class="right strong">
										<span data-bind="text: discount"></span>
                   					</td>
								</tr>
								<tr>
									<td class="right">Total Tax:</td>
									<td class="right strong"><span data-bind="text: tax"></span></td>
								</tr>
								<tr data-bind="visible: showDeposit">
									<td class="right">Deposit:</td>
									<td class="right strong">
										<span data-format="n" data-bind="text: obj.deposit"></span>
									</td>
								</tr>
								<tr>
									<td class="right">
										Credits:
										<span class="strong" data-format="n" data-bind="text: total_credit"></span>										
									</td>
									<td class="right strong">
										<input data-role="numerictextbox"
							                   data-format="n"
							                   data-min="0"							                                      
							                   data-bind="value: obj.credit,
							                              events: { change: changes }"
							                   style="width: 100%;">
									</td>
								</tr>								
								<tr>
									<td class="right"><h4>Total:</h4></td>
									<td class="right strong"><h4 data-bind="text: total"></h4></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>	           
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>
					<!-- <span id="saveSend" class="btn btn-icon btn-warning glyphicons envelope" style="width: 80px;"><i></i> Save Send</span>										 -->
					<span id="savePrint" class="btn btn-icon btn-default glyphicons print" data-bind="click: cancel" style="width: 80px;"><i></i> Save Print</span>
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>					
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="po-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td>
			<i class="icon-trash" data-bind="events: { click: removeRow }"></i>
			#:banhji.po.lineDS.indexOf(data)+1#			
		</td>		
		<td>
			<input id="ccbItem-#:uid#" name="ccbItem-#:uid#"
				   data-role="combobox"
				   data-template="item-list-tmpl"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: item_id, 
                   			  source: itemDS,
                   			  events:{ change: itemChanges }"
                   placeholder="Add Item..." 
                   required data-required-msg="required" style="width: 100%" />			
		</td>		
		<td>
			<input id="txtDescription-#:uid#" name="txtDescription-#:uid#" 
					type="text" class="k-textbox" 
					data-bind="value: description"					 
					required data-required-msg="required"
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td>
			<input id="txtQuantity-#:uid#" name="txtQuantity-#:uid#" 
					data-role="numerictextbox" 
					data-format="n0" data-min="0"
					data-bind="value: quantity, events: {change : changes}"
					required data-required-msg="required" style="width: 40%;" />

			<input data-role="dropdownlist"                  
                   data-text-field="measurement"
                   data-value-field="measurement_id"
                   data-bind="value: measurement_id,
                   			  source: item_prices,
                   			  events:{ change: measurementChanges }"
                   data-option-label="Measure"
                   style="width: 57%;" />
		</td>					
		<td>
			<input id="txtPrice-#:uid#" name="txtPrice-#:uid#" 
					data-role="numerictextbox" 
					data-format="n" 
					data-bind="value: price, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" />
		</td>
		<td class="center" data-bind="visible: showDiscount">
			<input data-role="numerictextbox"
                   data-format="p0"
                   data-min="0"
                   data-max="0.99"
                   data-step="0.1"                   
                   data-bind="value: discount,
                              events: { change: changes }"
                   style="width: 65px;">			
		</td>				
		<td class="right">
			<span data-format="n" data-bind="text: amount"></span> 						
		</td>
		<td>
			<input id="ccbTaxItem-#:uid#" name="ccbTaxItem-#:uid#"
				   data-role="combobox"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: tax_item_id, 
                   			  source: taxItemDS,
                   			  events:{ change: changes }"
                   style="width: 100%" />			
		</td>				
    </tr>   
</script>

<script id="grn" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>GOODS RECEIVE NOTE</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 190px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>								
								<tr>
									<td>Supplier</td>
									<td>
										<input id="cbbContact" name="cbbContact"
											   data-role="combobox"											                    
							                   data-value-primitive="true"
							                   data-template="contact-list-tmpl"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.contact_id,
							                              source: contactDS,
							                              events:{ change: contactChanges }"
							                   data-placeholder="Type Name.."                    
							                   required data-required-msg="required" style="width: 100%" />
									</td>
								</tr>																															
							</table>

							<div class="strong" style="width: 90%; padding: 10px;" align="center"
								data-bind="style: {
								        backgroundColor: bgColor}">
								<div align="left">AMOUNT DUE</div>
								<h2 data-bind="text: total" align="right"></h2>

							</div>

						</div>						
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 190px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						        	<li class="span2 glyphicons cogwheels active"><a href="#tab1-4" data-toggle="tab"><i></i> Option</a>
						            </li>
						            <li class="span2 glyphicons adress_book"><a href="#tab2-4" data-toggle="tab"><i></i> Address</a>
						            </li>						            
						            <li class="span2 glyphicons paperclip"><a href="#tab3-4" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span3 glyphicons history"><a href="#tab4-4" data-toggle="tab"><i></i> Recuring</a>
						            </li>						            								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						    	<!-- Options Tab content -->
						        <div class="tab-pane active" id="tab1-4">						            
						            <table class="table table-borderless table-condensed cart_total">								            							           
										<tr>							            				
											<td>
							            		<input data-role="dropdownlist"
									                   data-option-label="Reference Type..."								                   
									                   data-value-primitive="true"
									                   data-text-field="name"
									                   data-value-field="id"
									                   data-bind="value: obj.reference_type,
									                              source: referenceTypes,
									                              events:{change: loadReference}"
									                   style="width: 100%" />						            						            		
							            	</td>
							            	<td>
												<select data-role="dropdownlist"
														data-option-label="Select Reference..."
														data-auto-bind="false"
							              				data-value-primitive="true"
														data-text-field="number" 
							              				data-value-field="id"						              				 
							              				data-bind="value: obj.reference_id,
							              							source: referenceDS,
							              							enabled: bolReference,						              							
							              							events:{change: referenceChanges}" 
							              				style="width: 100%" ></select>
											</td>
										</tr>	
						            </table>						            
						        </div>
						        <!-- // Options Tab content END -->

						        <!-- Address Tab content -->
						        <div class="tab-pane" id="tab2-4">
						        	Billing Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.bill_to" placeholder="Billing to ..."></textarea>								
									
									Shipping Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.ship_to" placeholder="Shipping to ..."></textarea>	
											
						        </div>
						        <!-- // Address Tab content END -->

						        <!-- Info Tab content -->
						       
						        <!-- // Info Tab content END -->

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab3-4">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->						        

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab4-4">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->						        								        

						    </div>
						</div>

				    </div>
				</div>

				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th class="center" style="width: 1%;">No.</th>			                
			                <th>ITEM</th>
			                <th>DESCRIPTION</th>
			                <th style="width: 20%;">QUANTITY</th>			                			                			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="grn-template" 
			        		data-auto-bind="false"
			        		data-bind="source: lineDS"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span8">						
						
						<div class="row-fluid">							
							<div class="span6">
								<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>									
								<a href="#/item" class="btn btn-default">Add New Item</a>
								<br><br>
								<div class="well">
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo2" placeholder="memo for internal ..."></textarea>
									<br>						
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo" placeholder="memo for internal ..."></textarea>
								</div>
							</div>
							<div class="span6">
							
							</div>
						</div>

					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span4">
						<table class="table table-condensed table-striped table-white">
							<tbody>																								
								<tr>
									<td class="right"><h4>Total:</h4></td>
									<td class="right strong"><h4 data-format="n0" data-bind="text: obj.amount"></h4></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>	           
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>
					<!-- <span id="saveSend" class="btn btn-icon btn-warning glyphicons envelope" style="width: 80px;"><i></i> Save Send</span>										 -->
					<span id="savePrint" class="btn btn-icon btn-default glyphicons print" data-bind="click: cancel" style="width: 80px;"><i></i> Save Print</span>
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>					
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="grn-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td>
			<i class="icon-trash" data-bind="events: { click: removeRow }"></i>
			#:banhji.grn.lineDS.indexOf(data)+1#			
		</td>		
		<td>
			<input id="ccbItem-#:uid#" name="ccbItem-#:uid#"
				   data-role="combobox"
				   data-template="item-list-tmpl"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: item_id, 
                   			  source: itemDS,
                   			  events:{ change: itemChanges }"
                   placeholder="Add Item..." 
                   required data-required-msg="required" style="width: 100%" />			
		</td>		
		<td>
			<input id="txtDescription-#:uid#" name="txtDescription-#:uid#" 
					type="text" class="k-textbox" 
					data-bind="value: description"					 
					required data-required-msg="required"
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td>
			<input id="txtQuantity-#:uid#" name="txtQuantity-#:uid#" 
					data-role="numerictextbox" 
					data-format="n0" data-min="0"
					data-bind="value: quantity, events: {change : changes}"
					required data-required-msg="required" style="width: 40%;" />

			<input data-role="dropdownlist"                  
                   data-text-field="measurement"
                   data-value-field="measurement_id"
                   data-bind="value: measurement_id,
                   			  source: item_prices,
                   			  events:{ change: measurementChanges }"
                   data-option-label="Measure"
                   style="width: 57%;" />
		</td>						
    </tr>   
</script>

<script id="vendorDeposit" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>Vendor Deposit</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 150px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>
								<tr>
									<td>Suppliers</td>
									<td>
										<input id="cbbContact" name="cbbContact"
											   data-role="combobox"											                    
							                   data-value-primitive="true"
							                   data-template="contact-list-tmpl"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.contact_id,
							                              source: contactDS,
							                              events:{ change: contactChanges }"
							                   data-placeholder="Type Name.."                    
							                   required data-required-msg="required" style="width: 100%" />
									</td>
								</tr>							
								<tr>
									<td>Currency</td>
									<td>
										<input id="cbbCurrency" name="cbbCurrency"
											   data-role="combobox"				                
							                   data-value-primitive="true"
							                   data-template="currency-list-tmpl"				   
							                   data-text-field="code"
							                   data-value-field="locale"
							                   data-bind="value: obj.locale, 
							                   			source: currencyDS, 
							                   			events: {change : setRate}"
							                   placeholder="Add currency..." 
							                   required data-required-msg="required" style="width: 100%" />	
									</td>
								</tr>															
							</table>
						</div>
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 150px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						        	<li class="span1 glyphicons cogwheels active" ><a href="#tab1-4" data-toggle="tab" ><i></i></a>
						            </li>
						            <li class="span1 glyphicons pencil"><a href="#tab2-4" data-toggle="tab"><i></i></a>
						            </li>
						            <li class="span1 glyphicons paperclip"><a href="#tab3-4" data-toggle="tab"><i></i></a>
						            </li>
						            <li class="span2 glyphicons history"><a href="#tab4-4" data-toggle="tab"><i></i>Recuring</a>
						            </li>								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">
						    	<div class="tab-pane active" id="tab1-4">
							       <table class="table table-borderless table-condensed cart_total">						
									<tr>
										<td style="width: 15%">Deposit To</td>
										<td style="width: 40%">
											<input id="cbbAccount" name="cbbAccount"
												   data-role="combobox"                   
								                   data-value-primitive="true"                   
								                   data-template="account-list-tmpl"
								                   data-text-field="name"								                  
								                   data-value-field="id"
								                   data-bind="value: obj.account_id,
								                   			  source: depositAccountDS"
								                   data-placeholder="Add Account.."					                                      
								                   required data-required-msg="required" style="width: 100%" />
										</td>
										<td style="width: 20%">Reference Type</td>
											<td><input data-role="dropdownlist"
								                   data-option-label="Reference Type..."								                   
								                   data-value-primitive="true"
								                   data-text-field="name"
								                   data-value-field="id"
								                   data-bind="value: obj.reference_type,
								                              source: referenceTypes"								                              
								                   style="width: 100%" />						            						            		
							            	</td>

							            	
									</tr>
									<tr>
										<td style="width: 10%">Segment</td>
										<td style="width: 40%">
											<select data-role="multiselect"
										   data-value-primitive="true"								   
										   data-item-template="segment-list-tmpl"				    
										   data-value-field="id" 
										   data-text-field="code"
										   data-bind="value: obj.segments, 
										   			source: segmentItemDS,
										   			events:{ change: segmentChanges }"
										   data-placeholder="Add Segment.."				   
										   style="width: 100%" /></select>
										</td>														
									</tr>									
									</table>
						   		</div>
						        <!-- Memo Tab content -->
						        <div class="tab-pane" id="tab2-4">
						        	<textarea id="memo2" cols="0" rows="4" class="k-textbox" 
						        		data-bind="value: obj.memo2" style="width:100%;" 
						        		placeholder="Please enter transaction purpose here ..."></textarea>
						        </div>
						        <!-- // Memo Tab content END -->

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab3-4">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab4-4">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->								        

						    </div>
						</div>

				    </div>
				</div>								
				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th style="width: 1%;">No.</th>			               
			                <th style="width: 30%;">ACCOUNT</th>
			                <th>DESCRIPTION</th>
			                <th style="width: 10%;">REF</th>			                
			                <th style="width: 15%;">AMOUNT</th>			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="vendorDeposit-template" 
			        		data-auto-bind="false"
			        		data-bind="source: lineDS"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span6 hidden-print">
						
						<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>												

						

						<a href="#/accounts/u/new" class="btn btn-default">Add New Account</a>						
						
					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span6">
						<table class="table table-borderless table-condensed cart_total">
							<tbody>								
								<tr>
									<td class="right">Total:</td>
									<td class="right strong"><span data-bind="text: total"></span></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>
	           
	            <br>
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>										
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>
					<span class="btn btn-icon btn-warning glyphicons remove_2" data-bind="click: cancel" style="width: 80px;"><i></i> Cancel</span>
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="vendorDeposit-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td class="center">
			<i class="icon-trash" data-bind="events: { click: remove }"></i>
			#:banhji.vendorDeposit.lineDS.indexOf(data)+1#			
		</td>				
		<td>
			<input id="cbbAccounts" name="cbbAccounts"
				   data-role="combobox"                   
                   data-value-primitive="true"                   
                   data-template="account-list-tmpl"
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: account_id,
                              source: accountDS"
                   data-placeholder="Add Account.."
                   data-list-width="400"                    
                   required data-required-msg="required" style="width: 100%" />	
		</td>		
		<td>
			<input name="description" 
					type="text" class="k-textbox" 
					data-bind="value: description"					
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td>
			<input type="text" class="k-textbox" 
					data-bind="value: reference_no"				
					style="width: 100%; margin-bottom: 0;" />		
		</td>		
		<td class="right">
			<input id="txtAmount" name="txtAmount" 
					data-role="numerictextbox" 
					data-format="n0" 
					data-bind="value: amount, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" /> 						
		</td>			
    </tr>   
</script>

<script id="purchase" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>PURCHASE</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 190px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>								
								<tr>
									<td>Supplier</td>
									<td>
										<input id="cbbContact" name="cbbContact"
											   data-role="combobox"											                    
							                   data-value-primitive="true"
							                   data-template="contact-list-tmpl"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.contact_id,
							                              source: contactDS,
							                              events:{ change: contactChanges }"
							                   data-placeholder="Type Name.."                    
							                   required data-required-msg="required" style="width: 100%" />
									</td>
								</tr>																															
							</table>

							<div class="strong" style="width: 90%; padding: 10px;" align="center"
								data-bind="style: {
								        backgroundColor: bgColor}">
								<div align="left">AMOUNT DUE</div>
								<h2 data-bind="text: total" align="right"></h2>
							</div>
						</div>						
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 190px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						        	<li class="span1 glyphicons cogwheels active"><a href="#tab1-5" data-toggle="tab"><i></i></a>
						            </li>
						            <li class="span1 glyphicons circle_info"><a href="#tab2-5" data-toggle="tab"><i></i></a>
						            </li>
						            <li class="span1 glyphicons adress_book"><a href="#tab3-5" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span1 glyphicons paperclip"><a href="#tab4-5" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span3 glyphicons history"><a href="#tab5-5" data-toggle="tab"><i></i> Recuring</a>
						            </li>						            								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						    	<!-- Options Tab content -->
						        <div class="tab-pane active" id="tab1-5">						            
						            <table class="table table-borderless table-condensed cart_total">
						            	<tr>
						            		<td style="width: 40%">
						            			<table>
						            				<tr>
						            					<td>
									            			<input type="radio" value="Cash_Purchase" class="k-radio"
									            					name="payOption" id="payOption1"
									            					data-bind="checked: obj.type, 
									            								events:{ change: typeChanges }"> 
									            			<label class="k-radio-label" for="payOption1">CASH</label>
									            		</td>
									            		<td>
												            <input type="radio" value="Credit_Purchase" class="k-radio"
												            		name="payOption" id="payOption2"
												            		data-bind="checked: obj.type, 
												            					events:{ change: typeChanges }"> 
												            <label class="k-radio-label" for="payOption2">CREDIT</label>
										            	</td>
										            </tr>
									            </table>
						            		</td>
						            		<td style="width: 60%" data-bind="invisible: isCash">
						            			Due Date						            			
							            		<input id="txtDueDate" name="txtDueDate" class="pull-right"
														data-role="datepicker"
														data-format="dd-MM-yyyy"
														data-parse-formats="yyyy-MM-dd" 
														data-bind="value: obj.due_date" />
						            		</td>						            		
						            	</tr>							            
										<tr>
							            	<td>
							            		Bill No.
							            		<input class="k-textbox pull-right" data-bind="value: obj.reference_no" style="width: 170px;" />
							            	</td>
							            	<td>
							            		Bill Date
							            		<input id="txtBillDate" name="txtBillDate" class="pull-right" 
							            				data-role="datepicker"
														data-format="dd-MM-yyyy"
														data-parse-formats="yyyy-MM-dd" 
														data-bind="value: obj.bill_date" />							            		
							            	</td>
							            </tr>
										<tr>
							            	<td>Account</td>				
											<td>
												<input id="ddlAccount" name="ddlAccount" 
														data-role="dropdownlist"
														data-auto-bind="false"														
							              				data-value-primitive="true"
							              				data-template="account-list-tmpl"
														data-text-field="name" 
							              				data-value-field="id"						              				 
							              				data-bind="value: obj.account_id,
							              							source: selectAccountDS"
							              				data-option-label="Select Account..."
							              				required data-required-msg="required" 
							              				style="width: 100%" />
											</td>
										</tr>																				
										<tr>							            				
											<td>
							            		<input data-role="dropdownlist"
									                   data-option-label="Reference Type..."								                   
									                   data-value-primitive="true"
									                   data-text-field="name"
									                   data-value-field="id"
									                   data-bind="value: obj.reference_type,
									                              source: referenceTypes,
									                              events:{change: loadReference}"
									                   style="width: 100%" />						            						            		
							            	</td>
							            	<td>
												<select data-role="dropdownlist"
														data-option-label="Select Reference..."
														data-auto-bind="false"
							              				data-value-primitive="true"
														data-text-field="number" 
							              				data-value-field="id"						              				 
							              				data-bind="value: obj.reference_id,
							              							source: referenceDS,
							              							enabled: bolReference,						              							
							              							events:{change: referenceChanges}" 
							              				style="width: 100%" ></select>
											</td>
										</tr>	
						            </table>						            
						        </div>
						        <!-- // Options Tab content END -->

						        <!-- Info Tab content -->
						        <div class="tab-pane" id="tab2-5">
						        	
									<table class="table table-borderless table-condensed cart_total">							            
							            <tr>
											<td>Currency</td>
											<td>
												<input id="cbbCurrency" name="cbbCurrency"
													   data-role="combobox"				                
									                   data-value-primitive="true"
									                   data-template="currency-list-tmpl"				   
									                   data-text-field="code"
									                   data-value-field="locale"
									                   data-bind="value: obj.locale, 
									                   			source: currencyDS, 
									                   			events: {change : setRate}"
									                   placeholder="Add currency..." 
									                   required data-required-msg="required" style="width: 100%" />										
											</td>
										</tr>						            	
										<tr>
											<td>Segments</td>
											<td>
												<select data-role="multiselect"
													   data-value-primitive="true"								   
													   data-item-template="segment-list-tmpl"				    
													   data-value-field="id" 
													   data-text-field="code"
													   data-bind="value: obj.segments, 
													   			source: segmentItemDS,
													   			events:{ change: segmentChanges }"
													   data-placeholder="Add Segment.."				   
													   style="width: 100%" /></select>
											</td>
										</tr>
										<tr data-bind="invisible: isCash">
							            	<td>Payment Term</td>				
											<td>
												<input data-role="dropdownlist"														
							              				data-value-primitive="true"
														data-text-field="name" 
							              				data-value-field="id"						              				 
							              				data-bind="value: obj.payment_term_id,
							              							source: paymentTermDS"
							              				data-option-label="Select Term..." 
							              				style="width: 100%" />
											</td>
										</tr>
										<tr data-bind="visible: isCash">
							            	<td>Payment Method</td>				
											<td>
												<input data-role="dropdownlist"														
							              				data-value-primitive="true"
														data-text-field="name" 
							              				data-value-field="id"						              				 
							              				data-bind="value: obj.payment_method_id,
							              							source: paymentMethodDS"
							              				data-option-label="Select Method..." 
							              				style="width: 100%" />
											</td>
										</tr>							            
							            <tr data-bind="visible: isCash">
							            	<td>Check No</td>				
											<td>
												<input class="k-textbox" data-bind="value: obj.check_no" style="width: 100%" />
											</td>
										</tr>											
						            </table>
											
						        </div>
						        <!-- // Info Tab content END -->

						        <!-- Address Tab content -->
						        <div class="tab-pane" id="tab3-5">
						        	Billing Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.bill_to" placeholder="Billing to ..."></textarea>								
									
									Shipping Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.ship_to" placeholder="Shipping to ..."></textarea>	
											
						        </div>
						        <!-- // Address Tab content END -->						        

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab4-5">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->						        

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab5-5">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->						        								        

						    </div>
						</div>

				    </div>
				</div>

				<!-- Middle Part -->
				<div class="box-generic">

				    <!-- Tabs Heading -->
				    <div class="tabsbar tabsbar-2">
				        <ul class="row-fluid row-merge">
				        	<li class="span6 glyphicons cargo active"><a href="#tab1-2" data-toggle="tab"><i></i> ITEMS / EXPENSE</a>
				            </li>
				            <li class="span6 glyphicons circle_plus"><a href="#tab2-2" data-toggle="tab"><i></i> ADDITIONAL COSTS</a>
				            </li>				            					            								            
				        </ul>
				    </div>
				    <!-- // Tabs Heading END -->

				    <div class="tab-content">

				    	<!-- Item Tab content -->
				        <div class="tab-pane active" id="tab1-2">						            
				        	<!-- Item List -->
							<table class="table table-bordered table-primary table-striped table-vertical-center">
						        <thead>
						            <tr>
						                <th class="center" style="width: 1%;">No.</th>			                
						                <th>ITEM</th>
						                <th>DESCRIPTION</th>
						                <th style="width: 20%;">QUANTITY</th>
						                <th style="width: 10%;">COST</th>
						                <th style="width: 1%;" data-bind="visible: showDiscount">DISCOUNT</th>			                
						                <th class="center" style="width: 15%;">AMOUNT</th>
						                <th class="center" style="width: 11%;">TAX</th>
						                <th class="center" style="width: 1%;" data-bind="visible: showAdditionalCost">+Cost</th>			                			                			                
						            </tr> 
						        </thead>
						        <tbody data-role="listview" 
						        		data-template="purchase-item-line-template" 
						        		data-auto-bind="false"
						        		data-bind="source: lineDS"></tbody>			        
						    </table>

						    <!-- Item Add Row part -->
				            <div class="row-fluid">		
														
								<div class="span12">
									<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>												

									<div class="btn-group">
										<div class="leadcontainer">
											
										</div>
										<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
										<ul class="dropdown-menu" style="padding-left: 10px">
											<li>
												<input type="checkbox" id="chbDiscount" class="k-checkbox" data-bind="checked: showDiscount" />												
												<label class="k-checkbox-label" for="chbDiscount">DISCOUNT</label>
											</li>
											<li>
												<input type="checkbox" id="chbAdditionalCost" class="k-checkbox" data-bind="checked: showAdditionalCost" />												
												<label class="k-checkbox-label" for="chbAdditionalCost">ADDITIONAL COST</label>
											</li>																									
										</ul>
									</div>

									<span class="btn btn-default">Add New Item</span>								
								</div>										
								
							</div>

							<br>

						    <!-- Account List -->				
							<table class="table table-bordered table-primary table-striped table-vertical-center">
						        <thead>
						            <tr>
						                <th style="width: 1%;">No.</th>			                
						                <th style="width: 20%;">ACCOUNT</th>
						                <th>DESCRIPTION</th>
						                <th data-bind="visible: showRef" style="width: 7%;">REF</th>			                
						                <th data-bind="visible: showSegment" style="width: 15%;">SEGMENT</th>
						                <th class="center" style="width: 15%;">AMOUNT</th>
						                <th class="center" style="width: 11%;">TAX</th>			                			                
						            </tr> 
						        </thead>
						        <tbody data-role="listview" 
						        		data-template="purchase-account-line-template" 
						        		data-auto-bind="false"
						        		data-bind="source: accountLineDS"></tbody>			        
						    </table>
						    <!-- Add Row Account -->
						    <div>
								<button class="btn btn-inverse" data-bind="click: addRowAccount"><i class="icon-plus icon-white"></i></button>												

								<div class="btn-group">
									<div class="leadcontainer">
										
									</div>
									<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
									<ul class="dropdown-menu" style="padding-left: 10px">
										<li>											
											<input type="checkbox" id="chbReference" class="k-checkbox" data-bind="checked: showRef" />												
											<label class="k-checkbox-label" for="chbReference">REFERENCE</label>
										</li>
										<li>											
											<input type="checkbox" id="chbSegment" class="k-checkbox" data-bind="checked: showSegment" />												
											<label class="k-checkbox-label" for="chbSegment">SEGMENT</label>
										</li>															
									</ul>
								</div>

								<span class="btn btn-default">Add New Account</span>								
							</div>

				        </div>
				        <!-- // Item Tab content END -->

				        <!-- Additional Cost Tab content -->
				        <div class="tab-pane" id="tab2-2">				        	
							<table class="table table-bordered table-primary table-striped table-vertical-center">
						        <thead>
						            <tr>
						                <th class="center" style="width: 1%;">No.</th>			                
						                <th>TYPE</th>
						                <th>SUPPLIER</th>
						                <th>INV.#</th>
						                <th>DATE</th>
						                <th data-bind="visible: showDueDateColumn">DUE DATE</th>
						                <th>DESCRIPTION</th>						                						                			                
						                <th class="center" style="width: 15%;">AMOUNT</th>
						                <th class="center" style="width: 11%;">TAX</th>			                			                			                
						            </tr> 
						        </thead>
						        <tbody data-role="listview" 
						        		data-template="purchase-additional-cost-template" 
						        		data-auto-bind="false"
						        		data-bind="source: additionalCostDS"></tbody>			        
						    </table>

						    <!-- Add Row part -->
				            <div class="row-fluid">		
														
								<div class="span8">

									<table>
										<tr>
											<td>
												<button class="btn btn-inverse" data-bind="click: addRowAdditionalCost"><i class="icon-plus icon-white"></i></button>

												<div class="btn-group">
													<div class="leadcontainer">
														
													</div>
													<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
													<ul class="dropdown-menu" style="padding-left: 10px">
														<li>
															<input type="checkbox" id="chbDueDateColumn" class="k-checkbox" data-bind="checked: showDueDateColumn" />												
															<label class="k-checkbox-label" for="chbDueDateColumn">DUE DATE</label>
														</li>																										
													</ul>
												</div>
											</td>
											<td>Additional Cost Apply:</td>
											<td>
												<input type="radio" name="engine" id="engine1" class="k-radio" value="Equal" 
														data-bind="checked: obj.additional_apply,
																	events:{ change: changes }">
									            <label class="k-radio-label" for="engine1">EQUAL</label>
						            		</td>						            	
						            		<td>						         
									            <input type="radio" name="engine" id="engine2" class="k-radio" value="Weighted"
									            		data-bind="checked: obj.additional_apply,
																	events:{ change: changes }">
									            <label class="k-radio-label" for="engine2">WEIGHTED</label>
						            		</td>
						            	</tr>
						            </table>
								</div>

								<div class="span4">
									<table class="table table-condensed table-striped table-white">
										<tbody>
											<tr>												
												<td class="right">Costs Allocated:</td>
												<td class="right strong" width="40%"><span data-bind="text: additional_cost"></span></td>
											</tr>
										</tbody>
									</table>
								</div>										
								
							</div>
				        </div>
				        <!-- // Additional Cost Tab content END -->				        						        								        

				    </div>
				</div>							    	    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span8">														
						<div class="span6 well">
							<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo2" placeholder="memo for internal ..."></textarea>
							<br>						
							<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo" placeholder="memo for internal ..."></textarea>
						</div>
					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span4">
						<table class="table table-condensed table-striped table-white">
							<tbody>
								<tr>
									<td class="right">Subtotal:</td>
									<td class="right strong" width="40%"><span data-bind="text: sub_total"></span></td>
								</tr>								
								<tr>
									<td class="right">Total Discount:</td>
									<td class="right strong">
										<span data-bind="text: discount"></span>
                   					</td>
								</tr>
								<tr>
									<td class="right">Total Tax:</td>
									<td class="right strong"><span data-bind="text: tax"></span></td>
								</tr>
								<tr data-bind="visible: showDeposit">
									<td class="right">Deposit:</td>
									<td class="right strong">
										<span data-format="n" data-bind="text: obj.deposit"></span>
									</td>
								</tr>
								<tr>
									<td class="right">
										Credits:
										<span class="strong" data-format="n" data-bind="text: total_credit"></span>										
									</td>
									<td class="right strong">
										<input data-role="numerictextbox"
							                   data-format="n"
							                   data-min="0"							                                      
							                   data-bind="value: obj.credit,
							                              events: { change: changes }"
							                   style="width: 100%;">
									</td>
								</tr>								
								<tr>
									<td class="right"><h4>Total:</h4></td>
									<td class="right strong"><h4 data-bind="text: total"></h4></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>	           
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>
					<!-- <span id="saveSend" class="btn btn-icon btn-warning glyphicons envelope" style="width: 80px;"><i></i> Save Send</span>										 -->
					<span id="savePrint" class="btn btn-icon btn-default glyphicons print" data-bind="click: cancel" style="width: 80px;"><i></i> Save Print</span>
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>					
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="purchase-item-line-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td>
			<i class="icon-trash" data-bind="events: { click: removeRow }"></i>
			#:banhji.purchase.lineDS.indexOf(data)+1#			
		</td>		
		<td>
			<input id="ccbItem-#:uid#" name="ccbItem-#:uid#"
				   data-role="combobox"
				   data-template="item-list-tmpl"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: item_id, 
                   			  source: itemDS,
                   			  events:{ change: itemChanges }"
                   placeholder="Add Item..." 
                   required data-required-msg="required" style="width: 100%" />			
		</td>		
		<td>
			<input id="txtDescription-#:uid#" name="txtDescription-#:uid#" 
					type="text" class="k-textbox" 
					data-bind="value: description"					 
					required data-required-msg="required"
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td>
			<input id="txtQuantity-#:uid#" name="txtQuantity-#:uid#" 
					data-role="numerictextbox" 
					data-format="n0" data-min="0"
					data-bind="value: quantity, events: {change : changes}"
					required data-required-msg="required" style="width: 40%;" />

			<input data-role="dropdownlist"                  
                   data-text-field="measurement"
                   data-value-field="measurement_id"
                   data-bind="value: measurement_id,
                   			  source: item_prices,
                   			  events:{ change: measurementChanges }"
                   data-option-label="Measure"
                   style="width: 57%;" />
		</td>					
		<td>
			<input id="txtPrice-#:uid#" name="txtPrice-#:uid#" 
					data-role="numerictextbox" 
					data-format="n" 
					data-bind="value: price, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" />
		</td>
		<td class="center" data-bind="visible: showDiscount">
			<input data-role="numerictextbox"
                   data-format="p0"
                   data-min="0"
                   data-max="0.99"
                   data-step="0.1"                   
                   data-bind="value: discount,
                              events: { change: changes }"
                   style="width: 65px;">			
		</td>				
		<td class="right">
			<span data-format="n" data-bind="text: amount"></span> 						
		</td>
		<td>
			<input id="ccbTaxItem-#:uid#" name="ccbTaxItem-#:uid#"
				   data-role="combobox"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: tax_item_id, 
                   			  source: taxItemDS,
                   			  events:{ change: changes }"
                   style="width: 100%" />			
		</td>
		<td class="center" data-bind="visible: showAdditionalCost">
			<span data-format="n" data-bind="text: additional_cost"></span>
						
			<input type="checkbox" data-bind="checked: additional_applied,
										events:{ change: changes }" />
							
		</td>				
    </tr>   
</script>
<script id="purchase-account-line-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td class="center">
			<i class="icon-trash" data-bind="events: { click: removeRowAccount }"></i>
			#:banhji.purchase.accountLineDS.indexOf(data)+1#			
		</td>			
		<td>
			<input id="cbbAccounts-#:uid#" name="cbbAccounts-#:uid#"
				   data-role="combobox"                   
                   data-value-primitive="true"                   
                   data-template="account-list-tmpl"
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: account_id,
                              source: accountDS"
                   data-placeholder="Add Account.."
                   data-list-width="400"                    
                   required data-required-msg="required" style="width: 100%" />	
		</td>		
		<td>
			<input name="description" 
					type="text" class="k-textbox" 
					data-bind="value: description"					
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td data-bind="visible: showRef">
			<input type="text" class="k-textbox" 
					data-bind="value: reference_no"				
					style="width: 100%; margin-bottom: 0;" />		
		</td>			
		<td data-bind="visible: showSegment">
			<select data-role="multiselect"
				   data-value-primitive="true"				   
				   data-item-template="segment-list-tmpl"				    
				   data-value-field="id" 
				   data-text-field="code"
				   data-bind="value: segments, 
				   			source: segmentItemDS,
				   			events:{ change: segmentChanges }"
				   data-placeholder="Add Segment.."				   
				   style="width: 100%" /></select>					
		</td>
		<td class="right">
			<input id="txtAmount-#:uid#" name="txtAmount-#:uid#" 
					data-role="numerictextbox" 
					data-format="n0" 
					data-bind="value: amount, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" /> 						
		</td>
		<td>
			<input id="ccbTaxItemAccount-#:uid#" name="ccbTaxItemAccount-#:uid#"
				   data-role="combobox"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: tax_item_id, 
                   			  source: taxItemDS,
                   			  events:{ change: changes }"
                   style="width: 100%" />			
		</td>			
    </tr>   
</script>
<script id="purchase-additional-cost-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td class="center">
			<i class="icon-trash" data-bind="events: { click: removeRowAdditionalCost }"></i>
			#:banhji.purchase.additionalCostDS.indexOf(data)+1#			
		</td>			
		<td>
			<input id="ddlType-#:uid#" name="ddlType-#:uid#"
				   data-role="dropdownlist"                   
                   data-value-primitive="true"                   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: type,
                              source: typeList,
                              events:{ change : typeColumnChanges }"                                       
                   required data-required-msg="required" style="width: 100%" />	
		</td>
		<td>
			<input data-role="combobox"                   
                   data-value-primitive="true"
                   data-template="contact-list-tmpl"
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: contact_id,
                              source: contactListDS"
                   data-placeholder="Add Name.."                    
                   style="width: 100%" />
		</td>
		<td>
			<input type="text" class="k-textbox" 
					data-bind="value: reference_no"				
					style="width: 100%; margin-bottom: 0;" />		
		</td>
		<td>
			<input id="txtIssuedDate" name="txtIssuedDate" 
					data-role="datepicker"
					data-format="dd-MM-yyyy"
					data-parse-formats="yyyy-MM-dd" 
					data-bind="value: issued_date"
					style="width:100%;" />
		</td>
		<td data-bind="visible: showDueDateColumn">
			<input data-role="datepicker"
					data-format="dd-MM-yyyy"
					data-parse-formats="yyyy-MM-dd" 
					data-bind="value: due_date"
					style="width:100%;" />
		</td>		
		<td>
			<input type="text" class="k-textbox" 
					data-bind="value: memo"					
					style="width: 100%; margin-bottom: 0;" />
		</td>				
		<td class="right">
			<input id="txtSubTotal-#:uid#" name="txtSubTotal-#:uid#" 
					data-role="numerictextbox" 
					data-format="n0" 
					data-bind="value: sub_total, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" /> 						
		</td>		
		<td>
			<input id="ccbTaxItem-#:uid#" name="ccbTaxItem-#:uid#"
				   data-role="combobox"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: tax_item_id, 
                   			  source: taxItemDS,
                   			  events:{ change: changes }"
                   style="width: 100%" />			
		</td>			
    </tr>   
</script>

<script id="purchaseReturn" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>PURCHASE RETURN</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 190px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>								
								<tr>
									<td>Supplier</td>
									<td>
										<input id="cbbContact" name="cbbContact"
											   data-role="combobox"											                    
							                   data-value-primitive="true"
							                   data-template="contact-list-tmpl"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.contact_id,
							                              source: contactDS,
							                              events:{ change: contactChanges }"
							                   data-placeholder="Type name.."                    
							                   required data-required-msg="required" style="width: 100%" />
									</td>
								</tr>																															
							</table>

							<div class="strong" style="width: 90%; padding: 10px;" align="center"
								data-bind="style: {
								        backgroundColor: bgColor}">
								<div align="left">AMOUNT PAID</div>
								<h2 data-bind="text: total" align="right"></h2>
							</div>

						</div>						
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 190px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						        	<li class="span1 glyphicons cogwheels active"><a href="#tab1-5" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span1 glyphicons pen"><a href="#tab2-5" data-toggle="tab"><i></i></a>
						            </li>
						            <li class="span1 glyphicons adress_book"><a href="#tab3-5" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span1 glyphicons paperclip"><a href="#tab4-5" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span3 glyphicons history"><a href="#tab5-5" data-toggle="tab"><i></i> Recuring</a>
						            </li>						            								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						    	<!-- Options Tab content -->
						        <div class="tab-pane active" id="tab1-5">						            
						            <table class="table table-borderless table-condensed cart_total">										
										<tr>							            				
											<td>Related Purchase</td>
							            	<td>
												<input data-role="combobox"														
														data-auto-bind="false"
							              				data-value-primitive="true"
							              				data-template="reference-list-tmpl"
														data-text-field="number" 
							              				data-value-field="id"						              				 
							              				data-bind="value: obj.reference_id,
							              							source: referenceDS,
							              							enabled: bolReference,						              							
							              							events:{change: referenceChanges}"
							              				placeholder="Type number..." 
							              				style="width: 100%" />
											</td>
										</tr>
										<tr>
											<td>Currency</td>
											<td>
												<input id="cbbCurrency" name="cbbCurrency"
													   data-role="combobox"				                
									                   data-value-primitive="true"
									                   data-template="currency-list-tmpl"				   
									                   data-text-field="code"
									                   data-value-field="locale"
									                   data-bind="value: obj.locale, 
									                   			source: currencyDS, 
									                   			events: {change : setRate}"
									                   placeholder="Add currency..." 
									                   required data-required-msg="required" style="width: 100%" />										
											</td>
										</tr>						            	
										<tr>
											<td>Segments</td>
											<td>
												<select data-role="multiselect"
													   data-value-primitive="true"								   
													   data-item-template="segment-list-tmpl"				    
													   data-value-field="id" 
													   data-text-field="code"
													   data-bind="value: obj.segments, 
													   			source: segmentItemDS,
													   			events:{ change: segmentChanges }"
													   data-placeholder="Add Segment.."				   
													   style="width: 100%" /></select>
											</td>
										</tr>	
						            </table>						            
						        </div>
						        <!-- // Options Tab content END -->						        

						        <!-- Memo Tab content -->
						        <div class="tab-pane" id="tab2-5">
						        	<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo2" placeholder="memo for internal ..."></textarea>
									<br>						
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo" placeholder="memo for internal ..."></textarea>
						        </div>
						        <!-- // Memo Tab content END -->

						        <!-- Address Tab content -->
						        <div class="tab-pane" id="tab3-5">
						        	Billing Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.bill_to" placeholder="Billing to ..."></textarea>								
									
									Shipping Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.ship_to" placeholder="Shipping to ..."></textarea>	
											
						        </div>
						        <!-- // Address Tab content END -->						        

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab4-5">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->						        

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab5-5">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->						        								        

						    </div>
						</div>

				    </div>
				</div>

				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th class="center" style="width: 1%;">No.</th>			                
			                <th>ITEM</th>
			                <th>DESCRIPTION</th>
			                <th style="width: 20%;">QUANTITY</th>
			                <th style="width: 13%;">PRICE</th>		                
			                <th style="width: 1%;" data-bind="visible: showDiscount">DISCOUNT</th>			                
			                <th class="center" style="width: 10%;">AMOUNT</th>
			                <th class="center" style="width: 11%;">TAX</th>		                			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="saleReturn-template" 
			        		data-auto-bind="false"
			        		data-bind="source: lineDS"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span8">
						<table class="table table-condensed table-white">
							<tr>
								<td>						
									<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>												
								
									<div class="btn-group">
										<div class="leadcontainer">
											
										</div>
										<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
										<ul class="dropdown-menu" style="padding-left: 10px">
											<li>
												<input type="checkbox" id="chbDiscount" class="k-checkbox" data-bind="checked: showDiscount" />												
												<label class="k-checkbox-label" for="chbDiscount">DISCOUNT</label>
											</li>																
										</ul>
									</div>
								
									<span class="btn btn-default">Add New Item</span>
								</td>						
								<td class="right">Amount Paid:</td>
								<td class="left strong">
									<span data-format="n" data-bind="text: obj.amount_paid"></span>
								</td>							
								<td class="right">Remaining:</td>
								<td class="left strong">
									<span data-format="n" data-bind="text: remain"></span>
								</td>
							</tr>							
						</table>						

						<table class="table table-bordered table-inverse table-striped table-vertical-center" data-bind="visible: showReturn">
					        <thead>
					            <tr>
					            	<th class="center" style="width: 1%;">
					            		<button type="button" data-role="button" data-bind="click: addRowOption"><i class="icon-plus"></i></button>
					            	</th>
					            	<th style="width: 30%">TYPE OF RETURN</th>					               
					                <th>CONDITION</th>					                		                
					                <th style="width: 20%">AMOUNT</th>		                			                			                
					            </tr> 
					        </thead>
					        <tbody data-role="listview" 
					        		data-template="saleReturn-return-line-template" 
					        		data-auto-bind="false"
					        		data-bind="source: returnDS"></tbody>			        
					    </table>
													
					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span4">
						<table class="table table-condensed table-striped table-white">
							<tbody>
								<tr>
									<td class="right">Subtotal:</td>
									<td class="right strong" width="40%"><span data-bind="text: sub_total"></span></td>
								</tr>								
								<tr>
									<td class="right">Total Discount:</td>
									<td class="right strong">
										<span data-bind="text: discount"></span>
                   					</td>
								</tr>
								<tr>
									<td class="right">Total Tax:</td>
									<td class="right strong"><span data-bind="text: tax"></span></td>
								</tr>																
								<tr>
									<td class="right"><h4>Total:</h4></td>
									<td class="right strong"><h4 data-bind="text: total"></h4></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>	           
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>
					<!-- <span id="saveSend" class="btn btn-icon btn-warning glyphicons envelope" style="width: 80px;"><i></i> Save Send</span>										 -->
					<span id="savePrint" class="btn btn-icon btn-default glyphicons print" data-bind="click: cancel" style="width: 80px;"><i></i> Save Print</span>
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>					
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="purchaseReturn-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td>
			<i class="icon-trash" data-bind="events: { click: removeRow }"></i>
			#:banhji.saleReturn.lineDS.indexOf(data)+1#			
		</td>		
		<td>
			<input id="ccbItem-#:uid#" name="ccbItem-#:uid#"
				   data-role="combobox"
				   data-template="item-list-tmpl"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: item_id, 
                   			  source: itemDS,
                   			  events:{ change: itemChanges }"
                   placeholder="Add Item..." 
                   required data-required-msg="required" style="width: 100%" />			
		</td>		
		<td>
			<input id="txtDescription-#:uid#" name="txtDescription-#:uid#" 
					type="text" class="k-textbox" 
					data-bind="value: description"					 
					required data-required-msg="required"
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td>
			<input id="txtQuantity-#:uid#" name="txtQuantity-#:uid#" 
					data-role="numerictextbox" 
					data-format="n0" data-min="0"
					data-bind="value: quantity, events: {change : changes}"
					required data-required-msg="required" style="width: 40%;" />

			<input data-role="dropdownlist"                  
                   data-text-field="measurement"
                   data-value-field="measurement_id"
                   data-bind="value: measurement_id,
                   			  source: item_prices,
                   			  events:{ change: measurementChanges }"
                   data-option-label="Measure"
                   style="width: 57%;" />
		</td>					
		<td>
			<input id="txtPrice-#:uid#" name="txtPrice-#:uid#" 
					data-role="numerictextbox" 
					data-format="n" 
					data-bind="value: price, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" />
		</td>					
		<td class="center" data-bind="visible: showDiscount">
			<input data-role="numerictextbox"
                   data-format="p0"
                   data-min="0"
                   data-max="0.99"
                   data-step="0.1"                   
                   data-bind="value: discount,
                              events: { change: changes }"
                   style="width: 65px;">			
		</td>				
		<td class="right">
			<span data-format="n" data-bind="text: amount"></span> 						
		</td>
		<td>
			<input id="ccbTaxItem-#:uid#" name="ccbTaxItem-#:uid#"
				   data-role="combobox"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: tax_item_id, 
                   			  source: taxItemDS,
                   			  events:{ change: changes }"
                   style="width: 100%" />			
		</td>						
    </tr>   
</script>
<script id="purchaseReturn-return-line-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">
		<td>
			<i class="icon-trash" data-bind="events: { click: removeRowOption }"></i>					
		</td>			
		<td>
			<input id="ddlOption-#:uid#" name="ddlOption-#:uid#"
				   data-role="dropdownlist"				                      			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: type, 
                   			  source: optionList,
                   			  events:{ change: optionChanges }"
                   data-option-label="Select Option..." 
                   style="width: 100%" />            
		</td>
		<td>
			<input id="cbbInvoice-#:uid#" name="cbbInvoice-#:uid#"
				   data-role="combobox"
				   data-template="reference-list-tmpl"				                      			   
                   data-text-field="number"
                   data-value-field="id"
                   data-bind="value: reference_id, 
                   			  source: invoiceDS,
                   			  visible: showInvoice,
                   			  events:{ change: invoiceChanges }"
                   placeholder="Select Invoice..." 
                   style="width: 100%" />

            <input id="ddlAccount-#:uid#" name="ddlAccount-#:uid#"
				   data-role="dropdownlist"
				   data-template="account-list-tmpl"				                      			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: account_id, 
                   			  source: accountDS,
                   			  visible: showAccount"                   
                   style="width: 100%" />            
		</td>						
		<td>
			<input id="txtAmount-#:uid#" name="txtAmount-#:uid#" 
					data-role="numerictextbox" 
					data-format="n" 
					data-bind="value: amount, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" />
		</td>								
    </tr>   
</script>

<script id="vendorSetting" type="text/x-kendo-template">
	<span class="pull-right glyphicons no-js remove_2" 
			onclick="javascript:window.history.back()"><i></i></span>

	<h2>General Setting</h2>

	<br>

	<div class="widget widget-tabs widget-tabs-double widget-tabs-vertical row-fluid row-merge widget-tabs-gray">

	    <!-- Tabs Heading -->
	    <div class="widget-head span3">
	        <ul>
	            <li class="active"><a href="#tab1-1" class="glyphicons group" data-toggle="tab"><i></i><span class="strong">Vendor Type</span></a>
	            </li>
	            <li><a href="#tab2-1" class="glyphicons credit_card" data-toggle="tab"><i></i><span class="strong">Payment Method</span></a>
	            </li>
	            <li><a href="#tab3-1" class="glyphicons clock" data-toggle="tab"><i></i><span class="strong">Payment Term</span></a>
	            </li>	                       
	        </ul>
	    </div>
	    <!-- // Tabs Heading END -->

	    <div class="widget-body span9">
	        <div class="tab-content">

	            <!-- Tab Contact Type content -->
	            <div class="tab-pane active" id="tab1-1">
	            	<div class="input-append">
					    <input class="span12" id="appendedInputButtons" type="text" placeholder="Enter New Vendor Type here ..." data-bind="value: contactTypeName">
					    <button class="btn btn-default" type="button" data-bind="click: addContactType"><i class="icon-plus"></i> Add New</button>
					</div>
	            	<table class="table table-bordered table-white">
	            		<thead>
	            			<tr>
	            				<th>Type</th>
	            				<th></th>
	            			</tr>
	            		</thead>
	            		<tbody data-role="listview"
	            				data-auto-bind="false"
		            			data-edit-template="vendorSetting-edit-contact-type-template"
				                data-template="vendorSetting-contact-type-template"
				                data-bind="source: contactTypeDS"></tbody>
	            	</table>		            
	            </div>
	            <!-- // Tab Contact Type content END -->

	            <!-- Tab Payment Method content -->
	            <div class="tab-pane" id="tab2-1">
	            	<div class="input-append">
					    <input class="span12" id="appendedInputButtons" type="text" placeholder="Enter new Payment Method here ..." data-bind="value: paymentMethodName">
					    <button class="btn btn-default" type="button" data-bind="click: addPaymentMethod"><i class="icon-plus"></i> Add New</button>
					</div>
	            	<table class="table table-bordered table-white">
	            		<thead>
	            			<tr>
	            				<th>Name</th>
	            				<th></th>
	            			</tr>
	            		</thead>
	            		<tbody data-role="listview"	            				
		            			data-edit-template="vendorSetting-edit-payment-method-template"
				                data-template="vendorSetting-payment-method-template"
				                data-bind="source: paymentMethodDS"></tbody>
	            	</table>			            
	            </div>
	            <!-- // Tab Payment Method content END -->

	            <!-- Tab Payment Term content -->
	            <div class="tab-pane" id="tab3-1">
            		<div class="input-append">
					    <input class="span3" id="appendedInputButtons" type="text" placeholder="New Payment Term ..." data-bind="value: paymentTermName">
					    <input class="span3" id="appendedInputButtons" type="text" placeholder="Net Due in ..." data-bind="value: paymentTermNetDue">
					    <input class="span3" id="appendedInputButtons" type="text" placeholder="Discount if paid within ..." data-bind="value: paymentTermDiscountPeriod">
					    <input class="span3" id="appendedInputButtons" type="text" placeholder="Discount % ..." data-bind="value: paymentTermDiscountPercentage">
					    <button class="btn btn-default" type="button" data-bind="click: addPaymentTerm"><i class="icon-plus"></i> Add New</button>
					</div>
	            	<table class="table table-bordered table-white">
	            		<thead>
	            			<tr>
	            				<th>Term</th>
	            				<th>Net Due(days)</th>	            				
	            				<th>Discount if paid within(days)</th>
	            				<th>Discount %</th>
	            				<th></th>
	            			</tr>
	            		</thead>
	            		<tbody data-role="listview"	            				
		            			data-edit-template="vendorSetting-edit-payment-term-template"
				                data-template="vendorSetting-payment-term-template"
				                data-bind="source: paymentTermDS"></tbody>
	            	</table>
	            </div>
	            <!-- // Tab Payment Term content END -->

	        </div>
	    </div>

	</div>
</script>
<script id="vendorSetting-contact-type-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>
    		#:name#
   		</td>
   		<td>   			
   			<div class="edit-buttons">       
		        <a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
		        #if(is_system=="0"){#
			        <a class="k-button k-delete-button" href="\\#"><span class="k-icon k-delete"></span></a>				        
		        #}#
		        <span class="k-button" data-bind="click: goPattern">Pattern</span>
		   	</div>		   	
   		</td>
   	</tr>
</script>
<script id="vendorSetting-edit-contact-type-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <dl>                
            <dd>
                <input type="text" class="k-textbox" data-bind="value:name" name="ProductName" required="required" validationMessage="required" />
                <span data-for="ProductName" class="k-invalid-msg"></span>
            </dd>               
        </dl>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>
<script id="vendorSetting-payment-method-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>
    		 #:name#
   		</td>
   		<td>
   			<div class="edit-buttons">       
		        <a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
		        <a class="k-button k-delete-button" href="\\#"><span class="k-icon k-delete"></span></a>
		   	</div>
		</td>
   	</tr>
</script>
<script id="vendorSetting-edit-payment-method-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <dl>                
            <dd>
                <input type="text" class="k-textbox" data-bind="value:name" name="ProductName" required="required" validationMessage="required" />
                <span data-for="ProductName" class="k-invalid-msg"></span>
            </dd>               
        </dl>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>
<script id="vendorSetting-payment-term-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>
    		 #:name#
   		</td>
   		<td>
    		 #:net_due#
   		</td>
   		<td>
    		 #:discount_period#
   		</td>
   		<td>
    		 #:discount_percentage#
   		</td>
   		<td>
   			#if(is_system=="0"){#
	   			<div class="edit-buttons">       
			        <a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
			        <a class="k-button k-delete-button" href="\\#"><span class="k-icon k-delete"></span></a>
			   	</div>
		   	#}#
   		</td>
   	</tr>
</script>
<script id="vendorSetting-edit-payment-term-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <table class="table table-borderless table-condensed cart_total">                
            <tr>
            	<td>Term:</td>
            	<td>
	                <input type="text" class="k-textbox" data-bind="value:name" name="ProductName" required="required" validationMessage="required" />
	                <span data-for="ProductName" class="k-invalid-msg"></span>
	            </td>
            </tr>
            <tr>
            	<td>Net Due In:</td>
            	<td>
	                <input type="text" class="k-textbox" data-bind="value:net_due" name="NetDue" required="required" validationMessage="required" />
	                <span data-for="term" class="k-invalid-msg"></span>
	            </td>
            </tr>
            <tr>
            	<td>Discount If Paid Within:</td>
            	<td>
	                <input type="text" class="k-textbox" data-bind="value:discount_period" />
	                <span data-for="percentage" class="k-invalid-msg"></span>
	            </td>
            </tr>
            <tr>
            	<td>Discount %</td>
            	<td>
	                <input type="text" class="k-textbox" data-bind="value:discount_percentage" />
	                <span data-for="percentage" class="k-invalid-msg"></span>
	            </td>
            </tr>               
        </table>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>


<!-- ***************************
 *	SME Section               *
**************************** -->
<script id="customerDashboard" type="text/x-kendo-template">

	<div class="row-fluid">

		<!-- Left Side -->
		<div class="span4">

			<!-- Logo of the page -->
			<table width="100%" cellpadding="10">
				<tr>
					<td>
			           	<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/customers.png" />
			        </td>
			        <td valign="top">
			        	<h2>CUSTOMER</h2>
			        	<p>
			        		In here, you can manage your customer information, revenues, collections, and other related transactions.
			        	</p>
			        </td>
			 	</tr>
			</table>

			<br>

			<table class="table table-borderless table-condensed table-vertical-center">
				<tr>
					<td class="center">
						<a href="#/quote">
							<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/function_logo/quotation.png" width="110" height="200" />
							Quotation
						</a>						
					</td>
					<td class="center">
						<a href="#/sale_order">
							<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/function_logo/sale_order.png" width="110" height="200" />
							Sale Order
						</a>
					</td>
					<td class="center">
						<a href="#/customer_deposit">
							<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/function_logo/customer_deposit.png" width="110" height="200" />
							Deposit
						</a>						
					</td>					
				</tr>
				<tr>
					<td class="center">
						<a href="#/cash_sale">
							<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/function_logo/sale_receipt.png" width="110" height="200" />
							Cash Sale
						</a>
					</td>
					<td class="center">
						<a href="#/invoice">
							<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/function_logo/invoice.png" width="110" height="200" />
							Invoice
						</a>
					</td>
					<td class="center">						
						<a href="#/cash_receipt">
							<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/function_logo/cash_receipt.png" width="110" height="200" />
							Cash Receipt
						</a>						
					</td>										
				</tr>
				<tr>				
					<td class="center">
						<a href="#/gdn">
							<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/function_logo/delivery_note.png" width="110" height="200" />
							Delivery Note
						</a>
					</td>
					<td class="center">
						<a href="#/sale_return">
							<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/function_logo/sale_return.png" width="110" height="200" />
							Sale Return
						</a>
					</td>				
					<td class="center">
						<a href="#/statement">
							<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/function_logo/statement.png" width="110" height="200" />
							Statement
						</a>
					</td>
				</tr>				
			</table>

		</div>

		<!-- Right Side -->
		<div class="span8">

			<!-- Summary -->
			<div class="row-fluid">
	
				<!-- Column -->
				<div class="span4">
				
					<!-- Widget -->
					<div class="widget widget-3">
					
						<!-- Widget heading -->
						<div class="widget-head">
							<h4 class="heading"><span class="glyphicons coins"><i></i></span>Sale</h4>
						</div>
						<!-- // Widget heading END -->
						
						<div class="widget-body alert alert-primary">
							
							<div align="center" class="text-large strong" data-bind="text: sale"></div>

							<br>
						
							<table width="100%">
								<tr align="center">
									<td>										
										<span data-bind="text: sale_customer"></span>
										<br>
										<span>Customer</span>
									</td>
									<td>
										<span data-bind="text: sale_product"></span>
										<br>
										<span>Product</span>
									</td>
									<td>
										<span data-bind="text: sale_order"></span>
										<br>
										<span>Order</span>
									</td>
								</tr>
							</table>
						</div>
						<!-- // Widget footer END -->
						
					</div>
					<!-- // Widget END -->
					
				</div>
				<!-- // Column END -->
				
				<!-- Column -->
				<div class="span4">
				
					<!-- Widget -->
					<div class="widget widget-3">
					
						<!-- Widget heading -->
						<div class="widget-head">
							<h4 class="heading"><span class="glyphicons cart_in"><i></i></span>Order</h4>
						</div>
						<!-- // Widget heading END -->
						
						<div class="widget-body alert-info">
							
							<div align="center" class="text-large strong" data-bind="text: order"></div>

							<br>
						
							<table width="100%">
								<tr align="center">
									<td>										
										<span data-bind="text: order_avg"></span>
										<br>
										<span>Average</span>
									</td>
									<td>
										<span data-bind="text: order_open"></span>
										<br>
										<span>Open</span>
									</td>									
								</tr>
							</table>
						</div>
						<!-- // Widget footer END -->
						
					</div>
					<!-- // Widget END -->
					
				</div>
				<!-- // Column END -->
				
				<!-- Column -->
				<div class="span4">
				
					<!-- Widget -->
					<div class="widget widget-3">
					
						<!-- Widget heading -->
						<div class="widget-head">
							<h4 class="heading"><span class="glyphicons credit_card"><i></i></span>Receivable</h4>
						</div>
						<!-- // Widget heading END -->
						
						<div class="widget-body" style="background-color: LightGray">
							
							<div align="center" class="text-large strong" data-bind="text: ar"></div>

							<br>
						
							<table width="100%">
								<tr align="center">
									<td>										
										<span data-bind="text: ar_open"></span>
										<br>
										<span>Open</span>
									</td>
									<td>
										<span data-bind="text: ar_customer"></span>
										<br>
										<span>Customer</span>
									</td>
									<td>
										<span data-bind="text: ar_overdue"></span>
										<br>
										<span>Overdue</span>
									</td>
								</tr>
							</table>
						</div>
						<!-- // Widget footer END -->
						
					</div>
					<!-- // Widget END -->
					
				</div>
				<!-- // Column END -->
				
			</div>

			<!-- Top 5 -->
			<div class="row-fluid">
				<div class="span4">
					<h4>Top 5 Customers</h4>					
					<table class="table table-bordered table-primary table-striped table-vertical-center">
				        <thead>
				            <tr>
				                <th style="width: 1%;" class="center">#</th>
				                <th>Name</th>			                
				            </tr>
				        </thead>
				        <tbody data-role="listview"
				        	 data-auto-bind="false"				        	                 
			                 data-template="customerDashBoard-top-customer-template"
			                 data-bind="source: topCustomerDS"></tbody>			        
				    </table>			
				</div>
				<div class="span4">
					<h4>Top 5 A/R Balance</h4>
					<table class="table table-bordered table-primary table-striped table-vertical-center">
				        <thead>
				            <tr>
				                <th style="width: 1%;" class="center">#</th>
				                <th>Name</th>		                
				            </tr>
				        </thead>
				        <tbody data-role="listview"
				        	 data-auto-bind="false"				        	                  
			                 data-template="customerDashBoard-top-ar-template"
			                 data-bind="source: topARDS"></tbody>			        
				    </table>
				</div>
				<div class="span4">
					<h4>Top 5 Products</h4>
					<table class="table table-bordered table-primary table-striped table-vertical-center">
				        <thead>
				            <tr>
				                <th style="width: 1%;" class="center">#</th>
				                <th>Name</span></th>			                		                
				            </tr>
				        </thead>
				        <tbody data-role="listview"
				        	 data-auto-bind="false"                
			                 data-template="customerDashBoard-top-product-template"
			                 data-bind="source: topProductDS"></tbody>			        
				    </table>
				</div>		
			</div>

			<!-- Graph -->
			<div>
				<div id="graph-01" style="height: 250px;"></div>
			</div>

		</div>		

	</div>
</script>
<script id="customerDashBoard-top-customer-template" type="text/x-kendo-tmpl">	
	<tr data-uid="#: uid #">
		<td>#:banhji.customerDashboard.topCustomerDS.indexOf(data)+1#</td>		
		<td>
			<span>#=name#</span>
			<span class="pull-right">#=kendo.toString(amount, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale)#</span>
		</td>		
	</tr>
</script>
<script id="customerDashBoard-top-ar-template" type="text/x-kendo-tmpl">
	<tr>
		<td>#:banhji.customerDashboard.topARDS.indexOf(data)+1#</td>		
		<td>
			<span>#=name#</span>
			<span class="pull-right">#=kendo.toString(amount, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale)#</span>
		</td>
	</tr>
</script>
<script id="customerDashBoard-top-product-template" type="text/x-kendo-tmpl">
	<tr>
		<td>#:banhji.customerDashboard.topProductDS.indexOf(data)+1#</td>		
		<td>
			<span>#=name#</span>
			<span class="pull-right">#=kendo.toString(quantity, "n0")#</span>
		</td>
	</tr>
</script>

<script id="customerCenter" type="text/x-kendo-template">	
	<div class="widget widget-heading-simple widget-body-gray widget-employees">		
		<div class="widget-body padding-none">			
			<div class="row-fluid row-merge">
				<div class="span3 listWrapper" style="height: 700px;">
					<div class="innerAll">							
						<form autocomplete="off" class="form-inline">
							<div class="widget-search separator bottom">
								<button type="button" class="btn btn-default pull-right" data-bind="click: search"><i class="icon-search"></i></button>
								<div class="overflow-hidden">
									<input type="search" placeholder="Customer ..." data-bind="value: searchText, events:{change: enterSearch}">
								</div>
							</div>
							<div class="select2-container" style="width: 100%;">								
																
							</div>
						</form>					
					</div>
					
					<span class="results"><span data-bind="text: contactDS.total"></span> <span data-bind="text: lang.lang.found_search"></span></span>

					<div class="table table-condensed" style="height: 580px;"						 
						 data-role="grid" 
						 data-bind="source: contactDS"
						 data-auto-bind="false" 
						 data-row-template="customerCenter-customer-list-tmpl"
						 data-columns="[{title: ''}]"
						 data-selectable=true
						 data-height="600"						 
						 data-scrollable="{virtual: true}"></div>									
				</div>
				<div class="span9 detailsWrapper">
					<div class="row-fluid">					
						<div class="span6">
							<div class="widget widget-4 widget-tabs-icons-only margin-bottom-none">

							    <!-- Widget Heading -->
							    <div class="widget-head">

							        <!-- Tabs -->
							        <ul class="pull-right">
							        	<li style="font-size: large; color: black; font-weight: bold;">
							            	<span data-bind="text: obj.number"></span>
							            	-
							            	<span data-bind="text: obj.fullname"></span>
							            </li>
							            <li class="glyphicons text_bigger active"><span data-toggle="tab" data-target="#tab1-7"><i></i></span>
							            </li>							           
							            <li class="glyphicons riflescope"><span data-toggle="tab" data-target="#tab2-7"><i></i></span>
							            </li>							            
							            <li class="glyphicons circle_info"><span data-toggle="tab" data-target="#tab3-7"><i></i></span>
							            </li>							            
							            <li class="glyphicons pen"><span data-toggle="tab" data-target="#tab4-7"><i></i></span>
							            </li>
							            <li class="glyphicons edit"><span data-bind="click: goEditContact"><i></i></span>
							            </li>
							            <li class="glyphicons user_add"><a href="#/customer"><i></i></a>
							            </li>							            							            
							        </ul>
							        <div class="clearfix"></div>
							        <!-- // Tabs END -->

							    </div>
							    <!-- Widget Heading END -->

							    <div class="widget-body">
							        <div class="tab-content">

							            <!-- Transactions Tab content -->
							            <div id="tab1-7" class="tab-pane active box-generic">
							            	<table class="table table-borderless table-condensed cart_total">
								            	<tr>
								            		<td width="50%">
								            			<span class="btn btn-block btn-inverse" data-bind="click: goQuote">Quote</span>
								            		</td>
								            		<td width="50%">
								            			<span class="btn btn-block btn-primary" data-bind="click: goDeposit">Deposit</span>								            			
								            		</td>
								            	</tr>
								            	<tr>
								            		<td>
								            			<span class="btn btn-block btn-inverse" data-bind="click: goSaleOrder">Sale Order</span>
								            		</td>
								            		<td>
								            			<span class="btn btn-block btn-primary" data-bind="click: goCashSale">Cash Sale</span>								            											            			
								            		</td>
								            	</tr>
								            	<tr>
								            		<td>
								            			<span class="btn btn-block btn-primary" data-bind="click: goSaleReturn">Sale Return</span>
								            		</td>
								            		<td>
								            			<span class="btn btn-block btn-primary" data-bind="click: goInvoice">Invoice</span>								            											            			
								            		</td>
								            	</tr>
								            	<tr>								            		
								            		<td>
								            			<span class="btn btn-block btn-inverse" data-bind="click: goGDN">GDN</span>
								            		</td>
								            		<td class="center">
								            			<span class="glyphicons no-js down_arrow"><i></i></span>								            			
								            		</td>
								            	</tr>
								            	<tr>
								            		<td>
								            			<span class="btn btn-block btn-inverse" data-bind="click: goStatement">Statement</span>
								            		</td>
								            		<td>
								            			<span class="btn btn-block btn-primary" data-bind="click: goReceivePayment">Receive Payment</span>
								            		</td>
								            	</tr>
							            	</table>
							            </div>
							            <!-- // Transactions Tab content END -->

							            <!-- SEARCH Tab content -->
							            <div id="tab2-7" class="tab-pane box-generic">
							                <input data-role="dropdownlist"
							                	   data-auto-bind="false"
						            			   data-option-label="Select Customer Type..."					            			   		                   
								                   data-value-primitive="true"
								                   data-text-field="name"
								                   data-value-field="id"
								                   data-bind="value: contact_type_id,
								                              source: contactTypeDS"
								                   style="width: 100%"/>

							                <input data-role="dropdownlist"
						            			   data-option-label="Select Currency..."
						            			   data-template="currency-list-tmpl"					            			   		                   
								                   data-value-primitive="true"
								                   data-text-field="code"
								                   data-value-field="id"
								                   data-bind="value: currency_id,
								                              source: currencyDS"
								                   style="width: 100%"/>

								            <br><br>
								            <span class="btn btn-primary btn-icon glyphicons search pull-right" data-bind="click: search"><i></i> <span data-bind="text: lang.lang.search"></span></span>
								            <br>
							            </div>
							            <!-- // SEARCH Tab content END -->							            

							            <!-- INFO Tab content -->
							            <div id="tab3-7" class="tab-pane box-generic">
							            	<div class="row-fluid">
								            	<div class="span6">
										
													<!-- Bio -->
													<div class="widget widget-heading-simple widget-body-gray margin-none">
														<div class="widget-head">
															<h4 class="heading glyphicons user"><i></i> <span data-bind="text: obj.wnumber"></span> <span data-bind="text: obj.fullname"></span></h4>
														</div>
														<div class="widget-body">
															<ul class="unstyled icons margin-none">
																<li class="glyphicons group"><i></i> <span data-bind="text: obj.contact_type"></span></li>
																<li class="glyphicons phone"><i></i> <span data-bind="text: obj.phone"></span></li>
																<li class="glyphicons envelope"><i></i> <span data-bind="text: obj.email"></li>
																<li class="glyphicons calendar"><i></i> <span data-bind="text: obj.registered_date"></li>
															</ul>
														</div>
													</div>
													<!-- // Bio END -->
													
												</div>
												<div class="span6">
													<!-- Bio -->
													<div class="widget widget-heading-simple widget-body-gray margin-none">
														<div class="widget-head">
															<h4 class="heading glyphicons edit" data-bind="click: goEditContact"><i></i> <span data-bind="text: lang.lang.edit"></span></h4>
														</div>
														<div class="widget-body">
															<p><i class="icon-home"></i> <span data-bind="text: obj.address"></span></p>
														</div>
													</div>
													<!-- // Bio END -->
												</div>
											</div>
							            </div>
							            <!-- // INFO Tab content END -->

							            <!-- NOTE Tab content -->
							            <div id="tab4-7" class="tab-pane box-generic">

										    <div class="chat-controls">															
												<form class="margin-none">
													<div class="row-fluid">
														<div class="span10">
															<input type="text" name="message" class="input-block-level margin-none" data-bind="value: note" placeholder="កំណត់Memo ...">
														</div>
														<div class="span2">
															<span class="btn btn-block btn-primary" data-bind="click: saveNote"><span data-bind="text: lang.lang.save"></span></span>
														</div>
													</div>
												</form>															
											</div>

											<br>

									    	<div data-role="grid"
									    	 	 data-height="100"
					 							 data-scrollable="{virtual: true}"									                 
								                 data-row-template="customerCenter-note-tmpl"
								                 data-bind="source: noteDS"
								                 data-columns="[{title: ''}]"></div>
											
							            </div>
							            <!-- // NOTE Tab content END -->							            								            

							        </div>
							    </div>
							</div>
						</div>

						<div class="span6">
							<div class="row-fluid">
								<div class="span6">
									<div class="widget-stats widget-stats-primary widget-stats-5" data-bind="click: loadBalance">
										<span class="glyphicons coins"><i></i></span>
										<span class="txt">Balance<span data-bind="text: balance" style="font-size:medium;"></span></span>
										<div class="clearfix"></div>
									</div>
								</div>
								<div class="span6">
									<div class="widget-stats widget-stats-inverse widget-stats-5" data-bind="click: loadDeposit">
										<span class="glyphicons briefcase"><i></i></span>
										<span class="txt">Deposit<span data-bind="text: deposit" style="font-size:medium;"></span></span>
										<div class="clearfix"></div>
									</div>
								</div>
							</div>							
							
							<div class="row-fluid">
								<div class="span6">
									<div class="widget-stats widget-stats-info widget-stats-5" data-bind="click: loadBalance">
										<span class="glyphicons circle_exclamation_mark"><i></i></span>
										<span class="txt"><span data-bind="text: outInvoice"></span> Open</span>
										<div class="clearfix"></div>
									</div>
								</div>
								<div class="span6">
									<div class="widget-stats widget-stats-default widget-stats-5" data-bind="click: loadOverInvoice">
										<span class="glyphicons turtle"><i></i></span>
										<span class="txt"><span data-bind="text: overInvoice"></span> Over Due</span>
										<div class="clearfix"></div>
									</div>
								</div>
							</div>														
						</div>											          	
		          	</div>
					
					<div>
						<input data-role="dropdownlist"                   
					           data-value-primitive="true"
					           data-text-field="text"
					           data-value-field="value"
					           data-bind="value: sorter,
					                      source: sortList,                              
					                      events: { change: sorterChanges }" />

						<input data-role="datepicker"
							   data-format="dd-MM-yyyy"
					           data-bind="value: sdate,
					                      events: { change: dateChanges }"
					           placeholder="From ..." >

					    <input data-role="datepicker"
					    	   data-format="dd-MM-yyyy"
					           data-bind="value: edate,
					                      events: { change: dateChanges }"
					           placeholder="To ..." >
					    
					    <button type="button" data-role="button" data-bind="click: searchTransaction"><i class="icon-search"></i></button>
					</div>

					<table class="table table-bordered table-striped table-white">
						<thead>
							<tr>
								<th>Date</th>
								<th>Type</th>								
								<th>Reference No</th>
								<th>Amount</th>
								<th>Status</th>
								<th>Action</th>
							</tr>
						</thead>	            		
	            		<tbody data-role="listview"
	            				data-auto-bind="false"	            					            					            					            			
				                data-template="customerCenter-transaction-tmpl"
				                data-bind="source: transactionDS" >
				        </tbody>
	            	</table>

	            	<div id="pager" class="k-pager-wrap"
				    	 data-auto-bind="false"
			             data-role="pager" data-bind="source: transactionDS"></div>	            	
				</div>
			</div>			
		</div>
	</div>		
</script>
<script id="customerCenter-transaction-tmpl" type="text/x-kendo-tmpl">
    <tr>    	  	
    	<td>#=kendo.toString(new Date(issued_date), "dd-MM-yyyy")#</td>
    	<td>#=type#</td>
        <td>
        	#if(type=="Invoice" || type=="Cash_Sale" || type=="Quote" || type=="Sale_Order" || type=="GDN" || type=="Sale_Return"){#
				<a href="\#/#=type.toLowerCase()#/#=id#"><i></i> #=number#</a>						
			#}else{#
				#=number#
			#}#        	
        </td>
    	<td class="right">
    		#if(type=="GDN"){#
    			#=kendo.toString(amount, "n0")#
    		#}else{#
    			#=kendo.toString(amount, locale=="km-KH"?"c0":"c", locale)#
    		#}#
    	</td>
    	<td>        	
        	#if(type==="Invoice"){#
        		#if(status==="0" || status==="2") {#
        			# var date = new Date(), dueDate = new Date(due_date).getTime(), toDay = new Date(date).getTime(); #
					#if(dueDate < toDay) {#
						Over Due #:Math.floor((toDay - dueDate)/(1000*60*60*24))# days
					#} else {#
						#:Math.floor((dueDate - toDay)/(1000*60*60*24))# days to pay
					#}#
				#} else {#
					Paid
				#}#
        	#}else if(type==="Sale_Order" || type==="GDN"){#
        		#if(status==="0"){#
        			Open
        		#}else{#
        			Done        			
        		#}#
        	#}else if(type==="Quote"){#        		
        		#if(status==="0"){#
        			Open
        		#}else{#
        			Approved        			
        		#}#
        	#}#			
		</td>    	
    	<td align="center">
			#if(type==="Invoice"){#
				<a href="\#/invoice/#=id#"><i></i> Send</a>

				#if(status==="0" || status==="2"){#					
					| <a href="\#/cashier/#=id#"><i></i> Pay</a>
				#}#        	
			#}else if(type==="Sale_Order"){#
        		#if(status==="0"){#
        			
        		#}#
        	#}else if(type==="Quote"){#
        		<a href="\#/quote/#=id#"><i></i> Send</a>        		
        		#if(status==="0"){#
        			
        		#}#
        	#}else if(type==="GDN"){#        		
        		#if(status==="0"){#
        			
        		#}#
        	#}#
		</td>     	
    </tr>
</script>
<script id="customerCenter-customer-list-tmpl" type="text/x-kendo-tmpl">
	<tr data-bind="click: selectedRow">
		<td>
			<div class="media-body">
				<span class="strong">
					#=number# #=fullname#				
				</span>
			</div>
		</td>
	</tr>
</script>
<script id="customerCenter-note-tmpl" type="text/x-kendo-template">
	<tr>
		<td>			
			<blockquote>
				<small class="author">
					<span class="strong">#=creator#</span> :
					<cite>#=kendo.toString(new Date(noted_date), "g")#</cite>
				</small>					
				<p>#=note#</p>
			</blockquote>				
		</td>
	</tr>	
</script>

<script id="customer" type="text/x-kendo-template">
	<div class="container-960">	
		<div class="row-fluid">		    
			<div class="span12">			
				<div id="example" class="k-content">

					<!-- Collapsible Widget -->			
					<div class="widget">
					    <div class="widget-head">
					    	<span class="btn btn-primary pull-right" 
									onclick="javascript:window.history.back()">X</span>
					        
					        <h4 class="heading glyphicons circle_info"><i></i> Customer</h4>							        	
					    </div>
					    <div class="widget-body">

					    	<div class="row-fluid">
					    		<div class="span6 well">									
									<div class="row-fluid">
										<div class="span6">														
											<!-- Group -->
											<div class="control-group">										
												<label for="ddlCustomerType"><span data-bind="text: lang.lang.customer_type"></span> <span style="color:red">*</span></label>
												<input id="ddlCustomerType" name="ddlCustomerType"
														   data-role="dropdownlist"														   										                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.contact_type_id,
										                              source: contactTypeDS"
										                   data-option-label="(--- Select ---)"
										                   required data-required-msg="required" style="width: 100%;" />																				            
											</div>
											<!-- // Group END -->
										</div>

										<div class="span6">	
											<!-- Group -->
											<div class="control-group">							
												<label for="number"><span data-bind="text: lang.lang.number"></span> <span style="color:red">*</span></label>
						              			<input id="number" name="number" class="k-textbox"
							              				data-bind="value: obj.number, events:{change: checkExistingNumber}" 
							              				placeholder="e.g. ID0001" required data-required-msg="required"
							              				style="width: 100%;" />
							              		<span data-bind="visible: isDuplicateNumber" style="color: red;"><span data-bind="text: lang.lang.duplicate_number"></span></span>
											</div>
											<!-- // Group END -->											
										</div>
									</div>
									
									<div class="row-fluid">
										<div class="span6">						
											<!-- Group -->
											<div class="control-group">
												<label for="surname"><span data-bind="text: lang.lang.surname"></span> <span style="color:red">*</span></label>
							              		<input id="surname" name="surname" class="k-textbox" data-bind="value: obj.surname" 
									              		placeholder="surname ..." required data-required-msg="required"
									              		style="width: 100%;" />
											</div>
											<!-- // Group END -->
										</div>

										<div class="span6">	
											<!-- Group -->
											<div class="control-group">								
												<label for="name"><span data-bind="text: lang.lang.name"></span> <span style="color:red">*</span></label>
									            <input id="name" name="name" class="k-textbox" data-bind="value: obj.name" 
									              		placeholder="name ..." required data-required-msg="required"
									              		style="width: 100%;" />
											</div>																		
											<!-- // Group END -->
										</div>
									</div>
									
									<div class="row-fluid" data-bind="visible: isCompany">
										<div class="span6">
											<!-- Group -->
											<div class="control-group">
												<label for="companyName"><span data-bind="text: lang.lang.organization_name"></span> <span style="color:red">*</span></label>
												<input id="companyName" name="companyName" class="k-textbox" data-bind="enabled: isCompany, value: obj.company"									
														placeholder="e.g. PCG & Partner"
														style="width: 100%;" />	
											</div>
											<!-- // Group END -->
										</div>

										<div class="span6">	
											<!-- Group -->
											<div class="control-group">
												<label for="vatNo">VAT Number</label>								
							            		<input id="vatNo" name="vatNo" class="k-textbox" data-bind="enabled: isCompany, value: obj.vat_no" 
														placeholder="e.g. 01234567897"
														style="width: 100%;" />												
											</div>					
											<!-- // Group END -->
										</div>
									</div>																
								</div>
								<div class="span6">
									<div class="row-fluid">	
										<!-- Map -->
										<div id="map" class="span12" style="height: 130px;"></div>
									</div>

									<div class="separator line bottom"></div>

									<div class="row-fluid">	
										<div class="span6">									
											<!-- Group -->
											<div class="control-group">
								    			<label for="latitute"><span data-bind="text: lang.lang.latitute"></span> </label>
												<div class="input-prepend">
													<span class="add-on glyphicons direction"><i></i></span>
													<input type="text" class="input-large span12" data-bind="value: obj.latitute, events:{change: loadMap}" placeholder="012345.67897">
												</div>
											</div>									
											<!-- // Group END -->
										</div>	
										
										<div class="span6">	
											<!-- Group -->
											<div class="control-group">
								    			<label for="longtitute"><span data-bind="text: lang.lang.longtitute"></span> </label>
								    			<div class="input-prepend">
													<span class="add-on glyphicons google_maps"><i></i></span>
													<input type="text" class="input-large span12" data-bind="value: obj.longtitute, events:{change: loadMap}" placeholder="012345.67897">
												</div>										
											</div>
											<!-- // Group END -->
										</div>										
									</div>
								</div>
							</div>								
									
							<!-- // Inner Tabs -->
							<div class="row-fluid">								
								<div class="box-generic">
								    <!-- //Tabs Heading -->
								    <div class="tabsbar tabsbar-1">
								        <ul class="row-fluid row-merge">						            
								            <li class="span2 glyphicons usd active">
								            	<a href="#tab1" data-toggle="tab"><i></i> <span><span data-bind="text: lang.lang.account"></span></span></a>
								            </li>								            
								            <li class="span2 glyphicons nameplate_alt">
								            	<a href="#tab2" data-toggle="tab"><i></i> <span><span data-bind="text: lang.lang.info"></span></span></a>
								            </li>
								            <li class="span2 glyphicons parents">
								            	<a href="#tab3" data-toggle="tab"><i></i> <span><span data-bind="text: lang.lang.agents"></span></span></a>
								            </li>						            					            
								        </ul>
								    </div>
								    <!-- // Tabs Heading END -->

								    <div class="tab-content">
								        <!-- //ACCOUNTING INFO -->
								        <div class="tab-pane active" id="tab1">
								        	
								        	<div class="row-fluid">								        		
								            	<div class="span3">
													<label for="ddlAR"><span data-bind="text: lang.lang.account_receiveable"></span> <span style="color:red">*</span></label>
													<input id="ddlAR" name="ddlAR"
														   data-role="dropdownlist"
														   data-template="account-list-tmpl"										                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.account_id,
										                              source: arDS"
										                   data-option-label="(--- Select ---)"
										                   required data-required-msg="required" style="width: 100%;" />													
												</div>
												<div class="span3">
													<label for="ddlRA"><span data-bind="text: lang.lang.revenue_account"></span> <span style="color:red">*</span></label>
													<input id="ddlRA" name="ddlRA"
														   data-role="dropdownlist"
														   data-template="account-list-tmpl"										                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.ra_id,
										                              source: raDS"
										                   data-option-label="(--- Select ---)"
										                   required data-required-msg="required" style="width: 100%;" />													
												</div>
												<div class="span3">
													<label for="ddlDepositAccount">Deposit Acccount <span style="color:red">*</span></label>
													<input id="ddlDepositAccount" name="ddlDepositAccount"
														   data-role="dropdownlist"
														   data-template="account-list-tmpl"										                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.deposit_account_id,
										                              source: depositDS"
										                   data-option-label="(--- Select ---)"
										                   required data-required-msg="required" style="width: 100%;" />													
												</div>
												<div class="span3">
													<label for="ddlTradeDiscount">Trade Discount <span style="color:red">*</span></label>
													<input id="ddlTradeDiscount" name="ddlTradeDiscount"
														   data-role="dropdownlist"
														   data-template="account-list-tmpl"										                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.trade_discount_id,
										                              source: tradeDiscountDS"
										                   data-option-label="(--- Select ---)"
										                   required data-required-msg="required" style="width: 100%;" />														
												</div>												
									        </div>

									        <div class="separator line bottom"></div>

									        <div class="row-fluid">
								        		<div class="span3">						
										            <label for="currency"><span data-bind="text: lang.lang.currency"></span> <span style="color:red">*</span></label>
										            <input id="currency" name="currency" 
										            	data-role="dropdownlist"
										            	data-template="currency-list-tmpl"
										            	data-value-primitive="true"
										                data-text-field="code"
										                data-value-field="id"
														data-bind="value: obj.currency_id, source: currencyDS"
														data-option-label="(--- Select ---)" 
														required data-required-msg="required" style="width: 100%;" />
										        </div>
								            	<div class="span3">
													<label for="ddlPaymentTerm"><span data-bind="text: lang.lang.payment_term"></span></label>
													<input id="ddlPaymentTerm" name="ddlPaymentTerm"
														data-role="dropdownlist"
										            	data-value-primitive="true"
										                data-text-field="name"
										                data-value-field="id"
														data-bind="value: obj.payment_term_id, source: paymentTermDS" 
														data-option-label="(--- Select ---)"
														style="width: 100%;" />
												</div>
												<div class="span3">
													<label for="ddlPaymentMethod"><span data-bind="text: lang.lang.payment_method"></span></label>
													<input id="ddlPaymentMethod" name="ddlPaymentMethod"
														data-role="dropdownlist"
										            	data-value-primitive="true"
										                data-text-field="name"
										                data-value-field="id"
														data-bind="value: obj.payment_method_id, source: paymentMethodDS"
														data-option-label="(--- Select ---)" 
														style="width: 100%;" />
												</div>
												<div class="span3">
													<label for="ddlSettlementDiscount">Settlement Discount <span style="color:red">*</span></label>
													<input id="ddlSettlementDiscount" name="ddlSettlementDiscount"
														   data-role="dropdownlist"
														   data-template="account-list-tmpl"										                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.settlement_discount_id,
										                              source: settlementDiscountDS"
										                   data-option-label="(--- Select ---)"
										                   required data-required-msg="required" style="width: 100%;" />														
												</div>												
									        </div>

									        <div class="separator line bottom"></div>

									        <div class="row-fluid">
									        	<div class="span3">
													<label for="ddlTaxItem">Tax </label>
													<input id="ddlTaxItem" name="ddlTaxItem"
														   data-role="dropdownlist"														   										                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.tax_item_id,
										                              source: taxItemDS"
										                   data-option-label="(--- Select ---)"
										                   style="width: 100%;" />
												</div>	
										        <div class="span3">
													<label for="txtCreditLimit"><span data-bind="text: lang.lang.credit_limit"></span> </label>								              		
										            <input data-role="numerictextbox"
										                   data-format="n"
										                   data-min="0"										                   
										                   data-bind="value: obj.credit_limit"										                  
										                   style="width: 100%;">
												</div>																							
											</div>
							        	</div>
								        <!-- //ACCOUNTING INFO END -->								        							       

								        <!-- //GENERAL INFO -->
								        <div class="tab-pane" id="tab2">
							            	<table class="table table-borderless table-condensed cart_total">						            	
							            		<tr>
									                <td><span data-bind="text: lang.lang.status"></span> <span style="color:red">*</span></td>
									              	<td>
									              		<input id="customerStatus" name="customerStatus" 
									              				data-role="dropdownlist"
											            		data-text-field="name"
								           						data-value-field="id"
								           						data-value-primitive="true" 
											            		data-bind="source: statusList, value: obj.status"
											            		data-option-label="(--- Select ---)"
											            		required data-required-msg="ត្រូវការ ស្ថានភាព" />
									              	</td>							              	
									            	<td><span data-bind="text: lang.lang.register_date"></span> <span style="color:red">*</span></td>
									              	<td>
									              		<input id="registered_date" name="registered_date" 
										            		data-role="datepicker"			            		
							            					data-bind="value: obj.registered_date" 
							            					data-format="dd-MM-yyyy"
							            					data-parse-formats="yyyy-MM-dd" 
							            					placeholder="dd-MM-yyyy" required data-required-msg="required" />
									              	</td>
									            </tr>
									            <tr>
									                <td><span data-bind="text: lang.lang.gender"></span></td>
									              	<td><select data-role="dropdownlist" data-bind="source: genders, value: obj.gender"></select></td>							              	
									            	<td><span data-bind="text: lang.lang.phone"></span></td>
									              	<td><input class="k-textbox" data-bind="value: obj.phone" placeholder="e.g. 012 333 444" /></td>
									            </tr>
									            <tr>
									            	<td><span data-bind="text: lang.lang.address"></span></td>
									              	<td><input class="k-textbox" data-bind="value: obj.address" placeholder="where you live ..." />							              	
									            	<td><span data-bind="text: lang.lang.email"></span></td>
									              	<td><input class="k-textbox" data-bind="value: obj.email" placeholder="e.g. me@email.com" />
									            </tr>									            
									            <tr>
									            	<td>
									            		<label for="txtBillTo" data-bind="click: copyBillTo"><span data-bind="text: lang.lang.bill_to"></span> <i class="icon-share"></i></label>											            
									            	</td>
									            	<td>
									            		<input class="k-textbox" data-bind="value: obj.bill_to" placeholder="bill to ..." />
									            	</td>
									            	<td>
									            		<span data-bind="text: lang.lang.ship_to"></span>										            
									            	</td>
									            	<td>
									            		<input class="k-textbox" data-bind="value: obj.ship_to" placeholder="ship to ..." />
									            	</td>
									            </tr>
									            <tr>									            								              	
									            	<td><span data-bind="text: lang.lang.memo"></span></td>
									              	<td><input class="k-textbox" data-bind="value: obj.memo" placeholder="memo ..." /></td>
									              	<td></td>
									              	<td></td>
									            </tr>							            							            								            								            			            
									        </table>
							        	</div>
								        <!-- //GENERAL INFO END -->

								        <!-- //CONTACT PERSON -->
								        <div class="tab-pane" id="tab3">
								        	<span class="btn btn-primary btn-icon glyphicons circle_plus" data-bind="click: addEmptyContactPerson"><i></i> <span data-bind="text: lang.lang.new_agent"></span></span>
								        	
								        	<table class="table table-bordered table-white">
										        <thead>
										            <tr>
										                <th><span data-bind="text: lang.lang.name"></span></th>
										                <th><span data-bind="text: lang.lang.department"></span></th>						                
										                <th><span data-bind="text: lang.lang.phone"></span></th>
										                <th><span data-bind="text: lang.lang.email"></span></th>
										                <th width="20px"></th>										               
										            </tr>
										        </thead>
										        <tbody data-role="listview"										        		
										        		data-auto-bind="false"										        						        		 
										        		data-template="contact-person-row-tmpl" 
										        		data-bind="source: contactPersonDS">
										        </tbody>										        						        
										    </table>
							        	</div>
								        <!-- //CONTACT PERSON END -->
								    </div>
								</div>
							</div>

							<br>											
							
							<!-- Form actions -->
							<div align="center">
								<span id="notification"></span>

								<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i><span data-bind="text: lang.lang.save"></span></span>
								<span class="btn btn-danger btn-icon glyphicons delete" data-bind="click: delete, visible: isEdit"><i></i><span data-bind="text: lang.lang.delete"></span></span>
								<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i><span data-bind="text: lang.lang.cancel"></span></span>
							</div>
							<!-- // Form actions END -->

						</div> <!-- End Widget-Body List -->
					</div>
					<!-- // Collapsible Widget END -->				          					                
			    											
				</div> <!-- // End div example-->  
			</div> <!-- // End div span12-->
		</div> <!-- // End div row-fluid-->	
	</div> 	
</script>
<script id="contact-person-row-tmpl" type="text/x-kendo-tmpl">
	<tr>		
		<td>
			<input id="name" name="name" 
					type="text" class="k-textbox" 
					data-bind="value: name"
					placeholder="eg: Mr. John" 
					required="required" validationMessage="required" style="width: 190px;" />
            <span data-for="name" class="k-invalid-msg"></span>
		</td>
		<td>
			<input type="text" class="k-textbox" data-bind="value: department" placeholder="eg: Accounting" style="width: 190px;" />
		</td>		
		<td>
			<input type="text" class="k-textbox" data-bind="value: phone" placeholder="eg: 012 333 444" style="width: 190px;" />
		</td>
		<td>
			<input type="text" class="k-textbox" data-bind="value: email" placeholder="eg: john@email.com" style="width: 190px;" />
		</td>		
		<td align="center">            
			<span class="glyphicons no-js delete" data-bind="click: deleteContactPerson"><i></i></span>									
		</td>		
	</tr>
</script>
<!-- ***************************
 *	Invoice Section               *
**************************** -->
<script id="invoice" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>INVOICE</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 190px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>								
								<tr>
									<td>Customer</td>
									<td>
										<input id="cbbContact" name="cbbContact"
											   data-role="combobox"											                    
							                   data-value-primitive="true"
							                   data-template="contact-list-tmpl"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.contact_id,
							                              source: contactDS,
							                              events:{ change: contactChanges }"
							                   data-placeholder="Type Name.."                    
							                   required data-required-msg="required" style="width: 100%" />
									</td>
								</tr>																															
							</table>

							<div class="strong" style="width: 90%; padding: 10px;" align="center"
								data-bind="style: {
								        backgroundColor: bgColor}">
								<div align="left">AMOUNT DUE</div>
								<h2 data-bind="text: total" align="right"></h2>
							</div>

						</div>						
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 190px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						        	<li class="span3 glyphicons cogwheels active"><a href="#tab1-5" data-toggle="tab"><i></i> Option</a>
						            </li>
						            <li class="span3 glyphicons adress_book"><a href="#tab2-5" data-toggle="tab"><i></i> Address</a>
						            </li>
						            <li class="span2 glyphicons circle_info"><a href="#tab3-5" data-toggle="tab"><i></i> Info</a>
						            </li>
						            <li class="span1 glyphicons paperclip"><a href="#tab4-5" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span3 glyphicons history"><a href="#tab5-5" data-toggle="tab"><i></i> Recuring</a>
						            </li>						            								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						    	<!-- Options Tab content -->
						        <div class="tab-pane active" id="tab1-5">						            
						            <table class="table table-borderless table-condensed cart_total">							            
										<tr>
							            	<td>
							            		Term					            						            		
							            	</td>				
											<td>
												<input data-role="dropdownlist"														
							              				data-value-primitive="true"
														data-text-field="name" 
							              				data-value-field="id"						              				 
							              				data-bind="value: obj.payment_term_id,
							              							source: paymentTermDS,
							              							events:{ change: setTerm }"
							              				data-option-label="Select Term..." 
							              				style="width: 100%" />
											</td>
										</tr>
							            <tr>
							            	<td>Due Date</td>
							            	<td>
							            		<input id="txtDueDate" name="txtDueDate" 
														data-role="datepicker"
														data-format="dd-MM-yyyy"
														data-parse-formats="yyyy-MM-dd" 
														data-bind="value: obj.due_date" 
														required data-required-msg="required"
														style="width:100%;" />
							            	</td>
							            </tr>
										<tr>							            				
											<td>
							            		<input data-role="dropdownlist"
									                   data-option-label="Reference Type..."								                   
									                   data-value-primitive="true"
									                   data-text-field="name"
									                   data-value-field="id"
									                   data-bind="value: obj.reference_type,
									                              source: referenceTypes,
									                              events:{change: loadReference}"
									                   style="width: 100%" />						            						            		
							            	</td>
							            	<td>
												<select data-role="dropdownlist"
														data-option-label="Select Reference..."
														data-auto-bind="false"
							              				data-value-primitive="true"
														data-text-field="number" 
							              				data-value-field="id"						              				 
							              				data-bind="value: obj.reference_id,
							              							source: referenceDS,
							              							enabled: bolReference,						              							
							              							events:{change: referenceChanges}" 
							              				style="width: 100%" ></select>
											</td>
										</tr>	
						            </table>						            
						        </div>
						        <!-- // Options Tab content END -->

						        <!-- Address Tab content -->
						        <div class="tab-pane" id="tab2-5">
						        	Billing Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.bill_to" placeholder="Billing to ..."></textarea>								
									
									Shipping Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.ship_to" placeholder="Shipping to ..."></textarea>	
											
						        </div>
						        <!-- // Address Tab content END -->

						        <!-- Info Tab content -->
						        <div class="tab-pane" id="tab3-5">
						        	
									<table class="table table-borderless table-condensed cart_total">
										<tr>
											<td>Balance</td>
											<td>
												<span data-bind="text: balance"></span>
											</td>
										</tr>
										<tr>
											<td>Credit Allowed</td>
											<td>												
												<span data-format="n" data-bind="text: obj.credit_allowed"></span>
											</td>
										</tr>							            
							            <tr>
											<td>Currency</td>
											<td>
												<input id="cbbCurrency" name="cbbCurrency"
													   data-role="combobox"				                
									                   data-value-primitive="true"
									                   data-template="currency-list-tmpl"				   
									                   data-text-field="code"
									                   data-value-field="locale"
									                   data-bind="value: obj.locale, 
									                   			source: currencyDS, 
									                   			events: {change : setRate}"
									                   placeholder="Add currency..." 
									                   required data-required-msg="required" style="width: 100%" />										
											</td>
										</tr>						            	
										<tr>
											<td>Segments</td>
											<td>
												<select data-role="multiselect"
													   data-value-primitive="true"								   
													   data-item-template="segment-list-tmpl"				    
													   data-value-field="id" 
													   data-text-field="code"
													   data-bind="value: obj.segments, 
													   			source: segmentItemDS,
													   			events:{ change: segmentChanges }"
													   data-placeholder="Add Segment.."				   
													   style="width: 100%" /></select>
											</td>
										</tr>											
						            </table>
											
						        </div>
						        <!-- // Info Tab content END -->

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab4-5">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->						        

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab5-5">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->						        								        

						    </div>
						</div>

				    </div>
				</div>

				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th class="center" style="width: 1%;">No.</th>			                
			                <th>ITEM</th>
			                <th>DESCRIPTION</th>
			                <th style="width: 20%;">QUANTITY</th>
			                <th style="width: 13%;">PRICE</th>
			                <th style="width: 1%;" data-bind="visible: showDiscount">DISCOUNT</th>			                
			                <th style="width: 10%;">AMOUNT</th>
			                <th style="width: 11%;">TAX</th>			                			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="invoice-template" 
			        		data-auto-bind="false"
			        		data-bind="source: lineDS"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span8">						
						
						<div class="row-fluid">							
							<div class="span6">
								<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>												

								<div class="btn-group">
									<div class="leadcontainer">
										
									</div>
									<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
									<ul class="dropdown-menu" style="padding-left: 10px">
										<li>
											<input type="checkbox" id="chbDiscount" class="k-checkbox" data-bind="checked: showDiscount">
          									<label class="k-checkbox-label" for="chbDiscount">DISCOUNT</label>
										</li>															
									</ul>
								</div>

								<span class="btn btn-default">Add New Item</span>
								
								<br><br>
								<div class="well">
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo" placeholder="memo for external ..."></textarea>
									<br>						
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo2" placeholder="memo for internal ..."></textarea>
								</div>
							</div>
							<div class="span6">
							
							</div>
						</div>

					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span4">
						<table class="table table-condensed table-striped table-white">
							<tbody>
								<tr>
									<td class="right">Subtotal:</td>
									<td class="right strong" width="40%"><span data-bind="text: sub_total"></span></td>
								</tr>								
								<tr>
									<td class="right">Total Discount:</td>
									<td class="right strong">
										<span data-bind="text: discount"></span>
                   					</td>
								</tr>
								<tr>
									<td class="right">Total Tax:</td>
									<td class="right strong"><span data-bind="text: tax"></span></td>
								</tr>
								<tr data-bind="visible: showDeposit">
									<td class="right">Deposit:</td>
									<td class="right strong">
										<span data-format="n" data-bind="text: obj.deposit"></span>
									</td>
								</tr>
								<tr>
									<td class="right">
										Credits:
										<span class="strong" data-format="n" data-bind="text: total_credit"></span>										
									</td>
									<td class="right strong">
										<input data-role="numerictextbox"
							                   data-format="n"
							                   data-min="0"							                                      
							                   data-bind="value: obj.credit,
							                              events: { change: changes }"
							                   style="width: 100%;">
									</td>
								</tr>								
								<tr>
									<td class="right"><h4>Total:</h4></td>
									<td class="right strong"><h4 data-bind="text: total"></h4></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>	           
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>
					<!-- <span id="saveSend" class="btn btn-icon btn-warning glyphicons envelope" style="width: 80px;"><i></i> Save Send</span>										 -->
					<span id="savePrint" class="btn btn-icon btn-default glyphicons print" data-bind="click: cancel" style="width: 80px;"><i></i> Save Print</span>
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>					
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="invoice-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td>
			<i class="icon-trash" data-bind="events: { click: removeRow }"></i>
			#:banhji.invoice.lineDS.indexOf(data)+1#			
		</td>		
		<td>
			<input id="ccbItem-#:uid#" name="ccbItem-#:uid#"
				   data-role="combobox"
				   data-template="item-list-tmpl"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: item_id, 
                   			  source: itemDS,
                   			  events:{ change: itemChanges }"
                   placeholder="Add Item..." 
                   required data-required-msg="required" style="width: 100%" />			
		</td>		
		<td>
			<input id="txtDescription-#:uid#" name="txtDescription-#:uid#" 
					type="text" class="k-textbox" 
					data-bind="value: description"					 
					required data-required-msg="required"
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td>
			<input id="txtQuantity-#:uid#" name="txtQuantity-#:uid#" 
					data-role="numerictextbox" 
					data-format="n0" data-min="0"
					data-bind="value: quantity, events: {change : changes}"
					required data-required-msg="required" style="width: 40%;" />

			<input data-role="dropdownlist"                  
                   data-text-field="measurement"
                   data-value-field="measurement_id"
                   data-bind="value: measurement_id,
                   			  source: item_prices,
                   			  events:{ change: measurementChanges }"
                   data-option-label="Measure"
                   style="width: 57%;" />
		</td>					
		<td>
			<input id="txtPrice-#:uid#" name="txtPrice-#:uid#" 
					data-role="numerictextbox" 
					data-format="n" 
					data-bind="value: price, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" />
		</td>
		<td class="center" data-bind="visible: showDiscount">
			<input data-role="numerictextbox"
                   data-format="p0"
                   data-min="0"
                   data-max="0.99"
                   data-step="0.1"                   
                   data-bind="value: discount,
                              events: { change: changes }"
                   style="width: 65px;">			
		</td>				
		<td class="right">
			<span data-format="n" data-bind="text: amount"></span> 						
		</td>
		<td>
			<input id="ccbTaxItem-#:uid#" name="ccbTaxItem-#:uid#"
				   data-role="combobox"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: tax_item_id, 
                   			  source: taxItemDS,
                   			  events:{ change: changes }"
                   style="width: 100%" />			
		</td>				
    </tr>   
</script>

<!-- ***************************
 *	Cash Sale Section               *
**************************** -->
<script id="cashSale" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>CASH SALE</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 190px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>								
								<tr>
									<td>Customer</td>
									<td>
										<input id="cbbContact" name="cbbContact"
											   data-role="combobox"											                    
							                   data-value-primitive="true"
							                   data-template="contact-list-tmpl"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.contact_id,
							                              source: contactDS,
							                              events:{ change: contactChanges }"
							                   data-placeholder="Type Name.."                    
							                   required data-required-msg="required" style="width: 100%" />
									</td>
								</tr>																															
							</table>

							<div class="strong" style="width: 90%; padding: 10px;" align="center"
								data-bind="style: {
								        backgroundColor: bgColor}">
								<div align="left">AMOUNT DUE</div>
								<h2 data-bind="text: total" align="right"></h2>

							</div>

						</div>						
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 190px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						        	<li class="span1 glyphicons cogwheels active"><a href="#tab1-5" data-toggle="tab"><i></i></a>
						            </li>
						            <li class="span1 glyphicons adress_book"><a href="#tab2-5" data-toggle="tab"><i></i></a>
						            </li>
						            <li class="span1 glyphicons circle_info"><a href="#tab3-5" data-toggle="tab"><i></i></a>
						            </li>
						            <li class="span1 glyphicons paperclip"><a href="#tab4-5" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span1 glyphicons history"><a href="#tab5-5" data-toggle="tab"><i></i> Recuring</a>
						            </li>						            								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						    	<!-- Options Tab content -->
						        <div class="tab-pane active" id="tab1-5">						            
						            <table class="table table-borderless table-condensed cart_total">							            
										<tr>
							            	<td>
							            		Payment Method					            						            		
							            	</td>				
											<td>
												<input data-role="dropdownlist"														
							              				data-value-primitive="true"
														data-text-field="name" 
							              				data-value-field="id"						              				 
							              				data-bind="value: obj.payment_method_id,
							              							source: paymentMethodDS"
							              				data-option-label="Select method..." 
							              				required data-required-msg="required" 
							              				style="width: 100%" />
											</td>
										</tr>
							            <tr>
							            	<td>Cash Account</td>							            	
							            		<td>
													<input id="ddlCash" name="ddlCash"
														data-bind="value: obj.account_id" 
														data-option-label="Select Account..." 
														required data-required-msg="required" 
														style="width: 100%;" />
												</td>							            	
							            </tr>
							            <tr>
							            	<td>Check Number</td>							            	
							            		<td>
													<input class="k-textbox" placeholder="type check number ..." data-bind="value: obj.check_no" style="width: 100%;">
												</td>							            	
							            </tr>
										<tr>							            				
											<td>
							            		<input data-role="dropdownlist"
									                   data-option-label="Reference Type..."								                   
									                   data-value-primitive="true"
									                   data-text-field="name"
									                   data-value-field="id"
									                   data-bind="value: obj.reference_type,
									                              source: referenceTypes,
									                              events:{change: loadReference}"
									                   style="width: 100%" />						            						            		
							            	</td>
							            	<td>
												<select data-role="dropdownlist"
														data-option-label="Select Reference..."
														data-auto-bind="false"
							              				data-value-primitive="true"
														data-text-field="number" 
							              				data-value-field="id"						              				 
							              				data-bind="value: obj.reference_id,
							              							source: referenceDS,
							              							enabled: bolReference,						              							
							              							events:{change: referenceChanges}" 
							              				style="width: 100%" ></select>
											</td>
										</tr>	
						            </table>						            
						        </div>
						        <!-- // Options Tab content END -->

						        <!-- Address Tab content -->
						        <div class="tab-pane" id="tab2-5">
						        	Billing Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.bill_to" placeholder="Billing to ..."></textarea>								
									
									Shipping Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.ship_to" placeholder="Shipping to ..."></textarea>	
											
						        </div>
						        <!-- // Address Tab content END -->

						        <!-- Info Tab content -->
						        <div class="tab-pane" id="tab3-5">
						        	
									<table class="table table-borderless table-condensed cart_total">
										<tr>
											<td>Balance</td>
											<td>
												<span data-bind="text: balance"></span>
											</td>
										</tr>
										<tr>
											<td>Credit Allowed</td>
											<td>												
												<span data-format="n" data-bind="text: obj.credit_allowed"></span>
											</td>
										</tr>							            
							            <tr>
											<td>Currency</td>
											<td>
												<input id="cbbCurrency" name="cbbCurrency"
													   data-role="combobox"				                
									                   data-value-primitive="true"
									                   data-template="currency-list-tmpl"				   
									                   data-text-field="code"
									                   data-value-field="locale"
									                   data-bind="value: obj.locale, 
									                   			source: currencyDS, 
									                   			events: {change : setRate}"
									                   placeholder="Add currency..." 
									                   required data-required-msg="required" style="width: 100%" />										
											</td>
										</tr>						            	
										<tr>
											<td>Segments</td>
											<td>
												<select data-role="multiselect"
													   data-value-primitive="true"								   
													   data-item-template="segment-list-tmpl"				    
													   data-value-field="id" 
													   data-text-field="code"
													   data-bind="value: obj.segments, 
													   			source: segmentItemDS,
													   			events:{ change: segmentChanges }"
													   data-placeholder="Add Segment.."				   
													   style="width: 100%" /></select>
											</td>
										</tr>											
						            </table>
											
						        </div>
						        <!-- // Info Tab content END -->

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab4-5">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->						        

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab5-5">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->						        								        

						    </div>
						</div>

				    </div>
				</div>

				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th class="center" style="width: 1%;">No.</th>			                
			                <th>ITEM</th>
			                <th>DESCRIPTION</th>
			                <th style="width: 20%;">QUANTITY</th>
			                <th style="width: 13%;">PRICE</th>
			                <th style="width: 1%;" data-bind="visible: showDiscount">DISCOUNT</th>			                
			                <th style="width: 10%;">AMOUNT</th>
			                <th style="width: 11%;">TAX</th>			                			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="cashSale-template" 
			        		data-auto-bind="false"
			        		data-bind="source: lineDS"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span8">						
						
						<div class="row-fluid">							
							<div class="span6">
								<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>												

								<div class="btn-group">
									<div class="leadcontainer">
										
									</div>
									<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
									<ul class="dropdown-menu" style="padding-left: 10px">
										<li>
											<input type="checkbox" id="chbDiscount" class="k-checkbox" data-bind="checked: showDiscount">
          									<label class="k-checkbox-label" for="chbDiscount">DISCOUNT</label>
										</li>															
									</ul>
								</div>

								<a href="#/item" class="btn btn-default">Add New Item</a>
								
								<br><br>
								<div class="well">
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo2" placeholder="memo for internal ..."></textarea>
									<br>						
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo" placeholder="memo for internal ..."></textarea>
								</div>
							</div>
							<div class="span6">
							
							</div>
						</div>

					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span4">
						<table class="table table-condensed table-striped table-white">
							<tbody>
								<tr>
									<td class="right">Subtotal:</td>
									<td class="right strong" width="40%"><span data-bind="text: sub_total"></span></td>
								</tr>								
								<tr>
									<td class="right">Total Discount:</td>
									<td class="right strong">
										<span data-bind="text: discount"></span>
                   					</td>
								</tr>
								<tr>
									<td class="right">Total Tax:</td>
									<td class="right strong"><span data-bind="text: tax"></span></td>
								</tr>
								<tr data-bind="visible: showDeposit">
									<td class="right">Deposit:</td>
									<td class="right strong">
										<span data-format="n" data-bind="text: obj.deposit"></span>
									</td>
								</tr>
								<tr>
									<td class="right">
										Credits:
										<span class="strong" data-format="n" data-bind="text: total_credit"></span>										
									</td>
									<td class="right strong">
										<input data-role="numerictextbox"
							                   data-format="n"
							                   data-min="0"							                                      
							                   data-bind="value: obj.credit,
							                              events: { change: changes }"
							                   style="width: 100%;">
									</td>
								</tr>								
								<tr>
									<td class="right"><h4>Total:</h4></td>
									<td class="right strong"><h4 data-bind="text: total"></h4></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>	           
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>
					<!-- <span id="saveSend" class="btn btn-icon btn-warning glyphicons envelope" style="width: 80px;"><i></i> Save Send</span>										 -->
					<span id="savePrint" class="btn btn-icon btn-default glyphicons print" data-bind="click: cancel" style="width: 80px;"><i></i> Save Print</span>
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>					
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="cashSale-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td>
			<i class="icon-trash" data-bind="events: { click: removeRow }"></i>
			#:banhji.cashSale.lineDS.indexOf(data)+1#			
		</td>		
		<td>
			<input id="ccbItem-#:uid#" name="ccbItem-#:uid#"
				   data-role="combobox"
				   data-template="item-list-tmpl"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: item_id, 
                   			  source: itemDS,
                   			  events:{ change: itemChanges }"
                   placeholder="Add Item..." 
                   required data-required-msg="required" style="width: 100%" />			
		</td>		
		<td>
			<input id="txtDescription-#:uid#" name="txtDescription-#:uid#" 
					type="text" class="k-textbox" 
					data-bind="value: description"					 
					required data-required-msg="required"
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td>
			<input id="txtQuantity-#:uid#" name="txtQuantity-#:uid#" 
					data-role="numerictextbox" 
					data-format="n0" data-min="0"
					data-bind="value: quantity, events: {change : changes}"
					required data-required-msg="required" style="width: 40%;" />

			<input data-role="dropdownlist"                  
                   data-text-field="measurement"
                   data-value-field="measurement_id"
                   data-bind="value: measurement_id,
                   			  source: item_prices,
                   			  events:{ change: measurementChanges }"
                   data-option-label="Measure"
                   style="width: 57%;" />
		</td>					
		<td>
			<input id="txtPrice-#:uid#" name="txtPrice-#:uid#" 
					data-role="numerictextbox" 
					data-format="n" 
					data-bind="value: price, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" />
		</td>
		<td class="center" data-bind="visible: showDiscount">
			<input data-role="numerictextbox"
                   data-format="p0"
                   data-min="0"
                   data-max="0.99"
                   data-step="0.1"                   
                   data-bind="value: discount,
                              events: { change: changes }"
                   style="width: 65px;">			
		</td>				
		<td class="right">
			<span data-format="n" data-bind="text: amount"></span> 						
		</td>
		<td>
			<input id="ccbTaxItem-#:uid#" name="ccbTaxItem-#:uid#"
				   data-role="combobox"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: tax_item_id, 
                   			  source: taxItemDS,
                   			  events:{ change: changes }"
                   style="width: 100%" />			
		</td>				
    </tr>   
</script>
<!-- ***************************
 *	Sale Order Section               *
**************************** -->
<script id="saleOrder" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>SALE ORDER</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 190px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>								
								<tr>
									<td>Customer</td>
									<td>
										<input id="cbbContact" name="cbbContact"
											   data-role="combobox"											                    
							                   data-value-primitive="true"
							                   data-template="contact-list-tmpl"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.contact_id,
							                              source: contactDS,
							                              events:{ change: contactChanges }"
							                   data-placeholder="Type Name.."                    
							                   required data-required-msg="required" style="width: 100%" />
									</td>
								</tr>																															
							</table>

							<div class="strong" style="width: 90%; padding: 10px;" align="center"
								data-bind="style: {
								        backgroundColor: bgColor}">
								<div align="left">AMOUNT DUE</div>
								<h2 data-bind="text: total" align="right"></h2>

							</div>

						</div>						
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 190px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						        	<li class="span1 glyphicons cogwheels active"><a href="#tab1-5" data-toggle="tab"><i></i> </a>
						            </li>
						            <li class="span1 glyphicons adress_book"><a href="#tab2-5" data-toggle="tab"><i></i> </a>
						            </li>
						            <li class="span1 glyphicons circle_info"><a href="#tab3-5" data-toggle="tab"><i></i> </a>
						            </li>
						            <li class="span1 glyphicons paperclip"><a href="#tab4-5" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span1 glyphicons history"><a href="#tab5-5" data-toggle="tab"><i></i> Recuring</a>
						            </li>						            								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						    	<!-- Options Tab content -->
						        <div class="tab-pane active" id="tab1-5">						            
						            <table class="table table-borderless table-condensed cart_total">							            
										
							            <tr>
							            	<td>Expected Date</td>
							            	<td>
							            		<input id="txtDueDate" name="txtDueDate" 
														data-role="datepicker"
														data-format="dd-MM-yyyy"
														data-parse-formats="yyyy-MM-dd" 
														data-bind="value: obj.due_date" 
														required data-required-msg="required"
														style="width:100%;" />
							            	</td>
							            </tr>							           
										<tr>							            				
											<td>
							            		<input data-role="dropdownlist"
									                   data-option-label="Reference Type..."								                   
									                   data-value-primitive="true"
									                   data-text-field="name"
									                   data-value-field="id"
									                   data-bind="value: obj.reference_type,
									                              source: referenceTypes,
									                              events:{change: loadReference}"
									                   style="width: 100%" />						            						            		
							            	</td>
							            	<td>
												<select data-role="dropdownlist"
														data-option-label="Select Reference..."
														data-auto-bind="false"
							              				data-value-primitive="true"
														data-text-field="number" 
							              				data-value-field="id"						              				 
							              				data-bind="value: obj.reference_id,
							              							source: referenceDS,
							              							enabled: bolReference,						              							
							              							events:{change: referenceChanges}" 
							              				style="width: 100%" ></select>
											</td>
										</tr>	
						            </table>						            
						        </div>
						        <!-- // Options Tab content END -->

						        <!-- Address Tab content -->
						        <div class="tab-pane" id="tab2-5">
						        	Billing Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.bill_to" placeholder="Billing to ..."></textarea>								
									
									Shipping Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.ship_to" placeholder="Shipping to ..."></textarea>	
											
						        </div>
						        <!-- // Address Tab content END -->

						        <!-- Info Tab content -->
						        <div class="tab-pane" id="tab3-5">
						        	
									<table class="table table-borderless table-condensed cart_total">
										<tr>
											<td>Balance</td>
											<td>
												<span data-bind="text: balance"></span>
											</td>
										</tr>
										<tr>
											<td>Credit Allowed</td>
											<td>												
												<span data-format="n" data-bind="text: obj.credit_allowed"></span>
											</td>
										</tr>							            
							            <tr>
											<td>Currency</td>
											<td>
												<input id="cbbCurrency" name="cbbCurrency"
													   data-role="combobox"				                
									                   data-value-primitive="true"
									                   data-template="currency-list-tmpl"				   
									                   data-text-field="code"
									                   data-value-field="locale"
									                   data-bind="value: obj.locale, 
									                   			source: currencyDS, 
									                   			events: {change : setRate}"
									                   placeholder="Add currency..." 
									                   required data-required-msg="required" style="width: 100%" />										
											</td>
										</tr>						            	
										<tr>
											<td>Segments</td>
											<td>
												<select data-role="multiselect"
													   data-value-primitive="true"								   
													   data-item-template="segment-list-tmpl"				    
													   data-value-field="id" 
													   data-text-field="code"
													   data-bind="value: obj.segments, 
													   			source: segmentItemDS,
													   			events:{ change: segmentChanges }"
													   data-placeholder="Add Segment.."				   
													   style="width: 100%" /></select>
											</td>
										</tr>											
						            </table>
											
						        </div>
						        <!-- // Info Tab content END -->

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab4-5">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->						        

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab5-5">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->						        								        

						    </div>
						</div>

				    </div>
				</div>

				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th class="center" style="width: 1%;">No.</th>			                
			                <th>ITEM</th>
			                <th>DESCRIPTION</th>
			                <th style="width: 20%;">QUANTITY</th>
			                <th style="width: 13%;">PRICE</th>
			                <th style="width: 1%;" data-bind="visible: showDiscount">DISCOUNT</th>			                
			                <th style="width: 10%;">AMOUNT</th>			                			                			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="saleOrder-template" 
			        		data-auto-bind="false"
			        		data-bind="source: lineDS"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span8">						
						
						<div class="row-fluid">							
							<div class="span6">
								<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>												

								<div class="btn-group">
									<div class="leadcontainer">
										
									</div>
									<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
									<ul class="dropdown-menu" style="padding-left: 10px">
										<li>
											<input type="checkbox" id="chbDiscount" class="k-checkbox" data-bind="checked: showDiscount">
          									<label class="k-checkbox-label" for="chbDiscount">DISCOUNT</label>
										</li>															
									</ul>
								</div>

								<a href="#/item" class="btn btn-default">Add New Item</a>
								
								<br><br>
								<div class="well">
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo2" placeholder="memo for internal ..."></textarea>
									<br>						
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo" placeholder="memo for internal ..."></textarea>
								</div>
							</div>
							<div class="span6">
							
							</div>
						</div>

					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span4">
						<table class="table table-condensed table-striped table-white">
							<tbody>
								<tr>
									<td class="right">Subtotal:</td>
									<td class="right strong" width="40%"><span data-bind="text: sub_total"></span></td>
								</tr>								
								<tr>
									<td class="right">Total Discount:</td>
									<td class="right strong">
										<span data-bind="text: discount"></span>
                   					</td>
								</tr>								
								<tr data-bind="visible: showDeposit">
									<td class="right">Deposit:</td>
									<td class="right strong">
										<span data-format="n" data-bind="text: obj.deposit"></span>
									</td>
								</tr>
								<tr>
									<td class="right">
										Credits:
										<span class="strong" data-format="n" data-bind="text: total_credit"></span>										
									</td>
									<td class="right strong">
										<input data-role="numerictextbox"
							                   data-format="n"
							                   data-min="0"							                                      
							                   data-bind="value: obj.credit,
							                              events: { change: changes }"
							                   style="width: 100%;">
									</td>
								</tr>								
								<tr>
									<td class="right"><h4>Total:</h4></td>
									<td class="right strong"><h4 data-bind="text: total"></h4></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>	           
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>
					<!-- <span id="saveSend" class="btn btn-icon btn-warning glyphicons envelope" style="width: 80px;"><i></i> Save Send</span>										 -->
					<span id="savePrint" class="btn btn-icon btn-default glyphicons print" data-bind="click: cancel" style="width: 80px;"><i></i> Save Print</span>
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>					
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="saleOrder-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td>
			<i class="icon-trash" data-bind="events: { click: removeRow }"></i>
			#:banhji.saleOrder.lineDS.indexOf(data)+1#			
		</td>		
		<td>
			<input id="ccbItem-#:uid#" name="ccbItem-#:uid#"
				   data-role="combobox"
				   data-template="item-list-tmpl"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: item_id, 
                   			  source: itemDS,
                   			  events:{ change: itemChanges }"
                   placeholder="Add Item..." 
                   required data-required-msg="required" style="width: 100%" />			
		</td>		
		<td>
			<input id="txtDescription-#:uid#" name="txtDescription-#:uid#" 
					type="text" class="k-textbox" 
					data-bind="value: description"					 
					required data-required-msg="required"
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td>
			<input id="txtQuantity-#:uid#" name="txtQuantity-#:uid#" 
					data-role="numerictextbox" 
					data-format="n0" data-min="0"
					data-bind="value: quantity, events: {change : changes}"
					required data-required-msg="required" style="width: 40%;" />

			<input data-role="dropdownlist"                  
                   data-text-field="measurement"
                   data-value-field="measurement_id"
                   data-bind="value: measurement_id,
                   			  source: item_prices,
                   			  events:{ change: measurementChanges }"
                   data-option-label="Measure"
                   style="width: 57%;" />
		</td>					
		<td>
			<input id="txtPrice-#:uid#" name="txtPrice-#:uid#" 
					data-role="numerictextbox" 
					data-format="n" 
					data-bind="value: price, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" />
		</td>
		<td class="center" data-bind="visible: showDiscount">
			<input data-role="numerictextbox"
                   data-format="p0"
                   data-min="0"
                   data-max="0.99"
                   data-step="0.1"                   
                   data-bind="value: discount,
                              events: { change: changes }"
                   style="width: 65px;">			
		</td>				
		<td class="right">
			<span data-format="n" data-bind="text: amount"></span> 						
		</td>						
    </tr>   
</script>
<!-- ***************************
 *	Sale Order Section               *
**************************** -->
<script id="quote" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>QUOTE</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 190px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>								
								<tr>
									<td>Customer</td>
									<td>
										<input id="cbbContact" name="cbbContact"
											   data-role="combobox"											                    
							                   data-value-primitive="true"
							                   data-template="contact-list-tmpl"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.contact_id,
							                              source: contactDS,
							                              events:{ change: contactChanges }"
							                   data-placeholder="Type Name.."                    
							                   required data-required-msg="required" style="width: 100%" />
									</td>
								</tr>																															
							</table>

							<div class="strong" style="width: 90%; padding: 10px;" align="center"
								data-bind="style: {
								        backgroundColor: bgColor}">
								<div align="left">AMOUNT DUE</div>
								<h2 data-bind="text: total" align="right"></h2>

							</div>

						</div>						
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 190px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						        	<li class="span1 glyphicons cogwheels active"><a href="#tab1-5" data-toggle="tab"><i></i> </a>
						            </li>
						            <li class="span1 glyphicons adress_book"><a href="#tab2-5" data-toggle="tab"><i></i> </a>
						            </li>
						            <li class="span1 glyphicons circle_info"><a href="#tab3-5" data-toggle="tab"><i></i> </a>
						            </li>
						            <li class="span1 glyphicons paperclip"><a href="#tab4-5" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span1 glyphicons history"><a href="#tab5-5" data-toggle="tab"><i></i> Recuring</a>
						            </li>						            								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						    	<!-- Options Tab content -->
						        <div class="tab-pane active" id="tab1-5">						            
						            <table class="table table-borderless table-condensed cart_total">							            
										
							            <tr>
							            	<td>Valid Until</td>
							            	<td>
							            		<input id="txtDueDate" name="txtDueDate" 
														data-role="datepicker"
														data-format="dd-MM-yyyy"
														data-parse-formats="yyyy-MM-dd" 
														data-bind="value: obj.due_date" 
														required data-required-msg="required"
														style="width:100%;" />
							            	</td>
							            </tr>											
						            </table>						            
						        </div>
						        <!-- // Options Tab content END -->

						        <!-- Address Tab content -->
						        <div class="tab-pane" id="tab2-5">
						        	Billing Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.bill_to" placeholder="Billing to ..."></textarea>								
									
									Shipping Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.ship_to" placeholder="Shipping to ..."></textarea>	
											
						        </div>
						        <!-- // Address Tab content END -->

						        <!-- Info Tab content -->
						        <div class="tab-pane" id="tab3-5">
						        	
									<table class="table table-borderless table-condensed cart_total">
										<tr>
											<td>Balance</td>
											<td>
												<span data-bind="text: balance"></span>
											</td>
										</tr>
										<tr>
											<td>Credit Allowed</td>
											<td>												
												<span data-format="n" data-bind="text: obj.credit_allowed"></span>
											</td>
										</tr>							            
							            <tr>
											<td>Currency</td>
											<td>
												<input id="cbbCurrency" name="cbbCurrency"
													   data-role="combobox"				                
									                   data-value-primitive="true"
									                   data-template="currency-list-tmpl"				   
									                   data-text-field="code"
									                   data-value-field="locale"
									                   data-bind="value: obj.locale, 
									                   			source: currencyDS, 
									                   			events: {change : setRate}"
									                   placeholder="Add currency..." 
									                   required data-required-msg="required" style="width: 100%" />										
											</td>
										</tr>						            	
										<tr>
											<td>Segments</td>
											<td>
												<select data-role="multiselect"
													   data-value-primitive="true"								   
													   data-item-template="segment-list-tmpl"				    
													   data-value-field="id" 
													   data-text-field="code"
													   data-bind="value: obj.segments, 
													   			source: segmentItemDS,
													   			events:{ change: segmentChanges }"
													   data-placeholder="Add Segment.."				   
													   style="width: 100%" /></select>
											</td>
										</tr>											
						            </table>
											
						        </div>
						        <!-- // Info Tab content END -->

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab4-5">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->						        

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab5-5">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->						        								        

						    </div>
						</div>

				    </div>
				</div>

				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th class="center" style="width: 1%;">No.</th>			                
			                <th>ITEM</th>
			                <th>DESCRIPTION</th>
			                <th style="width: 20%;">QUANTITY</th>
			                <th style="width: 13%;">PRICE</th>
			                <th style="width: 1%;" data-bind="visible: showDiscount">DISCOUNT</th>			                
			                <th style="width: 10%;">AMOUNT</th>			                			                			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="quote-template" 
			        		data-auto-bind="false"
			        		data-bind="source: lineDS"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span8">						
						
						<div class="row-fluid">							
							<div class="span6">
								<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>												

								<div class="btn-group">
									<div class="leadcontainer">
										
									</div>
									<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
									<ul class="dropdown-menu" style="padding-left: 10px">
										<li>											 
         									<input type="checkbox" id="chbDiscount" class="k-checkbox" data-bind="checked: showDiscount">
          									<label class="k-checkbox-label" for="chbDiscount">DISCOUNT</label>

										</li>															
									</ul>
								</div>

								<a href="#/item" class="btn btn-default">Add New Item</a>
								
								<br><br>
								<div class="well">
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo2" placeholder="memo for internal ..."></textarea>
									<br>						
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo" placeholder="memo for internal ..."></textarea>
								</div>
							</div>
							<div class="span6">
							
							</div>
						</div>

					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span4">
						<table class="table table-condensed table-striped table-white">
							<tbody>
								<tr>
									<td class="right">Subtotal:</td>
									<td class="right strong" width="40%"><span data-bind="text: sub_total"></span></td>
								</tr>								
								<tr>
									<td class="right">Total Discount:</td>
									<td class="right strong">
										<span data-bind="text: discount"></span>
                   					</td>
								</tr>								
								<tr data-bind="visible: showDeposit">
									<td class="right">Deposit:</td>
									<td class="right strong">
										<span data-format="n" data-bind="text: obj.deposit"></span>
									</td>
								</tr>
								<tr>
									<td class="right">
										Credits:
										<span class="strong" data-format="n" data-bind="text: total_credit"></span>										
									</td>
									<td class="right strong">
										<input data-role="numerictextbox"
							                   data-format="n"
							                   data-min="0"							                                      
							                   data-bind="value: obj.credit,
							                              events: { change: changes }"
							                   style="width: 100%;">
									</td>
								</tr>								
								<tr>
									<td class="right"><h4>Total:</h4></td>
									<td class="right strong"><h4 data-bind="text: total"></h4></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>	           
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>
					<!-- <span id="saveSend" class="btn btn-icon btn-warning glyphicons envelope" style="width: 80px;"><i></i> Save Send</span>										 -->
					<span id="savePrint" class="btn btn-icon btn-default glyphicons print" data-bind="click: cancel" style="width: 80px;"><i></i> Save Print</span>
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>					
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="quote-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td>
			<i class="icon-trash" data-bind="events: { click: removeRow }"></i>
			#:banhji.quote.lineDS.indexOf(data)+1#			
		</td>		
		<td>
			<input id="ccbItem-#:uid#" name="ccbItem-#:uid#"
				   data-role="combobox"
				   data-template="item-list-tmpl"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: item_id, 
                   			  source: itemDS,
                   			  events:{ change: itemChanges }"
                   placeholder="Add Item..." 
                   required data-required-msg="required" style="width: 100%" />			
		</td>		
		<td>
			<input id="txtDescription-#:uid#" name="txtDescription-#:uid#" 
					type="text" class="k-textbox" 
					data-bind="value: description"					 
					required data-required-msg="required"
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td>
			<input id="txtQuantity-#:uid#" name="txtQuantity-#:uid#" 
					data-role="numerictextbox" 
					data-format="n0" data-min="0"
					data-bind="value: quantity, events: {change : changes}"
					required data-required-msg="required" style="width: 40%;" />

			<input data-role="dropdownlist"                  
                   data-text-field="measurement"
                   data-value-field="measurement_id"
                   data-bind="value: measurement_id,
                   			  source: item_prices,
                   			  events:{ change: measurementChanges }"
                   data-option-label="Measure"
                   style="width: 57%;" />
		</td>					
		<td>
			<input id="txtPrice-#:uid#" name="txtPrice-#:uid#" 
					data-role="numerictextbox" 
					data-format="n" 
					data-bind="value: price, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" />
		</td>
		<td class="center" data-bind="visible: showDiscount">
			<input data-role="numerictextbox"
                   data-format="p0"
                   data-min="0"
                   data-max="0.99"
                   data-step="0.1"                   
                   data-bind="value: discount,
                              events: { change: changes }"
                   style="width: 65px;">			
		</td>				
		<td class="right">
			<span data-format="n" data-bind="text: amount"></span> 						
		</td>						
    </tr>   
</script>
<!-- ***************************
 *	Good Delivery note Section               *
**************************** -->
<script id="gdn" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>GOODS DELIVERY NOTE</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 190px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>								
								<tr>
									<td>Customer</td>
									<td>
										<input id="cbbContact" name="cbbContact"
											   data-role="combobox"											                    
							                   data-value-primitive="true"
							                   data-template="contact-list-tmpl"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.contact_id,
							                              source: contactDS,
							                              events:{ change: contactChanges }"
							                   data-placeholder="Type Name.."                    
							                   required data-required-msg="required" style="width: 100%" />
									</td>
								</tr>																															
							</table>

							<div class="strong" style="width: 90%; padding: 10px;" align="center"
								data-bind="style: {
								        backgroundColor: bgColor}">
								<div align="left">AMOUNT DUE</div>
								<h2 data-bind="text: total" align="right"></h2>

							</div>

						</div>						
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 190px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						        	<li class="span1 glyphicons cogwheels active"><a href="#tab1-4" data-toggle="tab"><i></i> Option</a>
						            </li>
						            <li class="span1 glyphicons adress_book"><a href="#tab2-4" data-toggle="tab"><i></i> Address</a>
						            </li>						            
						            <li class="span1 glyphicons paperclip"><a href="#tab3-4" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span1 glyphicons history"><a href="#tab4-4" data-toggle="tab"><i></i> Recuring</a>
						            </li>						            								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						    	<!-- Options Tab content -->
						        <div class="tab-pane active" id="tab1-4">						            
						            <table class="table table-borderless table-condensed cart_total">							           							           
										<tr>							            				
											<td>
							            		<input data-role="dropdownlist"
									                   data-option-label="Reference Type..."								                   
									                   data-value-primitive="true"
									                   data-text-field="name"
									                   data-value-field="id"
									                   data-bind="value: obj.reference_type,
									                              source: referenceTypes,
									                              events:{change: loadReference}"
									                   style="width: 100%" />						            						            		
							            	</td>
							            	<td>
												<select data-role="dropdownlist"
														data-option-label="Select Reference..."
														data-auto-bind="false"
							              				data-value-primitive="true"
														data-text-field="number" 
							              				data-value-field="id"						              				 
							              				data-bind="value: obj.reference_id,
							              							source: referenceDS,
							              							enabled: bolReference,						              							
							              							events:{change: referenceChanges}" 
							              				style="width: 100%" ></select>
											</td>
										</tr>	
						            </table>						            
						        </div>
						        <!-- // Options Tab content END -->

						        <!-- Address Tab content -->
						        <div class="tab-pane" id="tab2-4">
						        	Billing Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.bill_to" placeholder="Billing to ..."></textarea>								
									
									Shipping Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.ship_to" placeholder="Shipping to ..."></textarea>	
											
						        </div>
						        <!-- // Address Tab content END -->

						        <!-- Info Tab content -->
						       
						        <!-- // Info Tab content END -->

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab3-4">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->						        

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab4-4">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->						        								        

						    </div>
						</div>

				    </div>
				</div>

				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th class="center" style="width: 1%;">No.</th>			                
			                <th>ITEM</th>
			                <th>DESCRIPTION</th>
			                <th style="width: 20%;">QUANTITY</th>			                			                			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="gdn-template" 
			        		data-auto-bind="false"
			        		data-bind="source: lineDS"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span8">						
						
						<div class="row-fluid">							
							<div class="span6">
								<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>			

								<a href="#/item" class="btn btn-default">Add New Item</a>
								
								<br><br>
								<div class="well">
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo2" placeholder="memo for internal ..."></textarea>
									<br>						
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo" placeholder="memo for internal ..."></textarea>
								</div>
							</div>
							<div class="span6">
							
							</div>
						</div>

					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span4">
						<table class="table table-condensed table-striped table-white">
							<tbody>																								
								<tr>
									<td class="right"><h4>Total:</h4></td>
									<td class="right strong"><h4 data-format="n0" data-bind="text: obj.amount"></h4></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>	           
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>
					<!-- <span id="saveSend" class="btn btn-icon btn-warning glyphicons envelope" style="width: 80px;"><i></i> Save Send</span>										 -->
					<span id="savePrint" class="btn btn-icon btn-default glyphicons print" data-bind="click: cancel" style="width: 80px;"><i></i> Save Print</span>
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>					
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="gdn-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td>
			<i class="icon-trash" data-bind="events: { click: removeRow }"></i>
			#:banhji.gdn.lineDS.indexOf(data)+1#			
		</td>		
		<td>
			<input id="ccbItem-#:uid#" name="ccbItem-#:uid#"
				   data-role="combobox"
				   data-template="item-list-tmpl"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: item_id, 
                   			  source: itemDS,
                   			  events:{ change: itemChanges }"
                   placeholder="Add Item..." 
                   required data-required-msg="required" style="width: 100%" />			
		</td>		
		<td>
			<input id="txtDescription-#:uid#" name="txtDescription-#:uid#" 
					type="text" class="k-textbox" 
					data-bind="value: description"					 
					required data-required-msg="required"
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td>
			<input id="txtQuantity-#:uid#" name="txtQuantity-#:uid#" 
					data-role="numerictextbox" 
					data-format="n0" data-min="0"
					data-bind="value: quantity, events: {change : changes}"
					required data-required-msg="required" style="width: 40%;" />

			<input data-role="dropdownlist"                  
                   data-text-field="measurement"
                   data-value-field="measurement_id"
                   data-bind="value: measurement_id,
                   			  source: item_prices,
                   			  events:{ change: measurementChanges }"
                   data-option-label="Measure"
                   style="width: 57%;" />
		</td>						
    </tr>   
</script>

<script id="saleReturn" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>SALE RETURN</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 190px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>								
								<tr>
									<td>Customer</td>
									<td>
										<input id="cbbContact" name="cbbContact"
											   data-role="combobox"											                    
							                   data-value-primitive="true"
							                   data-template="contact-list-tmpl"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.contact_id,
							                              source: contactDS,
							                              events:{ change: contactChanges }"
							                   data-placeholder="Type Name.."                    
							                   required data-required-msg="required" style="width: 100%" />
									</td>
								</tr>																															
							</table>

							<div class="strong" style="width: 90%; padding: 10px;" align="center"
								data-bind="style: {
								        backgroundColor: bgColor}">
								<div align="left">AMOUNT PAID</div>
								<h2 data-bind="text: total" align="right"></h2>
							</div>

						</div>						
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 190px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						        	<li class="span1 glyphicons cogwheels active"><a href="#tab1-5" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span1 glyphicons pen"><a href="#tab2-5" data-toggle="tab"><i></i></a>
						            </li>
						            <li class="span1 glyphicons adress_book"><a href="#tab3-5" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span1 glyphicons paperclip"><a href="#tab4-5" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span3 glyphicons history"><a href="#tab5-5" data-toggle="tab"><i></i> Recuring</a>
						            </li>						            								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						    	<!-- Options Tab content -->
						        <div class="tab-pane active" id="tab1-5">						            
						            <table class="table table-borderless table-condensed cart_total">										
										<tr>							            				
											<td>Related Invoices</td>
							            	<td>
												<input data-role="combobox"														
														data-auto-bind="false"
							              				data-value-primitive="true"
							              				data-template="reference-list-tmpl"
														data-text-field="number" 
							              				data-value-field="id"						              				 
							              				data-bind="value: obj.reference_id,
							              							source: referenceDS,
							              							enabled: bolReference,						              							
							              							events:{change: referenceChanges}"
							              				placeholder="Select Invoice..." 
							              				style="width: 100%" />
											</td>
										</tr>
										<tr>
											<td>Currency</td>
											<td>
												<input id="cbbCurrency" name="cbbCurrency"
													   data-role="combobox"				                
									                   data-value-primitive="true"
									                   data-template="currency-list-tmpl"				   
									                   data-text-field="code"
									                   data-value-field="locale"
									                   data-bind="value: obj.locale, 
									                   			source: currencyDS, 
									                   			events: {change : setRate}"
									                   placeholder="Add currency..." 
									                   required data-required-msg="required" style="width: 100%" />										
											</td>
										</tr>						            	
										<tr>
											<td>Segments</td>
											<td>
												<select data-role="multiselect"
													   data-value-primitive="true"								   
													   data-item-template="segment-list-tmpl"				    
													   data-value-field="id" 
													   data-text-field="code"
													   data-bind="value: obj.segments, 
													   			source: segmentItemDS,
													   			events:{ change: segmentChanges }"
													   data-placeholder="Add Segment.."				   
													   style="width: 100%" /></select>
											</td>
										</tr>	
						            </table>						            
						        </div>
						        <!-- // Options Tab content END -->						        

						        <!-- Memo Tab content -->
						        <div class="tab-pane" id="tab2-5">
						        	<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo2" placeholder="memo for internal ..."></textarea>
									<br>						
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo" placeholder="memo for internal ..."></textarea>
						        </div>
						        <!-- // Memo Tab content END -->

						        <!-- Address Tab content -->
						        <div class="tab-pane" id="tab3-5">
						        	Billing Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.bill_to" placeholder="Billing to ..."></textarea>								
									
									Shipping Address
									<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.ship_to" placeholder="Shipping to ..."></textarea>	
											
						        </div>
						        <!-- // Address Tab content END -->						        

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab4-5">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->						        

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab5-5">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->						        								        

						    </div>
						</div>

				    </div>
				</div>

				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th class="center" style="width: 1%;">No.</th>			                
			                <th>ITEM</th>
			                <th>DESCRIPTION</th>
			                <th style="width: 20%;">QUANTITY</th>
			                <th style="width: 13%;">PRICE</th>		                
			                <th style="width: 1%;" data-bind="visible: showDiscount">DISCOUNT</th>			                
			                <th class="center" style="width: 10%;">AMOUNT</th>
			                <th class="center" style="width: 11%;">TAX</th>		                			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="saleReturn-template" 
			        		data-auto-bind="false"
			        		data-bind="source: lineDS"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span8">
						<table class="table table-condensed table-white">
							<tr>
								<td>						
									<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>												
								
									<div class="btn-group">
										<div class="leadcontainer">
											
										</div>
										<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
										<ul class="dropdown-menu" style="padding-left: 10px">
											<li>
												<input type="checkbox" id="chbDiscount" class="k-checkbox" data-bind="checked: showDiscount" />												
												<label class="k-checkbox-label" for="chbDiscount">DISCOUNT</label>
											</li>																
										</ul>
									</div>
								
									<span class="btn btn-default">Add New Item</span>
								</td>						
								<td class="right">Amount Paid:</td>
								<td class="left strong">
									<span data-format="n" data-bind="text: obj.amount_paid"></span>
								</td>							
								<td class="right">Remaining:</td>
								<td class="left strong">
									<span data-format="n" data-bind="text: remain"></span>
								</td>
							</tr>							
						</table>						

						<table class="table table-bordered table-inverse table-striped table-vertical-center" data-bind="visible: showReturn">
					        <thead>
					            <tr>
					            	<th class="center" style="width: 1%;">
					            		<button type="button" data-role="button" data-bind="click: addRowOption"><i class="icon-plus"></i></button>
					            	</th>
					            	<th style="width: 30%">TYPE OF RETURN</th>					               
					                <th>CONDITION</th>					                		                
					                <th style="width: 20%">AMOUNT</th>		                			                			                
					            </tr> 
					        </thead>
					        <tbody data-role="listview" 
					        		data-template="saleReturn-return-line-template" 
					        		data-auto-bind="false"
					        		data-bind="source: returnDS"></tbody>			        
					    </table>
													
					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span4">
						<table class="table table-condensed table-striped table-white">
							<tbody>
								<tr>
									<td class="right">Subtotal:</td>
									<td class="right strong" width="40%"><span data-bind="text: sub_total"></span></td>
								</tr>								
								<tr>
									<td class="right">Total Discount:</td>
									<td class="right strong">
										<span data-bind="text: discount"></span>
                   					</td>
								</tr>
								<tr>
									<td class="right">Total Tax:</td>
									<td class="right strong"><span data-bind="text: tax"></span></td>
								</tr>																
								<tr>
									<td class="right"><h4>Total:</h4></td>
									<td class="right strong"><h4 data-bind="text: total"></h4></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>	           
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>
					<!-- <span id="saveSend" class="btn btn-icon btn-warning glyphicons envelope" style="width: 80px;"><i></i> Save Send</span>										 -->
					<span id="savePrint" class="btn btn-icon btn-default glyphicons print" data-bind="click: cancel" style="width: 80px;"><i></i> Save Print</span>
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>					
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="saleReturn-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td>
			<i class="icon-trash" data-bind="events: { click: removeRow }"></i>
			#:banhji.saleReturn.lineDS.indexOf(data)+1#			
		</td>		
		<td>
			<input id="ccbItem-#:uid#" name="ccbItem-#:uid#"
				   data-role="combobox"
				   data-template="item-list-tmpl"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: item_id, 
                   			  source: itemDS,
                   			  events:{ change: itemChanges }"
                   placeholder="Add Item..." 
                   required data-required-msg="required" style="width: 100%" />			
		</td>		
		<td>
			<input id="txtDescription-#:uid#" name="txtDescription-#:uid#" 
					type="text" class="k-textbox" 
					data-bind="value: description"					 
					required data-required-msg="required"
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td>
			<input id="txtQuantity-#:uid#" name="txtQuantity-#:uid#" 
					data-role="numerictextbox" 
					data-format="n0" data-min="0"
					data-bind="value: quantity, events: {change : changes}"
					required data-required-msg="required" style="width: 40%;" />

			<input data-role="dropdownlist"                  
                   data-text-field="measurement"
                   data-value-field="measurement_id"
                   data-bind="value: measurement_id,
                   			  source: item_prices,
                   			  events:{ change: measurementChanges }"
                   data-option-label="Measure"
                   style="width: 57%;" />
		</td>					
		<td>
			<input id="txtPrice-#:uid#" name="txtPrice-#:uid#" 
					data-role="numerictextbox" 
					data-format="n" 
					data-bind="value: price, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" />
		</td>					
		<td class="center" data-bind="visible: showDiscount">
			<input data-role="numerictextbox"
                   data-format="p0"
                   data-min="0"
                   data-max="0.99"
                   data-step="0.1"                   
                   data-bind="value: discount,
                              events: { change: changes }"
                   style="width: 65px;">			
		</td>				
		<td class="right">
			<span data-format="n" data-bind="text: amount"></span> 						
		</td>
		<td>
			<input id="ccbTaxItem-#:uid#" name="ccbTaxItem-#:uid#"
				   data-role="combobox"                   			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: tax_item_id, 
                   			  source: taxItemDS,
                   			  events:{ change: changes }"
                   style="width: 100%" />			
		</td>						
    </tr>   
</script>
<script id="saleReturn-return-line-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">
		<td>
			<i class="icon-trash" data-bind="events: { click: removeRowOption }"></i>					
		</td>			
		<td>
			<input id="ddlOption-#:uid#" name="ddlOption-#:uid#"
				   data-role="dropdownlist"				                      			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: type, 
                   			  source: optionList,
                   			  events:{ change: optionChanges }"
                   data-option-label="Select Option..." 
                   style="width: 100%" />            
		</td>
		<td>
			<input id="cbbInvoice-#:uid#" name="cbbInvoice-#:uid#"
				   data-role="combobox"
				   data-template="reference-list-tmpl"				                      			   
                   data-text-field="number"
                   data-value-field="id"
                   data-bind="value: reference_id, 
                   			  source: invoiceDS,
                   			  visible: showInvoice,
                   			  events:{ change: invoiceChanges }"
                   placeholder="Select Invoice..." 
                   style="width: 100%" />

            <input id="ddlAccount-#:uid#" name="ddlAccount-#:uid#"
				   data-role="dropdownlist"
				   data-template="account-list-tmpl"				                      			   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: account_id, 
                   			  source: accountDS,
                   			  visible: showAccount"                   
                   style="width: 100%" />            
		</td>						
		<td>
			<input id="txtAmount-#:uid#" name="txtAmount-#:uid#" 
					data-role="numerictextbox" 
					data-format="n" 
					data-bind="value: amount, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" />
		</td>								
    </tr>   
</script>

<script id="statement" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">

				<!-- Collapsible Widget -->			
				<div class="widget">
				    <div class="widget-head hidden-print">
				    	<span class="btn btn-primary pull-right" 
								onclick="javascript:window.history.back()">X</span>
				        
				        <h4 class="heading glyphicons notes"><i></i>Statement</h4>							        	
				    </div>
				    <div class="widget-body">					
					
						<div class="hidden-print">
					    	<input id="sorter" name="sorter"
					    	   data-role="dropdownlist"                   
					           data-value-primitive="true"
					           data-text-field="text"
					           data-value-field="value"
					           data-bind="value: sorter,
					                      source: sortList" />
					                                   
					        <input id="sdate" name="sdate"						           
					           data-bind="value: sdate"
					           placeholder="From ..." />
					        
					       	<input id="edate" name="edate"						           
					           data-bind="value: edate"
					           placeholder="To ..." />						        	                    	            	
					  		
					  		<button id="search" type="button" data-role="button"><i class="icon-search"></i></button>
					  		|
							<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>					    	
					    </div>

					    <br>					    

					    <div align="center">
							<h3>Statement</h3>
							
							<span id="strDate"></span>														
						</div>

						<div class="well">
							<table class="table table-invoice">
								<tbody>
									<tr>
										<td style="width: 50%;">											
											<h2 data-bind="text: company.name"></h2>
											<address class="margin-none">												
												<p data-bind="text: company.address"></p>												
												<abbr>Email:</abbr> <span data-bind="text: company.email"></span> <br> 
												<abbr>Phone:</abbr> <span data-bind="text: company.mobile"></span> <br>
												<abbr>Tel:</abbr> <span data-bind="text: company.phone"></span>
											</address>
										</td>
										<td class="right">											
											<h2 data-bind="text: obj.fullname"></h2>
											<address class="margin-none">
												<p data-bind="text: obj.bill_to"></p>
												<abbr>Email:</abbr> <span data-bind="text: obj.email"></span> <br> 
												<abbr>Phone:</abbr> <span data-bind="text: obj.phone"></span>												
											</address>
											<br>
											<div style="font-size: x-large;">Total: <span data-bind="text: total"></span></div>
										</td>
									</tr>
								</tbody>
							</table>
						</div>

						<br>			        
					    
					    <div id="gridAging"></div>

					    <br>

					    <table id="grid">			                
			                <thead>
			                    <tr>
			                        <th>Date</th>
			                        <th>Description</th>
			                        <th>Amount</th>			                        
			                    </tr>
			                </thead>
			                <tbody></tbody>
			            </table>	
						
					</div> <!-- End Widget-Body List -->
				</div>
				<!-- // Collapsible Widget END -->

			</div>							
		</div>
	</div>
</script>
<script id="statement-row-template" type="text/x-kendo-template">	
	<tr data-uid="#: uid #">
		<td>#=kendo.toString(new Date(issued_date), "dd-MM-yyyy")#</td>
		<td>#=description#</td>
		<td align="right">#=kendo.toString(amount, "c", locale)#</td>		
	</tr>
</script>

<script id="customerDeposit" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>Customer Deposit</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 150px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>
								<tr>
									<td>Customers</td>
									<td>
										<input id="cbbContact" name="cbbContact"
											   data-role="combobox"											                    
							                   data-value-primitive="true"
							                   data-template="contact-list-tmpl"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.contact_id,
							                              source: contactDS,
							                              events:{ change: contactChanges }"
							                   data-placeholder="Type Name.."                    
							                   required data-required-msg="required" style="width: 100%" />
									</td>
								</tr>							
								<tr>
									<td>Currency</td>
									<td>
										<input id="cbbCurrency" name="cbbCurrency"
											   data-role="combobox"				                
							                   data-value-primitive="true"
							                   data-template="currency-list-tmpl"				   
							                   data-text-field="code"
							                   data-value-field="locale"
							                   data-bind="value: obj.locale, 
							                   			source: currencyDS, 
							                   			events: {change : setRate}"
							                   placeholder="Add currency..." 
							                   required data-required-msg="required" style="width: 100%" />	
									</td>
								</tr>															
							</table>
						</div>
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 150px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						        	<li class="span1 glyphicons cogwheels active" ><a href="#tab1-4" data-toggle="tab" ><i></i></a>
						            </li>
						            <li class="span1 glyphicons pencil"><a href="#tab2-4" data-toggle="tab"><i></i></a>
						            </li>
						            <li class="span1 glyphicons paperclip"><a href="#tab3-4" data-toggle="tab"><i></i></a>
						            </li>
						            <li class="span2 glyphicons history"><a href="#tab4-4" data-toggle="tab"><i></i>Recuring</a>
						            </li>								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">
						    	<div class="tab-pane active" id="tab1-4">
							       <table class="table table-borderless table-condensed cart_total">						
									<tr>
										<td style="width: 15%">Deposit To</td>
										<td style="width: 40%">
											<input id="cbbAccount" name="cbbAccount"
												   data-role="combobox"                   
								                   data-value-primitive="true"                   
								                   data-template="account-list-tmpl"
								                   data-text-field="name"								                  
								                   data-value-field="id"
								                   data-bind="value: obj.account_id,
								                   			  source: depositAccountDS"
								                   data-placeholder="Add Account.."					                                      
								                   required data-required-msg="required" style="width: 100%" />
										</td>
										<td style="width: 20%">Reference Type</td>
											<td><input data-role="dropdownlist"
								                   data-option-label="Reference Type..."								                   
								                   data-value-primitive="true"
								                   data-text-field="name"
								                   data-value-field="id"
								                   data-bind="value: obj.reference_type,
								                              source: referenceTypes"								                              
								                   style="width: 100%" />						            						            		
							            	</td>

							            	
									</tr>
									<tr>
										<td style="width: 10%">Segment</td>
										<td style="width: 40%">
											<select data-role="multiselect"
										   data-value-primitive="true"								   
										   data-item-template="segment-list-tmpl"				    
										   data-value-field="id" 
										   data-text-field="code"
										   data-bind="value: obj.segments, 
										   			source: segmentItemDS,
										   			events:{ change: segmentChanges }"
										   data-placeholder="Add Segment.."				   
										   style="width: 100%" /></select>
										</td>													
									</tr>									
									</table>
						   		</div>
						        <!-- Memo Tab content -->
						        <div class="tab-pane" id="tab2-4">
						        	<textarea id="memo2" cols="0" rows="4" class="k-textbox" 
						        		data-bind="value: obj.memo2" style="width:100%;" 
						        		placeholder="Please enter transaction purpose here ..."></textarea>
						        </div>
						        <!-- // Memo Tab content END -->

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab3-4">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab4-4">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->								        

						    </div>
						</div>

				    </div>
				</div>								
				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th style="width: 1%;">No.</th>			               
			                <th style="width: 30%;">ACCOUNT</th>
			                <th>DESCRIPTION</th>
			                <th style="width: 10%;">REF</th>			                
			                <th style="width: 15%;">AMOUNT</th>			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="customerDeposit-template" 
			        		data-auto-bind="false"
			        		data-bind="source: lineDS"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span6 hidden-print">
						
						<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>												

						

						<a href="#/accounts/u/new" class="btn btn-default">Add New Account</a>						
						
					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span6">
						<table class="table table-borderless table-condensed cart_total">
							<tbody>								
								<tr>
									<td class="right">Total:</td>
									<td class="right strong"><span data-bind="text: total"></span></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>
	           
	            <br>
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>										
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>
					<span class="btn btn-icon btn-warning glyphicons remove_2" data-bind="click: cancel" style="width: 80px;"><i></i> Cancel</span>
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="customerDeposit-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td class="center">
			<i class="icon-trash" data-bind="events: { click: remove }"></i>
			#:banhji.customerDeposit.lineDS.indexOf(data)+1#			
		</td>				
		<td>
			<input id="cbbAccounts" name="cbbAccounts"
				   data-role="combobox"                   
                   data-value-primitive="true"                   
                   data-template="account-list-tmpl"
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: account_id,
                              source: accountDS"
                   data-placeholder="Add Account.."
                   data-list-width="400"                    
                   required data-required-msg="required" style="width: 100%" />	
		</td>		
		<td>
			<input name="description" 
					type="text" class="k-textbox" 
					data-bind="value: description"					
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td>
			<input type="text" class="k-textbox" 
					data-bind="value: reference_no"				
					style="width: 100%; margin-bottom: 0;" />		
		</td>		
		<td class="right">
			<input id="txtAmount" name="txtAmount" 
					data-role="numerictextbox" 
					data-format="n0" 
					data-bind="value: amount, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" /> 						
		</td>			
    </tr>   
</script>

<script id="customerSetting" type="text/x-kendo-template">
	<span class="pull-right glyphicons no-js remove_2" 
			onclick="javascript:window.history.back()"><i></i></span>

	<h2>General Setting</h2>

	<br>

	<div class="widget widget-tabs widget-tabs-double widget-tabs-vertical row-fluid row-merge widget-tabs-gray">

	    <!-- Tabs Heading -->
	    <div class="widget-head span3">
	        <ul>
	            <li class="active"><a href="#tab1-1" class="glyphicons group" data-toggle="tab"><i></i><span class="strong">Customer Type</span></a>
	            </li>
	            <li><a href="#tab2-1" class="glyphicons credit_card" data-toggle="tab"><i></i><span class="strong">Payment Method</span></a>
	            </li>
	            <li><a href="#tab3-1" class="glyphicons clock" data-toggle="tab"><i></i><span class="strong">Payment Term</span></a>
	            </li>	                        
	        </ul>
	    </div>
	    <!-- // Tabs Heading END -->

	    <div class="widget-body span9">
	        <div class="tab-content">

	            <!-- Tab Branch content -->
	            <div class="tab-pane active" id="tab1-1">
	            	<div class="input-append">
					    <input class="span12" id="appendedInputButtons" type="text" placeholder="type name ..." data-bind="value: contactTypeName">
					    <button class="btn btn-default" type="button" data-bind="click: addContactType"><i class="icon-plus"></i></button>
					</div>
	            	<table class="table table-bordered table-white">
	            		<thead>
	            			<tr>
	            				<th>Type</th>
	            				<th></th>
	            			</tr>
	            		</thead>
	            		<tbody data-role="listview"
	            				data-auto-bind="false"
		            			data-edit-template="customerSetting-edit-contact-type-template"
				                data-template="customerSetting-contact-type-template"
				                data-bind="source: contactTypeDS"></tbody>
	            	</table>		            
	            </div>
	            <!-- // Tab Branch content END -->

	            <!-- Tab Contact Type content -->
	            <div class="tab-pane" id="tab2-1">
	            	<div class="input-append">
					    <input class="span12" id="appendedInputButtons" type="text" placeholder="name ..." data-bind="value: paymentMethodName">
					    <button class="btn btn-default" type="button" data-bind="click: addPaymentMethod"><i class="icon-plus"></i></button>
					</div>
	            	<table class="table table-bordered table-white">
	            		<thead>
	            			<tr>
	            				<th>Name</th>
	            				<th></th>
	            			</tr>
	            		</thead>
	            		<tbody data-role="listview"	            				
		            			data-edit-template="customerSetting-edit-payment-method-template"
				                data-template="customerSetting-payment-method-template"
				                data-bind="source: paymentMethodDS"></tbody>
	            	</table>			            
	            </div>
	            <!-- // Tab Contact Type content END -->

	            <!-- Tab Block content -->
	            <div class="tab-pane" id="tab3-1">
            		<div class="input-append">
					    <input class="span4" id="appendedInputButtons" type="text" placeholder="name ..." data-bind="value: paymentTermName">
					    <input class="span4" id="appendedInputButtons" type="text" placeholder="term ..." data-bind="value: paymentTerm">
					    <input class="span4" id="appendedInputButtons" type="text" placeholder="% ..." data-bind="value: paymentTermPercentage">
					    <button class="btn btn-default" type="button" data-bind="click: addPaymentTerm"><i class="icon-plus"></i></button>
					</div>
	            	<table class="table table-bordered table-white">
	            		<thead>
	            			<tr>
	            				<th>Name</th>
	            				<th>Term</th>
	            				<th>%</th>
	            				<th></th>
	            			</tr>
	            		</thead>
	            		<tbody data-role="listview"	            				
		            			data-edit-template="customerSetting-edit-payment-term-template"
				                data-template="customerSetting-payment-term-template"
				                data-bind="source: paymentTermDS"></tbody>
	            	</table>
	            </div>
	            <!-- // Tab Block content END -->

	        </div>
	    </div>

	</div>
</script>
<script id="customerSetting-contact-type-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>
    		 #:name#
   		</td>
   		<td>
   			#if(is_system=="0"){#
	   			<div class="edit-buttons">       
			        <a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
			        <a class="k-button k-delete-button" href="\\#"><span class="k-icon k-delete"></span></a>
			   	</div>
		   	#}#
   		</td>
   	</tr>
</script>
<script id="customerSetting-edit-contact-type-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <dl>                
            <dd>
                <input type="text" class="k-textbox" data-bind="value:name" name="ProductName" required="required" validationMessage="required" />
                <span data-for="ProductName" class="k-invalid-msg"></span>
            </dd>               
        </dl>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>
<script id="customerSetting-payment-method-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>
    		 #:name#
   		</td>
   		<td>
   			<div class="edit-buttons">       
		        <a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
		        <a class="k-button k-delete-button" href="\\#"><span class="k-icon k-delete"></span></a>
		   	</div>
		</td>
   	</tr>
</script>
<script id="customerSetting-edit-payment-method-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <dl>                
            <dd>
                <input type="text" class="k-textbox" data-bind="value:name" name="ProductName" required="required" validationMessage="required" />
                <span data-for="ProductName" class="k-invalid-msg"></span>
            </dd>               
        </dl>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>
<script id="customerSetting-payment-term-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>
    		 #:name#
   		</td>
   		<td>
    		 #:term#
   		</td>
   		<td>
    		 #:discount_percentage#
   		</td>
   		<td>
   			<div class="edit-buttons">       
		        <a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
		        <a class="k-button k-delete-button" href="\\#"><span class="k-icon k-delete"></span></a>
		   	</div>
		</td>
   	</tr>
</script>
<script id="customerSetting-edit-payment-term-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <dl>                
            <dd>
                <input type="text" class="k-textbox" data-bind="value:name" name="ProductName" required="required" validationMessage="required" />
                <span data-for="ProductName" class="k-invalid-msg"></span>
            </dd>
            <dd>
                <input type="text" class="k-textbox" data-bind="value:net_due" name="term" required="required" validationMessage="required" />
                <span data-for="term" class="k-invalid-msg"></span>
            </dd>
            <dd>
                <input type="text" class="k-textbox" data-bind="value:discount_percentage" name="percentage" required="required" validationMessage="required" />
                <span data-for="percentage" class="k-invalid-msg"></span>
            </dd>               
        </dl>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>

<script id="customerList" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-fluid">
			<div class="row-fluid">
				<div class="span12">
					<div id="example" class="k-content">
						<div class="hidden-print">
							<span class="pull-right glyphicons no-js remove_2" 
								onclick="javascript:window.history.back()"><i></i></span>

							<input data-role="dropdownlist"
							   data-option-label="(--- TYPE ---)"
			                   data-auto-bind="false"
			                   data-value-primitive="true"
			                   data-text-field="name"
			                   data-value-field="id"
			                   data-bind="value: contact_type_id,
			                              source: contactTypeDS" />

							<button id="search" type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button> |
							<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>		
						</div>

						<h3 align="center"><span data-bind="text: lang.lang.customer_list"></span></h3>
				
						<div id="grid"></div>					
					    					
					</div> <!-- //End div example--> 
				</div><!-- //End div span12-->
			</div><!-- //End div row-fluid-->
		</div>
	</div>	
</script>

<script id="customerReportCenter" type="text/x-kendo-template">
	<h2>Report</h2>
	<br>

	<div class="row-fluid">
		<div class="span3">
			<h4>Customer Information</h4>
			<div class="well margin-none" style="height: 150px;">
				Description here...
				<ul>
					<li><a href='#/customer_list'>Customer List</a></li>
	  				<li><a href='#/wBrand_new_customer'>Brand New Customer</a></li>	  				
				</ul>
			</div>
		</div>
		<div class="span3">
			<h4>Accounting</h4>
			<div class="well margin-none" style="height: 150px;">
				Description here...
				<ul>
					<li><a href='#/wCustomer_balance'>Custoemr Balance</a></li>	  				 				  				
	  				<br>  
	  				<li><a href='#/wAging_summary'>Aging Summary</a></li> 
	  				<li><a href='#/wAging_detail'>Aging Detail</a></li>
				</ul>
			</div>
		</div>
		<div class="span3">
			<h4>Sale</h4>
			<div class="well margin-none" style="height: 150px;">
				Description here...
				<ul>
					<li><a href='#/wSale_summary'>Sale Summary</a></li>
	  				<li><a href='#/wSale_detail'>Sale Detail</a></li>	  				
				</ul>
			</div>
		</div>
		<div class="span3">
			<h4>Payment</h4>
			<div class="well margin-none" style="height: 150px;">
				Description here...
				<ul>
					<li><a href='#/wPayment_summary'>Payment Summary</a></li> 
  					<li><a href='#/wPayment_detail'>Payment Detail</a></li>
  					<br>  
	  				<li><a href='#/wPayment_by_source_summary'>Payment By Source Summary</a></li>
	  				<li><a href='#/wPayment_by_source_detail'>Payment By Source Detail</a></li> 
				</ul>
			</div>
		</div>
	</div>

	<p class="separator text-center"><i class="icon-ellipsis-horizontal icon-3x"></i></p>
</script>


<!-- ***************************
 *	Cashier Section      	  *
**************************** -->
<script id="cashier" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">				
			<div class="span12">
				<div id="example" class="k-content">
					<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

					<h3><span data-bind="text: lang.lang.cashier"></span></h3>

					<div class="row-fluid">
						<div class="span3">
							<br>

							<input id="ddlContact" data-bind="value: customer_id" style="width: 100%"  />

							<br><br>							
					      					
							<h5><i class="icon-info-sign"></i> <span data-bind="text: lang.lang.customer_info"></span></h5>				
							<table width="100%" style="background-color:Silver; color:black;">
								<tr>
									<td colspan="2">
										<i class="icon-user icon-li icon-fixed-width"></i> 
										<span data-bind="text: customer.fullIdName"></span>										
									</td>																			
								</tr>
								<tr>
									<td colspan="2">								
										<span data-bind="text: lang.lang.balance"></span>: <span data-bind="text: customer.balance"></span>
										<span data-bind="text: customer.currency[0].code">
									</td>
								</tr>
								<tr>
									<td colspan="2">
										<span data-bind="text: lang.lang.deposit"></span>: <span data-bind="text: customer.deposit"></span>
										<span data-bind="text: customer.currency[0].code">
									</td>							
								</tr>
								<tr>
									<td>
										<i class="icon-money icon-li icon-fixed-width"></i> <span data-bind="text: customer.currency[0].code"></span>
									</td>
									<td>
										<i class="icon-phone icon-li icon-fixed-width"></i> <span data-bind="text: customer.phone"></span>
									</td>
								</tr>											
								<tr>
									<td colspan="2">
										<i class="icon-home icon-li icon-fixed-width"></i> <span data-bind="text: customer.address"></span>
									</td>						
								</tr>
							</table>

							<br>			
							
							<h5><i class="icon-list"></i> <span data-bind="text: lang.lang.activities"></span></h5>

							<table class="table table-bordered table-striped table-white">
						        <thead>
						            <tr>
						            	<th><span data-bind="text: lang.lang.date"></span></th>						                
						                <th><span data-bind="text: lang.lang.type"></span></th>						                
						                <th><span data-bind="text: lang.lang.amount"></span></th>						                						                
						            </tr>
						        </thead>
						        <tbody data-role="listview"
						        		data-auto-bind="false"					        		 
						        		data-template="cashier-transaction-row-template" 
						        		data-bind="source: transactionDS"></tbody>						        					        
						    </table>
							
							<div id="pager" class="k-pager-wrap"					    		
				             	data-role="pager"
				             	data-auto-bind="false" 
				             	data-bind="source: transactionDS"></div>
						
						</div> <!-- //End span3 -->

						<div id="exampleValidator" class="span9">
							<div class="row-fluid">
								<div class="span4">
									<div class="innerAll padding-bottom-none-phone">
										<a href="javascript:void(0)" class="widget-stats widget-stats-gray widget-stats-4"> 
											<span class="txt"><span data-bind="text: lang.lang.customer"></span></span>
											<span class="count" data-bind="text: total_customer"></span>
											<span class="glyphicons user"><i></i></span>
											<div class="clearfix"></div>
											<i class="icon-play-circle"></i> 
										</a>
									</div>
								</div>

								<div class="span4">
									<div class="innerAll padding-bottom-none-phone">
										<a href="#/wPayment_summary" class="widget-stats widget-stats-primary widget-stats-4">
											<span class="txt"><span data-bind="text: lang.lang.today_payment"></span></span>
											<span class="count"><span data-bind="text: total_payment" style="font-size: 35px;"></span></span>
											<span class="glyphicons coins"><i></i></span>
											<div class="clearfix"></div>
											<i class="icon-play-circle"></i>
										</a>
									</div>
								</div>

								<div class="span4">
									<div class="innerAll padding-bottom-none-phone">
										<a href="#/reconcile" class="widget-stats widget-stats-inverse widget-stats-5">
											<span class="glyphicons refresh"><i></i></span>
											<span class="txt"><span data-bind="text: lang.lang.reconcile"></span> &<br><br> <span data-bind="text: lang.lang.transfer"></span></span>
											<div class="clearfix"></div>
										</a>
									</div>
								</div>				

							</div> <!-- //End row-fluid -->
														
							<br>

							<table class="table table-bordered table-striped table-white">
						        <thead>
						            <tr>
						                <th></th>
						                <th><span data-bind="text: lang.lang.no"></span></th>						                
						                <th><span data-bind="text: lang.lang.date"></span></th>
						                <th><span data-bind="text: lang.lang.name"></span></th>
						                <th><span data-bind="text: lang.lang.invoice"></span></th>
						                <th class="right"><span data-bind="text: lang.lang.amount"></span></th>
						                <th class="right"><span data-bind="text: lang.lang.pay"></span></th>							                
						            </tr>
						        </thead>
						        <tbody data-role="listview"
						        		data-auto-bind="false"					        		 
						        		data-template="cashier-row-template" 
						        		data-bind="source: invoiceList"></tbody>
						        <tfoot data-template="cashier-footer-template" 
						        		data-bind="source: this"></tfoot>						        
						    </table>						    

							<br>
							
							<span id="notification"></span>

							<div class="row-fluid">
								<div class="span4">						
									<table>
										<tr>
											<td><span data-bind="text: lang.lang.payment_date"></span></td>
						              		<td>
						              			<input id="txtPaymentDate" name="txtPaymentDate" 
						              				data-role="datepicker" 
						              				data-format="dd-MM-yyyy"
						              				data-parse-formats="dd-MM-yyyy"
							              			data-bind="value: payment_date" 
							              			required data-required-msg="ត្រូវការ ថ្ងៃទទួលប្រាក់" />
											</td>
										</tr>										
										<tr>
						                    <td><span data-bind="text: lang.lang.payment_method"></span></td>
						                  	<td>
						                  		<input id="ddlPaymentMethod" id="ddlPaymentMethod"
						                  			   data-role="dropdownlist"
									                   data-auto-bind="false"
									                   data-value-primitive="true"
									                   data-text-field="name"
									                   data-value-field="id"
									                   data-bind="value: payment_method_id,
									                              source: paymentMethodDS"									                   
									                   required data-required-msg="ត្រូវការ វីធីបង់ប្រាក់" />						                  					                  		
						                  	</td>
						                <tr>
										<tr>
							                <td><span data-bind="text: lang.lang.cheque"></span></td>
							                <td><input id="check_no" class="k-textbox" data-bind="value: check_no" style="width: 161px;" /></td>
							            <tr>
							            <tr>
											<td><span data-bind="text: lang.lang.cash_account"></span></td>
											<td>
												<input id="ddlCashAccount" name="ddlCashAccount" 
														data-bind="value: account_id" 
														required data-required-msg="required" />												
											</td>
										</tr>										
									</table>							
								</div>																
								<div class="span4">
									<table>	
										<tr>
											<td><span data-bind="text: lang.lang.total_payment"></span>:</td>
											<td align="right"><span data-bind="text: pay_amount"></span></td>
										</tr>									
										<tr>
											<td><span data-bind="text: lang.lang.discount"></span>:</td>
											<td>
												<input data-role="numerictextbox" 
														data-format="c0" data-culture="km-KH" 
														data-bind="value: discount, events: {change : change}" />
											</td>
										</tr>
										<tr>
											<td><span data-bind="text: lang.lang.fine"></span>:</td>							
											<td>
												<input data-role="numerictextbox" 
														data-format="c0" data-culture="km-KH" 
														data-bind="value: fine, events: {change : change}" />
											</td>
										</tr>										
										<tr>
											<td><span data-bind="text: lang.lang.remain"></span>:</td>
											<td align="right"><span data-bind="text: remain"></span></td>
										</tr>
									</table>		          	
								</div>

								<div class="span4">
									<div class="innerAll padding-bottom-none-phone">
										<a id="save" name="save" class="widget-stats widget-stats-info widget-stats-4">
											<span class="txt"><span data-bind="text: lang.lang.save"></span></span>
											<span class="count" style="font-size: 35px;" data-bind="text: receive_amount"></span>
											<span class="glyphicons cart_in"><i></i></span>
											<div class="clearfix"></div>
											<i class="icon-play-circle"></i>
										</a>
									</div>								
								</div>
							</div>							

						</div> <!-- //End span9 -->
					</div>
				</div> <!-- //End example -->
			</div>
		</div>
	</div>
</script>
<script id="cashier-transaction-row-template" type="text/x-kendo-tmpl">
    <tr>        
        <td>#:kendo.toString(new Date(issued_date), "dd-MM-yy")#</td>
        <td>#:type# </td>
        <td align="right">#:kendo.toString(kendo.parseFloat(amount), "c", locale)#</td>        
   	</tr>
</script>
<script id="cashier-row-template" type="text/x-kendo-tmpl">		
	<tr id="rowGrid-#:id#">
		<td>
			<input type="checkbox" data-bind="checked: isPay, events:{change: checkPay}">			
		</td>
		<td class="sno">1</td>			
		<td>#:kendo.toString(new Date(issued_date), "dd-MM-yyyy")#</td>		
		<td>#=fullname#</td>
		<td>#:number#</td>				
		<td class="right">#:kendo.toString(amount, "c", locale)#</td>
		<td class="right">
			<input data-role="numerictextbox" 
					data-format="c" data-culture=#:locale#
					data-bind="value: pay_amount, events: {change : change}" 
					style="width: 120px;">
			<i class="icon-trash" data-bind="events: { click: remove "></i>						
		</td>				
    </tr>   
</script>
<script id="cashier-footer-template" type="text/x-kendo-template">
    <tr>    	
        <td class="right" colspan="7" style="font-size:30px;">
            Total: #:total()#
        </td>
    </tr>
</script>

<script id="reconcile" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-fluid">
			<div class="row-fluid">
				<div class="span12">
					<div id="example" class="k-content">						
						
						<span class="pull-right glyphicons no-js remove_2" 
							onclick="javascript:window.history.back()"><i></i></span>							

						<div align="center">
							<h4>Reconcile & Transfer</h4>							
							<span data-bind="text: str_date()"></span>
							<br>
							by
							<span data-bind="text: cashier_name"></span>
						</div>

						<table class="table table-bordered table-white">
		            		<thead>
		            			<tr>
		            				<th>Cash</th>	            				
		            				<th>Dollar Qty</th>
		            				<th>Riel Qty</th>
		            				<th>Dollar Amt</th>
		            				<th>Riel Amt</th>	            				
		            				<th>Dollar Qty Transfer</th>
		            				<th>Riel Qty Transfer</th>
		            				<th>Dollar Amt Transfer</th>
		            				<th>Riel Amt Transfer</th>		            				
		            			</tr>
		            		</thead>
		            		<tbody id="lvReconcileItem" data-role="listview"
		            				data-auto-bind="false"			            			
					                data-template="denominationRowTemplate"
					                data-bind="source: reconcileItemDS">
					        </tbody>
		            	</table>

						<br>

						<div class="row-fluid">
							<!-- //Reconcile -->
							<div class="span6">
								<h4 class="heading">Reconcile</h4>

								<table class="table table-condensed">
									<tr>
										<td>Total Paid Today</td>
										<td></td>											
										<td class="right"><span class="count" data-bind="text: obj.received_amount"></span> ៛</td>												
									</tr>
									<tr>
										<td>Remain</td>
										<td></td>											
										<td class="right" style="border-bottom: 1px solid black;"><span class="count" data-bind="text: obj.previous_amount"></span> ៛</td>												
									</tr>
									<tr>
										<td>Cash (A)</td>
										<td></td>												
										<td class="right"><span class="count" data-bind="text: obj.total_cash1"></span> ៛</td>
									</tr>

									<!-- Reconcile -->
									<tr>
										<td>Dollar</td>
										<td>
											$ <span class="count" data-bind="text: obj.usd_amount"></span> x
											<input data-role="numerictextbox" data-format="c0" data-culture="km-KH" data-min="0" data-bind="value: obj.rate, events:{change:change}"  style="width:90px;">
										</td>
										<td class="right"><span class="count" data-bind="text: obj.usd2khr_amount"></span> ៛</td>												
									</tr>
									<tr>
										<td>Riel</td>
										<td></td>
										<td class="right" style="border-bottom: 1px solid black;"><span class="count" data-bind="text: obj.total_cash2"></span> ៛</td>												
									</tr>
									<tr>
										<td>Actual Cash (B)</td>
										<td></td>												
										<td class="right"><span class="count" data-bind="text: obj.reconciled_amount"></span> ៛</td>
									</tr>
									<tr id="reconcileAmount">
										<td>Reconcile(A-B)</td>
										<td></td>												
										<td class="right"><span class="count" data-bind="text: obj.reconciled_amount"></span> ៛</td>
									</tr>																				
								</table>
							</div>

							<!-- //Transfer -->
							<div class="span6">								
								<h4 class="heading">Cash Transfer</h4>								
								
								<table class="table table-condensed">
									<tr>
										<td>Dollar Transfer</td>
										<td>
											$ <span class="count" data-bind="text: obj.transfer_usd"></span> x
											<input data-role="numerictextbox" data-format="c0" data-culture="km-KH" data-min="0" data-bind="value: obj.rate, events:{change:change}"  style="width:90px;">												
										</td>
										<td class="right"><span class="count" data-bind="text: obj.usd2khr_transfer_amount"></span> ៛</td>												
									</tr>
									<tr>
										<td>Riel Transfer</td>
										<td></td>
										<td class="right" style="border-bottom: 1px solid black;"><span class="count" data-bind="text: obj.transfer_khr"></span> ៛</td>												
									</tr>
									<tr>
										<td>Total Transfer</td>
										<td></td>												
										<td class="right"><span class="count" data-bind="text: obj.transfered_amount"></span> ៛</td>
									</tr>
									<tr>
										<td>Balance</td>
										<td></td>												
										<td class="right"><span class="count" data-bind="text: obj.balance"></span> ៛</td>
									</tr>
									<tr>
										<td>Transfer Account</td>
										<td>
											<input id="ddlCashAccount" name="ddlCashAccount" 
													data-bind="value: obj.transfer_account_id" 
													required data-required-msg="required" />
										</td>
										<td>
											<!-- Class here -->
						              	</td>
									</tr>
									<tr class="top">
										<td>Memo:</td>
										<td colspan="2">
											<textarea cols="0" rows="2" class="k-textbox" style="width:100%" data-bind="value: obj.memo"></textarea>
										</td>										
									</tr>								
								</table>																																			
							</div>									
						</div>

						<!-- Form actions -->
						<div align="right" data-bind="invisible: isExisting">
							<span id="notification"></span>

							<span class="btn btn-icon btn-success glyphicons share" data-bind="click: transferAll"><i></i>Transfer All</span>
							<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i>Save</span>							
							<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i>Cancel</span>
						</div>
						<!-- // Form actions END -->

					</div><!-- //End div example-->
				</div><!-- //End div span12-->
			</div><!-- //End div row-fluid-->
		</div>
	</div>	
</script>
<script id="denominationRowTemplate" type="text/x-kendo-tmpl">		
	<tr>				
		<td class="right">#=denomination#</td>
		<td>
			<input data-role="numerictextbox" data-format="n0" data-min="0" style="width:90px;"
				data-bind="value: usd_qty, events: {change : change}" #: denomination>100 ? disabled="disabled" : "" # >
		</td>
		<td>
			<input data-role="numerictextbox" data-format="n0" data-min="0" style="width:90px;"
				data-bind="value: khr_qty, events: {change : change}" #: denomination<100 ? disabled="disabled" : "" # >
		</td>
		<td class="right">#:kendo.toString(usd_amount,'c')#</td>
		<td class="right">#:kendo.toString(khr_amount,'c0','km-KH')#</td>

		<td bgcolor="silver">
			<input data-role="numerictextbox" data-format="n0" data-min="0" style="width:90px;"
				data-bind="value: usd_transfer, events: {change : change}" #: denomination>100 ? disabled="disabled" : "" # >
		</td>
		<td bgcolor="silver">
			<input data-role="numerictextbox" data-format="n0" data-min="0" style="width:90px;"
				data-bind="value: khr_transfer, events: {change : change}" #: denomination<100 ? disabled="disabled" : "" # >
		</td>
		<td bgcolor="silver" class="right">#:kendo.toString(usd_transfer_amount,'c')#</td>
		<td bgcolor="silver" class="right">#:kendo.toString(khr_transfer_amount,'c0','km-KH')#</td>					
    </tr>   
</script>

<script id="cashTransaction" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>CASH TRANSACTION</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="box-generic well" style="height: 150px;">				
							<table class="table table-borderless table-condensed cart_total">									
								<tr data-bind="visible: isEdit">				
									<td>No.</td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" /></td>
								</tr>
								<tr>
									<td>Date</td>
									<td class="right">
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy"
												data-parse-formats="yyyy-MM-dd" 
												data-bind="value: obj.issued_date, 
															events:{ change : setRate }" 
												required data-required-msg="required"
												style="width:100%;" />
									</td>
								</tr>
								<tr>
									<td>Type</td>
									<td>
										<input id="ddlType" name="ddlType"
											   data-role="dropdownlist"								                   
							                   data-value-primitive="true"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.type,
							                              source: types,
							                              events:{ change: typeChanges }"							                   
							                   data-option-label="(--- Select ---)"
							                   required data-required-msg="required" 
							                   style="width: 100%;" />
									</td>
								</tr>
								<tr>
									<td>Currency</td>
									<td>
										<input id="cbbCurrency" name="cbbCurrency"
												data-bind="value: obj.locale,
							                              events:{change:setRate}" 
							                    placeholder="Select currency ..." 
							                    required data-required-msg="required" 
							                    style="width: 100%;" />
									</td>
								</tr>															
							</table>
						</div>
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 150px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						            <li class="span3 glyphicons pencil active"><a href="#tab1-3" data-toggle="tab"><i></i> Memo</a>
						            </li>
						            <li class="span3 glyphicons paperclip"><a href="#tab2-3" data-toggle="tab"><i></i> Attach</a>
						            </li>
						            <li class="span3 glyphicons history"><a href="#tab3-3" data-toggle="tab"><i></i> Recuring</a>
						            </li>								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						        <!-- Memo Tab content -->
						        <div class="tab-pane active" id="tab1-3">
						        	<textarea id="memo2" cols="0" rows="4" class="k-textbox" 
						        		data-bind="value: obj.memo2" style="width:100%;" 
						        		placeholder="Please enter transaction purpose here ..."></textarea>
						        </div>
						        <!-- // Memo Tab content END -->

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab2-3">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab3-3">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->								        

						    </div>
						</div>

				    </div>
				</div>

				<h4 data-bind="text: headerTop"></h4>				
				<table class="table table-borderless table-condensed cart_total">						
					<tr>
						<td style="width: 10%">ACCOUNT</td>
						<td style="width: 40%">
							<input id="cbbAccount" name="cbbAccount"
								   data-role="combobox"                   
				                   data-value-primitive="true"                   
				                   data-template="cashTransaction-account-list-tmpl"
				                   data-text-field="name"
				                   data-value-field="id"
				                   data-bind="value: obj.account_id,
				                              source: accountDS"
				                   data-placeholder="Add Account.."					                                      
				                   required data-required-msg="required" style="width: 100%" />
						</td>
						<td style="width: 10%">Segment</td>
						<td style="width: 40%">
							<select data-role="multiselect"
								   data-value-primitive="true"								   
								   data-item-template="cashTransaction-segment-tmpl"				    
								   data-value-field="id" 
								   data-text-field="code"
								   data-bind="value: obj.segments, 
								   			source: segmentItemDS,
								   			events:{ change: transactionSegmentChanges }"
								   data-placeholder="Add Segment.."				   
								   style="width: 100%" /></select>
						</td>							
					</tr>									
				</table>				

				<h4 data-bind="text: headerBottom"></h4>
				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th style="width: 1%;">No.</th>
			                <th style="width: 20%;">METHOD</th>
			                <th style="width: 20%;">ACCOUNT</th>
			                <th>DESCRIPTION</th>
			                <th data-bind="visible: showRef" style="width: 7%;">REF</th>
			                <th data-bind="visible: showName" style="width: 15%;">NAME</th>
			                <th data-bind="visible: showSegment" style="width: 15%;">SEGMENT</th>
			                <th style="width: 15%;">AMOUNT</th>			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="cashTransaction-template" 
			        		data-auto-bind="false"
			        		data-bind="source: lineDS"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span6 hidden-print">
						
						<button class="btn btn-inverse" data-bind="click: addRow"><i class="icon-plus icon-white"></i></button>												

						<div class="btn-group">
							<div class="leadcontainer">
								
							</div>
							<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
							<ul class="dropdown-menu" style="padding-left: 10px">
								<li>
									<input type="checkbox" data-bind="checked: showRef" /> REF
								</li>
								<li>
									<input type="checkbox" data-bind="checked: showName" /> NAME
								</li>
								<li>
									<input type="checkbox" data-bind="checked: showSegment" /> SEGMENT
								</li>								
							</ul>
						</div>

						<span class="btn btn-default">Add New Account</span>						
						
					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span6">
						<table class="table table-borderless table-condensed cart_total">
							<tbody>								
								<tr>
									<td class="right">Total:</td>
									<td class="right strong"><span data-bind="text: total"></span></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>
	           
	            <br>
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>										
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>
					<span class="btn btn-icon btn-warning glyphicons remove_2" data-bind="click: cancel" style="width: 80px;"><i></i> Cancel</span>
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="cashTransaction-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td class="center">
			<i class="icon-trash" data-bind="events: { click: remove }"></i>
			#:banhji.cashTransaction.lineDS.indexOf(data)+1#			
		</td>
		<td>
			<input id="ddlPaymentMethod" name="ddlPaymentMethod"
				   data-role="dropdownlist"                   
                   data-value-primitive="true"                   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: payment_method_id,
                              source: paymentMethodDS"
                   data-option-label="Select method.."
                   data-list-width="400"                    
                   required data-required-msg="required" style="width: 100%" />	
		</td>		
		<td>
			<input id="cbbAccounts" name="cbbAccounts"
				   data-role="combobox"                   
                   data-value-primitive="true"                   
                   data-template="cashTransaction-account-list-tmpl"
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: account_id,
                              source: accountDS"
                   data-placeholder="Add Account.."
                   data-list-width="400"                    
                   required data-required-msg="required" style="width: 100%" />	
		</td>		
		<td>
			<input name="description" 
					type="text" class="k-textbox" 
					data-bind="value: description"					
					style="width: 100%; margin-bottom: 0;" />
		</td>
		<td data-bind="visible: showRef">
			<input type="text" class="k-textbox" 
					data-bind="value: reference_no"				
					style="width: 100%; margin-bottom: 0;" />		
		</td>					
		<td data-bind="visible: showName">
			<input data-role="combobox"                   
                   data-value-primitive="true"
                   data-template="cashTransaction-contact-list-tmpl"
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: contact_id,
                              source: contactDS"
                   data-placeholder="Add Name.."                    
                   style="width: 100%" />
		</td>		
		<td data-bind="visible: showSegment">
			<select data-role="multiselect"
				   data-value-primitive="true"				   
				   data-item-template="cashTransaction-segment-tmpl"				    
				   data-value-field="id" 
				   data-text-field="code"
				   data-bind="value: segments, 
				   			source: segmentItemDS,
				   			events:{ change: segmentChanges }"
				   data-placeholder="Add Segment.."				   
				   style="width: 100%" /></select>					
		</td>
		<td class="right">
			<input id="txtAmount" name="txtAmount" 
					data-role="numerictextbox" 
					data-format="n0" 
					data-bind="value: amount, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" /> 						
		</td>			
    </tr>   
</script>
<script id="cashTransaction-account-list-tmpl" type="text/x-kendo-tmpl">
	<span>
		#=code# #=name#
	</span>
</script>
<script id="cashTransaction-contact-list-tmpl" type="text/x-kendo-tmpl">
	<span>
		#=number# #=surname# #=name#
	</span>
</script>
<script id="cashTransaction-segment-tmpl" type="text/x-kendo-tmpl">
	<span>
		#=name# (#=segment.name#)
	</span>
</script>

<script id="cashReceipt" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>CASH RECEIPT</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="widget widget-heading-simple widget-body-primary widget-employees">		
							<div class="widget-body padding-none">			
								<div class="row-fluid row-merge">
									<div class="listWrapper">
										<div class="innerAll">							
											<form autocomplete="off" class="form-inline">
												<div class="widget-search separator bottom">
													<button type="button" class="btn btn-default pull-right" data-bind="click: search"><i class="icon-search"></i></button>
													<div class="overflow-hidden">
														<input type="search" placeholder="Invoice Number..." data-bind="value: searchText, events:{change: enterSearch}">
													</div>
												</div>
												<div class="select2-container" style="width: 100%;">								
													<input id="cbbContact" name="cbbContact"
														   data-role="combobox"											                    
										                   data-value-primitive="true"
										                   data-template="contact-list-tmpl"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: contact_id,
										                              source: contactDS,
										                              events:{ change: contactChanges }"
										                   data-placeholder="Customer..."                    
										                   style="width: 100%" />									
												</div>
											</form>					
										</div>
									</div>
								</div>
							</div>
						</div>
						
						<div class="strong" style="width: 90%; padding: 10px;" align="center"
							data-bind="style: {
							        backgroundColor: bgColor}">
							<div align="left">AMOUNT RECEIVED</div>
							<h2 data-bind="text: pay" align="right"></h2>
						</div>												
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 190px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						        	<li class="span1 glyphicons cogwheels active"><a href="#tab1-3" data-toggle="tab"><i></i> </a>
						            </li>						           
						            <li class="span1 glyphicons paperclip"><a href="#tab2-3" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span1 glyphicons history"><a href="#tab3-3" data-toggle="tab"><i></i> </a>
						            </li>						            								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						    	<!-- Options Tab content -->
						        <div class="tab-pane active" id="tab1-3">						            
						            <table class="table table-borderless table-condensed cart_total">
						            	<tr>
											<td>Date</td>
											<td class="right">
												<input id="issuedDate" name="issuedDate" 
														data-role="datepicker"
														data-format="dd-MM-yyyy"
														data-parse-formats="yyyy-MM-dd" 
														data-bind="value: obj.issued_date, 
																	events:{ change : issuedDateChanges }" 
														required data-required-msg="required"
														style="width:100%;" />
											</td>
										</tr>							            
										<tr>
							            	<td>
							            		Payment Method					            						            		
							            	</td>				
											<td>
												<input id="ddlPaymentMethod" name="ddlPaymentMethod"
														data-role="dropdownlist"														
							              				data-value-primitive="true"
														data-text-field="name" 
							              				data-value-field="id"						              				 
							              				data-bind="value: obj.payment_method_id,
							              							source: paymentMethodDS"
							              				data-option-label="Select Method..."
							              				required data-required-msg="required" 
							              				style="width: 100%" />
											</td>
										</tr>
										<tr>
							            	<td>Cash Account</td>							            	
						            		<td>
												<input id="ddlCashAccount" name="ddlCashAccount" 
													data-role="dropdownlist"
													data-template="account-list-tmpl"														
						              				data-value-primitive="true"
													data-text-field="name" 
						              				data-value-field="id"						              				 
						              				data-bind="value: obj.account_id,
						              							source: accountDS"
						              				data-option-label="Select Account..."
						              				required data-required-msg="required" 
						              				style="width: 100%" />
											</td>							            	
							            </tr>							            
							            <tr>
											<td>Segments</td>
											<td>
												<select data-role="multiselect"
													   data-value-primitive="true"								   
													   data-item-template="segment-list-tmpl"				    
													   data-value-field="id" 
													   data-text-field="code"
													   data-bind="value: obj.segments, 
													   			source: segmentItemDS,
													   			events:{ change: segmentChanges }"
													   data-placeholder="Add Segment.."				   
													   style="width: 100%" /></select>
											</td>
										</tr>											
						            </table>						            
						        </div>
						        <!-- // Options Tab content END -->						        

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab2-3">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->						        

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab3-3">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->						        								        

						    </div>
						</div>

				    </div>
				</div>

				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th class="center" style="width: 1%;">No.</th>			                
			                <th>DATE</th>
			                <th>NAME</th>
			                <th>INVOICE</th>
			                <th data-bind="visible: showCheckNo" style="width: 10%">CHECK NO</th>			                		                
			                <th style="width: 15%">AMOUNT</th>			                
			                <th style="width: 15%">DISCOUNT</th>
			                <th style="width: 15%">PAY</th>			                			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="cashReceipt-template" 
			        		data-auto-bind="false"
			        		data-bind="source: dataSource"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span5">
						
						<div class="btn-group">
							<div class="leadcontainer">
								
							</div>
							<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
							<ul class="dropdown-menu" style="padding-left: 10px">
								<li>
									<input type="checkbox" id="chbCheckNo" class="k-checkbox" data-bind="checked: showCheckNo">
  									<label class="k-checkbox-label" for="chbCheckNo">CHECK NO</label>
								</li>															
							</ul>
						</div>

						<br>

						<textarea cols="0" rows="2" class="k-textbox" style="width:49%" data-bind="value: obj.memo" placeholder="memo for external ..."></textarea>												
						<textarea cols="0" rows="2" class="k-textbox" style="width:50%" data-bind="value: obj.memo2" placeholder="memo for internal ..."></textarea>
					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span7">
						<table class="table table-condensed table-striped table-white">
							<tbody>
								<tr>
									<td class="right">Total Received:</td>
									<td class="right strong"><span data-bind="text: pay"></span></td>
									<td class="right">Subtotal:</td>
									<td class="right strong" width="40%"><span data-bind="text: sub_total"></span></td>
								</tr>								
								<tr>
									<td class="right">Remaining:</td>
									<td class="right strong"><span data-bind="text: remain"></span></td>
									<td class="right">Total Discount:</td>
									<td class="right strong">
										<span data-bind="text: discount"></span>
                   					</td>
								</tr>																
								<tr>
									<td></td>
									<td></td>
									<td class="right"><h4>Total Due:</h4></td>
									<td class="right strong"><h4 data-bind="text: total"></h4></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>	           
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>
					<!-- <span id="saveSend" class="btn btn-icon btn-warning glyphicons envelope" style="width: 80px;"><i></i> Save Send</span>										 -->
					<span id="savePrint" class="btn btn-icon btn-default glyphicons print" data-bind="click: cancel" style="width: 80px;"><i></i> Save Print</span>
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>					
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="cashReceipt-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td>
			<i class="icon-trash" data-bind="events: { click: removeRow }"></i>
			#:banhji.cashReceipt.dataSource.indexOf(data)+1#			
		</td>		
		<td>#=kendo.toString(new Date(issued_date), "dd-MM-yyyy")#</td>
		<td>
			#if(contact.length>0){#
				#if(contact[0].company==""){#
					#=contact[0].surname# #=contact[0].name#
				#}else{#
					#=contact[0].company#
				#}#
			#}#
		</td>		
		<td>#=reference.length>0?reference[0].number:""#</td>
		<td data-bind="visible: showCheckNo">
			<input type="text" class="k-textbox" 
					data-bind="value: check_no"
					style="width: 100%; margin-bottom: 0;" />
		</td>		
		<td class="center">
			#=reference.length>0 ? kendo.toString(reference[0].amount - amount_paid, "c", locale) : 0#			
		</td>		
		<td class="center">
			<input data-role="numerictextbox"
				   data-culture="#:locale#"
                   data-format="c0"
                   data-min="0"                   
                   data-bind="value: discount,
                              events: { change: changes }"
                   style="width: 100%;">			
		</td>
		<td class="center">
			<input data-role="numerictextbox"
				   data-culture="#:locale#"
                   data-format="c0"
                   data-min="0"                   
                   data-bind="value: amount,
                              events: { change: changes }"
                   style="width: 100%;">			
		</td>
    </tr>   
</script>

<script id="cashPayment" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">					
			    
		    	<div class="hidden-print pull-right">
		    		<span class="glyphicons no-js remove_2" 
						data-bind="click: cancel"><i></i></span>						
				</div>

		        <h2>CASH PAYMENT</h2>			    		   

			    <br>				   				
					
				<!-- Upper Part -->
				<div class="row-fluid">
					<div class="span4">
						<div class="widget widget-heading-simple widget-body-primary widget-employees">		
							<div class="widget-body padding-none">			
								<div class="row-fluid row-merge">
									<div class="listWrapper">
										<div class="innerAll">							
											<form autocomplete="off" class="form-inline">
												<div class="widget-search separator bottom">
													<button type="button" class="btn btn-default pull-right" data-bind="click: search"><i class="icon-search"></i></button>
													<div class="overflow-hidden">
														<input type="search" placeholder="Bill Number..." data-bind="value: searchText, events:{change: enterSearch}">
													</div>
												</div>
												<div class="select2-container" style="width: 100%;">								
													<input id="cbbContact" name="cbbContact"
														   data-role="combobox"											                    
										                   data-value-primitive="true"
										                   data-template="contact-list-tmpl"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: contact_id,
										                              source: contactDS,
										                              events:{ change: contactChanges }"
										                   data-placeholder="Supplier..."                    
										                   style="width: 100%" />									
												</div>
											</form>					
										</div>
									</div>
								</div>
							</div>
						</div>
						
						<div class="strong" style="width: 90%; padding: 10px;" align="center"
							data-bind="style: {
							        backgroundColor: bgColor}">
							<div align="left">AMOUNT PAID</div>
							<h2 data-bind="text: total" align="right"></h2>
						</div>												
					</div>					   

					<div class="span8">

						<div class="box-generic" style="height: 190px;">

						    <!-- Tabs Heading -->
						    <div class="tabsbar tabsbar-2">
						        <ul class="row-fluid row-merge">
						        	<li class="span1 glyphicons cogwheels active"><a href="#tab1-3" data-toggle="tab"><i></i> </a>
						            </li>						           
						            <li class="span1 glyphicons paperclip"><a href="#tab2-3" data-toggle="tab"><i></i></a>
						            </li>						            
						            <li class="span1 glyphicons history"><a href="#tab3-3" data-toggle="tab"><i></i> </a>
						            </li>						            								            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">

						    	<!-- Options Tab content -->
						        <div class="tab-pane active" id="tab1-3">						            
						            <table class="table table-borderless table-condensed cart_total">
						            	<tr>
											<td>Date</td>
											<td class="right">
												<input id="issuedDate" name="issuedDate" 
														data-role="datepicker"
														data-format="dd-MM-yyyy"
														data-parse-formats="yyyy-MM-dd" 
														data-bind="value: obj.issued_date, 
																	events:{ change : setRate }" 
														required data-required-msg="required"
														style="width:100%;" />
											</td>
										</tr>							            
										<tr>
							            	<td>
							            		Payment Method					            						            		
							            	</td>				
											<td>
												<input id="ddlPaymentMethod" name="ddlPaymentMethod"
														data-role="dropdownlist"														
							              				data-value-primitive="true"
														data-text-field="name" 
							              				data-value-field="id"						              				 
							              				data-bind="value: obj.payment_method_id,
							              							source: paymentMethodDS"
							              				data-option-label="Select Method..."
							              				required data-required-msg="required" 
							              				style="width: 100%" />
											</td>
										</tr>
										<tr>
							            	<td>Cash Account</td>							            	
						            		<td>
												<input id="ddlCashAccount" name="ddlCashAccount" 
													data-role="dropdownlist"
													data-template="account-list-tmpl"														
						              				data-value-primitive="true"
													data-text-field="name" 
						              				data-value-field="id"						              				 
						              				data-bind="value: obj.account_id,
						              							source: accountDS"
						              				data-option-label="Select Account..."
						              				required data-required-msg="required" 
						              				style="width: 100%" />
											</td>							            	
							            </tr>							            
							            <tr>
											<td>Segments</td>
											<td>
												<select data-role="multiselect"
													   data-value-primitive="true"								   
													   data-item-template="segment-list-tmpl"				    
													   data-value-field="id" 
													   data-text-field="code"
													   data-bind="value: obj.segments, 
													   			source: segmentItemDS,
													   			events:{ change: segmentChanges }"
													   data-placeholder="Add Segment.."				   
													   style="width: 100%" /></select>
											</td>
										</tr>											
						            </table>						            
						        </div>
						        <!-- // Options Tab content END -->						        

						        <!-- Attach Tab content -->
						        <div class="tab-pane" id="tab2-3">							            	
						            
						            <input name="files"
						                   type="file"
						                   data-role="upload"
						                   data-async="{ saveUrl: 'save', removeUrl: 'remove', autoUpload: false }">								     
						            
						        </div>
						        <!-- // Attach Tab content END -->						        

						        <!-- Recuring Tab content -->
						        <div class="tab-pane" id="tab3-3">							            	
						            
						            <div class="span5">

							        	<input data-role="combobox"
						                   data-placeholder="Select existing recuring ..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="recurring_name"
						                   data-value-field="id"
						                   data-bind="value: obj.recurring_id,
						                              source: recurringDS,
						                              events:{ change:applyRecurring }"
						                   style="width: 100%" />

						                <br><br>

						                <div align="right">
							                <span id="saveRecurring" class="btn btn-icon btn-default glyphicons history"><i></i> Save Recurring</span>						                
							            </div>

						            </div>

						            <div class="span7">

							            <table style="width: 100%">
							            	<tr align="right">
							            		<td>
							            			Name
							            		</td>
							            		<td>
							            			<input class="k-textbox" data-bind="value: obj.recurring_name" 
							            					placeholder="Recurring name.." 
							            					style="width: 40%;" />
							            			Start
									                <input data-role="datepicker"
															data-format="dd-MM-yyyy"
															data-parse-formats="yyyy-MM-dd"
															data-bind="value: obj.start_date"
															style="width: 40%;" />
							            		</td>
							            	</tr>
							            	<tr align="right">
							            		<td>
								            		Every
								            	</td>
							            		<td>
								            		<input data-role="numerictextbox"
									                   data-format="n0"
									                   data-min="0"								                   
									                   data-bind="value: obj.interval"
									                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.frequency,
										                              source: frequencyList,
										                              events: { change: frequencyChanges }"
										                   style="width: 45%;" />
								            	</td>
							            	</tr>
								            <tr align="right">
								            	<td>
								            		On
								            	</td>							            	
								            	<td>

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month,
										                   			  visible: showMonth,
										                              source: monthList"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.month_option,
										                   			  visible: showMonthOption,
										                              source: monthOptionList,
										                              events: { change: monthOptionChanges }"										                   
										                   style="width: 45%;" />

								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.week,
										                   			  visible: showWeek,
										                              source: weekDayList"										                  
										                   style="width: 45%;" />										            
										        
								            		<input data-role="dropdownlist"									                   
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.day,
										                   			  visible: showDay,
										                              source: dayList"										                   
										                   style="width: 45%;" />

								            	</td>
								            </tr>
							            </table>

							        </div>									     
						            
						        </div>
						        <!-- // Recuring Tab content END -->						        								        

						    </div>
						</div>

				    </div>
				</div>

				<!-- Item List -->
				<table class="table table-bordered table-primary table-striped table-vertical-center">
			        <thead>
			            <tr>
			                <th class="center" style="width: 1%;">No.</th>			                
			                <th>DATE</th>
			                <th>NAME</th>
			                <th>BILL NO.</th>
			                <th data-bind="visible: showCheckNo" style="width: 10%">CHECK NO</th>			                		                
			                <th style="width: 15%">DISCOUNT</th>
			                <th style="width: 15%">AMOUNT</th>			                
			                <th style="width: 15%">PAY</th>			                			                			                
			            </tr> 
			        </thead>
			        <tbody data-role="listview" 
			        		data-template="cashPayment-template" 
			        		data-auto-bind="false"
			        		data-bind="source: dataSource"></tbody>			        
			    </table>			    
								
	            <!-- Bottom part -->
	            <div class="row-fluid">
		
					<!-- Column -->
					<div class="span5">
						
						<div class="btn-group">
							<div class="leadcontainer">
								
							</div>
							<a class="btn btn-default dropdown-toggle" data-toggle="dropdown" href="#"><i class="icon-list"></i> </a>
							<ul class="dropdown-menu" style="padding-left: 10px">
								<li>
									<input type="checkbox" id="chbCheckNo" class="k-checkbox" data-bind="checked: showCheckNo">
  									<label class="k-checkbox-label" for="chbCheckNo">CHECK NO</label>
								</li>															
							</ul>
						</div>

						<br>

						<textarea cols="0" rows="2" class="k-textbox" style="width:49%" data-bind="value: obj.memo" placeholder="memo for external ..."></textarea>												
						<textarea cols="0" rows="2" class="k-textbox" style="width:50%" data-bind="value: obj.memo2" placeholder="memo for internal ..."></textarea>
					</div>
					<!-- Column END -->
					
					<!-- Column -->
					<div class="span7">
						<table class="table table-condensed table-striped table-white">
							<tbody>
								<tr>
									<td class="right">Total Received:</td>
									<td class="right strong"><span data-bind="text: pay"></span></td>
									<td class="right">Subtotal:</td>
									<td class="right strong" width="40%"><span data-bind="text: sub_total"></span></td>
								</tr>								
								<tr>
									<td class="right">Remaining:</td>
									<td class="right strong"><span data-bind="text: remain"></span></td>
									<td class="right">Total Discount:</td>
									<td class="right strong">
										<span data-bind="text: discount"></span>
                   					</td>
								</tr>																
								<tr>
									<td></td>
									<td></td>
									<td class="right"><h4>Total:</h4></td>
									<td class="right strong"><h4 data-bind="text: total"></h4></td>
								</tr>								
							</tbody>
						</table>
					</div>
					<!-- // Column END -->
					
				</div>	           
				
				<!-- Form actions -->
				<div class="box-generic" align="right" style="background-color: #0B0B3B;">
					<span id="notification"></span>

					<span id="saveNew" class="btn btn-icon btn-primary glyphicons ok_2" style="width: 80px;"><i></i> Save New</span>
					<span id="saveClose" class="btn btn-icon btn-success glyphicons power" style="width: 80px;"><i></i> Save Close</span>
					<!-- <span id="saveSend" class="btn btn-icon btn-warning glyphicons envelope" style="width: 80px;"><i></i> Save Send</span>										 -->
					<span id="savePrint" class="btn btn-icon btn-default glyphicons print" data-bind="click: cancel" style="width: 80px;"><i></i> Save Print</span>
					<span class="btn btn-danger btn-icon glyphicons bin" data-bind="click: delete, visible: isEdit" style="width: 80px;"><i></i> Delete</span>					
				</div>
				<!-- // Form actions END -->								

			</div>							
		</div>
	</div>
</script>
<script id="cashPayment-template" type="text/x-kendo-tmpl">		
	<tr data-uid="#: uid #">		
		<td>
			<i class="icon-trash" data-bind="events: { click: removeRow }"></i>
			#:banhji.cashPayment.dataSource.indexOf(data)+1#			
		</td>		
		<td>#=kendo.toString(new Date(issued_date), "dd-MM-yyyy")#</td>
		<td>
			#if(contact.length>0){#
				#if(contact[0].company==""){#
					#=contact[0].surname# #=contact[0].name#
				#}else{#
					#=contact[0].company#
				#}#
			#}#
		</td>		
		<td>#=reference.length>0?reference[0].number:""#</td>
		<td data-bind="visible: showCheckNo">
			<input type="text" class="k-textbox" 
					data-bind="value: check_no"
					style="width: 100%; margin-bottom: 0;" />
		</td>		
		<td class="center">
			#=reference.length>0 ? kendo.toString(reference[0].amount - amount_paid, "c", locale) : 0#			
		</td>
		<td class="center">
			<input data-role="numerictextbox"
				   data-culture="#:locale#"
                   data-format="c0"
                   data-min="0"                   
                   data-bind="value: discount,
                              events: { change: changes }"
                   style="width: 100%;">			
		</td>		
		<td class="center">
			<input data-role="numerictextbox"
				   data-culture="#:locale#"
                   data-format="c0"
                   data-min="0"                   
                   data-bind="value: amount,
                              events: { change: changes }"
                   style="width: 100%;">			
		</td>
    </tr>   
</script>


<!-- ***************************
 *	Inventory Section      	  *
**************************** -->
<script id="itemDashBoard" type="text/x-kendo-template">

	<div class="row-fluid">

		<!-- Left Side -->
		<div class="span4">

			<!-- Logo of the page -->
			<table width="100%" cellpadding="10">
				<tr>
					<td>
			           	<img src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/inventory.png" />
			        </td>
			        <td valign="top">
			        	<h2>INVENTORY</h2>
			        	<p>
			        		In here, you can manage your inventory information, stock, item price, and other related transactions.
			        	</p>
			        </td>
			 	</tr>
			</table>

			<!-- Row -->
			<div class="row-fluid">
				<div class="span6">
				
					<!-- Stats Widget -->
					<a href="" class="widget-stats widget-stats-gray widget-stats-1">
						<span class="txt"><span data-bind="text: lang.lang.inventory_type"></span></span>
						<div class="clearfix"></div>
						<span class="count">6</span>
					</a>
					<!-- // Stats Widget END -->
					
				</div>
				<div class="span6">
				
					<!-- Stats Widget -->
					<a href="" class="widget-stats widget-stats-1">
						<span class="txt"><span data-bind="text: lang.lang.gross_profit_margin"></span></span>
						<div class="clearfix"></div>
						<span class="count">30%</span>
					</a>
					<!-- // Stats Widget END -->
					
				</div>
			</div>
			<div class="row-fluid">
				<div class="span6">
				
					<!-- Stats Widget -->
					<a href="" class="widget-stats widget-stats-gray widget-stats-2">
						<span class="count"><span style="font-size: 40px;">26 days</span></span>
						<span class="txt">Turn over days</span>
					</a>
					<!-- // Stats Widget END -->
					
				</div>
				<div class="span6">
				
					<!-- Stats Widget -->
					<a href="" class="widget-stats widget-stats-2">
						<span class="count"><span style="font-size: 40px;">1,172,000៛</span></span>
						<span class="txt"><span>Inventory Value</span></span>
					</a>
					<!-- // Stats Widget END -->
					
				</div>								
			</div>
			<!-- // Row END -->

		</div>

		<!-- Right Side -->
		<div class="span8">

			<!-- Summary -->
			<div class="row-fluid">
	
				<!-- Column -->
				<div class="span4">
				
					<!-- Widget -->
					<div class="widget widget-3">
					
						<!-- Widget heading -->
						<div class="widget-head">
							<h4 class="heading"><span class="glyphicons coins"><i></i></span>Sale</h4>
						</div>
						<!-- // Widget heading END -->
						
						<div class="widget-body" style="background-color: LightGreen;">
							
							<div align="center" class="text-large strong" data-bind="text: sale"></div>

							<br>
						
							<table width="100%">
								<tr align="center">
									<td>										
										<span data-bind="text: sale_customer"></span>
										<br>
										<span>Customer</span>
									</td>
									<td>
										<span data-bind="text: sale_product"></span>
										<br>
										<span>Product</span>
									</td>
									<td>
										<span data-bind="text: sale_order"></span>
										<br>
										<span>Order</span>
									</td>
								</tr>
							</table>
						</div>
						<!-- // Widget footer END -->
						
					</div>
					<!-- // Widget END -->
					
				</div>
				<!-- // Column END -->
				
				<!-- Column -->
				<div class="span4">
				
					<!-- Widget -->
					<div class="widget widget-3">
					
						<!-- Widget heading -->
						<div class="widget-head">
							<h4 class="heading"><span class="glyphicons cargo"><i></i></span>Item</h4>
						</div>
						<!-- // Widget heading END -->
						
						<div class="widget-body" style="background-color: LightBlue;">
							
							<div align="center" class="text-large strong" data-bind="text: order"></div>

							<br>
						
							<table width="100%">
								<tr align="center">
									<td>										
										<span data-bind="text: order_avg"></span>
										<br>
										<span>Average</span>
									</td>
									<td>
										<span data-bind="text: order_open"></span>
										<br>
										<span>Open</span>
									</td>									
								</tr>
							</table>
						</div>
						<!-- // Widget footer END -->
						
					</div>
					<!-- // Widget END -->
					
				</div>
				<!-- // Column END -->
				
				<!-- Column -->
				<div class="span4">
				
					<!-- Widget -->
					<div class="widget widget-3">
					
						<!-- Widget heading -->
						<div class="widget-head">
							<h4 class="heading"><span class="glyphicons thumbs_up"><i></i></span>Quantity On Hand</h4>
						</div>
						<!-- // Widget heading END -->
						
						<div class="widget-body" style="background-color: LightCoral;">
							
							<div align="center" class="text-large strong" data-bind="text: order"></div>

							<br>
						
							<table width="100%">
								<tr align="center">
									<td>										
										<span data-bind="text: ar_open"></span>
										<br>
										<span>Open</span>
									</td>
									<td>
										<span data-bind="text: ar_customer"></span>
										<br>
										<span>Customer</span>
									</td>
									<td>
										<span data-bind="text: ar_overdue"></span>
										<br>
										<span>Overdue</span>
									</td>
								</tr>
							</table>
						</div>
						<!-- // Widget footer END -->
						
					</div>
					<!-- // Widget END -->
					
				</div>
				<!-- // Column END -->
				
			</div>

			<!-- Top 5 -->
			<div class="row-fluid">
				<div class="span4">
					<h4>Top 5 Inventory Turnover Days</h4>					
					<table class="table table-bordered table-primary table-striped table-vertical-center">
				        <thead>
				            <tr>
				                <th style="width: 1%;" class="center">#</th>
				                <th>Name</th>			                
				            </tr>
				        </thead>
				        <tbody data-role="listview"
				        	 data-auto-bind="false"				        	                 
			                 data-template="itemDashBoard-top-customer-template"
			                 data-bind="source: topProductDS"></tbody>			        
				    </table>			
				</div>
				<div class="span4">
					<h4>Top 5 Suppliers</h4>
					<table class="table table-bordered table-primary table-striped table-vertical-center">
				        <thead>
				            <tr>
				                <th style="width: 1%;" class="center">#</th>
				                <th>Name</th>		                
				            </tr>
				        </thead>
				        <tbody data-role="listview"
				        	 data-auto-bind="false"				        	                  
			                 data-template="itemDashBoard-top-ar-template"
			                 data-bind="source: topCustomerDS"></tbody>			        
				    </table>
				</div>
				<div class="span4">
					<h4>Top 5 Best Selling Products</h4>
					<table class="table table-bordered table-primary table-striped table-vertical-center">
				        <thead>
				            <tr>
				                <th style="width: 1%;" class="center">#</th>
				                <th>Name</span></th>			                		                
				            </tr>
				        </thead>
				        <tbody data-role="listview"
				        	 data-auto-bind="false"                
			                 data-template="itemDashBoard-top-product-template"
			                 data-bind="source: topProductDS"></tbody>			        
				    </table>
				</div>		
			</div>

			<!-- Graph -->
			<div>
				<div id="graph" style="height: 100%;"></div>
			</div>

		</div>		

	</div>		

	<p class="separator text-center"><i class="icon-ellipsis-horizontal icon-3x"></i></p>
</script>
<script id="itemDashBoard-top-customer-template" type="text/x-kendo-tmpl">	
	<tr data-uid="#: uid #">
		<td>#:banhji.customerDashboard.topCustomerDS.indexOf(data)+1#</td>		
		<td>
			<span>#=name#</span>
			<span class="pull-right">#=kendo.toString(quantity, "n0")# days</span>
		</td>		
	</tr>
</script>
<script id="itemDashBoard-top-ar-template" type="text/x-kendo-tmpl">
	<tr>
		<td>#:banhji.customerDashboard.topARDS.indexOf(data)+1#</td>		
		<td>
			<span>#=name#</span>
			<span class="pull-right">#=kendo.toString(amount, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale)#</span>
		</td>
	</tr>
</script>
<script id="itemDashBoard-top-product-template" type="text/x-kendo-tmpl">
	<tr>
		<td>#:banhji.customerDashboard.topProductDS.indexOf(data)+1#</td>		
		<td>
			<span>#=name#</span>
			<span class="pull-right">#=kendo.toString(quantity, "n0")#</span>
		</td>
	</tr>
</script>


<script id="itemCenter" type="text/x-kendo-template">	
	<div class="widget widget-heading-simple widget-body-gray widget-employees">		
		<div class="widget-body padding-none">			
			<div class="row-fluid row-merge">
				<div class="span3 listWrapper" style="height: 700px;">
					<div class="innerAll">							
						<form autocomplete="off" class="form-inline">
							<div class="widget-search separator bottom">
								<button type="button" class="btn btn-default pull-right" data-bind="click: search"><i class="icon-search"></i></button>
								<div class="overflow-hidden">
									<input type="search" placeholder="sku or name ..." data-bind="value: searchText, events:{change: enterSearch}">
								</div>
							</div>
							<div class="select2-container" style="width: 100%;">								
																
							</div>
						</form>					
					</div>
					
					<span class="results"><span data-bind="text: itemDS.total()"></span> <span data-bind="text: lang.lang.found_search"></span></span>

					<div class="table table-condensed" style="height: 580px;"						 
						 data-role="grid" 
						 data-bind="source: itemDS"
						 data-auto-bind="false" 
						 data-row-template="itemCenter-item-list-tmpl"
						 data-columns="[{title: ''}]"
						 data-selectable=true
						 data-height="600"						 
						 data-scrollable="{virtual: true}"></div>									
				</div>
				<div class="span9 detailsWrapper">
					<div class="row-fluid">					
						<div class="span6">
							<div class="widget widget-4 widget-tabs-icons-only margin-bottom-none">

							    <!-- Widget Heading -->
							    <div class="widget-head">

							        <!-- Tabs -->
							        <ul class="pull-right">
							            <li style="font-size: large; color: black; font-weight: bold;">
							            	<span data-bind="text: obj.sku"></span>
							            	-
							            	<span data-bind="text: obj.name"></span>
							            </li>
							            <li class="glyphicons circle_info active"><span data-toggle="tab" data-target="#tab1-4"><i></i></span>
							            </li>
							            <li class="glyphicons riflescope"><span data-toggle="tab" data-target="#tab2-4"><i></i></span>
							            </li>
							            <li class="glyphicons coins"><span data-bind="click: pricing"><i></i></span>
							            </li>							            							            
							            <li class="glyphicons edit"><span data-bind="click: edit"><i></i></span>
							            </li>							            						            
							        </ul>
							        <div class="clearfix"></div>
							        <!-- // Tabs END -->

							    </div>
							    <!-- Widget Heading END -->

							    <div class="widget-body">
							        <div class="tab-content">

							            <!-- Info Tab content -->
							            <div id="tab1-4" class="tab-pane active box-generic">
							            	
											<div class="widget widget-heading-simple widget-body-white">
												<div class="widget-body padding-none">
													<div class="row-fluid row-merge">
														<div class="span6">
															<div class="innerAll center">
																<h5 class="strong muted text-uppercase"><i class="icon-money text-faded"></i> <span data-bind="text: lang.lang.weighted_avg_cost"></span></h5>
																<span class="text-large strong text-primary"><span data-format="n" data-bind="text: obj.cost"></span></span>
															</div>
														</div>
														<div class="span6">
															<div class="innerAll center muted">
																<h5 class="strong muted text-uppercase"><i class="icon-dollar text-faded"></i> <span data-bind="text: lang.lang.avg_price"></span></h5>
																<span class="text-large strong"><span data-bind="text: obj.price"></span></span>
															</div>
														</div>
													</div>
												</div>
											</div>
											
							            </div>
							            <!-- // Info Tab content END -->

							            <!-- SEARCH Tab content -->
							            <div id="tab2-4" class="tab-pane box-generic">
							                <table>
									    		<tr>
									    			<td>
												    	<input data-role="dropdownlist"
														   data-option-label="(--- Category ---)"
										                   data-auto-bind="false"
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: category_id,
										                              source: categoryDS,			                              
										                              events: {
										                                change: categoryChanges
										                              }"/>
									            	</td>
									            	<td>
										            	<select data-role="multiselect"
												           data-placeholder="item group ..."
												           data-value-primitive="true"
												           data-text-field="name"
												           data-value-field="id"
												           data-bind="value: selectedItemGroup,
												                      source: itemGroupDS,
												                      enabled: isCategorySelected"
												           style="width: 200px;" 
												    	></select>
												    </td>
												</tr>
											</table>

								            <br><br>
								            <span class="btn btn-primary btn-icon glyphicons search pull-right" data-bind="click: search"><i></i> <span data-bind="text: lang.lang.search"></span></span>
								            <br>
							            </div>
							            <!-- // SEARCH Tab content END -->							            
							           
							        </div>
							    </div>
							</div>
						</div>

						<div class="span6">
							<div class="row-fluid">
								<div class="span6">
									<div class="widget-stats widget-stats-primary widget-stats-5" data-bind="click: loadOnHand">
										<span class="glyphicons coins"><i></i></span>
										<span class="txt">Value OH<span data-bind="text: obj.on_hand" style="font-size:medium;"></span></span>
										<div class="clearfix"></div>
									</div>
								</div>
								<div class="span6">
									<div class="widget-stats widget-stats-inverse widget-stats-5" data-bind="click: loadOnHand">
										<span class="glyphicons thumbs_up"><i></i></span>
										<span class="txt">Qty OH<span data-bind="text: obj.on_hand" style="font-size:medium;"></span></span>
										<div class="clearfix"></div>
									</div>
								</div>
							</div>							
							
							<div class="row-fluid">
								<div class="span6">
									<div class="widget-stats widget-stats-info widget-stats-5" data-bind="click: loadPO">
										<span class="glyphicons cart_in"><i></i></span>
										<span class="txt"><span data-bind="text: on_po"></span>On PO</span>
										<div class="clearfix"></div>
									</div>
								</div>
								<div class="span6">
									<div class="widget-stats widget-stats-default widget-stats-5" data-bind="click: loadSO">
										<span class="glyphicons cart_out"><i></i></span>
										<span class="txt"><span data-bind="text: on_so"></span>On SO</span>
										<div class="clearfix"></div>
									</div>
								</div>
							</div>														
						</div>											          	
		          	</div>
					
					<div>
						<input data-role="dropdownlist"                   
					           data-value-primitive="true"
					           data-text-field="text"
					           data-value-field="value"
					           data-bind="value: sorter,
					                      source: sortList,                              
					                      events: { change: sorterChanges }" />

						<input data-role="datepicker"
							   data-format="dd-MM-yyyy"
					           data-bind="value: sdate,
					                      events: { change: dateChanges }"
					           placeholder="From ..." >

					    <input data-role="datepicker"
					    	   data-format="dd-MM-yyyy"
					           data-bind="value: edate,
					                      events: { change: dateChanges }"
					           placeholder="To ..." >
					    
					    <button type="button" data-role="button" data-bind="click: searchMovement"><i class="icon-search"></i></button>
					</div>

					<table class="table table-bordered table-striped table-white">
						<thead>
							<tr>
								<th><span data-bind="text: lang.lang.date"></span></th>
								<th><span data-bind="text: lang.lang.type2"></span></th>								
								<th><span data-bind="text: lang.lang.reference_no"></span></th>
								<th><span data-bind="text: lang.lang.qty"></span></th>
								<th><span data-bind="text: lang.lang.cost"></span></th>
								<th><span data-bind="text: lang.lang.price"></span></th>
							</tr>
						</thead>	            		
	            		<tbody data-role="listview"
	            				data-auto-bind="false"	            					            					            					            			
				                data-template="itemCenter-transaction-tmpl"
				                data-bind="source: movementDS" >
				        </tbody>
	            	</table>

	            	<div id="pager" class="k-pager-wrap"
				    	 data-auto-bind="false"
			             data-role="pager" data-bind="source: movementDS"></div>	            	
				</div>
			</div>			
		</div>
	</div>		
</script>
<script id="itemCenter-item-list-tmpl" type="text/x-kendo-tmpl">
	<tr data-bind="click: selectedRow">
		<td>
			<div class="media-body">
				<span class="strong">
					#=sku# #=name#				
				</span>
			</div>
		</td>
	</tr>
</script>
<script id="itemCenter-transaction-tmpl" type="text/x-kendo-tmpl">
    <tr>    	  	
    	<td>#=kendo.toString(new Date(invoice[0].issued_date), "dd-MM-yyyy")#</td>
    	<td>#=invoice[0].type#</td>
        <td>#=invoice[0].number#</td>
    	<td>#=kendo.toString(quantity*movement, "n0")#</td>
    	<td>#=kendo.toString(cost*rate, "c", "locale")#</td>
    	<td>#=kendo.toString(price*rate, "c", "locale")#</td>  	
    </tr>
</script>
<script id="item" type="text/x-kendo-template">
	<div class="container-960">
		<div id="example" class="k-content">
			
			<!-- Collapsible Widget -->			
			<div class="widget">
			    <div class="widget-head">
			    	<span class="btn btn-primary pull-right" 
							onclick="javascript:window.history.back()">X</span>
			        
			        <h4 class="heading glyphicons cargo"><i></i> <span data-bind="text: lang.lang.item"></span></h4>							        	
			    </div>
			    <div class="widget-body">					
					
			    	<div class="row-fluid">
			    		<div class="span6 well">									
							<div class="row-fluid">
								<div class="span6">														
									<!-- Group -->
									<div class="control-group">										
										<label for="ddlCategory"><span data-bind="text: lang.lang.category"></span> <span style="color:red">*</span></label>
										<input id="categories" data-bind="value: obj.category_id" required data-required-msg="required" style="width: 100%;" />
									</div>
									<!-- // Group END -->
								</div>

								<div class="span6">	
									<!-- Group -->
									<div class="control-group">										
										<label for="ddlItemGroups"><span data-bind="text: lang.lang.group"></span> </label>
										<input id="itemGroups" data-bind="value: obj.item_group_id" disabled="disabled" style="width: 100%;" />
									</div>
									<!-- // Group END -->												
								</div>
							</div>
							
							<div class="row-fluid">
								<div class="span6">	
									<!-- Group -->
									<div class="control-group">							
										<label for="txtSKU"><span data-bind="text: lang.lang.sku"></span><span style="color:red">*</span></label>
				              			<input id="txtSKU" name="txtSKU" class="k-textbox"
					              				data-bind="value: obj.sku" 
					              				placeholder="e.g. ID0001" 
					              				required data-required-msg="required"
					              				style="width: 100%;" />
					              		<span data-bind="visible: isDuplicateNumber" style="color: red;"><span data-bind="text: lang.lang.duplicate_number"></span></span>
									</div>
									<!-- // Group END -->		
								</div>

								<div class="span6">						
									<!-- Group -->
									<div class="control-group">
										<label for="txtName"><span data-bind="text: lang.lang.item_number"></span> <span style="color:red">*</span></label>
					              		<input id="txtName" name="txtName" class="k-textbox" data-bind="value: obj.name" 
							              		placeholder="item name..." required data-required-msg="required"
							              		style="width: 100%;" />
									</div>
									<!-- // Group END -->	
								</div>								
							</div>

							<div class="row-fluid">
								<div class="span6">																					
									<!-- Group -->
									<div class="control-group">								
										<label for="txtOrderPoint"><span data-bind="text: lang.lang.reorder_point"></span></label>
										<input data-role="numerictextbox"
						                   data-format="n0"
						                   data-min="0"						                   
						                   data-bind="value: obj.order_point"
						                   style="width: 100%">
									</div>																		
									<!-- // Group END -->														
								</div>

								<div class="span6">
									<!-- Group -->
									<div class="control-group">								
										<label for="ddlStatus"><span data-bind="text: lang.lang.status"></span> <span style="color:red">*</span></label>
							            <input id="ddlStatus" name="ddlStatus" 
				              				data-role="dropdownlist"
						            		data-text-field="name"
			           						data-value-field="id"
			           						data-value-primitive="true" 
						            		data-bind="source: statusList, value: obj.status"
						            		data-option-label="(--- Select ---)"
						            		required data-required-msg="required" style="width: 100%;" />
									</div>																		
									<!-- // Group END -->										
								</div>								
							</div>							
						</div>
						<div class="span6">
							<div class="row-fluid">
								<div class="span6">														
									<!-- Group -->
									<div class="control-group">								
										<label for="txtCost"><span data-bind="text: lang.lang.cost"></span></label>
							            <input data-role="numerictextbox"
						                   data-format="n0"
						                   data-min="0"						                   
						                   data-bind="value: obj.cost"
						                   style="width: 100%">
									</div>																		
									<!-- // Group END -->
								</div>

								<div class="span6">	
									<!-- Group -->
									<div class="control-group">								
										<label for="ddlCurrency"><span data-bind="text: lang.lang.currency"></span> <span style="color:red">*</span></label>
							            <input id="ddlCurrency" name="ddlCurrency"							            	 
				              				data-role="dropdownlist"
				              				data-option-label="(--- Select ---)"
				              				data-value-primitive="true"
						            		data-text-field="code"
			           						data-value-field="id"			           						 
						            		data-bind="source: currencyDS, value: obj.currency_id"						            		
						            		required data-required-msg="required" style="width: 100%;" />
									</div>																		
									<!-- // Group END -->									
								</div>
							</div>

							<div class="row-fluid">
								<div class="span6">														
									<!-- Group -->
									<div class="control-group">								
										<label for="txtOnhand"><span data-bind="text: lang.lang.quantity"></span></label>
							            <input data-role="numerictextbox"
						                   data-format="n0"
						                   data-min="0"						                   
						                   data-bind="value: obj.on_hand"
						                   style="width: 100%">
									</div>																		
									<!-- // Group END -->
								</div>

								<div class="span6">	
									<!-- Group -->
									<div class="control-group">								
										<label for="txtOrderPoint"><span data-bind="text: lang.lang.unit_measure"></span> <span style="color:red">*</span></label>
										<input id="ddlMeasurement" name="ddlMeasurement"
										   data-option-label="(--- Select ---)" 
										   data-role="dropdownlist"						                   
						                   data-value-primitive="true"
						                   data-text-field="name"
						                   data-value-field="id"
						                   data-bind="value: obj.measurement_id,
						                              source: measurementDS"
						                   required data-required-msg="required"
						                   style="width: 100%;" />
									</div>																		
									<!-- // Group END -->											
								</div>
							</div>

							<div class="row-fluid">
								<!-- Group -->
								<div class="control-group">								
									<label for="txtDescription"><span data-bind="text: lang.lang.description"></span></label>
						            <textarea id="txtDescription" cols="0" rows="3" class="k-textbox" 
										data-bind="value: obj.bill_to" style="width: 100%;"></textarea>
								</div>																		
								<!-- // Group END -->
							</div>

						</div>
					</div>								
							
					<!-- // Inner Tabs -->
					<div class="row-fluid">								
						<div class="box-generic">
						    <!-- //Tabs Heading -->
						    <div class="tabsbar tabsbar-1">
						        <ul class="row-fluid row-merge">						            
						            <li class="span2 glyphicons usd active">
						            	<a href="#tab1" data-toggle="tab"><i></i> <span><span data-bind="text: lang.lang.accounting"></span></span></a>
						            </li>
						            <li class="span2 glyphicons circle_info">
						            	<a href="#tab2" data-toggle="tab"><i></i> <span><span data-bind="text: lang.lang.info"></span></span></a>
						            </li>
						            <li class="span2 glyphicons old_man">
						            	<a href="#tab3" data-toggle="tab"><i></i> <span><span data-bind="text: lang.lang.vendor"></span></span></a>
						            </li>
						            <li class="span2 glyphicons user">
						            	<a href="#tab4" data-toggle="tab"><i></i> <span><span data-bind="text: lang.lang.customer"></span></span></a>
						            </li>						            					            						            					            
						        </ul>
						    </div>
						    <!-- // Tabs Heading END -->

						    <div class="tab-content">
						        <!-- //ACCOUNTING INFO -->
						        <div class="tab-pane active" id="tab1">
						        	<div class="row-fluid">						            	
										<div class="span4">
											<label for="ddlIncome"><span data-bind="text: lang.lang.income_account"></span><span style="color:red">*</span></label>
											<input id="ddlIncome" name="ddlIncome"
												data-bind="value: obj.income_account_id" 
												required data-required-msg="required" style="width: 100%;" />
										</div>
										<div class="span4">
											<label for="ddlCogs"><span data-bind="text: lang.lang.cost_of_good_sold_account"></span><span style="color:red">*</span></label>
											<input id="ddlCogs" name="ddlCogs"
												data-bind="value: obj.cogs_account_id" 
												required data-required-msg="required" style="width: 100%;" />
										</div>
										<div class="span4">
											<label for="ddlInventory"><span data-bind="text: lang.lang.inventory_account"></span><span style="color:red">*</span></label>
											<input id="ddlInventory" name="ddlInventory"
												data-bind="value: obj.inventory_account_id" 
												required data-required-msg="required" style="width: 100%;" />	
										</div>												
							        </div>							        
					        	</div>
						        <!-- //ACCOUNTING INFO END -->						        
						        
						        <!-- //INFO -->
						        <div class="tab-pane" id="tab2">

						        	<div class="row-fluid">

										<div class="span3">														
											<!-- Group -->
											<div class="control-group">							
												<label for="txtSerialNumber"><span data-bind="text: lang.lang.model"></span></label>
						              			<input data-role="dropdownlist"
						              			   data-option-label="(--- Select ---)"								                  
								                   data-value-primitive="true"
								                   data-text-field="name"
								                   data-value-field="id"
								                   data-bind="value: obj.brand_id,
								                              source: brandDS"
								                   style="width: 100%;" />					              		
											</div>
											<!-- // Group END -->
										</div>

										<div class="span3">														
											<!-- Group -->
											<div class="control-group">							
												<label for="txtMeasurement"><span data-bind="text: lang.lang.measurement"></span></label>
						              			<input id="txtMeasurement" name="txtMeasurement" class="k-textbox"
							              				data-bind="value: obj.measurements" 
							              				placeholder="e.g. 4x6mn"
							              				style="width: 100%;" />					              		
											</div>
											<!-- // Group END -->
										</div>

										<div class="span3">
											<!-- Group -->
											<div class="control-group">
									            <input type="checkbox" data-bind="checked: obj.favorite" />	<span data-bind="text: lang.lang.favorite"></span>
											</div>																		
											<!-- // Group END -->
										</div>										

						        	</div>						        	

							        <div class="row-fluid">										

										<div class="span3">														
											<!-- Group -->
											<div class="control-group">							
												<label for="txtInternationalCode"><span data-bind="text: lang.lang.international_code"></span></label>
						              			<input id="txtInternationalCode" name="txtInternationalCode" class="k-textbox"
							              				data-bind="value: obj.international_code" 
							              				placeholder="e.g. INT0001"
							              				style="width: 100%;" />					              		
											</div>
											<!-- // Group END -->
										</div>

										<div class="span3">														
											<!-- Group -->
											<div class="control-group">							
												<label for="txtColorCode"><span data-bind="text: lang.lang.color"></span></label>
						              			<input id="txtColorCode" name="txtColorCode" class="k-textbox"
							              				data-bind="value: obj.color_code" 
							              				placeholder="e.g. VID0001"
							              				style="width: 100%;" />					              		
											</div>
											<!-- // Group END -->
										</div>

										<div class="span3">														
											<!-- Group -->
											<div class="control-group">							
												<label for="txtIMEI"><span data-bind="text: lang.lang.imei"></span></label>
						              			<input id="txtIMEI" name="txtIMEI" class="k-textbox"
							              				data-bind="value: obj.IMIE" 
							              				placeholder="e.g. IMEI0001"
							              				style="width: 100%;" />					              		
											</div>
											<!-- // Group END -->
										</div>

										<div class="span3">														
											<!-- Group -->
											<div class="control-group">							
												<label for="txtSerialNumber"><span data-bind="text: lang.lang.serial_number"></span></label>
						              			<input id="txtSerialNumber" name="txtSerialNumber" class="k-textbox"
							              				data-bind="value: obj.serial_number" 
							              				placeholder="e.g. 0001"
							              				style="width: 100%;" />					              		
											</div>
											<!-- // Group END -->
										</div>
												
							        </div>							       

					        	</div>
						        <!-- //INFO END -->

						        <!-- //VENDOR -->
						        <div class="tab-pane" id="tab3">
						        						       
						        	<span class="btn btn-primary btn-icon glyphicons circle_plus" data-bind="click: addEmptyItemVendor"><i></i> <span data-bind="text: lang.lang.new_vendor_item"></span></span>
								        	
						        	<table class="table table-bordered table-white">
								        <thead>
								            <tr>
								                <th><span data-bind="text: lang.lang.name"></span></th>
								                <th><span data-bind="text: lang.lang.item_code"></span></th>								                
								                <th width="20px"></th>										               
								            </tr>
								        </thead>
								        <tbody data-role="listview"										        		
								        		data-auto-bind="false"										        						        		 
								        		data-template="item-vendor-row-tmpl" 
								        		data-bind="source: itemVendorDS">
								        </tbody>										        						        
								    </table>

					        	</div>
						        <!-- //VENDOR END -->

						        <!-- //CUSTOMER -->
						        <div class="tab-pane" id="tab4">
						        					       
						        	<span class="btn btn-primary btn-icon glyphicons circle_plus" data-bind="click: addEmptyItemCustomer"><i></i> <span data-bind="text: lang.lang.new_customer_item"></span></span>
								        	
						        	<table class="table table-bordered table-white">
								        <thead>
								            <tr>
								                <th><span data-bind="text: lang.lang.name"></span></th>
								                <th><span data-bind="text: lang.lang.item_code"></span></th>								                
								                <th width="20px"></th>										               
								            </tr>
								        </thead>
								        <tbody data-role="listview"										        		
								        		data-auto-bind="false"										        						        		 
								        		data-template="item-customer-row-tmpl" 
								        		data-bind="source: itemCustomerDS">
								        </tbody>										        						        
								    </table>

					        	</div>
						        <!-- //CUSTOMER END -->
						    </div>
						</div>
					</div>					

					<br>											
							
					<!-- Form actions -->
					<div align="center">
						<span id="notification"></span>

						<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i><span data-bind="text: lang.lang.save"></span></span>
						<span class="btn btn-danger btn-icon glyphicons delete" data-bind="click: delete, visible: isEdit"><i></i><span data-bind="text: lang.lang.delete"></span></span>
						<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i><span data-bind="text: lang.lang.cancel"></span></span>
					</div>
					<!-- // Form actions END -->

				</div> <!-- End Widget-Body List -->
			</div>
			<!-- // Collapsible Widget END -->				
					
		</div>
	</div>
</script>
<script id="item-vendor-row-tmpl" type="text/x-kendo-tmpl">
	<tr>		
		<td>
			<input id="cbbVendor" name="cbbVendor" 
			   data-role="combobox"
               data-placeholder="vendor ..."
               data-auto-bind="false"
               data-value-primitive="true"
               data-filter="startswith"							                   
               data-min-length="3"							                   
               data-text-field="company"
               data-value-field="id"										                   
               data-bind="value: contact_id,
                          source: vendorList"
               style="width: 100%" />
		</td>
		<td>
			<input type="text" class="k-textbox" data-bind="value: code" placeholder="item code ..." style="width: 100%;" />
		</td>			
		<td align="center">            
			<span class="glyphicons no-js delete" data-bind="click: deleteItemVendor"><i></i></span>									
		</td>		
	</tr>
</script>
<script id="item-customer-row-tmpl" type="text/x-kendo-tmpl">
	<tr>		
		<td>
			<input id="cbbCustomer" name="cbbCustomer" 
			   data-role="combobox"
               data-placeholder="customer ..."
               data-auto-bind="false"
               data-value-primitive="true"
               data-filter="startswith"							                   
               data-min-length="3"							                   
               data-text-field="fullname"
               data-value-field="id"										                   
               data-bind="value: contact_id,
                          source: customerList"
               style="width: 100%" />
		</td>
		<td>
			<input type="text" class="k-textbox" data-bind="value: code" placeholder="item code ..." style="width: 100%;" />
		</td>			
		<td align="center">            
			<span class="glyphicons no-js delete" data-bind="click: deleteItemCustomer"><i></i></span>									
		</td>		
	</tr>
</script>
<script id="itemCatalog" type="text/x-kendo-template">
	<div class="container-960">
		<div id="example" class="k-content">
			
			<!-- Collapsible Widget -->			
			<div class="widget">
			    <div class="widget-head">
			    	<span class="btn btn-primary pull-right" 
							onclick="javascript:window.history.back()">X</span>
			        
			        <h4 class="heading glyphicons sampler"><i></i> <span data-bind="text: lang.lang.catalogs"></span></h4>							        	
			    </div>
			    <div class="widget-body">					
					
			    	<div class="row-fluid">
			    		<div class="span6 well">							
							<div class="row-fluid">
								<div class="span6">	
									<!-- Group -->
									<div class="control-group">							
										<label for="txtSKU"><span data-bind="text: lang.lang.code"></span> <span style="color:red">*</span></label>
				              			<input id="txtSKU" name="txtSKU" class="k-textbox"
					              				data-bind="value: obj.sku" 
					              				placeholder="e.g. ID0001" 
					              				required data-required-msg="required"
					              				style="width: 100%;" />
					              		<span data-bind="visible: isDuplicateNumber" style="color: red;"><span data-bind="text: lang.lang.duplicate_number"></span></span>
									</div>
									<!-- // Group END -->		
								</div>

								<div class="span6">	
									<!-- Group -->
									<div class="control-group">
										<label for="txtName"><span data-bind="text: lang.lang.items"></span><span style="color:red">*</span></label>
					              		<input id="txtName" name="txtName" class="k-textbox" data-bind="value: obj.name" 
							              		placeholder="Items Name..." required data-required-msg="required"
							              		style="width: 100%;" />
									</div>
									<!-- // Group END -->	 			
								</div>								
							</div>

							<div class="row-fluid">
								<div class="span6">
									<!-- Group -->
									<div class="control-group">								
										<label for="txtOnhand"><span data-bind="text: lang.lang.status"></span><span style="color:red">*</span></label>
							            <input id="ddlStatus" name="ddlStatus" 
				              				data-role="dropdownlist"
						            		data-text-field="name"
			           						data-value-field="id"
			           						data-value-primitive="true" 
						            		data-bind="source: statusList, value: obj.status"
						            		data-option-label="(--- Select ---)"
						            		required data-required-msg="required" style="width: 100%;" />
									</div>																		
									<!-- // Group END -->										
								</div>

								<div class="span6">
									<input type="checkbox" data-bind="checked: obj.favorite" /> <span data-bind="text: lang.lang.favorite"></span>
								</div>															
							</div>							
						</div>
						<div class="span6">							
							<div class="row-fluid">
								<!-- Group -->
								<div class="control-group">								
									<label for="txtDescription"><span data-bind="text: lang.lang.description"></span></label>
						            <textarea id="txtDescription" cols="0" rows="2" class="k-textbox" 
										data-bind="value: obj.bill_to" style="width: 100%;"></textarea>
								</div>																		
								<!-- // Group END -->
							</div>

							<div class="row-fluid">
								<!-- Group -->
								<div class="control-group">								
									<label for="items"><span data-bind="text: lang.lang.select_item_for_catalogs"></span></label>

									<select data-role="multiselect"
						                   data-placeholder="Select..."
						                   data-value-primitive="true"
						                   data-text-field="name"
						                   data-value-field="id"
						                   data-bind="value: obj.catalogs,
						                              source: itemDS"
						                   style="width: 100%"
						            ></select>						            
								</div>																		
								<!-- // Group END -->
							</div>																											
						</div>
					</div>
					
					<br>											
							
					<!-- Form actions -->
					<div align="center">
						<span id="notification"></span>

						<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i><span data-bind="text: lang.lang.save"></span></span>
						<span class="btn btn-danger btn-icon glyphicons delete" data-bind="click: delete, visible: isEdit"><i></i><span data-bind="text: lang.lang.delete"></span></span>
						<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i><span data-bind="text: lang.lang.cancel"></span></span>
					</div>
					<!-- // Form actions END -->

				</div> <!-- End Widget-Body List -->
			</div>
			<!-- // Collapsible Widget END -->				
					
		</div>
	</div>
</script>
<script id="itemAssembly" type="text/x-kendo-template">
	<div class="container-960">
		<div id="example" class="k-content">
			
			<!-- Collapsible Widget -->			
			<div class="widget">
			    <div class="widget-head">
			    	<span class="btn btn-primary pull-right" 
							onclick="javascript:window.history.back()">X</span>
			        
			        <h4 class="heading glyphicons fins"><i></i> <span data-bind="text: lang.lang.assembly"></span></h4>							        	
			    </div>
			    <div class="widget-body">					
					
			    	<div class="row-fluid">
			    		<div class="span6 well">							
							<div class="row-fluid">
								<div class="span6">	
									<!-- Group -->
									<div class="control-group">							
										<label for="txtSKU"><span data-bind="text: lang.lang.code"></span> <span style="color:red">*</span></label>
				              			<input id="txtSKU" name="txtSKU" class="k-textbox"
					              				data-bind="value: obj.sku" 
					              				placeholder="e.g. ID0001" 
					              				required data-required-msg="required"
					              				style="width: 100%;" />
					              		<span data-bind="visible: isDuplicateNumber" style="color: red;"><span data-bind="text: lang.lang.duplicate_number"></span></span>
									</div>
									<!-- // Group END -->		
								</div>

								<div class="span6">	
									<!-- Group -->
									<div class="control-group">
										<label for="txtName"><span data-bind="text: lang.lang.items"></span> <span style="color:red">*</span></label>
					              		<input id="txtName" name="txtName" class="k-textbox" data-bind="value: obj.name" 
							              		placeholder="Items Name..." required data-required-msg="required"
							              		style="width: 100%;" />
									</div>
									<!-- // Group END -->	 			
								</div>								
							</div>

							<div class="row-fluid">
								<div class="span6">
									<!-- Group -->
									<div class="control-group">								
										<label for="txtOnhand"><span data-bind="text: lang.lang.status"></span><span style="color:red">*</span></label>
							            <input id="ddlStatus" name="ddlStatus" 
				              				data-role="dropdownlist"
						            		data-text-field="name"
			           						data-value-field="id"
			           						data-value-primitive="true" 
						            		data-bind="source: statusList, value: obj.status"
						            		data-option-label="(--- Select ---)"
						            		required data-required-msg="required" style="width: 100%;" />
									</div>																		
									<!-- // Group END -->										
								</div>

								<div class="span6">
									<input type="checkbox" data-bind="checked: obj.favorite" /> <span data-bind="text: lang.lang.favorite"></span>
								</div>															
							</div>							
						</div>
						<div class="span6">							
							<div class="row-fluid">
								<!-- Group -->
								<div class="control-group">								
									<label for="txtDescription"><span data-bind="text: lang.lang.description"></span></label>
						            <textarea id="txtDescription" cols="0" rows="2" class="k-textbox" 
										data-bind="value: obj.bill_to" style="width: 100%;"></textarea>
								</div>																		
								<!-- // Group END -->
							</div>

							<div class="row-fluid">
								<!-- Group -->
								<div class="control-group">								
									<label for="items"><span data-bind="text: lang.lang.select_item_for_assemply"></span></label>
						           
						            <input data-role="combobox"
						                   data-placeholder="Select Item..."
						                   data-value-primitive="true"
						                   data-auto-bind="false"
						                   data-text-field="name"
						                   data-value-field="id"
						                   data-bind="value: assembly_id,
						                              source: itemDS"
						                   style="width: 90%"/>

						            <button type="button" data-role="button" data-bind="click: addItem"><i class="icon-plus"></i></button>
								</div>																		
								<!-- // Group END -->
							</div>																											
						</div>
					</div>

					<br>

					<table class="table table-bordered table-primary table-striped table-vertical-center">
				        <thead>
				            <tr>
				            	<th width="5%"><span data-bind="text: lang.lang.no"></span></th>				                
				                <th width="20%"><span data-bind="text: lang.lang.items"></span></th>
				                <th><span data-bind="text: lang.lang.description"></span></th>
				                <th width="25%"><span data-bind="text: lang.lang.quantity"></span></th>
				                <th width="15%"><span data-bind="text: lang.lang.p"></span></th>
				                <th width="10%"><span data-bind="text: lang.lang.amount"></span></th>
				                <th width="1%"></th>
				            </tr>
				        </thead>
				        <tbody data-role="listview"
				        		data-auto-bind="false" 
				        		data-template="itemAssembly-row-template" 
				        		data-bind="source: assemblyDS"></tbody>				        
				    </table>

				    <br>

				    <div class="row-fluid">
					    <div class="span4 pull-right">
							<div class="well pull-right">
								សរុប៖	<strong data-bind="text: total"></strong>
							</div>							
						</div>
					</div>
					
					<br>											
							
					<!-- Form actions -->
					<div align="center">
						<span id="notification"></span>

						<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i><span data-bind="text: lang.lang.save"></span></span>
						<span class="btn btn-danger btn-icon glyphicons delete" data-bind="click: delete, visible: isEdit"><i></i><span data-bind="text: lang.lang.delete"></span></span>
						<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i><span data-bind="text: lang.lang.cancel"></span></span> </div>
					<!-- // Form actions END -->

				</div> <!-- End Widget-Body List -->
			</div>
			<!-- // Collapsible Widget END -->				
					
		</div>
	</div>
</script>
<script id="itemAssembly-row-template" type="text/x-kendo-tmpl">
	<tr>
		<td>
			<i class="icon-trash" data-bind="events: { click: removeItem }"></i>
			#:banhji.itemAssembly.assemblyDS.indexOf(data)+1#
		</td>		
		<td>
			<span data-bind="text: assembly[0].sku"></span>
			<span data-bind="text: assembly[0].name"></span>
		</td>
		<td>
			<span data-bind="text: assembly[0].description"></span>
		</td>
		<td>
			<input id="unit" name="unit" data-role="numerictextbox" 
					data-format="n0" data-min="1"
					data-bind="value: quantity, events: {change : changes}"
					required data-required-msg="required" style="width: 100px;" />

			<input data-role="dropdownlist"
				   data-option-label="(--- Select ---)"
                   data-auto-bind="false"
                   data-value-primitive="true"
                   data-text-field="measurement"
                   data-value-field="measurement_id"
                   data-bind="source: item_prices, value: measurement_id, events: {change: measurementChanges}"
                   style="width: 100px;" />
		</td>					
		<td>
			<input id="price" name="price" data-role="numerictextbox" 
					data-format="c" data-culture=#:currency[0].locale#
					data-bind="value: price, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" />
		</td>		
		<td class="right">
			<span data-format="n" 
					data-culture=#:currency[0].locale#
					data-bind="text: amount" 
					style="width: 100%;"></span> 						
		</td>		
	</tr>
</script>
<script id="priceList" type="text/x-kendo-template">
	<div class="container-960">		
		<div id="example" class="k-content">
			<!-- Collapsible Widget -->			
			<div class="widget">
			    <div class="widget-head">
			    	<span class="btn btn-primary pull-right" 
							onclick="javascript:window.history.back()">X</span>
			        
			        <h4 class="heading glyphicons usd"><i></i> Pricing</h4>							        	
			    </div>
			    <div class="widget-body">

			    	<div class="widget widget-heading-simple widget-body-simple">

			    		<!-- Widget Heading -->
						<div class="widget-head" style="font-size: large; font-weight: bold;">
							<span data-bind="text: obj.sku"></span>
							-
							<span data-bind="text: obj.name"></span>
						</div>
						<!-- // Widget Heading END -->
									
						<div class="widget-body">

							<!-- Row -->
							<div class="row-fluid">
								<div class="span3">
								
									<!-- Stats Widget -->
									<a href="" class="widget-stats widget-stats-gray widget-stats-1">
										<span class="glyphicons cart_in"><i></i><span class="txt">Weighted Avg Cost</span></span>
										<div class="clearfix"></div>
										<span class="count"><span data-format="n" data-bind="text: obj.cost" style="font-size: xx-large;"></span></span>
									</a>
									<!-- // Stats Widget END -->
									
								</div>
								<div class="span3">
								
									<!-- Stats Widget -->
									<a href="" class="widget-stats widget-stats-1">
										<span class="glyphicons cart_out"><i></i><span class="txt">Avg Price</span></span>
										<div class="clearfix"></div>
										<span class="count"><span data-format="n" data-bind="text: obj.price" style="font-size: xx-large;"></span></span>
									</a>
									<!-- // Stats Widget END -->
									
								</div>
								<div class="span2">
								
									<!-- Stats Widget -->
									<a href="" class="widget-stats widget-stats-gray widget-stats-2">
										<span class="count"><span data-format="n0" data-bind="text: obj.on_hand"></span></span>
										<span class="txt">On Hand</span>
									</a>
									<!-- // Stats Widget END -->
									
								</div>
								<div class="span2">
								
									<!-- Stats Widget -->
									<a href="" class="widget-stats widget-stats-2">
										<span class="count"><span data-format="n0" data-bind="text: on_po"></span></span>
										<span class="txt">On PO</span>
									</a>
									<!-- // Stats Widget END -->
									
								</div>
								<div class="span2">
								
									<!-- Stats Widget -->
									<a href="" class="widget-stats widget-stats-gray widget-stats-2">
										<span class="count"><span data-format="n0" data-bind="text: on_so"></span></span>
										<span class="txt">On SO</span>
									</a>
									<!-- // Stats Widget END -->
									
								</div>
								
							</div>
							<!-- // Row END -->
														
						</div>
					</div>

					<div id="priceList-window" data-role="window" data-visible="false" data-modal="true" data-resizable="false" data-iframe="true">				    	
						<table>
							<tr>
								<td>Price</td>
								<td>
									<input data-role="numerictextbox"		                   
					                   data-min="0"		                   
					                   data-bind="value: priceList.price" />
								</td>
							</tr>
							<tr>
								<td>Currency</td>
								<td>
									<input data-role="dropdownlist"
										   data-option-label="(--- Select ---)"
										   data-template="currency-list-tmpl"			                   
						                   data-value-primitive="true"
						                   data-text-field="code"
						                   data-value-field="locale"
						                   data-bind="value: priceList.locale,
						                              source: currencyDS" />
								</td>
							</tr>
							<tr>
								<td>Unit Price</td>
								<td>
									<input data-role="numerictextbox"		                   
					                   data-min="0"		                   
					                   data-bind="value: priceList.unit_value" />
								</td>
							</tr>
							<tr>
								<td>Unit</td>
								<td>
									<input data-role="dropdownlist"
										   data-option-label="(--- Select ---)"			                   
						                   data-value-primitive="true"
						                   data-text-field="name"
						                   data-value-field="id"
						                   data-bind="value: priceList.measurement_id,
						                              source: unitDS" />
								</td>
							</tr>
						</table>

						<br>

						<span class="btn btn-success btn-icon glyphicons ok_2" data-bind="click: save"><i></i>Save</span>
						<span class="btn btn-danger btn-icon glyphicons remove_2" data-bind="click: closeWindow"><i></i>Close</span>  
					</div>				

					<button class="btn btn-inverse" data-bind="click: openWindow"><i class="icon-plus icon-white"></i></button>
					Set New Price
					</br>
					<table class="table table-bordered table-condensed">
				        <thead>
				            <tr>	            	
				            	<th>Price</th>			            		                
				                <th>Unit Value</th>
				                <th>Unit Measurement</th>			                
				                <th></th>	                
				            </tr>
				        </thead>
				        <tbody data-template="priceList-template"
				        	data-auto-bind="false"			        	
				        	data-bind="source: dataSource"></tbody>
				    </table>

					<br>

					<table class="table table-bordered table-condensed">
				        <thead>
				            <tr>	            	
				            	<th>Date</th>
				            	<th>Type</th>	                
				                <th>Reference No</th>				               
				                <th>Quantity</th>
				                <th>Cost</th>
				                <th>Price</th>			                	                
				            </tr>
				        </thead>
				        <tbody data-template="priceList-movement-tmpl"
				        	data-auto-bind="false"
				        	data-pageable="true" 
				        	data-bind="source: recordDS"></tbody>
				    </table>
				    <div id="pager" class="k-pager-wrap"
			             data-role="pager" data-bind="source: recordDS"></div>					

				</div> <!-- End Widget-Body List -->
			</div>
			<!-- // Collapsible Widget END -->			
			
		</div>
	</div>
</script>
<script id="priceList-template" type="text/x-kendo-template">
    <tr>
    	<td>#=kendo.toString(price, "c", locale)#</td>    	
    	<td>#=unit_value#</td>
    	<td>#=measurement#</td>    	
    	<td>
    		<span data-bind="click: edit"><i class="icon-edit"></i> Edit</span>
    		|
    		<span data-bind="click: delete"><i class="icon-remove"></i> Delete</span>
    	</td>
    </tr>
</script>
<script id="priceList-movement-tmpl" type="text/x-kendo-tmpl">
    <tr>    	  	
    	<td>#=kendo.toString(new Date(invoice[0].issued_date), "dd-MM-yyyy")#</td>
    	<td>#=invoice[0].type#</td>
        <td>#=invoice[0].number#</td>
    	<td>#=kendo.toString(unit*movement, "n0")#</td>
    	<td>#=kendo.toString(cost*rate, "c", "locale")#</td>
    	<td>#=kendo.toString(price*rate, "c", "locale")#</td>  	
    </tr>
</script>
<script id="itemRecord" type="text/x-kendo-template">
	<div class="container-960">
		<div id="example" class="k-content">
			
			<!-- Collapsible Widget -->			
			<div class="widget">
			    <div class="widget-head">
			    	<span class="btn btn-primary pull-right" 
							onclick="javascript:window.history.back()">X</span>
			        
			        <h4 class="heading glyphicons retweet_2"><i></i> Item Record</h4>							        	
			    </div>
			    <div class="widget-body">

			    	<div class="widget widget-heading-simple widget-body-white">
					    <div class="widget-body">
					        <div class="innerL">

					            <div class="separator bottom"></div>
					            <div class="glyphicons glyphicon-large cargo">
				                	<i></i>
				                	<h4 data-bind="text: item.name"></h4>

					                Code៖ <span data-bind="text: item.sku"></span> <br>
					                Description៖​ <span data-bind="text: item.description"></span> <br>
					                Quantity៖ <span data-bind="text: item.description"></span> <br>					                
					                Weighted Average Cost៖ <span data-bind="text: item.cost"></span>
					                 
					            </div>

					        </div>
					    </div>
					</div>			
							
					<table class="table table-borderless table-condensed cart_total">						
						<tr>
							<td>Date <span style="color:red">*</span></td>
							<td>
								<input id="issuedDate" name="issuedDate"
									data-role="datepicker"
									data-format="dd-MM-yyyy"									
				                    data-bind="value: obj.issued_date"
				                   style="width: 100%"
				                   required data-required-msg="required">
							</td>
						</tr>
						<tr>
							<td>Reference</td>
							<td>
								<input data-role="combobox"
									   placeholder="Select Reference..."			                   
					                   data-value-primitive="true"
					                   data-text-field="number"
					                   data-value-field="id"
					                   data-bind="value: obj.reference_id,
					                              source: invoiceDS"					                   
					                   style="width: 100%" />
							</td>
						</tr>											
						<tr>
							<td>Supplier</td>
							<td>
								<input data-role="combobox"
									   placeholder="Select Supplier..."			                   
					                   data-value-primitive="true"
					                   data-text-field="company"
					                   data-value-field="id"
					                   data-bind="value: obj.contact_id,
					                              source: contactDS"					                   
					                   style="width: 100%" />
							</td>
						</tr>
						<tr>
							<td>Item <span style="color:red">*</span></td>
							<td>
								<input id="cbbItem" name="cbbItem" 
									   data-role="combobox"
									   placeholder="Select Item..."			                   
					                   data-value-primitive="true"
					                   data-text-field="name"
					                   data-value-field="id"
					                   data-bind="value: obj.item_id,
					                              source: itemDS,
					                              events:{change: itemChanges}"					                   
					                   style="width: 100%" 
					                   required data-required-msg="required" />
							</td>
						</tr>																	
						<tr>
							<td>Quantity <span style="color:red">*</span></td>
							<td>
								<input id="txtUnit" name="txtUnit"
								   data-role="numerictextbox"				                                      
				                   data-bind="value: obj.unit"
				                   required data-required-msg="required"
				                   style="width: 100%" />
							</td>
						</tr>											
						<tr>
							<td>Measurement <span style="color:red">*</span></td>
							<td>
								<input id="ddlUnit" name="ddlUnit" 
									   data-role="dropdownlist"
									   data-option-label="(--- Select ---)"			                   
					                   data-value-primitive="true"
					                   data-text-field="name"
					                   data-value-field="id"
					                   data-bind="value: obj.measurement_id,
					                              source: measurementDS"					                   
					                   required data-required-msg="required"
					                   style="width: 100%" />
							</td>
						</tr>											
						<tr>
							<td>Price <span style="color:red">*</span></td>
							<td>
								<input id="txtPrice" name="txtPrice"
								   data-role="numerictextbox"				                                      
				                   data-bind="value: obj.price"
				                   required data-required-msg="required"
				                   style="width: 100%" />
							</td>
						</tr>
						<tr>
							<td>Cash <span style="color:red">*</span></td>
							<td>
								<input id="txtAmount" name="txtAmount"
								   data-role="numerictextbox"				                                      
				                   data-bind="value: obj.amount"
				                   required data-required-msg="required"
				                   style="width: 100%" />
							</td>
						</tr>
						<tr>
							<td>Currency <span style="color:red">*</span></td>
							<td>
								<input id="ddlCurrency" name="ddlCurrency" 
									   data-role="dropdownlist"
									   data-option-label="(--- Select ---)"			                   
					                   data-value-primitive="true"
					                   data-text-field="code"
					                   data-value-field="id"
					                   data-bind="value: obj.currency_id,
					                              source: currencyDS"					                   
					                   style="width: 100%" 
					                   required data-required-msg="required" />
							</td>							
						</tr>
						<tr>
							<td>Memo</td>
							<td>
								<textarea id="txtDescription" cols="0" rows="2" class="k-textbox" 
										data-bind="value: obj.memo" style="width: 100%;"></textarea>
							</td>							
						</tr>												
					</table>

					<br>											
							
					<!-- Form actions -->
					<div align="center">
						<span id="notification"></span>

						<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i>Save</span>
						<span class="btn btn-danger btn-icon glyphicons delete" data-bind="click: delete, visible: isEdit"><i></i>Delete</span>
						<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i>Cancel</span>
					</div>
					<!-- // Form actions END -->

				</div> <!-- End Widget-Body List -->
			</div>
			<!-- // Collapsible Widget END -->				
					
		</div>
	</div>
</script>
<script id="itemAdjustment" type="text/x-kendo-template">
	<div class="container-960">
		<div id="example" class="k-content">
			
			<!-- Collapsible Widget -->			
			<div class="widget">
			    <div class="widget-head">
			    	<span class="btn btn-primary pull-right" 
							onclick="javascript:window.history.back()">X</span>
			        
			        <h4 class="heading glyphicons sort"><i></i> <span data-bind="text: lang.lang.item_adjustment"></span></h4>							        	
			    </div>
			    <div class="widget-body">
			    	<table>
			    		<tr>
			    			<td>
						    	<input data-role="dropdownlist"
								   data-option-label="(--- Category ---)"
				                   data-auto-bind="false"
				                   data-value-primitive="true"
				                   data-text-field="name"
				                   data-value-field="id"
				                   data-bind="value: category_id,
				                              source: categoryDS,			                              
				                              events: {
				                                change: categoryChanges
				                              }"/>
			            	</td>
			            	<td>
				            	<select data-role="multiselect"
						           data-placeholder="item group ..."
						           data-value-primitive="true"
						           data-text-field="name"
						           data-value-field="id"
						           data-bind="value: selectedItemGroup,
						                      source: itemGroupDS,
						                      enabled: isCategorySelected"
						           style="width: 200px;" 
						    	></select>
						    </td>
						    <td>
						    	<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button>
				          		|
								<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>
							</td>
						</tr>
					</table>

					<br>

			    	<div data-role="grid"
			    		data-auto-bind="false" 
			    		data-bind="source: lineDS" 
			    		data-toolbar="['excel']" 
			    		data-excel='{ fileName: "item_adjustment.xlsx" }'
			    		data-row-template="itemAdjustment-row-template" 
			    		data-columns='[			    			
			    			{ title: "No.", width:"5%" },
			    			{ title: "Description" },
			    			{ title: "Quantity" },
			    			{ title: "New Qty" },
			    			{ title: "Adjustment" }
			    		]'></div>

					<br>
					
					<div class="row-fluid">
						<div class="span5">				
							<table class="table table-borderless table-condensed cart_total">
								<tr>
									<td><span data-bind="text: lang.lang.counter"></span></td>
									<td>
										<input id="cbbReader" name="cbbReader" 
						    				   data-role="combobox"
							                   data-placeholder="select ..."
							                   data-auto-bind="false"
							                   data-value-primitive="true"
							                   data-filter="startswith"							                   
							                   data-min-length="3"							                   
							                   data-text-field="fullname"
							                   data-value-field="id"							                   
							                   data-bind="value: obj.contact_id,
							                              source: contactDS"
							                   required data-required-msg="required"
							                   style="width: 100%" />
									</td>
								</tr>					          
								<tr data-bind="visible: isEdit">				
									<td><span data-bind="text: lang.lang.number"></span></td>
									<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" readonly /></td>
								</tr>
								<tr>
									<td><span data-bind="text: lang.lang.segment"></span></td>
									<td>
										<select data-role="multiselect" 
											   data-bind="source: segmentItemDS, value: obj.segments, events:{change: segmentChanges}"
											   data-value-primitive="true"
											   data-value-field="id" 
											   data-text-field="name"
											   data-placeholder="(--- Select ---)"
											   style="width: 100%" /></select>
									</td>
								</tr>								
							</table>
						</div>

					    <div class="span2">
					    	
					    </div>

						<div class="span5">
							<table class="table table-borderless table-condensed cart_total">
								<tr>
									<td><span data-bind="text: lang.lang.date"></span></td>
									<td>
										<input id="issuedDate" name="issuedDate" 
												data-role="datepicker"
												data-format="dd-MM-yyyy" 
												data-bind="value: obj.issued_date" 
												required data-required-msg="required" />
									</td>
								</tr>
								<tr>
									<td><span data-bind="text: lang.lang.adjustment_account"></span></td>
									<td>
										<input data-role="dropdownlist"
											   data-option-label="(--- Select ---)"							                   
							                   data-value-primitive="true"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.account_id,
							                              source: accountDS"
							                   style="width: 100%;"
							           
									</td>
								</tr>																					
					            <tr>
					            	<td><span data-bind="text: lang.lang.memo"></span></td>
					    			<td>
					    				<textarea cols="0" rows="2" class="k-textbox" data-bind="value: obj.memo" style="width: 100%"></textarea>
					    			</td>
								</tr>								
							</table>           		          	
					    </div>
					</div>
					
					<!-- Form actions -->
					<div align="center">
						<span id="notification"></span>

						<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i><span data-bind="text: lang.lang.save"></span></span>
						<span class="btn btn-danger btn-icon glyphicons delete" data-bind="click: delete, visible: isEdit"><i></i><span data-bind="text: lang.lang.delete"></span></span>
						<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i><span data-bind="text: lang.lang.cancel"></span></span>
					</div>
					<!-- // Form actions END -->

				</div> <!-- End Widget-Body List -->
			</div>
			<!-- // Collapsible Widget END -->				
					
		</div>
	</div>
</script>
<script id="itemAdjustment-row-template" type="text/x-kendo-tmpl">
    <tr data-uid="#: uid #"> 
    	<td>
			<i class="icon-trash" data-bind="events: { click: removeRow }"></i>
			#:banhji.itemAdjustment.lineDS.indexOf(data)+1#			
		</td>   	
    	<td>#=description#</td>
    	<td align="right">#=kendo.toString(on_hand, "n")#</td>
    	<td align="right">
    		<input class="txt#=uid#" 
    			   data-role="numerictextbox"
                   data-format="n"
                   data-min="0"                   
                   data-bind="value: new_qty,
                   			  events:{ change: onChange }"
                   style="width: 100px;">    		
    	</td>
    	<td align="right">#=kendo.toString(unit, "n")#</td>
    </tr>
</script>
<script id="itemSetting" type="text/x-kendo-template">
	<span class="pull-right glyphicons no-js remove_2" 
			onclick="javascript:window.history.back()"><i></i></span>

	<h2><span data-bind="text: lang.lang.general_settings_inventory"></span></h2>

	<br>

	<div class="widget widget-tabs widget-tabs-double widget-tabs-vertical row-fluid row-merge widget-tabs-gray">

	    <!-- Tabs Heading -->
	    <div class="widget-head span3">
	        <ul>
	            <li class="active"><a href="#tab1-1" class="glyphicons bookmark" data-toggle="tab"><i></i><span class="strong">Category</span></a>
	            </li>
	            <li><a href="#tab2-1" class="glyphicons tag" data-toggle="tab"><i></i><span class="strong">Group</span></a>
	            </li>
	            <li><a href="#tab3-1" class="glyphicons ruller" data-toggle="tab"><i></i><span class="strong">Measurement</span></a>
	            </li>
	            <li><a href="#tab4-1" class="glyphicons certificate" data-toggle="tab"><i></i><span class="strong">Brand</span></a>
	            </li>	            
	        </ul>
	    </div>
	    <!-- // Tabs Heading END -->

	    <div class="widget-body span9">
	        <div class="tab-content">	            

	            <!-- Tab Category content -->
	            <div class="tab-pane active" id="tab1-1">
	            	<input data-role="dropdownlist"
            			   data-option-label="(--- Select ---)"            			   			                   
		                   data-value-primitive="true"
		                   data-auto-bind="false"
		                   data-text-field="name"
		                   data-value-field="id"
		                   data-bind="value: category_sub_of,
		                              source: subCategoryDS"/>

		            <div class="input-append">
					    <input class="span4" id="appendedInputButtons" type="text" placeholder="Code..." data-bind="value: category_code">
					    <input class="span4" id="appendedInputButtons" type="text" placeholder="New..." data-bind="value: category_name">
					    <input class="span4" id="appendedInputButtons" type="text" placeholder="abbr..." data-bind="value: category_abbr">					    
					    <button class="btn btn-default" type="button" data-bind="click: addCategory"><i class="icon-plus"></i></button>					  
					</div>
		            
	            	<table class="table table-bordered table-white">
	            		<thead>
	            			<tr>	            				            				
	            				<th>Code</th>	
	            				<th>Name</th>	
	            				<th>abbr</th>	            				
	            				<th></th>
	            			</tr>
	            		</thead>
	            		<tbody data-role="listview"	            				
		            			data-edit-template="itemSetting-edit-category-template"
				                data-template="itemSetting-category-template"
				                data-bind="source: categoryDS"></tbody>
	            	</table>		            
	            </div>
	            <!-- // Tab Category Type content END -->	            

	            <!-- Tab Item Group content -->
	            <div class="tab-pane" id="tab2-1">
	            	<input data-role="dropdownlist"
            			   data-option-label="(--- Select ---)"            			   			                   
		                   data-value-primitive="true"
		                   data-text-field="name"
		                   data-value-field="id"
		                   data-bind="value: item_group_category_id,
		                              source: categoryDS"/>

		            <input data-role="dropdownlist"
            			   data-option-label="(--- Select ---)"            			   			                   
		                   data-value-primitive="true"
		                   data-auto-bind="false"
		                   data-text-field="name"
		                   data-value-field="id"
		                   data-bind="value: item_group_sub_of,
		                              source: subItemGroupDS"/>

		            <div class="input-append">
					    <input class="span4" id="appendedInputButtons" type="text" placeholder="Code..." data-bind="value: item_group_code">	
					    <input class="span4" id="appendedInputButtons" type="text" placeholder="New Name..." data-bind="value: item_group_name">
					    <input class="span4" id="appendedInputButtons" type="text" placeholder="abbr..." data-bind="value: item_group_abbr">					    
					    <button class="btn btn-default" type="button" data-bind="click: addItemGroup"><i class="icon-plus"></i></button>					  
					</div>
		            
	            	<table class="table table-bordered table-white">
	            		<thead>
	            			<tr>	            					            				
	            				<th>Code</th>	
	            				<th>Name</th>	
	            				<th>abbr</th>	            				
	            				<th></th>
	            			</tr>
	            		</thead>
	            		<tbody data-role="listview"	            				
		            			data-edit-template="itemSetting-edit-item-group-template"
				                data-template="itemSetting-item-group-template"
				                data-bind="source: itemGroupDS"></tbody>
	            	</table>		            
	            </div>
	            <!-- // Tab Item Group Type content END -->

	            <!-- Tab Measurement content -->
	            <div class="tab-pane" id="tab3-1">
                	<div class="input-append">
					    <input class="span12" id="appendedInputButtons" type="text" placeholder="Measurement..." data-bind="value: measurement_name">					    
					    <button class="btn btn-default" type="button" data-bind="click: addMeasurement"><i class="icon-plus"></i></button>					  
					</div>
	            	<table class="table table-bordered table-white">
	            		<thead>
	            			<tr>
	            				<th>Measurement</th>	            				
	            				<th></th>
	            			</tr>
	            		</thead>
	            		<tbody data-role="listview"	            				
		            			data-edit-template="itemSetting-edit-measurement-template"
				                data-template="itemSetting-measurement-template"
				                data-bind="source: measurementDS"></tbody>
	            	</table>
	            </div>
	            <!-- // Tab Measurement content END -->

	            <!-- Tab Brand content -->
	            <div class="tab-pane" id="tab4-1">
	            	<input data-role="dropdownlist"
            			   data-option-label="(--- Measurement ---)"            			   			                   
		                   data-value-primitive="true"
		                   data-auto-bind="false"
		                   data-text-field="name"
		                   data-value-field="id"
		                   data-bind="value: brand_sub_of,
		                              source: subBrandDS"/>

		            <div class="input-append">
					    <input class="span4" id="appendedInputButtons" type="text" placeholder="Code..." data-bind="value: brand_code">
					    <input class="span4" id="appendedInputButtons" type="text" placeholder="New Brand..." data-bind="value: brand_name">
					    <input class="span4" id="appendedInputButtons" type="text" placeholder="abbr..." data-bind="value: brand_abbr">					    
					    <button class="btn btn-default" type="button" data-bind="click: addBrand"><i class="icon-plus"></i></button>					  
					</div>
		            
	            	<table class="table table-bordered table-white">
	            		<thead>
	            			<tr>
	            				<th>Code</th>
	            				<th>Name</th>	            				
	            				<th>abbr</th>	            				
	            				<th></th>
	            			</tr>
	            		</thead>
	            		<tbody data-role="listview"	            				
		            			data-edit-template="itemSetting-edit-brand-template"
				                data-template="itemSetting-brand-template"
				                data-bind="source: brandDS"></tbody>
	            	</table>		            
	            </div>
	            <!-- // Tab Brand Type content END -->	            

	        </div>
	    </div>

	</div>
</script>
<script id="itemSetting-category-template" type="text/x-kendo-tmpl">                    
    <tr>    	   	
   		<td>
    		#:code#
   		</td>
   		<td>
    		#:name#
   		</td>
   		<td>
    		#:abbr#
   		</td>   		
   		<td>   					        
	        #if(is_system=="0"){#
	        	<div class="edit-buttons">
		        	<a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
		        	<a class="k-button k-delete-button" href="\\#"><span class="k-icon k-delete"></span></a>
	        	</div>
	        #}#		   	
   		</td>
   	</tr>
</script>
<script id="itemSetting-edit-category-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <dl>
        	<dd>
                <input data-role="dropdownlist"
        			   data-option-label="(--- Select ---)"        			   		                   
	                   data-value-primitive="true"	                   
	                   data-text-field="name"
	                   data-value-field="id"
	                   data-bind="value: sub_of,
	                              source: subItemGroupDS"/>
            </dd>                
            <dd>
                <input type="text" class="k-textbox" data-bind="value:code" name="code" required="required" validationMessage="required" />
                <span data-for="code" class="k-invalid-msg"></span>
            </dd>
            <dd>
                <input type="text" class="k-textbox" data-bind="value:name" name="ProductName" required="required" validationMessage="required" />
                <span data-for="ProductName" class="k-invalid-msg"></span>
            </dd>
            <dd>
                <input type="text" class="k-textbox" data-bind="value:abbr" name="abbr" required="required" validationMessage="required" />
                <span data-for="abbr" class="k-invalid-msg"></span>
            </dd>               
        </dl>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>
<script id="itemSetting-item-group-template" type="text/x-kendo-tmpl">                    
    <tr>    	   	
   		<td>
    		#:code#
   		</td>
   		<td>
    		#:name#
   		</td>
   		<td>
    		#:abbr#
   		</td>   		
   		<td>	        
        	<div class="edit-buttons">
	        	<a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
	        	<a class="k-button k-delete-button" href="\\#"><span class="k-icon k-delete"></span></a>
        	</div>	        	   	
   		</td>
   	</tr>
</script>
<script id="itemSetting-edit-item-group-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <dl>
        	<dd>
                <input data-role="dropdownlist"
        			   data-option-label="(--- Select ---)"        			   		                   
	                   data-value-primitive="true"
	                   data-text-field="name"
	                   data-value-field="id"
	                   data-bind="value: category_id,
	                              source: categoryDS"/>
            </dd>
            <dd>
                <input data-role="dropdownlist"
        			   data-option-label="(--- Select ---)"        			   		                   
	                   data-value-primitive="true"	                   
	                   data-text-field="name"
	                   data-value-field="id"
	                   data-bind="value: sub_of,
	                              source: subItemGroupDS"/>
            </dd>                
            <dd>
                <input type="text" class="k-textbox" data-bind="value:code" name="code" required="required" validationMessage="required" />
                <span data-for="code" class="k-invalid-msg"></span>
            </dd>
            <dd>
                <input type="text" class="k-textbox" data-bind="value:name" name="ProductName" required="required" validationMessage="required" />
                <span data-for="ProductName" class="k-invalid-msg"></span>
            </dd>
            <dd>
                <input type="text" class="k-textbox" data-bind="value:abbr" name="abbr" required="required" validationMessage="required" />
                <span data-for="abbr" class="k-invalid-msg"></span>
            </dd>               
        </dl>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>
<script id="itemSetting-measurement-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>
    		 #:name#
   		</td>
   		<td>
   			<div class="edit-buttons">		        
	        	<a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
	        	<a class="k-button k-delete-button" href="\\#"><span class="k-icon k-delete"></span></a>		        
		   	</div>		   
   		</td>
   	</tr>
</script>
<script id="itemSetting-edit-measurement-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <dl>                
            <dd>
                <input type="text" class="k-textbox" data-bind="value:name" name="name" required="required" validationMessage="required" />
                <span data-for="name" class="k-invalid-msg"></span>
            </dd>               
        </dl>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>
<script id="itemSetting-brand-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>
    		 #:code#
   		</td>
   		<td>
    		 #:name#
   		</td>
   		<td>
    		 #:abbr#
   		</td>
   		<td>
   			<div class="edit-buttons">		        
	        	<a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
	        	<a class="k-button k-delete-button" href="\\#"><span class="k-icon k-delete"></span></a>		        
		   	</div>		   
   		</td>
   	</tr>
</script>
<script id="itemSetting-edit-brand-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <dl>
        	<dd>
                <input data-role="dropdownlist"
        			   data-option-label="(--- Select ---)"        			   		                   
	                   data-value-primitive="true"	                   
	                   data-text-field="name"
	                   data-value-field="id"
	                   data-bind="value: sub_of,
	                              source: subBrandDS"/>
            </dd>                
            <dd>
                <input type="text" class="k-textbox" data-bind="value:name" name="name" required="required" validationMessage="required" />
                <span data-for="name" class="k-invalid-msg"></span>
            </dd>
            <dd>
                <input type="text" class="k-textbox" data-bind="value:abbr" name="abbr" required="required" validationMessage="required" />
                <span data-for="abbr" class="k-invalid-msg"></span>
            </dd>               
        </dl>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>
<script id="itemReportCenter" type="text/x-kendo-template">
	<h2>Inventory Reports</h2>
	<br>

	<div class="row-fluid">
		<div class="span6">
			<h4>Inventory Position Analysis</h4>
			<div class="well margin-none" style="height: 150px;">
				Description here...
				<ul>					
	  				<li><a href='#/inventory_position_summary'>Inventory Position Summary</a></li> 
	  				<li><a href='#/inventory_position_detail'>Inventory Position Detail</a></li>
	  				<li><a href='#/inventory_sale_by_item'>Inventory Sale by Item Analysis</a></li> 
	  				<li><a href='#/inventory_turnover_list'>Inventory Turnover List</a></li>
	  				<li><a href='#/inventory_list'>Inventory List</a></li> 
				</ul>
			</div>
		</div>		
		<div class="span6">
			<h4>Inventory Movement Reports</h4>
			<div class="well margin-none" style="height: 150px;">
				Description here...
				<ul>
					<li><a href='#/inventory_movement_summary'>Inventory Movement Summary</a></li>
	  				<li><a href='#/inventory_movement_detail'>Inventory Movement Detail</a></li>	  	
					<li><a href='#/inventory_purchase_by_vendor_summary'>Purchase By Supplier Summary</a></li>
	  				<li><a href='#/inventory_purchase_by_vendor_detail'>Purchase By Supplier Detail</a></li>
	  								
				</ul>
			</div>
		</div>				
	</div>

	<p class="separator text-center"><i class="icon-ellipsis-horizontal icon-3x"></i></p>
</script>
<script id="inventoryPositionSummary" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">

				<div class="box-generic hidden-print">
	            	<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>	            	
	                
	               	<input data-role="datepicker"
	                   data-format="dd-MM-yyyy"
	                   data-parse-formats="yyyy-MM-dd"
	                   data-bind="value: as_of"
	                   placeholder="As of ..." />	                    	            	
	          		
	          		<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button>
	          		|
					<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>						          		
	            </div>

	            <br>

	            <div align="center">
					<h3>Inventory Position Summary</h3>
					
					<span data-bind="text: strDate"></span>														
				</div>

				<br>			

				<div data-role="grid"
					 data-column-menu="true"
					 data-groupable="true"
					 data-row-template="inventory-position-summary-row-template"
		             data-bind="source: dataSource"
					 data-toolbar="['excel']"
					 data-excel="{
		                fileName: 'inventory_position_summary.xlsx'
		             }"		             		             	                 	                 
	                 data-columns="[
	                    { 'title': 'SKU' },
	                    { 'title': 'Item' },
	                    { 'field': 'item_group_id', 'title': 'Group' },
	                    { 'field': 'category_id', 'title': 'Category' },
	                    { 'title': 'On Hand' },
	                    { 'title': 'On PO' },
	                    { 'title': 'On SO' },
	                    { 'title': 'Avg Cost' },
	                    { 'title': 'Cost' },
	                    { 'title': 'Avg Price' }
	                 ]"></div>

			</div>
		</div>
	</div>
</script>
<script id="inventory-position-summary-row-template" type="text/x-kendo-tmpl">
    <tr data-uid="#: uid #">
        <td>#=sku#</td>
        <td>#=name#</td>
        <td>#=item_group.length>0?item_group[0].name:''#</td>
        <td>#=category.length>0?category[0].name:''#</td>        
        <td align="right">#=kendo.toString(on_hand, "n0")#</td>
        <td align="right">#=kendo.toString(on_po, "n0")#</td>
        <td align="right">#=kendo.toString(on_so, "n0")#</td>
        <td align="right">#=kendo.toString(cost, "c", banhji.institute.locale)#</td>
        <td align="right">#=kendo.toString(on_hand*cost, "c", banhji.institute.locale)#</td>
        <td align="right">#=kendo.toString(price_avg, "c", banhji.institute.locale)#</td>
   </tr>
</script>
<script id="inventoryPositionDetail" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">

				<div class="box-generic hidden-print">
	            	<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

	            	<input data-role="dropdownlist"                   
	                   data-value-primitive="true"
	                   data-text-field="text"
	                   data-value-field="value"
	                   data-bind="value: sorter,
	                              source: sortList,                              
	                              events: { change: sorterChanges }" />
	                                           
	                <input data-role="datepicker"	                       
	                   data-format="dd-MM-yyyy"
	                   data-parse-formats="yyyy-MM-dd"
	                   data-bind="value: sdate"
	                   placeholder="from ..." />
	                
	               	<input data-role="datepicker"
	                   data-format="dd-MM-yyyy"
	                   data-parse-formats="yyyy-MM-dd"
	                   data-bind="value: edate"
	                   placeholder="to ..." />	                    	            	
	          		
	          		<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button>
	          		|
					<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>						          		
	            </div>

	            <br><br>

	            <div align="center">
					<h3>Inventory Position Detail</h3>
					
					<span data-bind="text: strDate"></span>														
				</div>				

				<div data-role="grid"
					 data-column-menu="true"					 
					 data-row-template="inventory-position-detail-row-template"
		             data-bind="source: dataSource"
					 data-toolbar="['excel']"
					 data-excel="{
		                fileName: 'inventory_position_detail.xlsx'
		             }"		             		             	                 	                 
	                 data-columns="[
	                    { 'field': 'issued_date', 'title': 'Date' },
	                    { 'title': 'Reference' },	                    
	                    { 'field': 'item_id','title': 'Item' },
	                    { 'title': 'Qty' },
	                    { 'title': 'Price' },	                    
	                    { 'title': 'On Hand' },	                    
	                    { 'title': 'Weighted Avg Cost' },
	                    { 'title': 'Cost' }	                    
	                 ]"></div>

			</div>
		</div>
	</div>
</script>
<script id="inventory-position-detail-row-template" type="text/x-kendo-tmpl">
    <tr data-uid="#: uid #">
        <td>#=kendo.toString(invoice.length>0?invoice[0].issued_date:"", "dd-MM-yyyy")#</td>
        <td><a href="\#/#=invoice.length>0?invoice[0].type:''#/#=id#"><i></i> #=invoice.length>0?invoice[0].number:''#</a></td>        
        <td>#=item[0].sku# #=item[0].name#</td>               
        <td align="right">#=unit#</td>
        <td align="right">#=kendo.toString(price, "c", banhji.institute.locale)#</td>
        <td align="right">#=on_hand#</td>         
        <td align="right">#=kendo.toString(cost, "c", banhji.institute.locale)#</td>
        <td align="right">#=kendo.toString(on_hand * cost, "c", banhji.institute.locale)#</td>        
   </tr>
</script>
<script id="inventorySaleByItem" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">

				<div class="box-generic hidden-print">
	            	<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

	            	<input data-role="dropdownlist"                   
	                   data-value-primitive="true"
	                   data-text-field="text"
	                   data-value-field="value"
	                   data-bind="value: sorter,
	                              source: sortList,                              
	                              events: { change: sorterChanges }" />
	                                           
	                <input data-role="datepicker"	                       
	                   data-format="dd-MM-yyyy"
	                   data-parse-formats="yyyy-MM-dd"
	                   data-bind="value: sdate"
	                   placeholder="from ..." />
	                
	               	<input data-role="datepicker"
	                   data-format="dd-MM-yyyy"
	                   data-parse-formats="yyyy-MM-dd"
	                   data-bind="value: edate"
	                   placeholder="to ..." />	                    	            	
	          		
	          		<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button>
	          		|
					<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>						          		
	            </div>

	            <br><br>

	            <div align="center">
					<h3>Inventory Sale By Item Analysis</h3>
					
					<span data-bind="text: strDate"></span>														
				</div>				

				<div data-role="grid"
					 data-column-menu="true"
					 data-groupable="true"					 
					 data-row-template="inventory-sale-by-item-row-template"
		             data-bind="source: dataSource"
					 data-toolbar="['excel']"
					 data-excel="{
		                fileName: 'inventory_sale_by_item_analysis.xlsx'
		             }"		             		             	                 	                 
	                 data-columns="[
	                    { 'title': 'SKU' },
	                    { 'title': 'Item' },	                    
	                    { 'field': 'item_group_id', 'title': 'Group' },
	                    { 'field': 'category_id','title': 'Category' },
	                    { 'title': 'Qty Sold' },	                    	                    
	                    { 'title': 'W.Avg Price' },	                    	                    
	                    { 'title': 'Sale Revenue' },
	                    { 'title': 'W.Avg Cost' },
	                    { 'title': 'Gross Profit' },
	                    { 'title': 'Margin%' }	                    
	                 ]"></div>
			</div>
		</div>
	</div>
</script>
<script id="inventory-sale-by-item-row-template" type="text/x-kendo-tmpl">
    <tr data-uid="#: uid #">
        <td>#=sku#</td>          
        <td>#=name#</td>
        <td>#=item_group.length>0?item_group[0].name:''#</td>
        <td>#=category.length>0?category[0].name:''#</td>       
        <td align="right">#=kendo.toString(qty, "n0", banhji.institute.locale)#</td>         
        <td align="right">#=kendo.toString(price, "c", banhji.institute.locale)#</td>
        <td align="right">
        	#amount = qty * price#
        	#=kendo.toString(amount, "c", banhji.institute.locale)#
        </td>
        <td align="right">#=kendo.toString(cost, "c", banhji.institute.locale)#</td>
        <td align="right">
        	#margin = (price-cost)*qty#
        	#=kendo.toString(margin, "c", banhji.institute.locale)#
        </td>
        <td align="right">#=kendo.toString(margin/amount, "p")#</td>        
   </tr>
</script>
<script id="inventoryTurnoverList" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">

				<div class="box-generic hidden-print">
	            	<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>	            	
	                                           
	                <input data-role="datepicker"	                       
	                   data-format="dd-MM-yyyy"
	                   data-parse-formats="yyyy-MM-dd"
	                   data-bind="value: as_of"
	                   placeholder="from ..." />	                                   	            	
	          		
	          		<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button>
	          		|
					<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>						          		
	            </div>

	            <br><br>

	            <div align="center">
					<h3>Inventory Turnover List</h3>					
					<span data-bind="text: strDate"></span>														
				</div>				

				<div data-role="grid"
					 data-column-menu="true"
					 data-groupable="true"					 				 
					 data-row-template="inventoryTurnoverList-row-template"
		             data-bind="source: dataSource"
					 data-toolbar="['excel']"
					 data-excel="{
		                fileName: 'inventory_turnover_list.xlsx'
		             }"		             		             	                 	                 
	                 data-columns="[
	                    { 'title': 'SKU' },
	                    { 'title': 'Item' },	                    
	                    { 'field': 'item_group_id', 'title': 'Group' },
	                    { 'field': 'category_id', 'title': 'Category' },
	                    { 'title': 'Cost' },	                    	                    
	                    { 'title': 'Days' }	                                        
	                 ]"></div>
			</div>
		</div>
	</div>
</script>
<script id="inventoryTurnoverList-row-template" type="text/x-kendo-tmpl">
    <tr data-uid="#: uid #">
        <td>#=sku#</td>          
        <td>#=name#</td>
        <td>#=item_group.length>0?item_group[0].name:''#</td>
        <td>#=category.length>0?category[0].name:''#</td>       
        <td align="right">#=kendo.toString(cost, "c", banhji.institute.locale)#</td>         
        <td align="right">#=kendo.toString(days, "n0")#</td>             
   	</tr>
</script>
<script id="inventoryList" type="text/x-kendo-template">
	<div class="container-fluid">
		<br>
		<span class="pull-right glyphicons no-js remove_2" 
			onclick="javascript:window.history.back();"><i></i></span>

		<h3>Inventory</h3>

		<div class="box-generic">
		    <!-- //Tabs Heading -->
		    <div class="tabsbar">
		        <ul>
		            <li class="glyphicons star active"><a href="#tab1" data-toggle="tab" data-bind="click: searchFavorite"><i></i> Favorite </a>
		            </li>
		            <li class="glyphicons list"><a href="#tab2" data-toggle="tab"><i></i> Category </a>
		            </li>
		            <li class="glyphicons building"><a href="#tab3" data-toggle="tab"><i></i> Vendor </a>
		            </li>		            		            	            
		        </ul>
		    </div>
		    <!-- // Tabs Heading END -->

		    <div class="tab-content">
		        <!-- // FavoriteTab content -->
		        <div class="tab-pane active" id="tab1">
		        		
		        </div>
		        <!-- // Favorite Tab content END -->

		        <!-- // Category Tab content -->
		        <div class="tab-pane" id="tab2">		            
	                <input id="categories" data-bind="value: category_id" />	                
	                <input id="itemGroups" data-bind="value: item_group_id" disabled="disabled" />
            	</div>
		        <!-- // Category Tab content END -->

		        <!-- // Vendor Tab content -->
		        <div class="tab-pane" id="tab3">
		            <div data-role="listview"
		            	 data-auto-bind="false"
		            	 data-selectable="true"			                 
		                 data-template="inventoryList-vendor-template"
		                 data-bind="source: vendorDS, events:{ change: vendorChanges}"></div>
		        </div>
		        <!-- // Vendor Tab content END -->		        
		    </div>

		    <br>

		    <div class="input-append">
			    <input class="col-md-2" id="appendedInputButtons" 
			    	type="text" placeholder="Items ..." 
			    	data-bind="value: searchField, events:{ change: search }">

			    <button class="btn btn-default" data-bind="click: search"><i class="icon-search"></i> Search</button>				    
			</div>
		</div>
		
		<br>

		<table class="table table-bordered">
	        <thead>
	            <tr>
	                <th>SKU</th>
	                <th>Items</th>
	                <th>Description</th>
	                <th>Qty</th>	                
	                <th>Price</th>	                
	            </tr>
	        </thead>
	        <tbody data-template="inventoryList-template"
	        	data-pageable="true" 
	        	data-bind="source: dataSource"></tbody>
	    </table>
	    <div id="pager" class="k-pager-wrap"
	    	 data-auto-bind="false"
             data-role="pager" data-bind="source: dataSource"></div>        

	</div>
</script>
<script id="inventoryList-template" type="text/x-kendo-template">
    <tr>
    	<td>#=sku#</td>
    	<td>#=name#</td>
    	<td>#=description#</td>
    	<td>
    		#if(on_hand<=order_point){#    		
    			<span class="badge badge-danger">#=kendo.toString(on_hand, "n0")#</span>
    		#}else{#
    			<span class="badge badge-info">#=kendo.toString(on_hand, "n0")#</span>
    		#}#

    		#=measurement==null?"":measurement#
    	</td>    	
    	<td>
    		#for(var i=0; i<item_prices.length; i++) {#
    			#if(item_prices[i].price>0){#
    				<span class="badge badge-inverse"> #=kendo.toString(item_prices[i].price, "c", item_prices[i].currency[0].locale)# </span> / #=item_prices[i].measurement# 
    			#}else{#
    				<span class="badge badge-danger"> #=kendo.toString(item_prices[i].price, "c", item_prices[i].currency[0].locale)# </span> / #=item_prices[i].measurement#
    			#}#
    			<br>    			    						 
			#}#
    	</td>    		
    </tr>
</script>
<script id="inventoryList-vendor-template" type="text/x-kendo-template">
    <div class="product-tmpl">
        <img src="#=image_url#" alt="#: company # image" />
        <h3>#:company#</h3>        
    </div>    
</script>
<style>
    #listView {
        padding: 10px 5px;
        margin-bottom: -1px;
        min-height: 510px;
    }
    .product-tmpl {
        float: left;
        position: relative;
        width: 111px;
        height: 170px;
        margin: 0 5px;
        padding: 0;
    }
    .product-tmpl img {
        width: 110px;
        height: 110px;
    }
    .product-tmpl h3 {
        margin: 0;
        padding: 3px 5px 0 0;
        max-width: 96px;
        overflow: hidden;
        line-height: 1.1em;
        font-size: .9em;
        font-weight: normal;
        text-transform: uppercase;
        color: #999;
    }
    .product-tmpl p {
        visibility: hidden;
    }
    .product-tmpl:hover p {
        visibility: visible;
        position: absolute;
        width: 110px;
        height: 110px;
        top: 0;
        margin: 0;
        padding: 0;
        line-height: 110px;
        vertical-align: middle;
        text-align: center;
        color: #fff;
        background-color: rgba(0,0,0,0.75);
        transition: background .2s linear, color .2s linear;
        -moz-transition: background .2s linear, color .2s linear;
        -webkit-transition: background .2s linear, color .2s linear;
        -o-transition: background .2s linear, color .2s linear;
    }
    .k-listview:after {
        content: ".";
        display: block;
        height: 0;
        clear: both;
        visibility: hidden;
    }
</style>
<script id="inventoryMovementSummary" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">

				<div class="box-generic hidden-print">
	            	<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

	            	<input data-role="dropdownlist"                   
	                   data-value-primitive="true"
	                   data-text-field="text"
	                   data-value-field="value"
	                   data-bind="value: sorter,
	                              source: sortList,                              
	                              events: { change: sorterChanges }" />
	                                           
	                <input data-role="datepicker"	                       
	                   data-format="dd-MM-yyyy"
	                   data-parse-formats="yyyy-MM-dd"
	                   data-bind="value: sdate"
	                   placeholder="from ..." />
	                
	               	<input data-role="datepicker"
	                   data-format="dd-MM-yyyy"
	                   data-parse-formats="yyyy-MM-dd"
	                   data-bind="value: edate"
	                   placeholder="to ..." />	                    	            	
	          		
	          		<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button>
	          		|
					<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>						          		
	            </div>	            

	            <div align="center">
					<h3>Inventory Movement Summary</h3>
					
					<span data-bind="text: strDate"></span>														
				</div>

				<br>				

				<div data-role="grid"
					 data-column-menu="true"
					 data-groupable="true"
					 data-sortable="true"					 
					 data-row-template="inventory-movement-summary-row-template"
		             data-bind="source: dataSource"
					 data-toolbar="['excel']"
					 data-excel="{
		                fileName: 'inventory_movement_summary.xlsx'
		             }"		             		             	                 	                 
	                 data-columns="[
	                 	{ 'field': 'sku', 'title': 'SKU' },	                    
	                    { 'field': 'name', 'title': 'Item' },
	                    { 'field': 'item_group_id', 'title': 'Group' },
	                    { 'field': 'category_id', 'title': 'Category' },
	                    { 'field': 'begining', 'title': 'Begining' },
	                    { 'field': 'purchase', 'title': 'Purchase' },	                    
	                    { 'field': 'sale', 'title': 'Sale' },
	                    { 'field': 'adjustment', 'title': 'Adjustment' },	                    
	                    { 'field': 'balance', 'title': 'Balance' }              
	                 ]"></div>

			</div>
		</div>
	</div>
</script>
<script id="inventory-movement-summary-row-template" type="text/x-kendo-tmpl">
    <tr data-uid="#: uid #">        
        <td>#=sku#</td>        
        <td>#=name#</td>
        <td>#=item_group.length>0?item_group[0].name:''#</td>
        <td>#=category.length>0?category[0].name:''#</td>         
        <td align="right">#=kendo.toString(begining, "n0")#</td>         
        <td align="right">#=kendo.toString(purchase, "n0")#</td>
        <td align="right">#=kendo.toString(sale, "n0")#</td>
        <td align="right">#=kendo.toString(adjustment, "n0")#</td>
        <td align="right">#=kendo.toString(((begining + purchase) - sale) + adjustment, "n0")#</td>        
   </tr>
</script>
<script id="inventoryMovementDetail" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">

				<div class="box-generic hidden-print">
	            	<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

	            	<input data-role="dropdownlist"                   
	                   data-value-primitive="true"
	                   data-text-field="text"
	                   data-value-field="value"
	                   data-bind="value: sorter,
	                              source: sortList,                              
	                              events: { change: sorterChanges }" />
	                                           
	                <input data-role="datepicker"	                       
	                   data-format="dd-MM-yyyy"
	                   data-parse-formats="yyyy-MM-dd"
	                   data-bind="value: sdate"
	                   placeholder="from ..." />
	                
	               	<input data-role="datepicker"
	                   data-format="dd-MM-yyyy"
	                   data-parse-formats="yyyy-MM-dd"
	                   data-bind="value: edate"
	                   placeholder="to ..." />	                    	            	
	          		
	          		<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button>
	          		|
					<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>						          		
	            </div>

	            <div align="center">
					<h3>Inventory Movement Detail</h3>
					
					<span data-bind="text: strDate"></span>														
				</div>

				<br>				

				<div data-role="grid"
					 data-column-menu="true"
					 data-groupable="true"
					 data-sortable="true"					 
					 data-row-template="inventory-movement-detail-row-template"
		             data-bind="source: dataSource"
					 data-toolbar="['excel']"
					 data-excel="{
		                fileName: 'inventory_movement_detail.xlsx'
		             }"		             		             	                 	                 
	                 data-columns="[
	                 	{ 'field': 'invoice[0].issued_date', 'title': 'Date' },
	                 	{ 'field': 'invoice[0].type', 'title': 'Type' },
	                 	{ 'field': 'invoice[0].number', 'title': 'Reference' },	                 	                 
	                    { 'field': 'item[0].sku', 'title': 'Item' },	                    	                                  
	                    { 'field': 'unit', 'title': 'Quantity' },
	                    { 'field': 'cost', 'title': 'Cost' },
	                    { 'field': 'price', 'title': 'Price' },              
	                 ]"></div>

			</div>
		</div>
	</div>
</script>
<script id="inventory-movement-detail-row-template" type="text/x-kendo-tmpl">
    <tr data-uid="#: uid #">        
        <td>#=kendo.toString(invoice.length>0?new Date(invoice[0].issued_date):'', "dd-MM-yyyy")#</td>
        <td>#=invoice.length>0?invoice[0].type:''#</td>        
        <td><a href="\#/#=invoice.length>0?invoice[0].type:''#/#=id#"><i></i> #=invoice.length>0?invoice[0].number:''#</a></td>        
        <td>#=item[0].sku# #=item[0].name#</td>             
        <td align="right">#=kendo.toString(unit * movement, "n0")#</td>
        <td align="right">
        	#if(invoice.length>0){#	        	
	        	#if(invoice[0].type==='Purchase'){#
	        		#=kendo.toString(price, "c", banhji.institute.locale)#
	        	#}else if(invoice[0].type==='Invoice' || invoice[0].type==='Receipt'){#
	        		#=kendo.toString(cost, "c", banhji.institute.locale)#
	        	#}#
	        #}#
        </td>
        <td align="right">
        	#if(invoice.length>0){#
	        	#if(invoice[0].type==='Invoice'){#
	        		#=kendo.toString(price, "c", banhji.institute.locale)#
	        	#}#
        	#}#
        </td>                
   </tr>
</script>
<script id="inventoryPurchaseByVendorSummary" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">

				<div class="box-generic hidden-print">
	            	<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

	            	<input data-role="dropdownlist"                   
	                   data-value-primitive="true"
	                   data-text-field="text"
	                   data-value-field="value"
	                   data-bind="value: sorter,
	                              source: sortList,                              
	                              events: { change: sorterChanges }" />
	                                           
	                <input data-role="datepicker"	                       
	                   data-format="dd-MM-yyyy"
	                   data-parse-formats="yyyy-MM-dd"
	                   data-bind="value: sdate"
	                   placeholder="from ..." />
	                
	               	<input data-role="datepicker"
	                   data-format="dd-MM-yyyy"
	                   data-parse-formats="yyyy-MM-dd"
	                   data-bind="value: edate"
	                   placeholder="to ..." />	                    	            	
	          		
	          		<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button>
	          		|
					<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>						          		
	            </div>
	            
	            <div align="center">
					<h3>Purchase By Supplier Summary</h3>
					
					<span data-bind="text: strDate"></span>														
				</div>

				<br>				

				<div data-role="grid"
					 data-column-menu="true"					 
					 data-sortable="true"					 
					 data-row-template="inventoryPurchaseByVendorSummary-row-template"
		             data-bind="source: dataSource"
					 data-toolbar="['excel']"
					 data-excel="{
		                fileName: 'inventory_movement_detail.xlsx'
		             }"		             		             	                 	                 
	                 data-columns="[	                 	            
	                    { 'field': 'name', 'title': 'Supplier' },	                                                     
	                    { 'field': 'unit', 'title': 'Quantity' },
	                    { 'field': 'amount', 'title': 'Amount' }              
	                 ]"></div>

			</div>
		</div>
	</div>
</script>
<script id="inventoryPurchaseByVendorSummary-row-template" type="text/x-kendo-tmpl">
    <tr data-uid="#: uid #">        
        <td>#=name#</td>        
        <td align="right">#=kendo.toString(unit, "n0")#</td>
        <td align="right">#=kendo.toString(amount, "c", banhji.institute.locale)#</td>        
   </tr>
</script>
<script id="inventoryPurchaseByVendorDetail" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">

				<div class="box-generic hidden-print">
	            	<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

	            	<input data-role="dropdownlist"                   
	                   data-value-primitive="true"
	                   data-text-field="text"
	                   data-value-field="value"
	                   data-bind="value: sorter,
	                              source: sortList,                              
	                              events: { change: sorterChanges }" />
	                                           
	                <input data-role="datepicker"	                       
	                   data-format="dd-MM-yyyy"
	                   data-parse-formats="yyyy-MM-dd"
	                   data-bind="value: sdate"
	                   placeholder="from ..." />
	                
	               	<input data-role="datepicker"
	                   data-format="dd-MM-yyyy"
	                   data-parse-formats="yyyy-MM-dd"
	                   data-bind="value: edate"
	                   placeholder="to ..." />	                    	            	
	          		
	          		<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button>
	          		|
					<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>						          		
	            </div>
	            
	            <div align="center">
					<h3>Purchase By Supplier Detail</h3>
					
					<span data-bind="text: strDate"></span>														
				</div>

				<br>				

				<div data-role="grid"
					 data-column-menu="true"					 
					 data-sortable="true"					 
					 data-row-template="inventoryPurchaseByVendorDetail-row-template"
		             data-bind="source: dataSource"
					 data-toolbar="['excel']"
					 data-excel="{
		                fileName: 'inventory_movement_detail.xlsx'
		             }"		             		             	                 	                 
	                 data-columns="[
	                 	{ 'field': 'issued_date', 'title': 'Date' },
	                 	{ 'field': 'name', 'title': 'Supplier' },
	                 	{ 'field': 'number', 'title': 'Number' },	                 	             	            
	                   	{ 'field': 'item_id', 'title': 'Item' },
	                   	{ 'field': 'unit', 'title': 'Qty' },
	                   	{ 'field': 'price', 'title': 'Price' },                                                    
	                    { 'field': 'amount', 'title': 'Amount' }              
	                 ]"></div>

			</div>
		</div>
	</div>
</script>
<script id="inventoryPurchaseByVendorDetail-row-template" type="text/x-kendo-tmpl">
    <tr data-uid="#: uid #">        
        <td>#=kendo.toString(issued_date, "dd-MM-yyyy")#</td>
        <td>#=name#</td>
        <td><a href="\#/#=type#/#=id#"><i></i> #=number#</a></td>
        <td>#=item[0].name#</td>        
        <td align="right">#=kendo.toString(unit, "n0", banhji.institute.locale)#</td>
        <td align="right">#=kendo.toString(price, "c0", banhji.institute.locale)#</td>
        <td align="right">#=kendo.toString(amount, "c0", banhji.institute.locale)#</td>        
   </tr>
</script>

<!-- ***************************
 *	Electricity Section       *
**************************** -->
<script id="eDashBoard" type="text/x-kendo-template">
	<div class="container-fluid menu-hidden sidebar-hidden-phone fluid menu-left">
		<h1>ទំព័រអគ្គីសនី</h1>	
		<div class="row-fluid row-merge border-top">
			<div class="span4">
				<div class="innerAll padding-bottom-none-phone">
					<a href="" class="widget-stats widget-stats-primary widget-stats-4">
						<span class="txt">Balance</span>
						<span class="count" style="font-size: 35px;" data-bind="text: balance"></span>
						<span class="glyphicons coins"><i></i></span>
						<div class="clearfix"></div>
						<i class="icon-play-circle"></i>
					</a>
				</div>
			</div>
			<div class="span4">
				<div class="innerAll padding-bottom-none-phone">
					<a href="" class="widget-stats widget-stats-inverse widget-stats-4">
						<span class="txt">Deposit</span>
						<span class="count" style="font-size: 35px;" data-bind="text: deposit"></span>
						<span class="glyphicons credit_card"><i></i></span>
						<div class="clearfix"></div>
						<i class="icon-play-circle"></i>
					</a>
				</div>
			</div>			
			<div class="span4">
				<div class="innerAll padding-bottom-none-phone">
					<a href="" class="widget-stats widget-stats-gray widget-stats-4">
						<span class="txt">Customer</span>
						<span class="count"​><span data-bind="text: activeCustomer"></span> <span>នាក់</span></span> 
						<span class="glyphicons user"><i></i></span>
						<div class="clearfix"></div>
						<i class="icon-play-circle"></i>
					</a>
				</div>
			</div>			
		</div>

		<div class="row-fluid">			
			<div class="span8">
				<div class="heading-buttons">
					<h2 class="heading pull-left"><i class="icon-bar-chart icon-fixed-width text-primary"></i> លក់ប្រចាំខែ</h2>
					
					<div class="clearfix"></div>
				</div>

				<div class="innerLR innerT">			
					<div id="esale-graph" style="height: 150px;"></div>
				</div>
			</div>

			<div class="span4">
				<div class="widget widget-body-white">
					<div class="widget-head"><h4 class="heading strong text-uppercase">ស្ថានភាពអតិថិជន</h4></div>
					<div class="widget-body padding-none">
						<table class="table table-striped table-vertical-center table-condensed margin-none">
							<tbody>
								<tr>									
									<td class="text-primary border-none">ផ្អាកប្រើប្រាស់</td>
									<td class="text-right strong">
										<span class="badge badge-warning" data-bind="text: voidCustomer"></span>
										នាក់
									</td>
								</tr>
								<tr>									
									<td class="text-primary">ឈប់ប្រើប្រាស់</td>
									<td class="text-right strong">
										<span class="badge badge-important" data-bind="text: inactiveCustomer"></span>
										នាក់
									</td>
								</tr>
								<tr>									
									<td class="text-primary">សរុបទាំងអស់</td>
									<td class="text-right strong">
										<span class="badge badge-inverse" data-bind="text: totalCustomer"></span>
										នាក់
									</td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>

				<div class="widget widget-heading-simple widget-body-white">
					<div class="widget-body padding-none">
						<div class="row-fluid row-merge">
							<div class="span6">
								<div class="innerAll center">
									<h5 class="strong muted text-uppercase"><i class="icon-money text-faded"></i> មិនទាន់បង់ប្រាក់</h5>
									<span class="text-xlarge strong text-primary" data-bind="text: totalUnpaid"></span>
									នាក់
								</div>
							</div>
							<div class="span6">
								<div class="innerAll center muted">
									<h5 class="strong muted text-uppercase"><i class="icon-cut text-faded"></i> ផ្ដាច់ចរន្ត</h5>
									<span class="text-xlarge strong" data-bind="text: totalDisconnect"></span>
									នាក់
								</div>
							</div>
						</div>
					</div>
				</div>								
			</div>			
		</div>	

		<div class="row-fluid">		
	        <div>
	        	<input data-role="dropdownlist"                   
	                   data-value-primitive="true"
	                   data-text-field="text"
	                   data-value-field="value"
	                   data-bind="value: sorter,
	                              source: sortList,                              
	                              events: { change: sorterChanges }" />

	        	<input data-role="datepicker"
	        		   data-format="dd-MM-yyyy"
	                   data-bind="value: sdate,
	                              events: { change: dateChanges }" >

	            <input data-role="datepicker"
	            	   data-format="dd-MM-yyyy"
	                   data-bind="value: edate,
	                              events: { change: dateChanges }" >
	            
	            <button type="button" data-role="button" data-icon="search" data-bind="click: search"></button>
	        </div>
        	
            <div data-role="grid" 
					data-bind="source: saleByLocationDS"
				    data-auto-bind="false"	        
				    data-row-template="esale-by-location-row-template"						                           
				    data-columns='[
				    	{ title: "No.", width: 45 },				       	
				        { title: "Location" },	                     
				        { title: "អតិថិជនកំពុងប្រើប្រាស់" },
				        { title: "អតិថិជនឈប់ប្រើប្រាស់" },
				        { title: "Deposit" },
				        { title: "បរិមាណលក់ភ្លើង" },	            
				        { title: "Amount" },
				        { title: "ជំពាក់" },
				        { title: "Balance" }				                           	                    
				    ]'></div>

    	</div>
    </div>
</script>
<script id="esale-by-location-row-template" type="text/x-kendo-tmpl">		
	<tr>		
		<td class="sno">1</td>
		<td>#=location_name#</td>		
		<td align="right">#=kendo.toString(active_customer, "n0")# នាក់</td>
		<td align="right">#=kendo.toString(inactive_customer, "n0")#​ នាក់</td>				
		<td align="right">#=kendo.toString(deposit, "c0", banhji.eDashBoard.locale)#</td>
		<td align="right">#=kendo.toString(usage, "n0")# kWh</td>		
		<td align="right">#=kendo.toString(sale, "c0", banhji.eDashBoard.locale)#</td>
		<td align="right">#=kendo.toString(unpaid, "c0", banhji.eDashBoard.locale)#</td>
		<td align="right">#=kendo.toString(sale-unpaid, "c0", banhji.eDashBoard.locale)#</td>				
    </tr>   
</script>

</script>
<script id="eMeter" type="text/x-kendo-template">
	<div class="container-fluid">	
		<div class="row-fluid">		    
			<div class="span12">			
				<div id="exampleMain" class="k-content">
					<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

					<h3>Meter</h3>

					<input id="meters" style="width: 200px" /> |
					<input id="customers" style="width: 200px" />					
					<br><br>

					<div id="meter-window" data-role="window" data-visible="false" data-modal="true" data-resizable="false" data-iframe="true">				    	
					    <div id="example">
					    	<table cellpadding="5" cellspacing="5">			                
				                <tr>
				                  	<td>Type <span style="color:red">*</span></td>
				                  	<td>
				                  		<input id="item" name="item"
				                  			   data-role="dropdownlist"				                  			   
							                   data-auto-bind="false"
							                   data-value-primitive="true"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: meter.item_id, source: itemDS"
							                   data-option-label="(--- Select ---)"
				                  			   required data-required-msg="ត្រូវការ Type" />
				                  	</td>
				                  	<td>Location <span style="color:red">*</span></td>
				                  	<td>
				                  		<input id="location" name="location"				                  				
							                   	data-bind="value: meter.location_id"
							                   	required data-required-msg="ត្រូវការ Location" />
				                  	</td>			                  		                  	                             
				                </tr>
				                <tr>
				                  	<td>លេខកូដកុងទ័រ <span style="color:red">*</span></td>                    
				                  	<td>
				                  		<input id="meterNo" name="meterNo" class="k-textbox" 
				                  				data-bind="value: meter.number" 
				                  				required data-required-msg="ត្រូវការ លេខកូដកុងទ័រ"
				                  				style="width: 160px;" />
				                  	</td>                             
				                	<td>ប្រអប់</td>
				                  	<td>
				                  		<input id="electricityBox" name="electricityBox" 
				                  				disabled="disabled" 
				                  				data-bind="value: meter.electricity_box_id" />				                  			                  				                  		
				                  	</td>
				                </tr>
				                <tr>             
				                  	<td></td>
				                  	<td>
				                  		<input type="checkbox" data-bind="checked: meter.cover_sealed" /> សំណគំរបខ្សែ
				                  		<input type="checkbox" data-bind="checked: meter.ear_sealed" /> សំណត្រចៀក			                  		
				                  	</td>
				                  	<td>អំពែ</td>
				                	<td>
				                		<input data-role="dropdownlist"
				                				data-option-label="(--- Select ---)"
							                   	data-auto-bind="false"
							                   	data-value-primitive="true"
							                   	data-text-field="name"
							                   	data-value-field="id"
							                   	data-bind="value: meter.amperes.id, source: ampereList" />
				                	</td>			                
				                </tr>
				                <tr>
				                	<td>មេគុណ</td>
				                	<td>
				                		<input id="multiplier" name="multiplier"
				                			data-role="numerictextbox" 
				                			data-bind="value: meter.multiplier" 
				                			data-format="#" min="1" step="100" 
				                			placeholder="ឧ.1/10/100/1,000" />
				                	</td>
				                	<td>ចំនួនហ្វា</td>
				                  	<td>
				                  		<input data-role="dropdownlist"
				                  				data-option-label="(--- Select ---)"
							                   	data-auto-bind="false"
							                   	data-value-primitive="true"
							                   	data-text-field="name"
							                   	data-value-field="id"
							                   	data-bind="value: meter.phases.id, source: phaseList" />
				                  	</td>
				                </tr>
				                <tr>             
				                  	<td>ចំនួនខ្ទង់នាឡិកា <span style="color:red">*</span></td>
				                  	<td>
				                  		<input id="maxNo" name="maxNo" 
				                  				data-role="numerictextbox" 
				                  				data-bind="value: meter.max_number" 
				                  				data-format="n0" min="0" 
				                  				placeholder="ឧ.10,000/100,000" 
				                  				required data-required-msg="ត្រូវការ ចំនួនខ្ទង់នាឡិកា" />
				                  	</td>	                  	  	
				                  	<td>អាំងតង់សីុតេ</td>
				                  	<td>
				                  		<input data-role="dropdownlist"
				                  				data-option-label="(--- Select ---)"
							                   	data-auto-bind="false"
							                   	data-value-primitive="true"
							                   	data-text-field="name"
							                   	data-value-field="id"
							                   	data-bind="value: meter.voltages.id, source: voltageList" />
				                  	</td>                                   
				                </tr>
				                <tr>
				                	<td>ស្ថានភាព <span style="color:red">*</span></td>
				                  	<td>
				                  		<input id="meterStatus" name="meterStatus"
				                  				data-role="dropdownlist"
												data-option-label="(--- Select ---)"
												required data-required-msg="ត្រូវការ ស្ថានភាព" 
				                  				data-text-field="name" 
				                  				data-value-field="id" 
				                  				data-value-primitive="true"			                  				
				                  				data-bind="source: statusList, value: meter.status" />
				                  	</td>
				               	  	<td>តំលៃលក់</td>
				                  	<td>
				                  		<input data-role="dropdownlist"
				                  			   data-option-label="(--- Select ---)"				                  			   
							                   data-auto-bind="false"
							                   data-value-primitive="true"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: meter.tariffs.id, source: tariffList" />
				                  	</td>			                	
				                </tr>
				                <tr>
				                	<td>REACTIVE OF</td>
				                	<td>
				                		<input id="reactiveOf" name="reactiveOf"
				                			   data-role="dropdownlist"
				                  			   data-option-label="(--- Select ---)"			                  			   
							                   data-auto-bind="false"
							                   data-value-primitive="true"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: meter.reactive_of, source: parentMeterList" />
				                	</td>                 	
				                  	<td>លើកលែង</td>
				                  	<td>
				                  		<input data-role="dropdownlist"
				                  			   data-option-label="(--- Select ---)"			                  			   
							                   data-auto-bind="false"
							                   data-value-primitive="true"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: meter.exemptions.id, source: exemptionList" />
				                  	</td>	                  	                        
				                </tr>
				                <tr valign="top">
				                	<td>BACKUP OF</td>
				                	<td>
				                		<input id="backupOf" name="backupOf"
				                			   data-role="dropdownlist"
				                  			   data-option-label="(--- Select ---)"
							                   data-auto-bind="false"
							                   data-value-primitive="true"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: meter.backup_of, source: parentMeterList" />
				                	</td>
				                	<td>Memo</td>
				                  	<td>
				                  		<textarea name="memo" id="memo" cols="" rows="2" 
				                  				data-bind="value: meter.memo"></textarea>
				                  	</td>
				                </tr>			                		                			                
				          	</table>				          
			          	
			          		<div id="status"></div>
			          		<button id="save" name="save" class="btn btn-primary"><i class="icon-hdd icon-white"></i> Save</button>                                  
			                <button class="btn" data-bind="click: closeMeterWindow"><i class="icon-off"></i> បិទ</button>			                
			          	</div>
				    </div>							
					
		        	<button class="btn btn-inverse" data-bind="click: openMeterWindow"><i class="icon-plus icon-white"></i></button>
					<br>
	            	<div data-role="grid" data-bind="source: dataSource"
				        data-auto-bind="false"								        			        
				        data-row-template="eMeter-row-template"				        			                        
				        data-columns='[
				        	{ title: "#Meter" },
				            { title: "Type" },								            
				            { title: "ប្រអប់" },
				            { title: "ពត័មាន" },				            
				            { title: "ថ្លៃលក់" },
				            { title: "តួនាទី" },								            
				            { title: "ស្ថានភាព" }	,
				            { title: "", width: 100 }                    	                    
				        ]'></div>				
											
				</div> <!-- // End div example-->  
			</div> <!-- // End div span12-->
		</div>		
	</div> <!-- // End div row-fluid-->	
</script>
<script id="eMeter-row-template" type="text/x-kendo-template">	
	<tr>		
		<td>#=number#</td>
		<td>#=item_name#</td>
		<td>#=electricity_box_number#</td>		
		<td>
			<div>#=amperes.name#</div>
			<div>#=phases.name#</div>
			<div>#=voltages.name#</div>
		</td>
		<td>			
			<div>#=tariffs.name!==undefined?tariffs.name:""#</div>
			<div>#=exemptions.name!==undefined?exemptions.name:""#</div>
			<div>#=maintenances.name!==undefined?maintenances.name:""#</div>
		</td>
		<td>
			#if(reactive_of>0){#
				REACTIVE
			#}else if(backup_of>0){#
				BACKUP
			#}else{#
				
			#}#
		</td>
		<td>#:status==1 ? "ប្រើប្រាស់" : "ឈប់ប្រើ"#</td>
		<td align="center">            
			<span class="glyphicons no-js delete" data-bind="click: delete"><i></i></span>
			<span class="glyphicons no-js edit" data-bind="click: edit"><i></i></span>						
		</td>		
	</tr>
</script>

<script id="eReading" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">
					<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

					<h3>បញ្ចូលអំនានកុងទ័រ</h3>
					
					<div class="hidden-print">
						<div class="accordion" id="accordion">
						    <!-- //Accordion Item -->
						    <div class="accordion-group">
						        <div class="accordion-heading">
					            	<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#collapse-1">
										បញ្ចូលអំនានដោយផ្ទាល់ដៃ
									</a>
						        </div>
						        <div id="collapse-1" class="accordion-body in collapse" style="height: auto;">
						            <div class="accordion-inner">
						            	<input data-role="datepicker" 
						            			data-bind="value: monthOfSearch" 
						            			data-start="year" data-depth="year" 
						            			data-format="MM-yyyy" placeHolder="Month Of" />						
										
										<input id="company" data-bind="value: company_id, events:{ change: companyChanges" />
						            	<input id="elocation" disabled="disabled" data-bind="value: location_id" />										
						            	|
						            	<input id="meters" data-bind="value: meter_id" />						            							            	
						          					          					          			          		
						          		<button type="button" class="btn btn-default" data-bind="click: search"><i class="icon-search"></i></button>
						          		<button type="button" class="btn btn-default" onclick="javascript:window.print()"><i class="icon-print"></i></button>					          			
						            </div>
						        </div>
						    </div>
						    <!-- // Accordion Item END -->

						    <!-- //Accordion Item -->
						    <div class="accordion-group">
						        <div class="accordion-heading">
					            	<a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion" href="#collapse-2">
							        	បញ្ចូលអំនានតាម IR Reader
							      	</a>
						        </div>
						        <div id="collapse-2" class="accordion-body collapse" style="height: 0px;">
						            <div class="accordion-inner">
						            	<input id="myFile" type="file" accept="text/csv">
						            	<button type="button" class="k-button btn-info" data-bind="click: readFile">ទាញយកទិន្នន័យ</button>
						            	<button type="button" class="btn btn-default" onclick="javascript:window.print()"><i class="icon-print"></i></button>
						            	<br>
										<span data-bind="text: uploadStatus"></span>
						            </div>
						        </div>
						    </div>
						    <!-- // Accordion Item END -->
						</div>					
					</div>

			        <div align="center">
			        	<h3 data-bind="text: strMonthOf"</h3>
			        	<h4 data-bind="text: strTransformer"></h4>
			        </div>
			        
			        <div class="demo-section">			        
					    <table class="table table-bordered table-striped table-white">
					        <thead>
					            <tr>
					                <th>Customer</th>
					                <th>ប្រអប់</th>						                
					                <th>Meter</th>
					                <th>មេគុណ</th>
					                <th>ជុំថ្មី</th>
					                <th>លេខចាស់</th>
					                <th>លេខថ្មី</th>					                
					                <th class="right">សរុប</th>
					            </tr>
					        </thead>
					        <tbody data-role="listview"
					        		data-auto-bind="false"					        		 
					        		data-template="eReading-row-template" 
					        		data-bind="source: dataSource"></tbody>
					        <tfoot data-template="eReading-footer-template" 
					        		data-bind="source: this"></tfoot>						        
					    </table>
					    <div id="pager" class="k-pager-wrap"></div>
				    </div>				       
			        
					<br>					

			        <div>
			        	Month Of
			        	<input id="monthOf" name="monthOf" data-role="datepicker" 
				            			data-bind="value: month_of" 
				            			data-start="year" data-depth="year" data-format="MM-yyyy"
				            			required data-required-msg="ត្រូវការ Month Of"
				            			placeholder="ខែ-ឆ្នាំ" />				    
				    	
				    	ថ្ងៃអានចាប់ពី
                        <input type="text" data-role='datepicker' 
                        		id="fromDate" name="fromDate"
                        		data-bind="value: from_date"	            				
                        		data-type="date" data-format="dd-MM-yyyy"
                        		placeholder="ថ្ងៃ-ខែ-ឆ្នាំ"
                        		required data-required-msg="ត្រូវការ ថ្ងៃអានចាប់ពី"  />                        	    				        
			            
			            To
                        <input type="text" data-role='datepicker' 
                        		id ="toDate" name="toDate"
                        		data-bind="value: to_date"	            				 
                        		data-type="date" data-format="dd-MM-yyyy"
                        		placeholder="ថ្ងៃ-ខែ-ឆ្នាំ"
                        		required data-required-msg="ដល់ថ្ងៃណា?" 
                        		data-greaterdate-field="fromDate" 
                        		data-greaterdate-msg='ត្រូវថ្មីជាង ថ្ងៃអានចាប់ពី' />                        
			            			        
			        	អ្នកអាន
			          	<input data-role="dropdownlist"
			                   data-option-label="(--- Select ---)"
			                   data-value-primitive="true"
			                   data-text-field="name"
			                   data-value-field="id"
			                   data-bind="value: read_by, source: readerDS"
			                   required data-required-msg="ត្រូវការ អ្នកអាន" />            
			        </div>
			        
			        <br>

			        <div id="status"></div>            			        	
          			<button id="save" class="btn btn-primary"><i class="icon-hdd icon-white"></i> Save​</button>

				</div> <!-- //End div example-->            
			</div> <!-- //End div span12-->		
		</div> <!-- //End div row-fluid-->
	</div>
</script>
<script id="eReading-row-template" type="text/x-kendo-tmpl">
	<tr>					
		<td>#=fullname#</td>	
		<td>#=electricity_box_number#</td>
		<td>#=number#</td>
		<td>#=multiplier#</td>
		<td align="center">
			<input type="checkbox" data-bind="checked: new_round, events:{ change: onChange }" />
		</td>		
		<td>
			<input data-role="numerictextbox"
				   data-min="0"
				   data-format="n0"                                      
                   data-bind="value: previous, events:{ change: onChange }"
                   style="width: 100px" #=previous>0?disabled='disabled':''# />
		</td>
		<td>
			<input class="txt#=index#" data-role="numerictextbox"
				   data-min="0"
				   data-format="n0"                                      
                   data-bind="value: current, events:{ change: onChange }"                   
                   style="width: 100px" />            
			<span class="label label-important" data-bind="invisible: isValid"><strong>កំហុស!</strong></span>			
		</td>		
		<td class="right" data-bind="text: usage"></td>	
    </tr>
</script>
<script id="eReading-footer-template" type="text/x-kendo-template">
    <tr>    	
        <td class="right" colspan="8" style="font-size:30px;">
            Total: #:total()# kWh
        </td>
    </tr>
</script>

<script id="eInvoice" type="text/x-kendo-template">	
	<div class="container-fluid">
		<div class="row-fluid">
			<div class="span12">
				<div id="example" class="k-content">
					<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

					<h3>រៀបចំវិក្កយបត្រ</h3>

					<br>
					
					<div class="hidden-print">
						<input data-role="datepicker" 
		            			data-bind="value: monthOfSearch" 
		            			data-start="year" data-depth="year" 
		            			data-format="MM-yyyy" placeHolder="Month Of" />						
										
						<input id="company" data-bind="value: company_id, events:{ change: companyChanges" />
		            	<input id="elocation" disabled="disabled" data-bind="value: location_id" />
		            	|
		            	<input id="meters" data-bind="value: meter_id" />		            	

		            	<button type="button" class="btn btn-default" data-bind="click: search"><i class="icon-search"></i></button>								
					</div>											

					<br>
					
					<table class="table table-bordered table-striped table-white">
				        <thead>
				            <tr>
				                <th><input type="checkbox" data-bind="checked: chkAll, events: {change : checkAll}" /></th>				                				                
				                <th>Customer</th>	                    
				                <th>ប្រអប់</th>
				                <th>Meter</th>
				                <th>មេគុណ</th>				                
				                <th>លេខចាស់</th>
				                <th>លេខថ្មី</th>
				                <th>សរុប</th>	                    
				            </tr>
				        </thead>
				        <tbody data-role="listview" 
				        		data-template="eInvoice-row-template" 
				        		data-auto-bind="false" 
				        		data-bind="source: readingDS"></tbody>
				        <tfoot data-template="eInvoice-footer-template" 
					        		data-bind="source: this"></tfoot>	            
				    </table>
				    <div id="pager" class="k-pager-wrap"></div>

				    <br>
				    
				    <div>
						Month Of
						<input id="monthOf" name="monthOf" data-role="datepicker" 
		            			data-bind="value: month_of"	data-start="year" 
		            			data-depth="year" data-format="MM-yyyy"
		            			required data-required-msg="ត្រូវការ Month Of" />
				        ថ្ងៃចេញវិក្កយបត្រ
				        <input id="issuedDate" name="issuedDate" data-role="datepicker" 
		            			data-bind="value: issued_date" data-format="dd-MM-yyyy"
		            			required data-required-msg="ត្រូវការ ថ្ងៃចេញវិក្កយបត្រ" />
				        ថ្ងៃចាប់ផ្ដើមទទួលប្រាក់
				        <input id="paymentDate" name="paymentDate" data-role="datepicker" 
		            			data-bind="value: payment_date" data-format="dd-MM-yyyy"
		            			required data-required-msg="ត្រូវការ ថ្ងៃបង់ប្រាក់" />
				        Due Date
				        <input id="dueDate" name="dueDate" data-role="datepicker" 
		            			data-bind="value: due_date" data-format="dd-MM-yyyy"
		            			required data-required-msg="ត្រូវការ Due Date" />			           	          	
				    </div>
				         
				    <br />
				    
				    <div>
				      	<div id="status"></div>				      	
				      	<button id="save" class="btn btn-primary"><i class="icon-list-alt icon-white"></i> រៀបចំវិក្កយបត្រ</button>     
				    </div>			   
				</div><!-- //End div example-->
			</div><!-- //End div span12-->
		</div><!-- //End div row-fluid-->
	</div>	
</script>
<script id="eInvoice-row-template" type="text/x-kendo-tmpl">
	<tr>
		<td align="center">
		   <input type="checkbox" data-bind="checked: isCheck" />
		</td>						
		<td>#=customers.fullname#</td>		
		<td>#=meters.electricity_box_number#</td>
		<td>#=meters.number#</td>
		<td>#=meters.multiplier#</td>						
		<td class="right">#=previous#</td>
		<td class="right">#=current#</td>		
		<td class="right">#=usage# kWh</td>		
    </tr>
</script>
<script id="eInvoice-footer-template" type="text/x-kendo-template">
    <tr>    	
        <td class="right" colspan="8" style="font-size:30px;">
            Total: #:total()# kWh
        </td>
    </tr>
</script>

<script id="eInvoicePrint" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">
			<div class="span12">
				<div id="example" class="k-content">
					<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

					<h3 class="hidden-print">Printវិក្កយបត្រ</h3>
					<br>					

					<div class="hidden-print">								
						<input data-role="datepicker" 
		            			data-bind="value: monthOfSearch" 
		            			data-start="year" data-depth="year" 
		            			data-format="MM-yyyy" placeHolder="Month Of" />						
										
						<input id="company" data-bind="value: company_id, events:{ change: companyChanges" />
		            	<input id="elocation" disabled="disabled" data-bind="value: location_id" />
		            	|
		            	<input id="invoices" />
						
						<button type="button" class="btn btn-default" data-bind="click: search"><i class="icon-search"></i></button>
						<button type="button" class="btn btn-default" onclick="javascript:window.print()"><i class="icon-print"></i></button>				
						<input id="chkVisible" type="checkbox" data-bind="events: {click: print}" /> ប្រើក្រដាសពុម្ព
						<br>
						<div id="pager" class="k-pager-wrap"></div>																			
					</div>					
					
					<div data-role="listview" data-bind="source: dataSource" 
						data-template="eInvoice-print-row-template" data-auto-bind="false"></div>
		
				</div><!-- //End div example-->
			</div><!-- //End div span12-->
		</div><!-- //End div row-fluid-->
	</div>	
</script>
<script id="eInvoice-print-row-template" type="text/x-kendo-tmpl">	
  	<div class="print">
  		<table width="100%" style="margin-bottom: 8px;">
	    	<tr>
	    		<td align="center" >
	    			<img src="/banhji/#:companies.image_url#" height="90" width="60" style="float: left">
	    			<div>	    			
		    			<h4>#:companies.name#</h4>					
						#:companies.address# <br>
						#:companies.phone# /
						#:companies.mobile#
					</div>					
	    		</td>
	    	</tr>
	    </table>	        

	    <div class="hiddenPrint" style="border-bottom: 1px solid black;"></div>							
		
		<table width="100%" style="margin-bottom: 8px; font-size: xx-small;">
			<tr>
				<td valign="top" rowspan="6" width="50%" align="left">
					<span class="#=number#"></span>
					#:customers.number# #:customers.fullname# <br>
					#:customers.address# <br>
					ថ្ងៃចាប់ផ្ដើមទទួលប្រាក់: #=kendo.toString(new Date(payment_date), "dd-MM-yyyy")#
				</td>
				<td class="hiddenPrint" width="50%">Number INVOICE NO</td>
				<td>#:number#</td>							
			</tr>
			<tr>
				<td class="hiddenPrint">វិក្កយបត្រ INVOICE DATE</td>
				<td>#:kendo.toString(new Date(issued_date), "dd-MM-yyyy")#</td>											
			</tr>
			<tr>
				<td class="hiddenPrint">Location AREA</td>
				<td>#:location_name#</td>							
			</tr>
			<tr>
				<td class="hiddenPrint">លេខប្រអប់ BOX NO</td>
				<td>#:invoiceLineList[0].meters.electricity_box_number#</td>				
			</tr>
			<tr>
				<td class="hiddenPrint">គិតចាប់ពីថ្ងៃទី FROM</td>
				<td>#:kendo.toString(new Date(invoiceLineList[0].meters.from_date), "dd-MM-yyyy")#</td>							
			</tr>
			<tr>
				<td class="hiddenPrint">ដល់ថ្ងៃទី TO</td>
				<td>#:kendo.toString(new Date(invoiceLineList[0].meters.to_date), "dd-MM-yyyy")#</td>
			</tr>
		</table>		
		
		<table width="100%" style="height: 260px;font-size: xx-small;">
			<thead class="hiddenPrint" style="border:1px solid black">
				<tr>
					<th align="center" width="10%">លេខកុងទ័រ <br> METER</th>
					<th align="center" width="15%">អំនានចាស់ <br> PREVIOUS</th>
					<th align="center" width="15%">អំនានថ្មី <br> CURRENT</th>
					<th align="center" width="10%">មេគុណ <br> <span style="font-size:5pt">MULTIPLICATION</span></th>
					<th align="center" width="15%">ប្រើប្រាស់ <br> <span style="font-size:5pt">CONSUMPTION</span></th>
					<th align="center" width="15%">តំលៃឯកត្តា <br> RATE</th>
					<th align="center" width="20%">តំលៃសរុប <br> AMOUNT</th>	
				</tr>
			</thead>			
			<tbody>
				<tr>					
					<td colspan="6" align="right" valign="top">
						ប្រាក់ជំពាក់ខែមុន						
						<br>
						ប្រាក់សងខែមុន						
						<br>
						ប្រាក់នៅជំពាក់						
					</td>
					<td align="right" valign="top">#:kendo.toString(kendo.parseFloat(balance_forward)/kendo.parseFloat(rate), 'c', locale)#</td>
				</tr>												
				#for(var i=0; i<invoiceLineList.length; i++) {#
					<tr>
						<td width="10%">
							#:invoiceLineList[i].meters.number#												
						</td>
						<td align="right">#:invoiceLineList[i].meters.previous#</td>
						<td align="right">#:invoiceLineList[i].meters.current#</td>
						<td align="center">#:invoiceLineList[i].meters.multiplier#</td>
						<td align="right">#:kendo.toString(kendo.parseInt(invoiceLineList[i].unit), 'n0')#</td>
						<td align="right">#:kendo.toString(kendo.parseFloat(invoiceLineList[i].price)/kendo.parseFloat(rate), 'c', locale)#</td>
						<td align="right">#:kendo.toString(kendo.parseFloat(invoiceLineList[i].amount)/kendo.parseFloat(rate), 'c', locale)#</td>
					</tr>
				#}#											
			</tbody>
			<tfoot>
				<tr>
					<td colspan="7">
						<p>#:memo#</p>
					</td>
				</tr>				
			</tfoot>			
		</table>				

        <table class="hiddenPrint" width="100%" border="1" cellpadding="2" cellspacing="2" style="font-size: xx-small;">
        	<tr>
        		<td rowspan="6" width="50%">
        			#=companies.term_of_condition#
        		</td>
        		<td width="30%">
        			<div style="float:left;text-align:left;">បំណុលខែនេះ</div>
  					<div style="float:right;text-align:right; font-size: 6pt;">TOTAL BALANCE</div>
        		</td>
        		<td width="20%" align="right" style="visibility:visible;">#:kendo.toString(kendo.parseFloat(total)/kendo.parseFloat(rate), 'c', locale)#</td>
        	</tr>
        	<tr>
        		<td>
        			<div style="float:left;text-align:left;">ទឹកប្រាក់ត្រូវបង់</div>
  					<div style="float:right;text-align:right;">TOTAL DUE</div>
        		</td>
        		<td align="right" style="visibility:visible;">#:kendo.toString(kendo.parseFloat(total)/kendo.parseFloat(rate), 'c', locale)#</td>        		
        	</tr>
        	<tr>
        		<td>
        			<div style="float:left;text-align:left;">Due Date</div>
  					<div style="float:right;text-align:right;">DUE DATE</div>
        		</td>
        		<td align="right" style="visibility:visible;">#:kendo.toString(new Date(due_date), 'dd-MM-yyyy')#</td>        		
        	</tr>
        	<tr>
        		<td>
        			<div style="float:left;text-align:left;">ថ្ងៃបង់ប្រាក់</div>
  					<div style="float:right;text-align:right;">PAY DATE</div>
        		</td>
        		<td></td>        		
        	</tr>
        	<tr>
        		<td>
        			<div style="float:left;text-align:left;">ប្រាក់បានបង់</div>
  					<div style="float:right;text-align:right;">PAY AMOUNT</div>
        		</td>
        		<td></td>        		
        	</tr>        	    	
        </table>			

		<div class="hiddenPrint" style="border: 1px dashed black; margin: 6px 6px;"></div>

		<table class="hiddenPrint" width="100%" border="1" cellpadding="2" cellspacing="2" style="font-size: xx-small;">
			<tr>
				<td colspan="2" rowspan="4" width="50%" style="visibility:visible;">
					<span class="#=number#"></span> <br>
					Customer: #=customers.number# #=customers.fullname# <br>
					ទីតាំងចរន្ត: #=location_name#, ប្រអប់: #=invoiceLineList[0].meters.electricity_box_number#
				</td>										
				<td width="30%">
					<div style="float:left;text-align:left;">ទឹកប្រាក់ត្រូវបង់</div>
  					<div style="float:right;text-align:right;">TOTAL DUE</div>
				</td>
				<td align="right" width="20%" style="visibility:visible;">#:kendo.toString(kendo.parseFloat(total)/kendo.parseFloat(rate), 'c', locale)#</td>
			</tr>
			<tr>							    
				<td>
					<div style="float:left;text-align:left;">Due Date</div>
  					<div style="float:right;text-align:right;">DUE DATE</div>
				</td>
				<td align="right" style="visibility:visible;">#:kendo.toString(new Date(due_date), 'dd-MM-yyyy')#</td>
			</tr>
			<tr>							    
				<td>
					<div style="float:left;text-align:left;">ថ្ងៃបង់ប្រាក់</div>
  					<div style="float:right;text-align:right;">PAY DATE</div>
				</td>
				<td></td>
			</tr>
			<tr>				
				<td>
					<div style="float:left;text-align:left;">អ្នកទទួលប្រាក់</div>
  					<div style="float:right;text-align:right;">CASHIER</div>
				</td>
				<td></td>
			</tr>
		</table>
	</div>
</script>


<!-- ***************************
 *	Water Section      	  *
**************************** -->
<script id="wDashBoard" type="text/x-kendo-template">
	<div class="container-fluid menu-hidden sidebar-hidden-phone fluid menu-left">
		<img src="uploads/pictures/Water_Bill.png" width="300" height="100" />	
		
		<div class="row row-merge">
			<div class="span4">
				<div class="innerAll padding-bottom-none-phone">
					<a href="#/wCustomer_balance" class="widget-stats widget-stats-primary widget-stats-4">
						<span class="txt"><span data-bind="text: lang.lang.balance"></span></span>
						<span class="count" style="font-size: 35px;" data-bind="text: balance"></span>
						<span class="glyphicons coins"><i></i></span>
						<div class="clearfix"></div>
						<i class="icon-play-circle"></i>
					</a>
				</div>
			</div>
			<div class="span4">
				<div class="innerAll padding-bottom-none-phone">
					<a href="#/wCustomer_deposit" class="widget-stats widget-stats-inverse widget-stats-4">
						<span class="txt"><span data-bind="text: lang.lang.deposit"></span></span>
						<span class="count" style="font-size: 35px;" data-bind="text: deposit"></span>
						<span class="glyphicons briefcase"><i></i></span>
						<div class="clearfix"></div>
						<i class="icon-play-circle"></i>
					</a>
				</div>
			</div>			
			<div class="span4">
				<div class="innerAll padding-bottom-none-phone">
					<a href="#/wCustomer_list" class="widget-stats widget-stats-gray widget-stats-4">
						<span class="txt"><span data-bind="text: lang.lang.active_customer"></span></span>
						<span class="count"​><span data-bind="text: activeCustomer"></span></span> 
						<span class="glyphicons user"><i></i></span>
						<div class="clearfix"></div>
						<i class="icon-play-circle"></i>
					</a>
				</div>
			</div>			
		</div>

		<div class="row">			
			<div class="span8">
				<div class="heading-buttons">
					<h2 class="heading pull-left"><i class="icon-bar-chart icon-fixed-width text-primary"></i> <span data-bind="text: lang.lang.monthly_sale"></span></h2>
					
					<div class="clearfix"></div>
				</div>

				<div class="innerLR innerT">			
					<div id="wsale-graph" style="height: 200px;"></div>
				</div>
			</div>

			<div class="span4">
				<div class="widget widget-body-white">
					<div class="widget-head"><h4 class="heading strong text-uppercase"><span data-bind="text: lang.lang.customer_status"></span></h4></div>
					<div class="widget-body padding-none">
						<table class="table table-striped table-vertical-center table-condensed margin-none">
							<tbody>
								<tr>									
									<td class="text-primary border-none"><span data-bind="text: lang.lang.inactive"></span></td>
									<td class="text-right strong">
										<span class="badge badge-warning" data-bind="text: voidCustomer"></span>										
									</td>
								</tr>
								<tr>									
									<td class="text-primary"><span data-bind="text: lang.lang.void"></span></td>
									<td class="text-right strong">
										<span class="badge badge-important" data-bind="text: inactiveCustomer"></span>										
									</td>
								</tr>
								<tr>									
									<td class="text-primary"><span data-bind="text: lang.lang.total"></span></td>
									<td class="text-right strong">
										<span class="badge badge-inverse" data-bind="text: totalCustomer"></span>										
									</td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>

				<div class="widget widget-heading-simple widget-body-white">
					<div class="widget-body padding-none">
						<div class="row-fluid row-merge">
							<div class="span6">
								<div class="innerAll center">
									<h5 class="strong muted text-uppercase"><i class="icon-money text-faded"></i> <span data-bind="text: lang.lang.open"></span></h5>
									<a href="#/wAging_summary" class="text-xlarge strong text-primary" data-bind="text: totalUnpaid"></a>									
								</div>
							</div>
							<div class="span6">
								<div class="innerAll center muted">
									<h5 class="strong muted text-uppercase"><i class="icon-dashboard text-faded"></i> <span data-bind="text: lang.lang.no_meter"></span></h5>
									<a href="#/wCustomer_no_meter" class="text-xlarge strong" data-bind="text: totalNoMeter"></a>									
								</div>
							</div>
						</div>
					</div>
				</div>								
			</div>			
		</div>	

		<div class="row-fluid">
	        <form id="employeeForm" data-role="validator" novalidate="novalidate">
                <div id="fieldlist">
                	<input data-role="dropdownlist"                   
	                   data-value-primitive="true"
	                   data-text-field="text"
	                   data-value-field="value"
	                   data-bind="value: sorter,
	                              source: sortList,                              
	                              events: { change: sorterChanges }" />
	                                           
                    <input type="text" data-role='datepicker' id="sdate" name="sdate" data-type="date" data-bind="value: sdate" />
                    <span data-for='sdate' class='k-invalid-msg'></span>

                    <input type="text" data-role='datepicker' id ="edate" data-type="date" name="edate" data-bind="value: edate" 
                    		data-greaterdate-field="sdate" data-greaterdate-msg='Invalid' />
                    <span data-for='edate' class='k-invalid-msg'></span>
               
                    <button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button>                           
                </div>
            </form>

            <table class="table table-bordered table-vertical-center table-pricing table-pricing-2">
        		<thead>
        			<tr>
        				<th width="45" class="center"><span data-bind="text: lang.lang.no"></span></th>
        				<th class="center"><span data-bind="text: lang.lang.license"></span></th>
        				<th class="center"><span data-bind="text: lang.lang.total_license"></span></th>
        				<th class="center"><span data-bind="text: lang.lang.active_customer"></span></th>
        				<th class="center"><span data-bind="text: lang.lang.void_customer"></span></th></th>	            				
        				<th class="center"><span data-bind="text: lang.lang.deposit"></span></th></th>	            				
        				<th class="center"><span data-bind="html: lang.lang.m"></span><sup>3</sup></th>
        				<th class="center"><span data-bind="text: lang.lang.amount"></span></th>        				
        				<th class="center"><span data-bind="text: lang.lang.balance"></span></th>	            					            				
        			</tr>
        		</thead>
        		<tbody data-role="listview"
        				data-auto-bind="false"	            					            			
		                data-template="wsale-by-branch-row-template"
		                data-bind="source: saleByBranchDS"></tbody>
        	</table>            

			<p class="separator text-center"><i class="icon-ellipsis-horizontal icon-3x"></i></p>

			<table class="table table-bordered table-striped table-white">
        		<thead>
        			<tr>
        				<th width="45"><span data-bind="text: lang.lang.no"></span></th>
        				<th><span data-bind="text: lang.lang.license"></span></th>
        				<th><span data-bind="text: lang.lang.location"></span></th>
        				<th><span data-bind="text: lang.lang.active_customer"></span></th>
        				<th><span data-bind="text: lang.lang.void_customer"></span></th>	            				
        				<th><span data-bind="text: lang.lang.deposit"></span></th>	            				
        				<th><span data-bind="html: lang.lang.m"></span><sup>3</sup></th>
        				<th><span data-bind="text: lang.lang.amount"></span></th>        				
        				<th><span data-bind="text: lang.lang.balance"></span></th>	            					            				
        			</tr>
        		</thead>
        		<tbody data-role="listview"
        				data-auto-bind="false"	            					            			
		                data-template="wsale-by-location-row-template"
		                data-bind="source: saleByLocationDS"></tbody>
        	</table> 

    	</div>
    </div>
</script>
<script id="wsale-by-branch-row-template" type="text/x-kendo-tmpl">		
	<tr>		
		<td class="sno">1</td>
		<td>#=name#</td>
		<td>#=location#</td>		
		<td align="right">#=kendo.toString(active_customer, "n0")#</td>
		<td align="right">#=kendo.toString(inactive_customer, "n0")#​</td>				
		<td align="right">#=kendo.toString(deposit, "c0", banhji.institute.locale)#</td>
		<td align="right">#=kendo.toString(usage, "n0")# m<sup>3</sup></td>		
		<td align="right">#=kendo.toString(sale, "c0", banhji.institute.locale)#</td>
		<td align="right">#=kendo.toString(unpaid, "c0", banhji.institute.locale)#</td>					
    </tr>   
</script>
<script id="wsale-by-location-row-template" type="text/x-kendo-tmpl">		
	<tr>		
		<td class="snoo">1</td>
		<td>#=branch_name#</td>
		<td>#=location_name#</td>		
		<td align="right">#=kendo.toString(active_customer, "n0")# </td>
		<td align="right">#=kendo.toString(inactive_customer, "n0")#​ </td>				
		<td align="right">#=kendo.toString(deposit, "c0", banhji.eDashBoard.locale)#</td>
		<td align="right">#=kendo.toString(usage, "n0")# m<sup>3</sup></td>		
		<td align="right">#=kendo.toString(sale, "c0", banhji.eDashBoard.locale)#</td>
		<td align="right">#=kendo.toString(unpaid, "c0", banhji.eDashBoard.locale)#</td>						
    </tr>   
</script>

<script id="wCustomerCenter" type="text/x-kendo-template">	
	<div class="widget widget-heading-simple widget-body-gray widget-employees">		
		<div class="widget-body padding-none">			
			<div class="row-fluid row-merge">
				<div class="span3 listWrapper" style="height: 700px;">
					<div class="innerAll">							
						<form autocomplete="off" class="form-inline">
							<div class="widget-search separator bottom">
								<button type="button" class="btn btn-default pull-right" data-bind="click: search"><i class="icon-search"></i></button>
								<div class="overflow-hidden">
									<input type="search" placeholder="customer ..." data-bind="value: searchText, events:{change: enterSearch}">
								</div>
							</div>
							<div class="select2-container" style="width: 100%;">								
																
							</div>
						</form>					
					</div>
					
					<span class="results"><span data-bind="text: contactDS.total"></span> <span data-bind="text: lang.lang.found_search"></span></span>

					<div class="table table-condensed" style="height: 580px;"						 
						 data-role="grid" 
						 data-bind="source: contactDS"
						 data-auto-bind="false" 
						 data-row-template="wCustomerCenter-customer-list-tmpl"
						 data-columns="[{title: ''}]"
						 data-selectable=true
						 data-height="600"						 
						 data-scrollable="{virtual: true}"></div>									
				</div>
				<div class="span9 detailsWrapper">
					<div class="row-fluid">					
						<div class="span6">
							<div class="widget widget-4 widget-tabs-icons-only margin-bottom-none">

							    <!-- Widget Heading -->
							    <div class="widget-head">

							        <!-- Tabs -->
							        <ul class="pull-right">
							            <li style="font-size: large; color: black; font-weight: bold;">
							            	<span data-bind="text: obj.wnumber"></span>
							            	-
							            	<span data-bind="text: obj.surname"></span>
							            	<span data-bind="text: obj.name"></span>
							            </li>
							            <li class="glyphicons stats active"><span data-toggle="tab" data-target="#tab1-8"><i></i></span>
							            </li>
							            <li class="glyphicons riflescope"><span data-toggle="tab" data-target="#tab2-8"><i></i></span>
							            </li>
							            <li class="glyphicons dashboard"><span data-toggle="tab" data-target="#tab3-8"><i></i></span>
							            </li>
							            <li class="glyphicons circle_info"><span data-toggle="tab" data-target="#tab4-8"><i></i></span>
							            </li>							            
							            <li class="glyphicons pen"><span data-toggle="tab" data-target="#tab5-8"><i></i></span>
							            </li>
							            <li class="glyphicons edit"><span data-bind="click: goEditContact"><i></i></span>
							            </li>
							            <li class="glyphicons user_add"><a href="#/customer"><i></i></a>
							            </li>
							            <li class="glyphicons circle_plus"><span data-toggle="tab" data-target="#tab8-8"><i></i></span>
							            </li>							            
							        </ul>
							        <div class="clearfix"></div>
							        <!-- // Tabs END -->

							    </div>
							    <!-- Widget Heading END -->

							    <div class="widget-body">
							        <div class="tab-content">

							            <!-- GRAPH Tab content -->
							            <div id="tab1-8" class="tab-pane active box-generic">
							            	<div id="wUsage-graph" style="height: 180px;"></div>
							            </div>
							            <!-- // GRAPH Tab content END -->

							            <!-- SEARCH Tab content -->
							            <div id="tab2-8" class="tab-pane box-generic">							            	
							                <input id="ddlBranch" data-bind="value: branch_id, events:{change:branchChanges}" style="width: 100%;" />							                
							                <input id="ddlLocation" data-bind="value: location_id" disabled="disabled" style="width: 100%;" />

							                <input data-role="dropdownlist"
							                	   data-auto-bind="false"
						            			   data-option-label="(--- Customer Type ---)"					            			   		                   
								                   data-value-primitive="true"
								                   data-text-field="name"
								                   data-value-field="id"
								                   data-bind="value: contact_type_id,
								                              source: contactTypeDS"
								                   style="width: 100%"/>

							                <input data-role="dropdownlist"
						            			   data-option-label="(--- Currency ---)"					            			   		                   
								                   data-value-primitive="true"
								                   data-text-field="code"
								                   data-value-field="id"
								                   data-bind="value: currency_id,
								                              source: currencyDS"
								                   style="width: 100%"/>

								            <br><br>
								            <span class="btn btn-primary btn-icon glyphicons search pull-right" data-bind="click: search"><i></i><span data-bind="text: lang.lang.search"></span></span>
								            <br>
							            </div>
							            <!-- // SEARCH Tab content END -->

							            <!-- METER Tab content -->
							            <div id="tab3-8" class="tab-pane box-generic">
							            	
							            	<span class="btn btn-primary btn-icon glyphicons circle_plus" data-bind="click: goToNewWaterDeposit"><i></i> <span data-bind="text: lang.lang.new_meter"></span></span>

							            	<table class="table table-bordered table-striped table-white">
												<thead>
													<tr>
														<th><span data-bind="text: lang.lang.deposit"></span></th>
														<th><span data-bind="text: lang.lang.service"></span></th>														
														<th><span data-bind="text: lang.lang.meter_no."></span></th>																												
														<th></th>														
													</tr>
												</thead>	            		
							            		<tbody data-role="listview"
							            				data-auto-bind="false"	            					            					            					            			
										                data-template="wCustomerCenter-meter-tmpl"
										                data-bind="source: meterDS">
										        </tbody>
							            	</table>
							            </div>
							            <!-- // METER Tab content END -->

							            <!-- INFO Tab content -->
							            <div id="tab4-8" class="tab-pane box-generic">
							            	<div class="row-fluid">
								            	<div class="span6">
										
													<!-- Bio -->
													<div class="widget widget-heading-simple widget-body-gray margin-none">
														<div class="widget-head">
															<h4 class="heading glyphicons user"><i></i> <span data-bind="text: obj.wnumber"></span> <span data-bind="text: obj.fullname"></span></h4>
														</div>
														<div class="widget-body">
															<ul class="unstyled icons margin-none">
																<li class="glyphicons group"><i></i> <span data-bind="text: obj.contact_type[0].name"></span></li>
																<li class="glyphicons phone"><i></i> <span data-bind="text: obj.phone"></span></li>
																<li class="glyphicons envelope"><i></i> <span data-bind="text: obj.email"></li>
																<li class="glyphicons calendar"><i></i> <span data-bind="text: obj.registered_date"></li>
															</ul>
														</div>
													</div>
													<!-- // Bio END -->
													
												</div>
												<div class="span6">
													<!-- Bio -->
													<div class="widget widget-heading-simple widget-body-gray margin-none">
														<div class="widget-head">
															<h4 class="heading glyphicons edit" data-bind="click: goEditContact"><i></i> <span data-bind="text: lang.lang.edit"></span></h4>
														</div>
														<div class="widget-body">
															<p><i class="icon-home"></i> <span data-bind="text: obj.address"></span></p>
														</div>
													</div>
													<!-- // Bio END -->
												</div>
											</div>
							            </div>
							            <!-- // INFO Tab content END -->

							            <!-- NOTE Tab content -->
							            <div id="tab5-8" class="tab-pane box-generic">

										    <div class="chat-controls">															
												<form class="margin-none">
													<div class="row-fluid">
														<div class="span10">
															<input type="text" name="message" class="input-block-level margin-none" data-bind="value: note" placeholder="Add memo here ...">
														</div>
														<div class="span2">
															<span class="btn btn-block btn-primary" data-bind="click: saveNote"><span data-bind="text: lang.lang.save"></span></span>
														</div>
													</div>
												</form>															
											</div>

											<br>

									    	<div data-role="grid"
									    	 	 data-height="100"
					 							 data-scrollable="true"									                 
								                 data-row-template="wCustomerCenter-note-tmpl"
								                 data-bind="source: noteDS"
								                 data-columns="[{title: ''}]"></div>
											
							            </div>
							            <!-- // NOTE Tab content END -->

							            <!-- INVOICE Tab content -->
							            <div id="tab8-8" class="tab-pane box-generic">
							            	<table class="table table-borderless table-condensed cart_total">
								            	<tr>
								            		<td>
								            			<span class="btn btn-block btn-inverse" data-bind="click: goEstimate"><span data-bind="text: lang.lang.estimate"></span></span>
								            		</td>
								            		<td>
								            			<span class="btn btn-block btn-inverse" data-bind="click: goInvoice"><span data-bind="text: lang.lang.invoice"></span></span>
								            		</td>
								            	</tr>
								            	<tr>
								            		<td>
								            			<span class="btn btn-block btn-inverse" data-bind="click: goSO"><span data-bind="text: lang.lang.sale_order"></span></span>
								            		</td>
								            		<td>
								            			<span class="btn btn-block btn-inverse" data-bind="click: goReceipt"><span data-bind="text: lang.lang.receipt"></span></span>								            			
								            		</td>
								            	</tr>
								            	<tr>
								            		<td>
								            			<span class="btn btn-block btn-inverse" data-bind="click: goGDN"><span data-bind="text: lang.lang.gdn"></span></span>
								            		</td>
								            		<td>
								            			<span class="btn btn-block btn-inverse" data-bind="click: goStatement"><span data-bind="text: lang.lang.statement"></span></span>
								            		</td>
								            	</tr>
							            	</table>
							            </div>
							            <!-- // INVOICE Tab content END -->								            

							        </div>
							    </div>
							</div>
						</div>

						<div class="span6">
							<div class="row-fluid">
								<div class="span6">
									<div class="widget-stats widget-stats-primary widget-stats-5" data-bind="click: loadBalance">
										<span class="glyphicons coins"><i></i></span>
										<span class="txt"><span data-bind="text: lang.lang.balance"></span><span data-bind="text: balance" style="font-size:medium;"></span></span>
										<div class="clearfix"></div>
									</div>
								</div>
								<div class="span6">
									<div class="widget-stats widget-stats-inverse widget-stats-5" data-bind="click: loadDeposit">
										<span class="glyphicons briefcase"><i></i></span>
										<span class="txt"><span data-bind="text: lang.lang.deposit"></span><span data-bind="text: deposit" style="font-size:medium;"></span></span>
										<div class="clearfix"></div>
									</div>
								</div>
							</div>							
							
							<div class="row-fluid">
								<div class="span6">
									<div class="widget-stats widget-stats-info widget-stats-5" data-bind="click: loadBalance">
										<span class="glyphicons circle_exclamation_mark"><i></i></span>
										<span class="txt"><span data-bind="text: outInvoice"></span> <span data-bind="text: lang.lang.open"></span></span>
										<div class="clearfix"></div>
									</div>
								</div>
								<div class="span6">
									<div class="widget-stats widget-stats-default widget-stats-5" data-bind="click: loadOverInvoice">
										<span class="glyphicons turtle"><i></i></span>
										<span class="txt"><span data-bind="text: overInvoice"></span> <span data-bind="text: lang.lang.over_due"></span></span>
										<div class="clearfix"></div>
									</div>
								</div>
							</div>														
						</div>											          	
		          	</div>
					
					<div>
						<input data-role="dropdownlist"                   
					           data-value-primitive="true"
					           data-text-field="text"
					           data-value-field="value"
					           data-bind="value: sorter,
					                      source: sortList,                              
					                      events: { change: sorterChanges }" />

						<input data-role="datepicker"
							   data-format="dd-MM-yyyy"
					           data-bind="value: sdate,
					                      events: { change: dateChanges }"
					           placeholder="ចាប់ពី" >

					    <input data-role="datepicker"
					    	   data-format="dd-MM-yyyy"
					           data-bind="value: edate,
					                      events: { change: dateChanges }"
					           placeholder="To" >
					    
					    <button type="button" data-role="button" data-bind="click: searchTransaction"><i class="icon-search"></i></button>
					</div>

					<table class="table table-bordered table-striped table-white">
						<thead>
							<tr>
								<th><span data-bind="text: lang.lang.date"></span></th>
								<th><span data-bind="text: lang.lang.type"></span></th>								
								<th><span data-bind="text: lang.lang.reference_no"></span></th>
								<th><span data-bind="text: lang.lang.amount"></span></th>
								<th><span data-bind="text: lang.lang.status"></span></th>
								<th></th>
							</tr>
						</thead>	            		
	            		<tbody data-role="listview"
	            				data-auto-bind="false"	            					            					            					            			
				                data-template="wCustomerCenter-transaction-tmpl"
				                data-bind="source: transactionDS">
				        </tbody>
	            	</table>

	            	<div id="pager" class="k-pager-wrap"
				    	 data-auto-bind="false"
			             data-role="pager" data-bind="source: transactionDS"></div>	            	
				</div>
			</div>			
		</div>
	</div>		
</script>
<script id="wCustomerCenter-customer-list-tmpl" type="text/x-kendo-tmpl">
	<tr data-bind="click: selectedRow">
		<td>
			<div class="media-body">
				<span class="strong">
					#=wnumber# #=fullname#				
				</span>
			</div>
		</td>
	</tr>
</script>
<script id="wCustomerCenter-transaction-tmpl" type="text/x-kendo-tmpl">
    <tr>    	  	
    	<td>#=kendo.toString(new Date(issued_date), "dd-MM-yyyy")#</td>
    	<td>#=type#</td>
        <td>
        	#if(type==="Invoice"){#								
				<a href="\#/invoice/#=id#"><i></i> #=number#</a>	
			#}else if(type==="Receipt"){#
        		<a href="\#/receipt/#=id#"><i></i> #=number#</a>        	        		
			#}else if(type==="SO"){#
        		<a href="\#/so/#=id#"><i></i> #=number#</a>
        	#}else if(type==="Estimate"){#        		
        		<a href="\#/estimate/#=id#"><i></i> #=number#</a>
        	#}else if(type==="GDN"){#        		
        		<a href="\#/gdn/#=id#"><i></i> #=number#</a>
        	#}else if(type==="Notice"){#
        		#=number#
        	#}else if(type==="Payment"){#

        	#}else if(type==="wInvoice"){#        		
        		<a href="\#/wInvoice_print/#=id#"><i></i> #=number#</a>
        	#}else if(type==="edeposit"){#        		
        		<a href="\#/eDeposit/#=id#"><i></i> #=number#</a>
        	#}else if(type==="wdeposit"){#        		
        		<a href="\#/wDeposit/#=id#"><i></i> #=number#</a>
        	#}else{#
        		#=number#
        	#}#
        </td>
    	<td class="right">#=kendo.toString(amount/rate, locale=="km-KH"?"c0":"c", locale)#</td>
    	<td>        	
        	#if(type==="Invoice" || type==="eInvoice" || type==="wInvoice"){#
        		#if(status==="0" || status==="2") {#
        			# var date = new Date(), dueDate = new Date(due_date).getTime(), toDay = new Date(date).getTime(); #
					#if(dueDate < toDay) {#
						Over Due #:Math.floor((toDay - dueDate)/(1000*60*60*24))# days
					#} else {#
						#:Math.floor((dueDate - toDay)/(1000*60*60*24))# days to pay
					#}#
				#} else {#
					Paid
				#}#
        	#}else if(type==="SO" || type==="GDN"){#
        		#if(status==="0"){#
        			Open
        		#}else{#
        			Done        			
        		#}#
        	#}else if(type==="Estimate"){#        		
        		#if(status==="0"){#
        			Open
        		#}else{#
        			Approved        			
        		#}#
        	#}#			
		</td>    	
    	<td align="center">
			#if(type==="Invoice"){#
				#if(status==="0" || status==="2"){#					
					<a href="\#/cashier/#=id#"><i></i> ទទួលប្រាក់</a>					
				#}#
			#}else if(type==="wInvoice"){#
        		#if(status==="0" || status==="2"){#
        			<a href="\#/cashier/#=id#"><i></i> ទទួលប្រាក់</a>
        		#}#
        	#}else if(type==="Notice"){#
        		#if(status==="0" || status==="2"){#
        			<a href="\#/cashier/#=id#"><i></i> ទទួលប្រាក់</a>
        		#}#
			#}else if(type==="SO"){#
        		#if(status==="0"){#
        			
        		#}#
        	#}else if(type==="Estimate"){#        		
        		#if(status==="0"){#
        			
        		#}#
        	#}else if(type==="GDN"){#        		
        		#if(status==="0"){#
        			
        		#}#
        	#}#
		</td>     	
    </tr>
</script>
<script id="wCustomerCenter-meter-tmpl" type="text/x-kendo-template">		
	<tr>
		<td>
			<a href="\#/wDeposit/#=deposit_id#">#=deposit#</a>
			<br>
			#if(deposit_amount>0){#
				<span class="btn btn-danger btn-icon glyphicons circle_minus" data-bind="click: goToWaterDepositWitdraw"><i></i> #=kendo.toString(deposit_amount, locale=="km-KH"?"c0":"c", locale)#</span>				
			#}else{#
				<span class="btn btn-primary btn-icon glyphicons circle_plus" data-bind="click: goToNewWaterDeposit"><i></i><span data-bind="text: lang.lang.deposit1"></span></span>
			#}#
		</td>
		<td>			
			#if(invoice_id>0){#
				<a href="\#/receipt/#=invoice_id#">#=invoice#</a>
				<br>
				#=kendo.toString(invoice_amount, locale=="km-KH"?"c0":"c", locale)#				
			#}else{#
				<a href="\#/receipt" class="btn btn-inverse btn-icon glyphicons circle_plus"><i></i><span data-bind="text: lang.lang.service1"></span></a>
			#}#		
		</td>				
		<td>
			#if(number!==""){#
				<a href="\#/wMeter/#=id#">#=number#</a>
			#}else{#
				#if(deposit_id>0){#
					<a href="\#/wMeter/#=id#" class="btn btn-success btn-icon glyphicons circle_plus"><i></i><span data-bind="text: lang.lang.meter1"></span></a>
				#}#
			#}#						
		</td>
		<td>
			#if(number!==""){#
				<a href="\#/wReading_center/#=id#"><span data-bind="text: lang.lang.reading"></span></a>				
			#}#			
		</td>								
	</tr>	
</script>
<script id="wCustomerCenter-note-tmpl" type="text/x-kendo-template">
	<tr>
		<td>			
			<blockquote>
				<small class="author">
					<span class="strong">#=creator#</span> :
					<cite>#=kendo.toString(new Date(noted_date), "g")#</cite>
				</small>					
				<p>#=note#</p>
			</blockquote>				
		</td>
	</tr>	
</script>

<script id="wNewCustomer" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">			

				<!-- Collapsible Widget -->			
				<div class="widget">
				    <div class="widget-head">
				    	<span class="btn btn-primary pull-right" 
								onclick="javascript:window.history.back()">X</span>
				        
				        <h4 class="heading glyphicons user_add"><i></i><span data-bind="text: lang.lang.new_water_customer"></span></h4>							        	
				    </div>
				    <div class="widget-body">												
												
						<table class="table table-bordered table-primary table-striped table-vertical-center">
							<thead>
								<tr>
									<th style="width: 5%;" class="center"><span data-bind="text: lang.lang.no"></span></th>
									<th><span data-bind="text: lang.lang.number"></span></th>								
									<th><span data-bind="text: lang.lang.name"></span></th>
									<th></th>
								</tr>
							</thead>	            		
		            		<tbody data-role="listview"
		            				data-auto-bind="false"	            					            					            					            			
					                data-template="wNewCustomer-customer-list-tmpl"
					                data-bind="source: dataSource">
					        </tbody>
		            	</table>						

		            	<!-- Window Pop-Up -->
						<div id="window" data-role="window" data-visible="false" data-modal="true" data-resizable="false" data-iframe="true">				    	
							<div id="example" class="k-content">
								<br>
								<table class="table table-borderless table-condensed cart_total">						            	
				            		<tr>
						                <td><span data-bind="text: lang.lang.license"></span> <span style="color:red">*</span></td>
						              	<td>
						              		<input id="ddlBranch" name="ddlBranch"
												data-bind="value: obj.wbranch_id" 
												required data-required-msg="required" style="width: 100%;" />
						              	</td>							              	
						            	<td><span data-bind="text: lang.lang.location"></span> <span style="color:red">*</span></td>
						              	<td>
						              		<input id="ddlLocation" name="ddlLocation"
												data-bind="value: obj.wlocation_id" disabled="disabled"
												required data-required-msg="required" style="width: 100%;" />
						              	</td>
						            </tr>
						            <tr>
						                <td><span data-bind="text: lang.lang.number"></span> <span style="color:red">*</span></td>
						              	<td>
						              		<input id="number" name="number" class="k-textbox"
						              				data-bind="value: obj.wnumber, events:{change:checkExistingNumber}" 
						              				placeholder="e.g. ID0001" required data-required-msg="required"
						              				style="width: 100%;" />
						              		<span data-bind="visible: isDuplicateNumber" style="color: red;"><span data-bind="text: lang.lang.duplicate_number"></span></span>
						              	</td>							              	
						            	<td><span data-bind="text: lang.lang.id_card_number"></span></td>
						              	<td><input class="k-textbox" data-bind="value: obj.id_number" placeholder="e.g. 123456789" /></td>
						            </tr>					            
						            <tr>
						            	<td><span data-bind="text: lang.lang.family_member"></span></td>
						              	<td><input class="k-textbox" data-bind="value: obj.family_member" placeholder="e.g. 3" /></td>							            	
						            	<td><span data-bind="text: lang.lang.job"></span></td>
						              	<td><input class="k-textbox" data-bind="value: obj.job" placeholder="e.g. teacher" /></td>
						            </tr>					            						            							            								            								            			            
						        </table>							

								<div align="center">
									<span id="save" class="btn btn-success btn-icon glyphicons ok_2"><i></i>Save</span>
									<span class="btn btn-danger btn-icon glyphicons remove_2" data-bind="click: closeWindow"><i></i>Close</span> 
								</div>
							</div> 
						</div>

						<span id="notification"></span>								

					</div> <!-- End Widget-Body List -->
				</div>
				<!-- // Collapsible Widget END -->

			</div>							
		</div>
	</div>
</script>
<script id="wNewCustomer-customer-list-tmpl" type="text/x-kendo-template">
	<tr>
		<td>#:banhji.wNewCustomer.dataSource.indexOf(data)+1#</td>
		<td>#=number#</td>
		<td>#=fullname#</td>
		<td class="center">
			<span class="btn btn-icon btn-success glyphicons circle_plus" data-bind="click: openWindow"><i></i> Use Water</span>
		</td>
	</tr>	
</script>

<script id="wCustomer" type="text/x-kendo-template">
	<div class="container-960">	
		<div class="row-fluid">		    
			<div class="span12">			
				<div id="example" class="k-content">

					<!-- Collapsible Widget -->			
					<div class="widget">
					    <div class="widget-head">
					    	<span class="btn btn-primary pull-right" 
									onclick="javascript:window.history.back()">X</span>
					        
					        <h4 class="heading glyphicons circle_info"><i></i> Customer</h4>							        	
					    </div>
					    <div class="widget-body">

					    	<div class="row-fluid">
					    		<div class="span6 well">									
									<div class="row-fluid">
										<div class="span6">														
											<!-- Group -->
											<div class="control-group">										
												<label for="ddlContactType"><span data-bind="text: lang.lang.customer_type"></span> <span style="color:red">*</span></label>
												<input id="ddlContactType" name="ddlContactType"
													data-bind="value: obj.contact_type_id" 
													required data-required-msg="required" style="width: 100%;" />																					            
											</div>
											<!-- // Group END -->
										</div>

										<div class="span6">	
											<!-- Group -->
											<div class="control-group">							
												<label for="number"><span data-bind="text: lang.lang.number"></span> <span style="color:red">*</span></label>
						              			<input id="number" name="number" class="k-textbox"
							              				data-bind="value: obj.number, events:{change: checkExistingNumber}" 
							              				placeholder="e.g. ID0001" required data-required-msg="required"
							              				style="width: 100%;" />
							              		<span data-bind="visible: isDuplicateNumber" style="color: red;"><span data-bind="text: lang.lang.duplicate_number"></span></span>
											</div>
											<!-- // Group END -->											
										</div>
									</div>
									
									<div class="row-fluid">
										<div class="span6">						
											<!-- Group -->
											<div class="control-group">
												<label for="surname"><span data-bind="text: lang.lang.surname"></span> <span style="color:red">*</span></label>
							              		<input id="surname" name="surname" class="k-textbox" data-bind="value: obj.surname" 
									              		placeholder="surname ..." required data-required-msg="required"
									              		style="width: 100%;" />
											</div>
											<!-- // Group END -->
										</div>

										<div class="span6">	
											<!-- Group -->
											<div class="control-group">								
												<label for="name"><span data-bind="text: lang.lang.name"></span> <span style="color:red">*</span></label>
									            <input id="name" name="name" class="k-textbox" data-bind="value: obj.name" 
									              		placeholder="name ..." required data-required-msg="required"
									              		style="width: 100%;" />
											</div>																		
											<!-- // Group END -->
										</div>
									</div>
									
									<div class="row-fluid" data-bind="visible: isCompany">
										<div class="span6">
											<!-- Group -->
											<div class="control-group">
												<label for="companyName"><span data-bind="text: lang.lang.organization_name"></span> <span style="color:red">*</span></label>
												<input id="companyName" name="companyName" class="k-textbox" data-bind="enabled: isCompany, value: obj.company"									
														placeholder="e.g. PCG & Partner"
														style="width: 100%;" />	
											</div>
											<!-- // Group END -->
										</div>

										<div class="span6">	
											<!-- Group -->
											<div class="control-group">
												<label for="vatNo">VAT Number</label>								
							            		<input id="vatNo" name="vatNo" class="k-textbox" data-bind="enabled: isCompany, value: obj.vat_no" 
														placeholder="e.g. 01234567897"
														style="width: 100%;" />												
											</div>					
											<!-- // Group END -->
										</div>
									</div>
																
								</div>
								<div class="span6">
									<div class="row-fluid">	
										<!-- Map -->
										<div id="map" class="span12" style="height: 130px;"></div>
									</div>

									<div class="separator line bottom"></div>

									<div class="row-fluid">	
										<div class="span6">									
											<!-- Group -->
											<div class="control-group">
								    			<label for="latitute"><span data-bind="text: lang.lang.latitute"></span> </label>
												<div class="input-prepend">
													<span class="add-on glyphicons direction"><i></i></span>
													<input type="text" class="input-large span12" data-bind="value: obj.latitute, events:{change: loadMap}" placeholder="012345.67897">
												</div>
											</div>									
											<!-- // Group END -->
										</div>	
										
										<div class="span6">	
											<!-- Group -->
											<div class="control-group">
								    			<label for="longtitute"><span data-bind="text: lang.lang.longtitute"></span> </label>
								    			<div class="input-prepend">
													<span class="add-on glyphicons google_maps"><i></i></span>
													<input type="text" class="input-large span12" data-bind="value: obj.longtitute, events:{change: loadMap}" placeholder="012345.67897">
												</div>										
											</div>
											<!-- // Group END -->
										</div>										
									</div>
								</div>
							</div>								
									
							<!-- // Inner Tabs -->
							<div class="row-fluid">								
								<div class="box-generic">
								    <!-- //Tabs Heading -->
								    <div class="tabsbar tabsbar-1">
								        <ul class="row-fluid row-merge">								            								            
								            <li class="span2 glyphicons tint active">
								            	<a href="#tab1" data-toggle="tab"><i></i> <span><span data-bind="text: lang.lang.water"></span></span></a>
								            </li>
								            <li class="span2 glyphicons usd">
								            	<a href="#tab2" data-toggle="tab"><i></i> <span><span data-bind="text: lang.lang.account"></span></span></a>
								            </li>
								            <li class="span2 glyphicons nameplate_alt">
								            	<a href="#tab3" data-toggle="tab"><i></i> <span><span data-bind="text: lang.lang.info"></span></span></a>
								            </li>
								            <li class="span2 glyphicons parents">
								            	<a href="#tab4" data-toggle="tab"><i></i> <span><span data-bind="text: lang.lang.agents"></span></span></a>
								            </li>						            					            
								        </ul>
								    </div>
								    <!-- // Tabs Heading END -->

								    <div class="tab-content">

								    	<!-- //WATER INFO -->
								        <div class="tab-pane active" id="tab1">
							            	<div class="row-fluid">

							            		<div class="span3">
								            		<!-- Group -->
													<div class="control-group">											
														<label for="ddlBranch"><span data-bind="text: lang.lang.license"></span> <span style="color:red">*</span></label>
														<input id="ddlBranch" name="ddlBranch"
															data-bind="value: obj.wbranch_id" 
															required data-required-msg="required" style="width: 100%;" />
													</div>
													<!-- // Group END -->
												</div>

												<div class="span3">
								            		<!-- Group -->
													<div class="control-group">											
														<label for="ddlLocation"><span data-bind="text: lang.lang.location"></span> <span style="color:red">*</span></label>
														<input id="ddlLocation" name="ddlLocation"
															data-bind="value: obj.wlocation_id" disabled="disabled" style="width: 100%;" />
													</div>
													<!-- // Group END -->
												</div>

												<div class="span3">
													<!-- Group -->
													<div class="control-group">							
														<label for="wnumber"><span data-bind="text: lang.lang.number"></span> <span style="color:red">*</span></label>
								              			<input id="wnumber" name="wnumber" class="k-textbox"
									              				data-bind="value: obj.wnumber, events:{change: checkExistingWNumber}" 
									              				placeholder="e.g. ID0001" required data-required-msg="required"
									              				style="width: 100%;" />
									              		<span data-bind="visible: isDuplicateWNumber" style="color: red;"><span data-bind="text: lang.lang.duplicate_number"></span></span>
													</div>
													<!-- // Group END -->
												</div>

							            	</div>
							        	</div>
								        <!-- //WATER INFO END -->

								        <!-- //ACCOUNTING INFO -->
								        <div class="tab-pane" id="tab2">
								        	<div class="row-fluid">								        		
								            	<div class="span3">
													<label for="ddlAR"><span data-bind="text: lang.lang.account_receiveable"></span> <span style="color:red">*</span></label>
													<input id="ddlAR" name="ddlAR"
														data-bind="value: obj.account_id" 
														required data-required-msg="required" style="width: 100%;" />
												</div>
												<div class="span3">
													<label for="ddlRA"><span data-bind="text: lang.lang.revenue_account"></span> <span style="color:red">*</span></label>
													<input id="ddlRA" name="ddlRA"
														data-bind="value: obj.ra_id" 
														required data-required-msg="required" style="width: 100%;" />
												</div>
												<div class="span3">
													<label for="ddlDepositAccount"><span data-bind="text: lang.lang.deposit_account"></span> <span style="color:red">*</span></label>
													<input id="ddlDepositAccount" name="ddlDepositAccount"
														data-bind="value: obj.deposit_account_id" 
														required data-required-msg="required" style="width: 100%;" />
												</div>
												<div class="span3">
													<label for="ddlDiscountAccount"><span data-bind="text: lang.lang.discount_account"></span> <span style="color:red">*</span></label>
													<input id="ddlDiscountAccount" name="ddlDiscountAccount"
														data-bind="value: obj.discount_account_id" 
														required data-required-msg="required" style="width: 100%;" />	
												</div>												
									        </div>

									        <div class="separator line bottom"></div>

									        <div class="row-fluid">
								        		<div class="span3">						
										            <label for="currency"><span data-bind="text: lang.lang.currency"></span> <span style="color:red">*</span></label>
										            <input id="currency" name="currency" 
										            	data-role="dropdownlist"
										            	data-value-primitive="true"
										                data-text-field="code"
										                data-value-field="id"
														data-bind="value: obj.currency_id, source: currencyDS"
														data-option-label="(--- Select ---)" 
														required data-required-msg="required" style="width: 100%;" />
										        </div>
								            	<div class="span3">
													<label for="ddlPaymentTerm"><span data-bind="text: lang.lang.payment_term"></span></label>
													<input id="ddlPaymentTerm" name="ddlPaymentTerm"
														data-role="dropdownlist"
														data-option-label="(--- Select ---)"
										            	data-value-primitive="true"
										                data-text-field="name"
										                data-value-field="id"
														data-bind="value: obj.payment_term_id, source: paymentTermDS"														
														style="width: 100%;" />
												</div>
												<div class="span3">
													<label for="ddlPaymentMethod"><span data-bind="text: lang.lang.payment_method"></span></label>
													<input id="ddlPaymentMethod" name="ddlPaymentMethod"
														data-role="dropdownlist"
														data-option-label="(--- Select ---)"
										            	data-value-primitive="true"
										                data-text-field="name"
										                data-value-field="id"
														data-bind="value: obj.payment_method_id, source: paymentMethodDS"														
														style="width: 100%;" />
												</div>
												<div class="span3">
													<label for="ddlTaxItem"><span data-bind="text: lang.lang.vat"></span> </label>
													<input id="ddlTaxItem" name="ddlTaxItem"
														   data-role="dropdownlist"
														   data-option-label="(--- Select ---)"
										                   data-auto-bind="false"
										                   data-value-primitive="true"
										                   data-text-field="name"
										                   data-value-field="id"
										                   data-bind="value: obj.tax_item_id,
										                              source: taxDS"
										                   required data-required-msg="required"
										                   style="width: 100%;" />													
												</div>												
									        </div>

									        <div class="separator line bottom"></div>

									        <div class="row-fluid">	
										        <div class="span3">
													<label for="txtCreditLimit"><span data-bind="text: lang.lang.credit_limit"></span> </label>								              		
										            <input data-role="numerictextbox"
										                   data-format="n"
										                   data-min="0"										                   
										                   data-bind="value: obj.credit_limit"										                  
										                   style="width: 100%;">
												</div>
											</div>
							        	</div>
								        <!-- //ACCOUNTING INFO END -->

								        <!-- //GENERAL INFO -->
								        <div class="tab-pane" id="tab3">
							            	<table class="table table-borderless table-condensed cart_total">						            	
							            		<tr>
									                <td><span data-bind="text: lang.lang.status"></span> <span style="color:red">*</span></td>
									              	<td>
									              		<input id="customerStatus" name="customerStatus" 
									              				data-role="dropdownlist"
											            		data-text-field="name"
								           						data-value-field="id"
								           						data-value-primitive="true" 
											            		data-bind="source: statusList, value: obj.status"
											            		data-option-label="(--- Select ---)"
											            		required data-required-msg="ត្រូវការ ស្ថានភាព" />
									              	</td>							              	
									            	<td><span data-bind="text: lang.lang.register_date"></span> <span style="color:red">*</span></td>
									              	<td>
									              		<input id="registered_date" name="registered_date" 
										            		data-role="datepicker"			            		
							            					data-bind="value: obj.registered_date" 
							            					data-format="dd-MM-yyyy"
							            					data-parse-formats="yyyy-MM-dd" 
							            					placeholder="dd-MM-yyyy" required data-required-msg="required" />
									              	</td>
									            </tr>
									            <tr>
									                <td><span data-bind="text: lang.lang.gender"></span></td>
									              	<td><select data-role="dropdownlist" data-bind="source: genders, value: obj.gender"></select></td>							              	
									            	<td><span data-bind="text: lang.lang.phone"></span></td>
									              	<td><input class="k-textbox" data-bind="value: obj.phone" placeholder="e.g. 012 333 444" /></td>
									            </tr>
									            <tr>
									            	<td><span data-bind="text: lang.lang.family_member"></span></td>
									              	<td><input class="k-textbox" data-bind="value: obj.family_member" placeholder="e.g. 3" /></td>							              	
									            	<td><span data-bind="text: lang.lang.email"></span></td>
									              	<td><input class="k-textbox" data-bind="value: obj.email" placeholder="e.g. me@email.com" />
									            </tr>
									            <tr>
									            	<td><span data-bind="text: lang.lang.job"></span></td>
									                <td><input class="k-textbox" data-bind="value: obj.job" placeholder="e.g. teacher" /></td>							            	
									            	<td><span data-bind="text: lang.lang.id_card_number"></span></td>
									              	<td><input class="k-textbox" data-bind="value: obj.id_number" placeholder="e.g. 123456789" /></td>
									            </tr>
									            <tr>
									            	<td><span data-bind="text: lang.lang.address"></span></td>
									              	<td><input class="k-textbox" data-bind="value: obj.address" placeholder="where you live ..." />							              	
									            	<td><span data-bind="text: lang.lang.memo"></span></td>
									              	<td><input class="k-textbox" data-bind="value: obj.memo" placeholder="memo ..." /></td>
									            </tr>
									            <tr>
									            	<td>
									            		<label for="txtBillTo" data-bind="click: copyBillTo"><span data-bind="text: lang.lang.bill_to"></span> <i class="icon-share"></i></label>											            
									            	</td>
									            	<td>
									            		<input class="k-textbox" data-bind="value: obj.bill_to" placeholder="bill to ..." />
									            	</td>
									            	<td>
									            		<span data-bind="text: lang.lang.ship_to"></span>										            
									            	</td>
									            	<td>
									            		<input class="k-textbox" data-bind="value: obj.ship_to" placeholder="ship to ..." />
									            	</td>
									            </tr>									            							            							            								            								            			            
									        </table>
							        	</div>
								        <!-- //GENERAL INFO END -->

								        <!-- //CONTACT PERSON -->
								        <div class="tab-pane" id="tab4">
								        	<span class="btn btn-primary btn-icon glyphicons circle_plus" data-bind="click: addEmptyContactPerson"><i></i> <span data-bind="text: lang.lang.new_agent"></span></span>
								        	
								        	<table class="table table-bordered table-white">
										        <thead>
										            <tr>
										                <th><span data-bind="text: lang.lang.name"></span></th>
										                <th><span data-bind="text: lang.lang.department"></span></th>						                
										                <th><span data-bind="text: lang.lang.phone"></span></th>
										                <th><span data-bind="text: lang.lang.email"></span></th>
										                <th width="20px"></th>										               
										            </tr>
										        </thead>
										        <tbody data-role="listview"										        		
										        		data-auto-bind="false"										        						        		 
										        		data-template="contact-person-row-tmpl" 
										        		data-bind="source: contactPersonDS">
										        </tbody>										        						        
										    </table>
							        	</div>
								        <!-- //CONTACT PERSON END -->
								    </div>
								</div>
							</div>

							<br>											
							
							<!-- Form actions -->
							<div align="center">
								<span id="notification"></span>

								<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i><span data-bind="text: lang.lang.save"></span></span>
								<span class="btn btn-danger btn-icon glyphicons delete" data-bind="click: delete, visible: isEdit"><i></i><span data-bind="text: lang.lang.delete"></span></span>
								<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i><span data-bind="text: lang.lang.cancel"></span></span>
							</div>
							<!-- // Form actions END -->

						</div> <!-- End Widget-Body List -->
					</div>
					<!-- // Collapsible Widget END -->				          					                
			    											
				</div> <!-- // End div example-->  
			</div> <!-- // End div span12-->
		</div> <!-- // End div row-fluid-->	
	</div> 	
</script>
<script id="wCustomer-contact-person-row-tmpl" type="text/x-kendo-tmpl">
	<tr>		
		<td>
			<input id="name" name="name" 
					type="text" class="k-textbox" 
					data-bind="value: name"
					placeholder="eg: Mr. John" 
					required="required" validationMessage="required" style="width: 190px;" />
            <span data-for="name" class="k-invalid-msg"></span>
		</td>
		<td>
			<input type="text" class="k-textbox" data-bind="value: department" placeholder="eg: Accounting" style="width: 190px;" />
		</td>		
		<td>
			<input type="text" class="k-textbox" data-bind="value: phone" placeholder="eg: 012 333 444" style="width: 190px;" />
		</td>
		<td>
			<input type="text" class="k-textbox" data-bind="value: email" placeholder="eg: john@email.com" style="width: 190px;" />
		</td>		
		<td align="center">            
			<span class="glyphicons no-js delete" data-bind="click: deleteContactPerson"><i></i></span>									
		</td>		
	</tr>
</script>

<script id="wCustomerOrder" type="text/x-kendo-template">
	<div class="container-960">
		<div class="row-fluid">
			<div class="span12">
				<div id="example" class="k-content">
					<div class="hidden-print">
						<span class="pull-right glyphicons no-js remove_2" 
							onclick="javascript:window.history.back();"><i></i></span>

						<input id="ddlBranch" data-bind="value: branch_id" />						                
						<input id="ddlLocation" data-bind="value: location_id" disabled="disabled" />
						<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button> |
						<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>
					</div>
					
					<br>

					<h3 align="center"><span data-bind="text: lang.lang.reorder_customer"></span></h3>
					<p align="center"><span data-bind="text: lang.lang.note1"></span></p>
										
					<br>
				
					<div id="grid"></div>

					<br>

					<div class="hidden-print" align="center">
						<div data-role="notification" id="ntf1" data-width="300" data-height="50"></div>
						<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok" data-bind="click: save"><i></i><span data-bind="text: lang.lang.save"></span></span>
					</div>					

				</div>
			</div>
		</div>
	</div>
</script>

<script id="wInstallment" type="text/x-kendo-template">
	<div class="container-960">	
		<div class="row-fluid">		    
			<div class="span12">			
				<div id="example" class="k-content">					

					<!-- Collapsible Widget -->			
					<div class="widget">
					    <div class="widget-head">
					    	<span class="btn btn-primary pull-right" 
									onclick="javascript:window.history.back()">X</span>
					        
					        <h4 class="heading glyphicons dashboard"><i></i><span data-bind="text: lang.lang.deprisiation"></span></h4>							        	
					    </div>
					    <div class="widget-body">
						    
			    			<input id="cbbCustomer" name="cbbCustomer" 
			    				   data-role="combobox"
				                   data-placeholder="Customer..."
				                   data-auto-bind="false"
				                   data-value-primitive="true"
				                   data-filter="search"							                   
				                   data-min-length="3"							                   
				                   data-text-field="fullname"
				                   data-value-field="id"
				                   data-template="wInstallment-contact-combobox-template"
				                   data-bind="value: obj.contact_id,
				                              source: contactDS"
				                   required data-required-msg="ត្រូវការ Customer"
				                   style="width: 130px;" />						    			

							<br>

							<table class="table table-bordered table-condensed table-white">
								<thead>
									<tr>
										<th><span data-bind="text: lang.lang.month_of"></span></th>
										<th><span data-bind="text: lang.lang.reading"></span></th>								
										<th><span data-bind="text: lang.lang.usage"></span></th>
										<th><span data-bind="text: lang.lang.amount"></span></th>
										<th><span data-bind="text: lang.lang.reader"></span></th>
										<th><span data-bind="text: lang.lang.memo"></span></th>
										<th></th>
									</tr>
								</thead>	            		
			            		<tbody data-role="listview"
			            				data-auto-bind="false"	            					            					            					            			
						                data-template="wReading-center-tmpl"
						                data-bind="source: dataSource">
						        </tbody>
			            	</table>						   

							<div class="row-fluid">
					          	<!-- Form actions -->
								<div align="center">
									<span id="notification"></span>

									<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i><span data-bind="text: lang.lang.save"></span></span>
									<span class="btn btn-danger btn-icon glyphicons delete" data-bind="click: delete, visible: isEdit"><i></i><span data-bind="text: lang.lang.delete"></span></span>
									<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i><span data-bind="text: lang.lang.cancel"></span></span>
								</div>
								<!-- // Form actions END -->
							</div>

						</div> <!-- End Widget-Body List -->
					</div>
					<!-- // Collapsible Widget END -->				          					                
			    											
				</div> <!-- // End div example-->  
			</div> <!-- // End div span12-->
		</div> <!-- // End div row-fluid-->	
	</div> 	
</script>
<script id="wInstallment-row-template" type="text/x-kendo-template">	
	<tr>		
		<td>#=kendo.toString("month", "MM-yyyy")#</td>
		<td>#=amount#</td>		
		<td>#=balance#</td>			
	</tr>
</script>
<script id="wInstallment-contact-combobox-template" type="text/x-kendo-template">	
	#=wnumber# #=fullname#
</script>

<script id="wDeposit" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">

				<!-- Collapsible Widget -->			
				<div class="widget">
				    <div class="widget-head">
				    	<span class="btn btn-primary pull-right" 
								onclick="javascript:window.history.back()">X</span>
				        
				        <h4 class="heading glyphicons notes"><i></i><span data-bind="text: lang.lang.deposit_receipt"></span></h4>							        	
				    </div>
				    <div class="widget-body">					
						
						<!-- Upper Part -->
						<div class="row-fluid">
							<div class="span4">				
								<table class="table table-borderless table-condensed cart_total">
									<tr>
										<td><span data-bind="text: lang.lang.customer"></span></td>
										<td>
											<input id="cbbCustomer" name="cbbCustomer" 
							    				   data-role="combobox"
								                   data-placeholder="customer ..."
								                   data-auto-bind="false"
								                   data-value-primitive="true"
								                   data-filter="search"							                   
								                   data-min-length="3"							                   
								                   data-text-field="fullname"
								                   data-value-field="id"
								                   data-template='receipt-contact-combobox-template'
								                   data-bind="value: obj.contact_id,
								                              source: contactDS,
								                              events:{change:contactChanges}"
								                   required data-required-msg="required"
								                   style="width: 100%" />
										</td>
									</tr>					          
									<tr data-bind="visible: isEdit">				
										<td><span data-bind="text: lang.lang.number"></span></td>
										<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" readonly /></td>
									</tr>																	           
									<tr>
										<td colspan="2">
											<span data-bind="text: lang.lang.address"></span>
											<br>
											<textarea id="address" cols="0" rows="2" class="k-textbox" style="width: 100%;" data-bind="value: obj.bill_to"></textarea>
										</td>
									</tr>
								</table>
							</div>

						    <div class="span4">
						    	<div align="center">
						    		<span class="glyphicons standard circle_ok" data-bind="visible: paid"><i></i> <span data-bind="text: lang.lang.paid"></span></span>				    	
						    	</div>
						    </div>

							<div class="span4">
								<table class="table table-borderless table-condensed cart_total">
									<tr>
										<td><span data-bind="text: lang.lang.date"></span></td>
										<td>
											<input id="issuedDate" name="issuedDate" data-role="datepicker" 
													data-bind="value: obj.issued_date" data-format="dd-MM-yyyy" 
													required data-required-msg="required" />											
										</td>
									</tr>
									<tr>
						                <td><span data-bind="text: lang.lang.cheque"></span></td>						              	
						              	<td><input class="k-textbox" data-bind="value: obj.check_no" style="width:100%;" /></td>
						            </tr>
									<tr>
										<td><span data-bind="text: lang.lang.payment_method"></span></td>
										<td>
											<input id="ddlPaymentMethod" name="ddlPaymentMethod"
													data-bind="value: obj.payment_method_id"
													required data-required-msg="required"  
													style="width: 100%" />											
										</td>
									</tr>									
									<tr>
										<td><span data-bind="text: lang.lang.deposit_account"></span></td>
										<td>
											<input id="ddlDepositAccount" name="ddlDepositAccount"
													data-bind="value: obj.deposit_account_id"
													required data-required-msg="required"  
													style="width: 100%" />											
										</td>
									</tr>
									<tr>
										<td><span data-bind="text: lang.lang.cash_account"></span></td>
										<td>
											<input id="ddlCashAccount" name="ddlCashAccount"
													data-bind="value: obj.account_id"
													required data-required-msg="required"  
													style="width: 100%" />										
										</td>
									</tr>						            								
								</table>           		          	
						    </div>
						</div>

						<br>

						<!-- Item List -->
						<table class="table table-bordered table-vertical-center table-pricing table-pricing-2">
							<thead>
								<tr>									
									<th class="center"><span data-bind="text: lang.lang.item"></span></th>								
									<th class="center"><span data-bind="text: lang.lang.description"></span></th>									
									<th class="center"><span data-bind="text: lang.lang.amount"></span></th>									
								</tr>
							</thead>	            		
		            		<tbody id="lvInvoice" data-role="listview"
		            				data-auto-bind="false"	            					            					            					            			
					                data-template="wDeposit-row-template"
					                data-bind="source: lineDS">
					        </tbody>
		            	</table>						
						
						<!-- Lower Part -->
						<div class="row-fluid">							
							<span data-bind="text: lang.lang.memo"></span>:
							<br>
							<textarea id="memo" cols="0" rows="2" class="k-textbox" style="width:49%;" data-bind="value: obj.memo" placeholder="memo for customer ..."></textarea>
							<textarea id="memo2" cols="0" rows="2" class="k-textbox" style="width:49%;" data-bind="value: obj.memo2" placeholder="memo for internal ..."></textarea>																									
						</div>

						<br>						

						<!-- Buttons -->
						<div class="row-fluid">
				          	<!-- Form actions -->
							<div align="center" class="hidden-print">
								<span id="notification"></span>

								<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i><span data-bind="text: lang.lang.save"></span></span>
								<span class="btn btn-danger btn-icon glyphicons delete" data-bind="click: delete, visible: isEdit"><i></i><span data-bind="text: lang.lang.delete"></span></span>
								<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i><span data-bind="text: lang.lang.cancel"></span></span>
								<span class="btn btn-primary btn-icon glyphicons print" data-bind="click: linkPrint, visible: isEdit"><i></i> <span data-bind="text: lang.lang.print"></span></span>
							</div>
							<!-- // Form actions END -->
						</div>						

					</div> <!-- End Widget-Body List -->
				</div>
				<!-- // Collapsible Widget END -->

			</div>							
		</div>
	</div>
</script>
<script id="wDeposit-row-template" type="text/x-kendo-tmpl">		
	<tr>				
		<td>
			<input id="ccbItem" name="ccbItem"
				   data-role="combobox"
				   data-auto-bind="false"                   
                   data-value-primitive="true"				   
                   data-text-field="name"
                   data-value-field="id"
                   data-bind="value: item_id, source: itemList, events: {change : itemChanges}"
                   required data-required-msg="required" style="width: 100%" />			
		</td>		
		<td>
			<input id="description" name="description" type="text"
					class="k-textbox" 
					data-bind="value: description"					 
					required data-required-msg="required"
					style="width: 100%; margin-bottom: 0;" />
		</td>			
		<td class="right">
			<input id="amount" name="amount" 
					data-role="numerictextbox" 
					data-format="c" data-culture=#:locale#
					data-bind="value: amount, events: {change : changes}" 
					required data-required-msg="required" style="width: 100%;" />						
		</td>				
    </tr>   
</script>
<script id="wDeposit-contact-combobox-template" type="text/x-kendo-template">	
	#=number# #=fullname#
</script>

<script id="wDepositWitdraw" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-960">					
			<div id="example" class="k-content">

				<!-- Collapsible Widget -->			
				<div class="widget">
				    <div class="widget-head">
				    	<span class="btn btn-primary pull-right" 
								onclick="javascript:window.history.back()">X</span>
				        
				        <h4 class="heading glyphicons notes"><i></i>
						<span data-bind="text: lang.lang.witdraw_Deposit_Receipt"></span></h4>							        	
				    </div>
				    <div class="widget-body">					
						
						<!-- Upper Part -->
						<div class="row-fluid">
							<div class="span4">				
								<table class="table table-borderless table-condensed cart_total">
									<tr>
										<td><span data-bind="text: lang.lang.customer"></span></td>
										<td>
											<input id="cbbCustomer" name="cbbCustomer" 
							    				   data-role="combobox"
								                   data-placeholder="customer ..."
								                   data-auto-bind="false"
								                   data-value-primitive="true"
								                   data-filter="search"							                   
								                   data-min-length="3"							                   
								                   data-text-field="fullname"
								                   data-value-field="id"
								                   data-template='receipt-contact-combobox-template'
								                   data-bind="value: obj.contact_id,
								                              source: contactDS,
								                              events:{change:contactChanges}"
								                   required data-required-msg="required"
								                   style="width: 100%" />
										</td>
									</tr>					          
									<tr data-bind="visible: isEdit">				
										<td><span data-bind="text: lang.lang.number"></span></td>
										<td><input class="k-textbox" data-bind="value: obj.number" style="width:100%;" readonly /></td>
									</tr>																	           
									<tr>
										<td colspan="2">
											<span data-bind="text: lang.lang.address"></span>
											<br>
											<textarea id="address" cols="0" rows="2" class="k-textbox" style="width: 100%;" data-bind="value: obj.bill_to"></textarea>
										</td>
									</tr>
								</table>
							</div>

						    <div class="span4">
						    	<div align="center">
						    		<span class="glyphicons standard circle_ok" data-bind="visible: paid"><i></i> <span data-bind="text: lang.lang.paid"></span></span>				    	
						    	</div>
						    </div>

							<div class="span4">
								<table class="table table-borderless table-condensed cart_total">
									<tr>
										<td><span data-bind="text: lang.lang.date"></span></td>
										<td>
											<input id="issuedDate" name="issuedDate" data-role="datepicker" 
													data-bind="value: obj.issued_date" data-format="dd-MM-yyyy" 
													required data-required-msg="required" />											
										</td>
									</tr>																									
									<tr>
										<td><span data-bind="text: lang.lang.deposit_account"></span></td>
										<td>
											<input id="ddlDepositAccount" name="ddlDepositAccount"
													data-bind="value: obj.deposit_account_id"
													required data-required-msg="required"  
													style="width: 100%" />											
										</td>
									</tr>
									<tr>
										<td><span data-bind="text: lang.lang.cash_account"></span></td>
										<td>
											<input id="ddlCashAccount" name="ddlCashAccount"
													data-bind="value: obj.account_id"
													required data-required-msg="required"  
													style="width: 100%" />										
										</td>
									</tr>						            								
								</table>           		          	
						    </div>
						</div>

						<br>

						<div class="row-fluid">
	
							<!-- Column -->
							<div class="span6">
							
								<!-- Widget -->
								<div class="widget widget-3">
								
									<!-- Widget heading -->
									<div class="widget-head">
										<h4 class="heading"><span class="glyphicons coins"><i></i></span>Witdraw Amount</h4>
									</div>
									<!-- // Widget heading END -->
									
									<div class="widget-body large">
										<span data-bind="text: total"></span>
									</div>
									
									<!-- Widget footer -->
									<div class="widget-footer align-right">
										
									</div>
									<!-- // Widget footer END -->
									
								</div>
								<!-- // Widget END -->
								
							</div>
							<!-- // Column END -->
							
							<!-- Column -->
							<div class="span6">
							
								<!-- Widget -->
								<div class="widget widget-3">
								
									<!-- Widget heading -->
									<div class="widget-head">
										<h4 class="heading"><span class="glyphicons pencil"><i></i></span><span data-bind="text: lang.lang.memo"></span></h4>
									</div>
									<!-- // Widget heading END -->
									
									<div class="widget-body">
										<textarea id="memo" cols="0" rows="2" class="k-textbox" style="width:95%;" data-bind="value: obj.memo" placeholder="memo for customer ..."></textarea>
										<textarea id="memo2" cols="0" rows="2" class="k-textbox" style="width:95%;" data-bind="value: obj.memo2" placeholder="memo for internal ..."></textarea>	
									</div>
									
								</div>
								<!-- // Widget END -->
								
							</div>
							<!-- // Column -->							
							
						</div>						

						<br>						

						<!-- Buttons -->
						<div class="row-fluid">
				          	<!-- Form actions -->
							<div align="center">
								<span id="notification"></span>

								<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i><span data-bind="text: lang.lang.save"></span></span>
								<span class="btn btn-danger btn-icon glyphicons delete" data-bind="click: delete, visible: isEdit"><i></i><span data-bind="text: lang.lang.delete"></span></span>
								<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i><span data-bind="text: lang.lang.cancel"></span></span>
								<span class="btn btn-primary btn-icon glyphicons print" data-bind="click: linkPrint, visible: isEdit"><i></i> <span data-bind="text: lang.lang.print"></span></span>
							</div>
							<!-- // Form actions END -->
						</div>						

					</div> <!-- End Widget-Body List -->
				</div>
				<!-- // Collapsible Widget END -->

			</div>							
		</div>
	</div>
</script>
<script id="wDepositWitdraw-contact-combobox-template" type="text/x-kendo-template">	
	#=number# #=fullname#
</script>

<script id="wMeter" type="text/x-kendo-template">
	<div class="container-960">	
		<div class="row-fluid">		    
			<div class="span12">			
				<div id="example" class="k-content">					

					<!-- Collapsible Widget -->			
					<div class="widget">
					    <div class="widget-head">
					    	<span class="btn btn-primary pull-right" 
									onclick="javascript:window.history.back()">X</span>
					        
					        <h4 class="heading glyphicons dashboard"><i></i>
							<span data-bind="text: lang.lang.meter"></span></h4>							        	
					    </div>
					    <div class="widget-body">

						    <div class="row-fluid">
						    		<div class="span6">
						    			<h5 class="heading-arrow" style="font-size: small;"><span data-bind="text: lang.lang.number1"></span> <span data-bind="text: obj.number"></span> </h5>
						    			
						    			<input id="cbbCustomer" name="cbbCustomer" 
						    				   data-role="combobox"
							                   data-placeholder="customer ..."
							                   data-auto-bind="false"
							                   data-value-primitive="true"
							                   data-filter="search"							                   
							                   data-min-length="3"							                   
							                   data-text-field="fullname"
							                   data-value-field="id"
							                   data-template="wMeter-contact-combobox-template"
							                   data-bind="value: obj.contact_id,
							                              source: contactDS, events:{change: contactChanges}"
							                   required data-required-msg="ត្រូវការ Customer"
							                   style="width: 100%" />
						    			
						    			<br><br>

						    			<div class="row-fluid">
						    				<div class="span6">
								    			<label><span data-bind="text: lang.lang.deposit"></span> </label>
												<a data-bind="attr:{ href: deposit_link }"><span data-bind="text: obj.deposit[0].number"></span></a>
								    			|
								    			<span data-bind="text: deposit_amount"></span>
											</div>
											<div class="span6">
								    			<label><span data-bind="text: lang.lang.service2"></span> </label>
								    			<a data-bind="attr:{ href: invoice_link }"><span data-bind="text: obj.invoice[0].number"></span></a>
								    			|
								    			<span data-bind="text: invoice_amount"></span>
											</div>
										</div>

										<br>

						    			<div class="row-fluid">
						    				<div class="span6">
								    			<label for="latitute"><span data-bind="text: lang.lang.latitute"></span> </label>
												<div class="input-prepend">
													<span class="add-on glyphicons direction"><i></i></span>
													<input type="text" class="input-large span12" data-bind="value: obj.latitute, events:{change: loadMap}" placeholder="012345.67897">
												</div>
											</div>
											<div class="span6">
								    			<label for="longtitute"><span data-bind="text: lang.lang.longtitute"></span> </label>
								    			<div class="input-prepend">
													<span class="add-on glyphicons google_maps"><i></i></span>
													<input type="text" class="input-large span12" data-bind="value: obj.longtitute, events:{change: loadMap}" placeholder="012345.67897">
												</div>
											</div>
										</div>

										<!-- Group -->
										<div class="control-group">
											<label class="control-label"><span data-bind="text: lang.lang.memo"></span></label>
											<div class="controls">
												<input class="k-textbox" 
						                  				data-bind="value: obj.memo"
						                  				style="width: 100%;" />
											</div>
										</div>
										<!-- // Group END -->
										
										<div id="map" style="width: 450px; height: 250px;"></div>
						    		</div>

							    	<!-- Right Span -->
							    	<div class="span6">

							    		<!-- Group -->
										<div class="control-group">
											<label class="control-label"><span data-bind="text: lang.lang.location"></span> <span style="color:red">*</span></label>
											<div class="controls">
												<input id="ddlLocation" name="ddlLocation"
													   data-role="dropdownlist"
						                  			   data-option-label="(--- Select ---)"				                  			   
									                   data-auto-bind="true"
									                   data-value-primitive="true"
									                   data-text-field="name"
									                   data-value-field="id"
									                   data-bind="value: obj.location_id, source: locationDS"
									                   required data-required-msg="required"
									                   style="width: 100%;" />
											</div>
										</div>
										<!-- // Group END -->

										<!-- Group -->
										<div class="control-group">
											<label class="control-label"><span data-bind="text: lang.lang.type1"></span> <span style="color:red">*</span></label>
											<div class="controls">
												<input id="meterType" name="meterType"
													   data-role="dropdownlist"
						                  			   data-option-label="(--- Select ---)"				                  			   
									                   data-auto-bind="false"
									                   data-value-primitive="true"
									                   data-text-field="name"
									                   data-value-field="id"
									                   data-bind="value: obj.item_id, source: itemDS"
									                   required data-required-msg="required"
									                   style="width: 100%;" />
											</div>
										</div>
										<!-- // Group END -->										

										<!-- Group -->
										<div class="control-group">
											<label class="control-label"><span data-bind="text: lang.lang.number2"></span> <span style="color:red">*</span></label>
											<div class="controls">
												<input id="meterNo" name="meterNo" class="k-textbox" 
						                  				data-bind="value: obj.number, events:{change:checkExistingNumber}" 
						                  				required data-required-msg="required"
						                  				style="width: 100%;" />
						                  		<span data-bind="visible: isDuplicateNumber" style="color: red;"><span data-bind="text: lang.lang.duplicate_number"></span></span>
											</div>
										</div>
										<!-- // Group END -->

										<!-- Group -->
										<div class="control-group">
											<label class="control-label"><span data-bind="text: lang.lang.startup_reading"></span> <span style="color:red">*</span></label>
											<div class="controls">
												<input id="txtStarupReading" name="txtStarupReading" class="k-textbox" 
						                  				data-bind="value: obj.startup_reading" 
						                  				required data-required-msg="required"
						                  				style="width: 100%;" />						                  		
											</div>
										</div>
										<!-- // Group END -->

										<!-- Group -->
										<div class="control-group">
											<label class="control-label"><span data-bind="text: lang.lang.number_of_digits"></span> <span style="color:red">*</span></label>
											<div class="controls">
												<input id="maxNo" name="maxNo" 
						                  				data-role="numerictextbox" 
						                  				data-bind="value: obj.max_number" 
						                  				data-format="n0" min="0" 
						                  				placeholder="ឧ.10,000/100,000" 
						                  				required data-required-msg="required"
						                  				style="width: 100%;" />
											</div>
										</div>
										<!-- // Group END -->

										<!-- Group -->
										<div class="control-group">
											<label class="control-label"><span data-bind="text: lang.lang.status"></span> <span style="color:red">*</span></label>
											<div class="controls">
												<input id="meterStatus" name="meterStatus"
						                  				data-role="dropdownlist"
						                  				data-value-primitive="true"													
						                  				data-text-field="name" 
						                  				data-value-field="id"				                  						                  				
						                  				data-bind="source: statusList, value: obj.status"
						                  				data-option-label="(--- Select ---)"
														required data-required-msg="required"
														style="width: 100%;" />
											</div>
										</div>
										<!-- // Group END -->									
										
										<!-- Group -->
										<div class="control-group">
											<label class="control-label"><span data-bind="text: lang.lang.tariff"></span> </label>
											<div class="controls">
												<input data-role="dropdownlist"
						                  			   data-option-label="(--- Select ---)"				                  			   
									                   data-auto-bind="false"
									                   data-value-primitive="true"
									                   data-text-field="name"
									                   data-value-field="id"
									                   data-bind="value: obj.tariff_id, source: tariffList"
									                   style="width: 100%;" />
											</div>
										</div>
										<!-- // Group END -->

										<!-- Group -->
										<div class="control-group">
											<label class="control-label"><span data-bind="text: lang.lang.exemption"></span> </label>
											<div class="controls">
												<input data-role="dropdownlist"
						                  			   data-option-label="(--- Select ---)"			                  			   
									                   data-auto-bind="false"
									                   data-value-primitive="true"
									                   data-text-field="name"
									                   data-value-field="id"
									                   data-bind="value: obj.exemption_id, source: exemptionList"
									                   style="width: 100%;" />
											</div>
										</div>
										<!-- // Group END -->

										<!-- Group -->
										<div class="control-group">
											<label class="control-label"><span data-bind="text: lang.lang.maintenance"></span> </label>
											<div class="controls">
												<input data-role="dropdownlist"
						                  			   data-option-label="(--- Select ---)"			                  			   
									                   data-auto-bind="false"
									                   data-value-primitive="true"
									                   data-text-field="name"
									                   data-value-field="id"
									                   data-bind="value: obj.maintenance_id, source: maintenanceList"
									                   style="width: 100%;" />
											</div>
										</div>
										<!-- // Group END -->

									</div>
									<!-- End Right Span -->

							</div>

							<br>

							<div class="row-fluid">
					          	<!-- Form actions -->
								<div align="center">
									<span id="notification"></span>

									<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i><span data-bind="text: lang.lang.save"></span></span>
									<span class="btn btn-danger btn-icon glyphicons delete" data-bind="click: delete, visible: isEdit"><i></i><span data-bind="text: lang.lang.delete"></span></span>
									<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i><span data-bind="text: lang.lang.cancel"></span></span>
								</div>
								<!-- // Form actions END -->
							</div>

						</div> <!-- End Widget-Body List -->
					</div>
					<!-- // Collapsible Widget END -->				          					                
			    											
				</div> <!-- // End div example-->  
			</div> <!-- // End div span12-->
		</div> <!-- // End div row-fluid-->	
	</div> 	
</script>
<script id="wMeter-row-template" type="text/x-kendo-template">	
	<tr>		
		<td>#=number#</td>
		<td>#=item_name#</td>		
		<td>			
			<div>#=tariffs.name!==undefined?tariffs.name:""#</div>
			<div>#=exemptions.name!==undefined?exemptions.name:""#</div>
			<div>#=maintenances.name!==undefined?maintenances.name:""#</div>
		</td>
		<td>
			#if(reactive_of>0){#
				REACTIVE
			#}else if(backup_of>0){#
				BACKUP
			#}else{#
				
			#}#
		</td>
		<td>#:status==1 ? "Active" : "Inactive"#</td>
		<td align="center">            
			<span class="glyphicons no-js delete" data-bind="click: delete"><i></i></span>
			<span class="glyphicons no-js edit" data-bind="click: edit"><i></i></span>						
		</td>		
	</tr>
</script>
<script id="wMeter-contact-combobox-template" type="text/x-kendo-template">	
	#=wnumber# #=fullname#
</script>

<script id="wReadingCenter" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">				
				
				<!-- Collapsible Widget -->			
				<div class="widget">
				    <div class="widget-head">
				    	<span class="btn btn-primary pull-right" 
								onclick="javascript:window.history.back()">X</span>
				        
				        <h4 class="heading glyphicons dashboard"><i></i><span data-bind="text: lang.lang.meter_reading"></span></h4>							        	
				    </div>
				    <div class="widget-body">					
				
			            <div class="hidden-print">	            							            	
			            	<input data-role="combobox"
				                   data-placeholder="number..."
				                   data-auto-bind="false"
				                   data-value-primitive="true"
				                   data-filter="contains"							                   
				                   data-min-length="3"							                   
				                   data-text-field="number"
				                   data-value-field="id"
				                   data-bind="value: meter_id,
				                              source: meterDS"
				                   style="width: 300px;" />

				            <button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button> |
							<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>
			            </div>

			            <br>

			            <table class="table table-bordered table-condensed table-white">
							<thead>
								<tr>
									<th><span data-bind="text: lang.lang.month"></span></th>
									<th><span data-bind="text: lang.lang.reading"></span></th>								
									<th><span data-bind="text: lang.lang.usage"></span></th>
									<th><span data-bind="text: lang.lang.amount"></span></th>
									<th><span data-bind="text: lang.lang.reader"></span></th>
									<th><span data-bind="text: lang.lang.memo"></span></th>
									<th></th>
								</tr>
							</thead>	            		
		            		<tbody data-role="listview"
		            				data-auto-bind="false"	            					            					            					            			
					                data-template="wReading-center-tmpl"
					                data-bind="source: dataSource">
					        </tbody>
		            	</table>			    

					    <div data-role="pager" 
					    	data-auto-bind="false"
				            data-bind="source: dataSource"></div>

				    </div> <!-- End Widget-Body List -->
				</div>
				<!-- // Collapsible Widget END -->			   		        
				          
			</div> <!-- //End div span12-->		
		</div> <!-- //End div row-fluid-->
	</div>
</script>
<script id="wReading-center-tmpl" type="text/x-kendo-tmpl">
	<tr>					
		<td>#=kendo.toString(new Date(month_of), "MM-yyyy")#</td>		
		<td class="right">#=current#</td>
		<td class="right">#=usage#</td>
		<td></td>		
		<td></td>		
		<td>#=memo#</td>
		<td class="center">
			#var i = banhji.wReadingCenter.dataSource.indexOf(data);#			
			#if(i==0){#														
				<a href="\#/wEdit_reading/#=id#" class="btn-action glyphicons pencil btn-success"><i></i></a>
			#}#			
		</td>	
    </tr>
</script>
<script id="wEditReading" type="text/x-kendo-template">
	<div class="container-960">	
		<div class="row-fluid">		    
			<div class="span12">			
				<div id="example" class="k-content">					

					<!-- Collapsible Widget -->			
					<div class="widget">
					    <div class="widget-head">
					    	<span class="btn btn-primary pull-right" 
									onclick="javascript:window.history.back()">X</span>
					        
					        <h4 class="heading glyphicons dashboard"><i></i>Edit Reading</h4>							        	
					    </div>
					    <div class="widget-body">

					    	<div class="box-generic">					    	

						    	<div class="row-fluid">
									<div class="span2">	
										<!-- Group -->
										<div class="control-group">							
											<label for="registered_date">Date <span style="color:red">*</span></label>
					              			<input id="registered_date" name="registered_date" 
								            		data-role="datepicker"			            		
					            					data-bind="value: obj.month_of" 
					            					data-format="dd-MM-yyyy"
					            					data-parse-formats="yyyy-MM-dd" 
					            					placeholder="dd-MM-yyyy" required data-required-msg="required" style="width: 100%;" />
										</div>
										<!-- // Group END -->											
									</div>

									<div class="span2">	
										<!-- Group -->
										<div class="control-group">							
											<label for="txtFromDate">From <span style="color:red">*</span></label>
					              			<input id="txtFromDate" name="txtFromDate" 
								            		data-role="datepicker"			            		
					            					data-bind="value: obj.from_date" 
					            					data-format="dd-MM-yyyy"
					            					data-parse-formats="yyyy-MM-dd" 
					            					placeholder="dd-MM-yyyy" required data-required-msg="from ..." style="width: 100%;" />
										</div>
										<!-- // Group END -->											
									</div>

									<div class="span2">	
										<!-- Group -->
										<div class="control-group">							
											<label for="txtToDate">To <span style="color:red">*</span></label>
					              			<input id="txtToDate" name="txtToDate" 
								            		data-role="datepicker"			            		
					            					data-bind="value: obj.to_date" 
					            					data-format="dd-MM-yyyy"
					            					data-parse-formats="yyyy-MM-dd" 
					            					placeholder="dd-MM-yyyy" required data-required-msg="required" style="width: 100%;" />
										</div>
										<!-- // Group END -->											
									</div>

									<div class="span2">	
										<!-- Group -->
										<div class="control-group">							
											<label for="strPrevious">Previouse</label>
					              			<span id="strPrevious" name="strPrevious" data-bind="text: obj.previous"></span>
										</div>
										<!-- // Group END -->											
									</div>

									<div class="span2">	
										<!-- Group -->
										<div class="control-group">							
											<label for="txtCurrent">Current <span style="color:red">*</span></label>
					              			<input id="txtCurrent" name="txtCurrent" 
					              				   data-role="numerictextbox"
								                   data-format="n0"								                   
								                   data-bind="value: obj.current, events:{change: readingChanges}"
								                   required data-required-msg="required" style="width: 100%;">
										</div>
										<!-- // Group END -->											
									</div>

									<div class="span2">	
										<!-- Group -->
										<div class="control-group">							
											<label for="strUsage">Usage</label>
					              			<span id="strUsage" name="strUsage" data-bind="text: obj.usage"></span>
										</div>
										<!-- // Group END -->											
									</div>
								</div>

								<div class="row-fluid">
									<div class="span4">	
										<!-- Group -->
										<div class="control-group">							
											<label for="ddlReader">Reader <span style="color:red">*</span></label>
					              			<input id="ddlReader" name="ddlReader"
					              				   data-role="dropdownlist"
								                   data-auto-bind="false"
								                   data-value-primitive="true"
								                   data-text-field="name"
								                   data-value-field="id"
								                   data-bind="value: obj.read_by, source: readerDS"
								                   data-option-label="(--- Select ---)"								                   						             
					            				   required data-required-msg="required" style="width: 100%;" />
										</div>
										<!-- // Group END -->											
									</div>

									<div class="span8">	
										<!-- Group -->
										<div class="control-group">							
											<label for="txtMemo">Memo </label>
					              			<input id="txtMemo" class="k-textbox" data-bind="value: obj.memo" style="width: 100%;" />
										</div>
										<!-- // Group END -->											
									</div>
								</div>

					    	</div>

					    	<div class="well" data-bind="visible: hasInvoice">
								<table class="table table-invoice">
									<tbody>
										<tr>
											<td>Number</td>
											<td class="right">
												<input id="txtNumber" name="txtNumber"
												   type="text" class="k-textbox" 					              				  					                   
								                   data-bind="value: invoice.number, enabled: hasInvoice"
								                   required data-required-msg="required" style="width: 170px;" />
											</td>
											<td width="30%"></td>
											<td>Billing Date</td>
											<td class="right">												
												<input id="txtIssuedDate" name="txtIssuedDate" 
								            		data-role="datepicker"			            		
					            					data-bind="value: invoice.issued_date, enabled: hasInvoice" 
					            					data-format="dd-MM-yyyy"
					            					data-parse-formats="yyyy-MM-dd" 
					            					placeholder="dd-MM-yyyy" 
					            					required data-required-msg="required" />
											</td>											
										</tr>
										<tr>
											<td>Month Of</td>
											<td class="right">												
												<input id="txtMonthOf" name="txtMonthOf" 
								            		data-role="datepicker"			            		
					            					data-bind="value: invoice.month_of, enabled: hasInvoice" 
					            					data-format="MM-yyyy"
					            					data-parse-formats="yyyy-MM-dd" 
					            					placeholder="MM-yyyy" 
					            					required data-required-msg="required" />
											</td>
											<td width="30%"></td>
											<td>Payment Date</td>
											<td class="right">												
												<input id="txtPaymentDate" name="txtPaymentDate" 
								            		data-role="datepicker"			            		
					            					data-bind="value: invoice.payment_date, enabled: hasInvoice" 
					            					data-format="dd-MM-yyyy"
					            					data-parse-formats="yyyy-MM-dd" 
					            					placeholder="dd-MM-yyyy" 
					            					required data-required-msg="required" />
											</td>											
										</tr>
										<tr>
											<td></td>
											<td></td>
											<td width="30%"></td>
											<td>Due Date</td>
											<td class="right">												
												<input id="txtDueDate" name="txtDueDate" 
								            		data-role="datepicker"			            		
					            					data-bind="value: invoice.due_date, enabled: hasInvoice" 
					            					data-format="dd-MM-yyyy"
					            					data-parse-formats="yyyy-MM-dd" 
					            					placeholder="dd-MM-yyyy" 
					            					required data-required-msg="required" />
											</td>
										</tr>										
									</tbody>
								</table>

								<table class="table table-bordered table-condensed table-white">
									<thead>
										<tr>
											<th>Description</th>
											<th>Qty</th>								
											<th>Price</th>
											<th>Amount</th>											
										</tr>
									</thead>	            		
				            		<tbody data-role="listview"
				            				data-auto-bind="false"	            					            					            					            			
							                data-template="wInvoice-line-wEdit-reading-center-tmpl"
							                data-bind="source: invoiceLineDS">
							        </tbody>					        		
				            	</table>

							</div>

							<br>

							<div class="row-fluid">
					          	<!-- Form actions -->
								<div align="center">
									<span id="notification"></span>

									<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i>Save</span>
									<span class="btn btn-danger btn-icon glyphicons delete" data-bind="click: delete, visible: isEdit"><i></i>Delete</span>
									<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i>Cancel</span>
								</div>
								<!-- // Form actions END -->
							</div>

						</div> <!-- End Widget-Body List -->
					</div>
					<!-- // Collapsible Widget END -->				          					                
			    											
				</div> <!-- // End div example-->  
			</div> <!-- // End div span12-->
		</div> <!-- // End div row-fluid-->	
	</div> 	
</script>
<script id="wInvoice-line-wEdit-reading-center-tmpl" type="text/x-kendo-tmpl">
	<tr>					
		<td>#=description#</td>				
		<td class="right">
			#if(type=="tariff"){#
				#=unit#
			#}#
		</td>
		<td class="right">
			#if(type=="tariff"){#
				#=kendo.toString(price, "c0", locale)#
			#}#
		</td>				
		<td class="right">
			#if(type=="tariff"){#
				#=kendo.toString(amount, "c0", locale)#
			#}#
		</td>			
    </tr>
</script>

<script id="wReading" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">
					<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

					<h3><span data-bind="text: lang.lang.reading1"></span></h3>					
					
		            <div class="box-generic">
		            	<input data-role="datepicker" 
		            			data-bind="value: monthOfSearch" 
		            			data-start="year" data-depth="year" 
		            			data-format="MM-yyyy" placeHolder="MM-yyyy" />						
										
						<input id="ddlBranch" data-bind="value: branch_id" />						                
			            <input id="ddlLocation" data-bind="value: location_id" disabled="disabled" />
		            	|						            	
		            	<input data-role="combobox"
			                   data-placeholder="number ..."
			                   data-auto-bind="false"
			                   data-value-primitive="true"
			                   data-filter="contains"							                   
			                   data-min-length="3"							                   
			                   data-text-field="number"
			                   data-value-field="id"
			                   data-bind="value: meter_id,
			                              source: meterDS" />
		          		
		          		<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button> 		          								          		
		            </div>						        

			        <div align="center">
			        	<h3 data-bind="text: strMonthOf"</h3>
			        	<h4 data-bind="text: strTransformer"></h4>
			        </div>
			        
			        <div class="demo-section">			        
					    <table class="table table-bordered table-striped table-white">
					        <thead>
					            <tr>
					                <th><span data-bind="text: lang.lang.customer"></span></th>					                						                
					                <th><span data-bind="text: lang.lang.meter2"></span></th>					                
					                <th><span data-bind="text: lang.lang.new_round"></span></th>
					                <th><span data-bind="text: lang.lang.previouse"></span></th>
					                <th><span data-bind="text: lang.lang.current"></span></th>					                
					                <th class="right"><span data-bind="text: lang.lang.total"></span></th>
					            </tr>
					        </thead>
					        <tbody data-role="listview"
					        		data-auto-bind="false"					        		 
					        		data-template="wReading-row-template" 
					        		data-bind="source: dataSource"></tbody>
					        <tfoot data-template="wReading-footer-template" 
					        		data-bind="source: this"></tfoot>						        
					    </table>

					    <div id="pager" class="k-pager-wrap"
					    	 data-auto-bind="false"
				             data-role="pager" data-bind="source: dataSource"></div>
					    
				    </div>				       
			        
					<br>					

			        <div>			        	
						<span data-bind="text: lang.lang.month"></span>
			        	<input id="monthOf" name="monthOf" data-role="datepicker" 
				            			data-bind="value: month_of" 
				            			data-start="year" data-depth="year" data-format="MM-yyyy"
				            			required data-required-msg="required"
				            			placeholder="MM-yyyy" />				    	
				    	
						<span data-bind="text: lang.lang.from"></span>
                        <input type="text" data-role='datepicker' 
                        		id="fromDate" name="fromDate"
                        		data-bind="value: from_date"	            				
                        		data-type="date" data-format="dd-MM-yyyy"
                        		placeholder="ថ្ងៃ-ខែ-ឆ្នាំ"
                        		required data-required-msg="required"  />			            
			            
						<span data-bind="text: lang.lang.to"></span>
                        <input type="text" data-role='datepicker' 
                        		id ="toDate" name="toDate"
                        		data-bind="value: to_date"	            				 
                        		data-type="date" data-format="dd-MM-yyyy"
                        		placeholder="ថ្ងៃ-ខែ-ឆ្នាំ"
                        		required data-required-msg="ដល់ថ្ងៃណា?" 
                        		data-greaterdate-field="fromDate" 
                        		data-greaterdate-msg='ត្រូវថ្មីជាង ថ្ងៃអានចាប់ពី' />                        
			            			        	
						<span data-bind="text: lang.lang.reader"></span>
			          	<input data-role="dropdownlist"
			                   data-option-label="(--- Select ---)"
			                   data-value-primitive="true"
			                   data-text-field="fullname"
			                   data-value-field="id"
			                   data-bind="value: read_by, source: readerDS" />            
			        </div>
			        
			        <br>

			        <!-- Form actions -->
					<div align="center">
						<span id="notification"></span>

						<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i><span data-bind="text: lang.lang.save"></span></span>						
						<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i><span data-bind="text: lang.lang.cancel"></span></span>
					</div>
					<!-- // Form actions END -->

				</div> <!-- //End div example-->            
			</div> <!-- //End div span12-->		
		</div> <!-- //End div row-fluid-->
	</div>
</script>
<script id="wReading-row-template" type="text/x-kendo-tmpl">
	<tr>					
		<td>#=fullname#</td>		
		<td>#=number#</td>		
		<td align="center">
			<input type="checkbox" data-bind="checked: new_round, events:{ change: onChange }" />
		</td>		
		<td>
			<input data-role="numerictextbox"
				   data-min="0"
				   data-format="n0"                                      
                   data-bind="value: previous, events:{ change: onChange }"
                   style="width: 100px" #=previous>0?disabled='disabled':''# />
		</td>
		<td>
			<input class="txt#=index#" data-role="numerictextbox"
				   data-min="0"
				   data-format="n0"                                      
                   data-bind="value: current, events:{ change: onChange }"                   
                   style="width: 100px" />            
			<span class="label label-important" data-bind="invisible: isValid"><strong>Invalid!</strong></span>			
		</td>		
		<td class="right" data-bind="text: usage"></td>	
    </tr>
</script>
<script id="wReading-footer-template" type="text/x-kendo-template">
    <tr>    	
        <td class="right" colspan="8" style="font-size:30px;">            
			<span data-bind="text: lang.lang.total"></span>: #:total()# m<sup>3</sup>
        </td>
    </tr>
</script>

<script id="wIRReader" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">
					<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

					<h3><span data-bind="text: lang.lang.ir_reader"></span></h3>				    
				   
		            <div class="box-generic">
		            	<input id="myFile" type="file" accept="text/csv">
		            	<button type="button" class="k-button btn-info" data-bind="click: readFile">
						<span data-bind="text: lang.lang.upload"></span></button>		            	
		            	<br>
						<span data-bind="text: uploadStatus"></span>
		            </div>			        
			        
			        <div class="demo-section">			        
					    <table class="table table-bordered table-striped table-white">
					        <thead>
					            <tr>
					                <th><span data-bind="text: lang.lang.customer"></span></th>					                						                
					                <th><span data-bind="text: lang.lang.meter2"></span></th>					                
					                <th><span data-bind="text: lang.lang.new_round"></span></th>
					                <th><span data-bind="text: lang.lang.previouse"></span></th>
					                <th><span data-bind="text: lang.lang.current"></span></th>					                
					                <th class="right"><span data-bind="text: lang.lang.total"></span></th>
					            </tr>
					        </thead>
					        <tbody data-role="listview"
					        		data-auto-bind="false"					        		 
					        		data-template="wIRReader-row-template" 
					        		data-bind="source: dataSource"></tbody>
					        <tfoot data-template="wIRReader-footer-template" 
					        		data-bind="source: this"></tfoot>						        
					    </table>

					    <div id="pager" class="k-pager-wrap"
					    	 data-auto-bind="false"
				             data-role="pager" data-bind="source: dataSource"></div>
					    
				    </div>				       
			        
					<br>					

			        <div>			        	
						<span data-bind="text: lang.lang.month"></span>
			        	<input id="monthOf" name="monthOf" data-role="datepicker" 
		            			data-bind="value: month_of" 
		            			data-start="year" data-depth="year" data-format="MM-yyyy"
		            			required data-required-msg="ត្រូវការ Month Of"
		            			placeholder="ខែ-ឆ្នាំ" />					    	
				    	
						<span data-bind="text: lang.lang.from"></span>
                        <input type="text" data-role='datepicker' 
                        		id="fromDate" name="fromDate"
                        		data-bind="value: from_date"	            				
                        		data-type="date" data-format="dd-MM-yyyy"
                        		placeholder="ថ្ងៃ-ខែ-ឆ្នាំ"
                        		required data-required-msg="ត្រូវការ ថ្ងៃអានចាប់ពី"  />                        	    				        
			            
			            
						<span data-bind="text: lang.lang.to"></span>
                        <input type="text" data-role='datepicker' 
                        		id ="toDate" name="toDate"
                        		data-bind="value: to_date"	            				 
                        		data-type="date" data-format="dd-MM-yyyy"
                        		placeholder="dd-MM-yyyy"
                        		required data-required-msg="required" 
                        		data-greaterdate-field="fromDate" 
                        		data-greaterdate-msg="required" />			            			        
			        	
						<span data-bind="text: lang.lang.reader"></span>
			          	<input data-role="dropdownlist"
			                   data-option-label="(--- Select ---)"
			                   data-value-primitive="true"
			                   data-text-field="fullname"
			                   data-value-field="id"
			                   data-bind="value: read_by, source: readerDS" />            
			        </div>
			        
			        <br>

			        <!-- Form actions -->
					<div align="center">
						<span id="notification"></span>

						<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i><span data-bind="text: lang.lang.save"></span></span>						
						<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i><span data-bind="text: lang.lang.cancel"></span></span>
					</div>
					<!-- // Form actions END -->

				</div> <!-- //End div example-->            
			</div> <!-- //End div span12-->		
		</div> <!-- //End div row-fluid-->
	</div>
</script>
<script id="wIRReader-row-template" type="text/x-kendo-tmpl">
	<tr>					
		<td>#=fullname#</td>		
		<td>#=number#</td>		
		<td align="center">
			<input type="checkbox" data-bind="checked: new_round, events:{ change: onChange }" />
		</td>		
		<td>
			<input data-role="numerictextbox"
				   data-min="0"
				   data-format="n0"                                      
                   data-bind="value: previous, events:{ change: onChange }"
                   style="width: 100px" #=previous>0?disabled='disabled':''# />
		</td>
		<td>
			<input class="txt#=index#" data-role="numerictextbox"
				   data-min="0"
				   data-format="n0"                                      
                   data-bind="value: current, events:{ change: onChange }"                   
                   style="width: 100px" />            
			<span class="label label-important" data-bind="invisible: isValid"><strong>invalid!</strong></span>			
		</td>		
		<td class="right" data-bind="text: usage"></td>	
    </tr>
</script>
<script id="wIRReader-footer-template" type="text/x-kendo-template">
    <tr>    	
        <td class="right" colspan="8" style="font-size:30px;">            
			<span data-bind="text: lang.lang.total"></span>: #:total()# m<sup>3</sup>
        </td>
    </tr>
</script>

<script id="wReadingBook" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">
					<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

					<h3><span data-bind="text: lang.lang.reading_book"></span></h3>					
					
		            <div class="box-generic">										
						<input id="ddlBranch" data-bind="value: branch_id" />						                
			            <input id="ddlLocation" data-bind="value: location_id" disabled="disabled" />		            	
		          		
		          		<button id="search" type="button" data-role="button"><i class="icon-search"></i></button>						          		
		            </div>			        
			        
			        <div id="grid"></div>
			        
				</div> <!-- //End div example-->            
			</div> <!-- //End div span12-->		
		</div> <!-- //End div row-fluid-->
	</div>
</script>

<script id="wInvoice" type="text/x-kendo-template">	
	<div class="container-fluid">
		<div class="row-fluid">
			<div class="span12">
				<div id="example" class="k-content">
					<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

					<h3><span data-bind="text: lang.lang.invoice"></span></h3>

					<br>
					
					<div class="hidden-print">
						<input data-role="datepicker" 
		            			data-bind="value: monthOfSearch" 
		            			data-start="year" data-depth="year" 
		            			data-format="MM-yyyy" placeHolder="Month Of" />						
										
						<input id="ddlBranch" data-bind="value: branch_id" />						                
			            <input id="ddlLocation" data-bind="value: location_id" disabled="disabled" />
		            	|						            	
		            	<input data-role="combobox"
			                   data-placeholder="number ..."
			                   data-auto-bind="false"
			                   data-value-primitive="true"
			                   data-filter="contains"							                   
			                   data-min-length="3"							                   
			                   data-text-field="number"
			                   data-value-field="id"
			                   data-bind="value: meter_id,
			                              source: meterDS" />
		          					          					          			          		
		          		<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button> |
						<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>								
					</div>											

					<br>
					
					<table class="table table-bordered table-striped table-white">
				        <thead>
				            <tr>
				                <th><input type="checkbox" data-bind="checked: chkAll, events: {change : checkAll}" /></th>				                				                
				                <th><span data-bind="text: lang.lang.customer"></span></th>					                
				                <th><span data-bind="text: lang.lang.meter"></span></th>				                			                
				                <th><span data-bind="text: lang.lang.previouse"></span></th>
				                <th><span data-bind="text: lang.lang.current"></span></th>
				                <th><span data-bind="text: lang.lang.total"></span></th>	                    
				            </tr>
				        </thead>
				        <tbody data-role="listview" 
				        		data-template="wInvoice-row-template" 
				        		data-auto-bind="false" 
				        		data-bind="source: readingDS"></tbody>
				        <tfoot data-template="wInvoice-footer-template" 
					        		data-bind="source: this"></tfoot>	            
				    </table>
				    
				    <div id="pager" class="k-pager-wrap"
				    	 data-auto-bind="false"
			             data-role="pager" data-bind="source: readingDS"></div>

				    <br>
				    
				    <div>
						<span data-bind="text: lang.lang.month"></span>
						<input id="monthOf" name="monthOf" data-role="datepicker" 
		            			data-bind="value: month_of"	data-start="year" 
		            			data-depth="year" data-format="MM-yyyy"
		            			required data-required-msg="required" />
				        <span data-bind="text: lang.lang.billing_date"></span>
				        <input id="issuedDate" name="issuedDate" data-role="datepicker" 
		            			data-bind="value: issued_date" data-format="dd-MM-yyyy"
		            			required data-required-msg="required" />
				        <span data-bind="text: lang.lang.payment_date"></span>
				        <input id="paymentDate" name="paymentDate" data-role="datepicker" 
		            			data-bind="value: payment_date" data-format="dd-MM-yyyy"
		            			required data-required-msg="required" />
				        <span data-bind="text: lang.lang.due_date"></span>
				        <input id="dueDate" name="dueDate" data-role="datepicker" 
		            			data-bind="value: due_date" data-format="dd-MM-yyyy"
		            			required data-required-msg="required" />			           	          	
				    </div>
				         
				    <br />				    
				    
		          	<!-- Form actions -->
					<div align="center">
						<span id="notification"></span>

						<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i><span data-bind="text: lang.lang.save"></span></span>							
						<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i><span data-bind="text: lang.lang.cancel"></span></span>
					</div>
					<!-- // Form actions END -->					

				</div><!-- //End div example-->
			</div><!-- //End div span12-->
		</div><!-- //End div row-fluid-->
	</div>	
</script>
<script id="wInvoice-row-template" type="text/x-kendo-tmpl">
	<tr>
		<td align="center">
		   <input type="checkbox" data-bind="checked: isCheck" />
		</td>						
		<td>#=customer[0].surname# #=customer[0].name#</td>		
		<td><a href="\#/wReading_center/#=meter_id#"><i></i> #=meter[0].number#</a></td>								
		<td class="right">#=previous#</td>
		<td class="right">#=current#</td>		
		<td class="right">#=usage# m<sup>3</sup></td>		
    </tr>
</script>
<script id="wInvoice-footer-template" type="text/x-kendo-template">
    <tr>    	
        <td class="right" colspan="8" style="font-size:30px;">
            <span data-bind="text: lang.lang.total"></span>: #:total()# m<sup>3</sup>
        </td>
    </tr>
</script>

<script id="wPrintCenter" type="text/x-kendo-template">
	<div class="container-960">
		<div class="container-fluid">
			<div class="row-fluid">
				<div class="span12">
					<div id="example" class="k-content">
						<span class="pull-right glyphicons no-js remove_2 hidden-print" 
							onclick="javascript:window.history.back()"><i></i></span>

						<h3 class="hidden-print"><span data-bind="text: lang.lang.print1"></span></h3>
						
						<br>
						
						<table>
							<tr>
								<td>								
									<input data-role="datepicker" 
				            			data-bind="value: monthOfSearch" 
				            			data-start="year" data-depth="year" 
				            			data-format="MM-yyyy" placeHolder="MM-yyyy" />						
									
									<input data-role="dropdownlist"
									   data-option-label="(--- License ---)"
					                   data-auto-bind="false"
					                   data-value-primitive="true"
					                   data-text-field="name"
					                   data-value-field="id"
					                   data-bind="value: branch_id,
					                              source: branchDS,			                              
					                              events: {
					                                change: branchChanges
					                              }"/>
					            </td>
					            <td>
					                <select data-role="multiselect"
							           data-placeholder="Location..."
							           data-value-primitive="true"
							           data-text-field="name"
							           data-value-field="id"
							           data-bind="value: selectedLocations,
							                      source: locationDS,
							                      enabled: isBranchSelected"
							           style="width: 200px;" 
							    	></select>
							    </td>
							    <td>							
					            	|						            	
					            	<input data-role="combobox"
						                   data-placeholder="number ..."
						                   data-auto-bind="false"
						                   data-value-primitive="true"
						                   data-filter="startswith"							                   
						                   data-min-length="3"							                   
						                   data-text-field="number"
						                   data-value-field="id"
						                   data-bind="value: invoice_id,
						                              source: invoiceDS" />

						            <button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button> |
									<button type="button" data-role="button" data-bind="click: print"><i class="icon-print"></i></button>
								</td>
							</tr>
						</table>

			            <br>

			            <div class="row-fluid">							
							<div class="span2">
							
								<!-- Stats Widget -->
								<span class="widget-stats widget-stats-gray widget-stats-2">
									<span class="count"><a data-bind="text: obj.totalInvoice"></a></span>
									<span class="txt"><span data-bind="text: lang.lang.total_invoice"></span></span>
								</span>
								<!-- // Stats Widget END -->
								
							</div>
							<div class="span2">
							
								<!-- Stats Widget -->
								<span class="widget-stats widget-stats-2">
									<span class="count"><a data-bind="text: obj.totalUnprint"></a></span>
									<span class="txt"><span data-bind="text: lang.lang.no_print"></span></span>
								</span>
								<!-- // Stats Widget END -->
								
							</div>
							<div class="span2">
							
								<!-- Stats Widget -->
								<span class="widget-stats widget-stats-gray widget-stats-2">
									<span class="count"><a data-bind="text: obj.totalUsage"></a></span>
									<span class="txt">m<sup>3</sup></span>
								</span>
								<!-- // Stats Widget END -->
								
							</div>
							<div class="span6">
							
								<!-- Stats Widget -->
								<span class="widget-stats widget-stats-2">
									<span class="count"><a data-format="c0" data-bind="text: obj.totalAmount"></a></span>
									<span class="txt"><span data-bind="text: lang.lang.amount1"></span></span>
								</span>
								<!-- // Stats Widget END -->
								
							</div>							
						</div>					

			            <br>

			            <table class="table table-bordered table-striped table-white">
					        <thead>
					            <tr>
					            	<th style="width: 5%;" class="center">
					            		<input type="checkbox" data-bind="checked: chkAll, events: {change : checkAll}" />
					            	</th>					                
					                <th><span data-bind="text: lang.lang.customer"></span></th>					                						                
					                <th><span data-bind="text: lang.lang.number"></span></th>					                
					                <th><span data-bind="text: lang.lang.amount"></span></th>
					                <th><span data-bind="text: lang.lang.status"></span></th>
					                <th><span data-bind="text: lang.lang.print_count"></span></th>					                					                
					            </tr>
					        </thead>
					        <tbody data-role="listview"
				        		data-auto-bind="false"					        		 
				        		data-template="wPrint-center-template" 
				        		data-bind="source: dataSource"></tbody>					        						        
					    </table>

			            <div data-role="pager" 
					    	data-auto-bind="false"
					    	data-page-sizes='[50, 100, 200, "All"]'					    	
				            data-bind="source: dataSource"></div>																	
			
					</div><!-- //End div example-->
				</div><!-- //End div span12-->
			</div><!-- //End div row-fluid-->
		</div>
	</div>	
</script>
<script id="wPrint-center-template" type="text/x-kendo-tmpl">
	<tr>
		<td class="center">
			<input type="checkbox" data-bind="checked: isCheck" />
		</td>		
		<td>
			#=contact[0].wnumber# 

			#if(contact[0].contact_type_id==6 || contact[0].contact_type_id==7 || contact[0].contact_type_id==8){#
				#=contact[0].company# 
			#}else{#
				#=contact[0].surname# #=contact[0].name#
			#}#
		</td>
		<td>
			<a href="\#/wInvoice_print/#=id#"><i></i> #=number#</a>
		</td>
		<td class="right">#=kendo.toString(amount, "c0", banhji.institute.locale)#</td>
		<td>
			#if(status==0){#
				Open
			#}else{#
				Paid
			#}#
		</td>
		<td class="center">#=print_count#</td>
	</tr>
</script>
<script id="wInvoicePrint" type="text/x-kendo-template">
	<div class="container-960">
		<div class="container-fluid">
			<div class="row-fluid">
				<div class="span12">
					<div id="example" class="k-content">
						<div class="hidden-print">
							<span class="glyphicons no-js remove_2 pull-right" 
								onclick="javascript:window.history.back()"><i></i></span>

							<span class="btn btn-inverse btn-icon glyphicons print" data-bind="click: print"><i></i><span data-bind="text: lang.lang.print"></span></span>											          																
						</div>

						<br>					
						
						<div data-role="listview" 
							data-auto-bind="false"
							data-bind="source: dataSource" 
							data-template="wInvoice-print-row-template"></div>						
			
					</div><!-- //End div example-->
				</div><!-- //End div span12-->
			</div><!-- //End div row-fluid-->
		</div>
	</div>	
</script>
<script id="wInvoice-print-row-template" type="text/x-kendo-tmpl">	
  	<div class="container-960">
		<table width="100%">
			<tr>
				<td valign="top">
					<img src="/banhji/#:company[0].image_url#" height="90" width="60" style="float: left">
				</td>
				<td align="center">
					<h4>#:company[0].name#</h4>					
					<h5>#:company[0].address# 
					<br>
					#:company[0].phone#</h5>					
				</td>
			</tr>
		</table>		

		<table width="100%">
			<tr>
				<td align="center" rowspan="2" width="60%">
					<h4>វិក្កយបត្រទូទាត់ថ្លៃទឹក</h4>
					<h5>Month Of #=kendo.toString(new Date(month_of), "MM-yyyy")#</h5>
				</td>
				<td>ថ្ងៃចេញវិក្កយបត្រ:</td>
				<td align="right">
					#=kendo.toString(new Date(issued_date), "dd-MM-yyyy")#					
				</td>
			</tr>
			<tr>
				<td>Number:</td>
				<td align="right">					
					#=number#
				</td>				
			</tr>			
		</table>

		<table width="100%">
			<tr>
				<td width="60%">
					Fullname 
					<span class="strong">
						#if(contact[0].contact_type_id==6 || contact[0].contact_type_id==7 || contact[0].contact_type_id==8){#
							#=contact[0].company#
						#}else{#
							#=contact[0].surname# #=contact[0].name#
						#}#
					</span>
				</td>
				<td>Customer Number:</td>
				<td align="right">#=contact[0].number#</td>				
			</tr>
			<tr>
				<td>Address #=contact[0].address#</td>				
				<td>Location:</td>
				<td align="right">#=location[0].name#</td>				
			</tr>
		</table>

		<table class="table table-bordered table-condensed">
			<thead>
				<tr>
					<th><span data-bind="text: lang.lang.meter2"></span></th>					
					<th><span data-bind="text: lang.lang.previouse"></span></th>
					<th><span data-bind="text: lang.lang.current"></span></th>
					<th>បរិមាណ</th>
					<th>តំលៃឯកត្តា</th>
					<th><span data-bind="text: lang.lang.amount"></span></th>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td></td>
					#for(var j=0; j<invoiceLines.length; j++) {#
						#if(invoiceLines[j].type=="tariff"){#
							<td class="center">#=kendo.toString(new Date(invoiceLines[j].record[0].from_date), "dd-MM-yyyy")#</td>
							<td class="center">#=kendo.toString(new Date(invoiceLines[j].record[0].to_date), "dd-MM-yyyy")#</td>						
						#}#
					#}#	
					<td class="right">m<sup>3</sup></td>
					<td></td>
					<td></td>
				</tr>
				#for(var i=0; i<invoiceLines.length; i++) {#
					#if(invoiceLines[i].type=="tariff"){#
						<tr>
							<td>#:invoiceLines[i].meter[0].number#</td>
							<td class="right">#:invoiceLines[i].record[0].previous#</td>
							<td class="right">#:invoiceLines[i].record[0].current#</td>						
							<td class="right">#:kendo.toString(kendo.parseInt(invoiceLines[i].unit), 'n0')#</td>
							<td class="right"><span>#:kendo.toString(kendo.parseFloat(invoiceLines[i].price)*kendo.parseFloat(rate), locale=="km-KH"?"c0":"c", locale)#</span></td>
							<td class="right"><span>#:kendo.toString(kendo.parseFloat(invoiceLines[i].amount)*kendo.parseFloat(rate), locale=="km-KH"?"c0":"c", locale)#</span></td>
						</tr>
					#}else{#
						<tr>
							<td colspan="3"></td>							
							<td colspan="2" class="right">#:invoiceLines[i].description#</td>
							#if(invoiceLines[i].type=="exemptionUsage"){#
								<td class="right">#:invoiceLines[i].amount# ម<sup>៣</sup></td>							
							#}else{#
								<td class="right">#:kendo.toString(kendo.parseFloat(invoiceLines[i].amount)*kendo.parseFloat(rate), locale=="km-KH"?"c0":"c", locale)#</td>
							#}#
						</tr>
					#}#
				#}#						
				<tr>
					<td colspan="3" rowspan="2" class="center strong" style="font-size: medium;">
						ថ្ងៃផុតកំណត់បង់ប្រាក់ 
						<br> 
						#=kendo.toString(new Date(due_date), "dd-MM-yyyy")#
					</td>									
					<td class="right" colspan="2">បំណុលខែមុន</td>					
					<td class="right">#:kendo.toString(balance_forward*kendo.parseFloat(rate), locale=="km-KH"?"c0":"c", locale)#</td>
				</tr>
				<tr>										
					<td class="right strong" colspan="2">ទឹកប្រាក់ត្រូវបង់សរុប</td>					
					<td class="right strong">#:kendo.toString(total*kendo.parseFloat(rate), locale=="km-KH"?"c0":"c", locale)#</td>
				</tr>
				<tr>
					<td class="center" colspan="2">ថ្ងៃដែលបានបង់</td>					
					<td></td>					
					<td class="right" colspan="2">ទឹកប្រាក់ដែលបានបង់</td>					
					<td></td>
				</tr>
				<tr>
					<td colspan="6" class="top" style="font-size: x-small;" height="100px">
						#=company[0].term_of_condition#
					</td>
				</tr>
			</tbody>
		</table>

		<hr>

		<table width="100%">
			<tr>
				<td rowspan="2" width="40%">
					<span id="#=contact[0].wnumber#"></span>
				</td>
				<td align="left" class="strong">
					#if(contact[0].contact_type_id==5 || contact[0].contact_type_id==6 || contact[0].contact_type_id==7){#
						#=contact[0].company#
					#}else{#
						#=contact[0].surname# #=contact[0].name#
					#}#
				</td>
				<td>ថ្ងៃចេញវិក្ក.</td>
				<td align="right">#=kendo.toString(new Date(issued_date), "dd-MM-yyyy")#</td>
			</tr>
			<tr>
				<td align="left">#=location[0].name#</td>
				<td>លេខវិក្ក.</td>
				<td align="right">#=number#</td>
			</tr>
		</table>

		<table class="table table-bordered table-condensed" style="page-break-after: always;">
			<thead>
				<tr>
					<td>បេឡាករ</td>
					<td>Date</td>
					<td>ទឹកប្រាក់ទទួលបាន</td>
					<td>ទឹកប្រាក់ត្រូវបង់</td>
				</tr>
			</thead>
			<tbody>
				<tr>
					<td></td>
					<td></td>
					<td></td>
					<td class="right">#=kendo.toString(total*kendo.parseFloat(rate), locale=="km-KH"?"c0":"c", locale)#</td>
				</tr>
			</tbody>
		</table>

	</div>
</script>

<script id="wInventoryItem" type="text/x-kendo-template">
	<div class="container-fluid">
		<br>
		<span class="pull-right glyphicons no-js remove_2" 
			onclick="javascript:window.history.back();"><i></i></span>

		<h3><span data-bind="text: lang.lang.inventory"></span></h3>

		<div class="box-generic">
		    <!-- //Tabs Heading -->
		    <div class="tabsbar">
		        <ul>
		            <li class="glyphicons star active"><a href="#tab1" data-toggle="tab" data-bind="click: searchFavorite"><i></i> <span data-bind="text: lang.lang.favorite"></span> </a>
		            </li>
		            <li class="glyphicons list"><a href="#tab2" data-toggle="tab"><i></i> <span data-bind="text: lang.lang.category"></span> </a>
		            </li>		            	            		            	            
		        </ul>
		    </div>
		    <!-- // Tabs Heading END -->

		    <div class="tab-content">
		        <!-- // FavoriteTab content -->
		        <div class="tab-pane active" id="tab1">
		        		
		        </div>
		        <!-- // Favorite Tab content END -->

		        <!-- // Category Tab content -->
		        <div class="tab-pane" id="tab2">
		            <input id="categories" data-bind="value: category_id" />	                
	                <input id="itemGroups" data-bind="value: item_group_id" disabled="disabled" />
            	</div>
		        <!-- // Category Tab content END -->		                
		    </div>

		    <br>

		    <div class="input-append">
			    <input class="col-md-2" id="appendedInputButtons" 
			    	type="text" placeholder="មុខទំនិញ ..." 
			    	data-bind="value: searchField, events:{ change: search }">

			    <button class="btn btn-default" data-bind="click: search"><i class="icon-search"></i> <span data-bind="text: lang.lang.search"></span></button>				    
			</div>
		</div>
		
		<br>

		<table class="table table-bordered">
	        <thead>
	            <tr>
	                <th><span data-bind="text: lang.lang.sku"></span></th>
	                <th><span data-bind="text: lang.lang.item"></span></th>
	                <th><span data-bind="text: lang.lang.description"></span></th>
	                <th><span data-bind="text: lang.lang.on_hand"></span></th>	                
	                <th><span data-bind="text: lang.lang.price"></span></th>	                
	                <th></th>
	            </tr>
	        </thead>
	        <tbody data-template="wInventory-item-template"
	        	data-pageable="true" 
	        	data-bind="source: dataSource"></tbody>
	    </table>
	    <div id="pager" class="k-pager-wrap"
	    	 data-auto-bind="false"
             data-role="pager" data-bind="source: dataSource"></div>        

	</div>
</script>
<script id="wInventory-item-template" type="text/x-kendo-template">
    <tr>
    	<td>#=sku#</td>
    	<td>#=name#</td>
    	<td>#=description#</td>
    	<td>
    		#if(on_hand<=order_point){#    		
    			<span class="badge badge-danger">#=kendo.toString(on_hand, "n0")#</span>
    		#}else{#
    			<span class="badge badge-info">#=kendo.toString(on_hand, "n0")#</span>
    		#}#

    		#=measurement==null?"":measurement#
    	</td>    	
    	<td>
    		#for(var i=0; i<item_prices.length; i++) {#
    			#if(item_prices[i].price>0){#
    				<span class="badge badge-inverse"> #=kendo.toString(item_prices[i].price, "c", item_prices[i].locale)# </span> / #=item_prices[i].measurement# 
    			#}else{#
    				<span class="badge badge-danger"> #=kendo.toString(item_prices[i].price, "c", item_prices[i].locale)# </span> / #=item_prices[i].measurement#
    			#}#
    			<br>    			    						 
			#}#
    	</td>    	
    	<td>
    		<div class="btn-group">
    			<button class="btn btn-default">ធ្វើការ</button>		  	
			  	<button class="btn dropdown-toggle" data-toggle="dropdown">
			    	<span class="caret"></span>
			  	</button>
			  	<ul class="dropdown-menu">			   		
			   		#if(is_assemble=="1"){#
			   			<li><a href="\#/item_assembly/#=id#"><i class="icon-edit"></i> Edit</a></li>			   		
			   		#}else if(is_catalog=="1"){#
			   			<li><a href="\#/item_catalog/#=id#"><i class="icon-edit"></i> Edit</a></li>			   		
			   		#}else{#
			   			<li><a href="\#/item_prices/#=id#"><i class="icon-usd"></i> Set Price</a></li>			   			
			   			<li><a href="\#/item/#=id#"><i class="icon-edit"></i> Edit</a></li>
			   		#}#
			  	</ul>
			</div>
    	</td>    		
    </tr>
</script>
<script id="wInventory-item-category-template" type="text/x-kendo-template">
	<span class="btn btn-success" data-bind="click: categoryChanges">#=name#</span>  
</script>
<script id="wInventory-item-vendor-template" type="text/x-kendo-template">
    <div class="product-tmpl" data-bind="click: vendorChanges">
        <img src="#=image_url#" alt="#: company # image" />
        <h3>#:company#</h3>        
    </div>    
</script>

<script id="wBranch" type="text/x-kendo-template">
	<div class="container-960">
		<div class="row">
			<div class="span12">
				<span class="pull-right glyphicons no-js remove_2" 
						onclick="javascript:window.history.back()"><i></i></span>

				<div id="example" class="k-content">
					<h3><span data-bind="text: lang.lang.license"></span></h3>
				
					<div class="box-generic">
									
						<!-- Row -->
						<div class="row-fluid">
						
							<!-- Column -->
							<div class="span6">
							
								<!-- Group -->
								<div class="control-group">
									<label class="control-label"><span data-bind="text: lang.lang.license_number"></span></label>
									<div class="controls">
										<input id="number" name="number" 
											type="text" class="span10 k-textbox" 
											data-bind="value: obj.operation_license, events:{change:checkExisting}"
											required data-required-msg="ត្រូវការ លេខអាជ្ញាប័ណ្ណ">

										<div class="alert alert-error" data-bind="visible: isExisting" style="width: 260px;">										    
										    <i class="icon-warning-sign"></i> duplicate number !
										</div>
									</div>
								</div>
								<!-- // Group END -->
								
								<!-- Group -->
								<div class="control-group">
									<label class="control-label"><span data-bind="text: lang.lang.license_name"></span></label>
									<div class="controls">
										<input id="name" name="name" 
												type="text" class="span10 k-textbox" 
												data-bind="value: obj.name" 
												required data-required-msg="ត្រូវការ ឈ្មោះអាជ្ញាប័ណ្ណ">									
									</div>
								</div>
								<!-- // Group END -->
							
								<!-- Group -->
								<div class="control-group">
									<label class="control-label"><span data-bind="text: lang.lang.description"></span></label>
									<div class="controls">
										<input type="text" class="span10 k-textbox" data-bind="value: obj.description">									
									</div>
								</div>
								<!-- // Group END -->

								<!-- Group -->
								<div class="control-group">
									<label class="control-label"><span data-bind="text: lang.lang.max_customer"></span></label>
									<div class="controls">
										<input type="text" class="input-mini k-textbox" data-bind="value: obj.max_customer">									
									</div>
								</div>
								<!-- // Group END -->						

								<!-- Group -->
								<div class="control-group">
									<label class="control-label"><span data-bind="text: lang.lang.expire_date"></span></label>								
									<div class="controls">
										<input class="span10" data-role="datepicker"			            		
			            					data-bind="value: obj.expire_date" 
			            					data-format="dd-MM-yyyy"
			            					data-parse-formats="yyyy-MM-dd" 
			            					placeholder="dd-MM-yyyy" />		            				
									</div>								
								</div>
								<!-- // Group END -->

								<br><br>

								<!-- Group -->
								<div class="control-group">
									<label class="control-label"><span data-bind="text: lang.lang.address"></span></label>
									<div class="controls">
										<input type="text" class="span10 k-textbox" data-bind="value: obj.address">									
									</div>
								</div>
								<!-- // Group END -->

								<!-- Group -->
								<div class="control-group">
									<label class="control-label"><span data-bind="text: lang.lang.status"></span></label>
									<div class="controls">
										<input id="ddlStatus" name="ddlStatus"
											   data-role="dropdownlist"
					            			   data-option-label="(--- Select ---)"					            			   			                   
							                   data-value-primitive="true"
							                   data-text-field="name"
							                   data-value-field="id"
							                   data-bind="value: obj.status,
							                              source: statusList"
							                   required data-required-msg="required"/>
									</div>
								</div>
								<!-- // Group END -->
								
							</div>
							<!-- // Column END -->
							
							<!-- Column -->
							<div class="span6">
							
								<!-- Group -->
								<div class="control-group">
									<label class="control-label"><span data-bind="text: lang.lang.currency"></span></label>
									<div class="controls">
										<input id="currency" name="currency"
											   class="span12" data-role="dropdownlist"
					            			   data-option-label="(--- Select ---)"					            			   			                   
							                   data-value-primitive="true"
							                   data-text-field="code"
							                   data-value-field="id"
							                   data-bind="value: obj.currency_id,
							                              source: currencyDS"
							                   required data-required-msg="required"/>
									</div>
								</div>
								<!-- // Group END -->
								
								<br><br>

								<!-- Group -->
								<div class="control-group">
									<label class="control-label"><span data-bind="text: lang.lang.abbr"></span></label>
									<div class="controls">
										<input id="abbr" name="abbr"
											type="text" class="input-mini k-textbox" 
											data-bind="value: obj.abbr"
											required data-required-msg="required">
									</div>
								</div>
								<!-- // Group END -->

								<!-- Group -->
								<div class="control-group">
									<label class="control-label"><span data-bind="text: lang.lang.representative"></span></label>
									<div class="controls">
										<input type="text" class="span12 k-textbox" data-bind="value: obj.representative">
									</div>
								</div>
								<!-- // Group END -->

								<!-- Group -->
								<div class="control-group">
									<label class="control-label"><span data-bind="text: lang.lang.tel"></span></label>
									<div class="input-prepend">
										<span class="add-on glyphicons phone"><i></i></span>
										<input type="text" class="input-large" data-bind="value: obj.phone" placeholder="01234567897">
									</div>								
								</div>
								<!-- // Group END -->

								<!-- Group -->
								<div class="control-group">
									<label class="control-label"><span data-bind="text: lang.lang.phone"></span></label>
									<div class="input-prepend">
										<span class="add-on glyphicons iphone"><i></i></span>
										<input type="text" class="input-large" data-bind="value: obj.mobile" placeholder="01234567897">
									</div>
								</div>
								<!-- // Group END -->

								<!-- Group -->
								<div class="control-group">
									<label class="control-label"><span data-bind="text: lang.lang.email"></span></label>
									<div class="input-prepend">
										<span class="add-on glyphicons envelope"><i></i></span>
										<input type="text" class="input-large" data-bind="value: obj.email" placeholder="name@email.com">
									</div>
								</div>
								<!-- // Group END -->
								
							</div>
							<!-- // Column END -->
							
						</div>
						<!-- // Row END -->
						
						<div class="separator line bottom"></div>
						
						<!-- Group -->
						<div class="control-group row-fluid">
							<label class="control-label"><span data-bind="text: lang.lang.term_of_condition"></span></label>
							<div class="controls">
								<textarea data-role="editor"
				                      data-tools="['bold',
				                                   'italic',
				                                   'underline',
				                                   'strikethrough',
				                                   'justifyLeft',
				                                   'justifyCenter',
				                                   'justifyRight',
				                                   'justifyFull']"
				                      data-bind="value: obj.term_of_condition"
				                      style="height: 200px;"></textarea>
	                      	</div>
						</div>
						<!-- // Group END -->
						
						<!-- Form actions -->
						<div align="center">
							<span id="notification"></span>

							<span id="save" class="btn btn-icon btn-primary glyphicons circle_ok"><i></i><span data-bind="text: lang.lang.save"></span></span>
							<span class="btn btn-danger btn-icon glyphicons delete" data-bind="click: delete, visible: isEdit"><i></i><span data-bind="text: lang.lang.delete"></span></span>
							<span class="btn btn-icon btn-default glyphicons ban" data-bind="click: cancel"><i></i><span data-bind="text: lang.lang.cancel"></span></span>
						</div>
						<!-- // Form actions END -->
						
					</div>
				</div>
			</div>
		</div>
	</div>
</script>

<script id="wSettings" type="text/x-kendo-template">
	<span class="pull-right glyphicons no-js remove_2" 
			onclick="javascript:window.history.back()"><i></i></span>

	<h2><span data-bind="text: lang.lang.general_setting_water"></span></h2>

	<br>

	<div class="widget widget-tabs widget-tabs-double widget-tabs-vertical row-fluid row-merge widget-tabs-gray">

	    <!-- Tabs Heading -->
	    <div class="widget-head span3">
	        <ul>
	            <li class="active"><a href="#tab1-1" class="glyphicons building" data-toggle="tab"><i></i><span class="strong"><span data-bind="text: lang.lang.license"></span></span></a>
	            </li>
	            <li><a href="#tab2-1" class="glyphicons group" data-toggle="tab"><i></i><span class="strong"><span data-bind="text: lang.lang.cutomer_type"></span></span></a>
	            </li>
	            <li><a href="#tab3-1" class="glyphicons google_maps" data-toggle="tab"><i></i><span class="strong"><span data-bind="text: lang.lang.location1"></span></span></a>
	            </li>
	            <li><a href="#tab4-1" class="glyphicons calculator" data-toggle="tab"><i></i><span class="strong"><span data-bind="text: lang.lang.tariff"></span></span></a>
	            </li>
	            <li><a href="#tab5-1" class="glyphicons gift" data-toggle="tab"><i></i><span class="strong"><span data-bind="text: lang.lang.exemption"></span></span></a>
	            </li>
	            <li><a href="#tab6-1" class="glyphicons circle_ok" data-toggle="tab"><i></i><span class="strong"><span data-bind="text: lang.lang.maintenance"></span></span></a>
	            </li>	           
	        </ul>
	    </div>
	    <!-- // Tabs Heading END -->

	    <div class="widget-body span9">
	        <div class="tab-content">

	            <!-- Tab Branch content -->
	            <div class="tab-pane active" id="tab1-1">
	            	<a href="#/wBranch" class="btn btn-primary btn-icon glyphicons circle_plus"><i></i> <span data-bind="text: lang.lang.new_license"></span></a>

	            	<table class="table table-bordered table-white">
	            		<thead>
	            			<tr>
	            				<th><span data-bind="text: lang.lang.number"></span></th>
	            				<th><span data-bind="text: lang.lang.license"></span></th>	            				
	            				<th><span data-bind="text: lang.lang.abbr"></span></th>
	            				<th><span data-bind="text: lang.lang.representive"></span></th>	            				
	            				<th width="70px"><span data-bind="text: lang.lang.phone"></span></th>	            				
	            				<th width="100px"><span data-bind="text: lang.lang.address"></span></th>
	            				<th><span data-bind="text: lang.lang.expire_date"></span></th>
	            				<th><span data-bind="text: lang.lang.max_connections"></span></th>
	            				<th><span data-bind="text: lang.lang.status"></span></th>	            					            				
	            			</tr>
	            		</thead>
	            		<tbody data-role="listview"	            					            			
				                data-template="branch-wSettings-template"
				                data-bind="source: branchDS"></tbody>
	            	</table>		            
	            </div>
	            <!-- // Tab Branch content END -->

	            <!-- Tab Contact Type content -->
	            <div class="tab-pane" id="tab2-1">
	            	<div class="input-append">
					    <input class="span6" id="appendedInputButtons" type="text" placeholder="type name ..." data-bind="value: contactTypeName">
					    <button class="btn btn-default" type="button" data-bind="click: addContactType"><i class="icon-plus"></i></button>					  
					</div>
	            	<table class="table table-bordered table-white">
	            		<thead>
	            			<tr>
	            				<th><span data-bind="text: lang.lang.type2"></span></th>
	            				<th></th>
	            			</tr>
	            		</thead>
	            		<tbody data-role="listview"
	            				data-auto-bind="false"
		            			data-edit-template="edit-contact-type-wSetting-template"
				                data-template="contact-type-wSettings-template"
				                data-bind="source: contactTypeDS"></tbody>
	            	</table>		            
	            </div>
	            <!-- // Tab Contact Type content END -->

	            <!-- Tab Block content -->
	            <div class="tab-pane" id="tab3-1">
            		<input data-role="dropdownlist"
            			   data-option-label="(--- Select ---)"
            			   data-auto-bind="false"			                   
		                   data-value-primitive="true"
		                   data-text-field="name"
		                   data-value-field="id"
		                   data-bind="value: blockCompanyId,
		                              source: branchDS"/>

                	<div class="input-append">
					    <input class="span6" id="appendedInputButtons" type="text" placeholder="location name ..." data-bind="value: blockName">
					    <input class="span6" id="appendedInputButtons" type="text" placeholder="abbr ..." data-bind="value: blockAbbr">
					    <button class="btn btn-default" type="button" data-bind="click: addBlock"><i class="icon-plus"></i></button>					  
					</div>
	            	<table class="table table-bordered table-white">
	            		<thead>
	            			<tr>
	            				<th><span data-bind="text: lang.lang.license"></span></th>
	            				<th><span data-bind="text: lang.lang.location1"></span></td>
	            				<th><span data-bind="text: lang.lang.abbr"></span></th>
	            				<th></th>
	            			</tr>
	            		</thead>
	            		<tbody data-role="listview"
	            				data-auto-bind="false"
		            			data-edit-template="edit-block-wSetting-template"
				                data-template="block-wSettings-template"
				                data-bind="source: blockDS"></tbody>
	            	</table>
	            </div>
	            <!-- // Tab Block content END -->

	            <!-- Tab Tariff content -->
	            <div class="tab-pane" id="tab4-1">
	                <div class="row-fluid">
		                <div class="span6">
			                <input data-role="dropdownlist"
		            			   data-option-label="(--- Select ---)"
		            			   data-auto-bind="false"			                   
				                   data-value-primitive="true"
				                   data-text-field="name"
				                   data-value-field="id"
				                   data-bind="value: tariffCompanyId,
				                              source: branchDS"/>

		                	<div class="input-append">
							    <input class="span6" id="appendedInputButtons" type="text" placeholder="tariff name ..." data-bind="value: tariffName">					    
							    <button class="btn btn-default" type="button" data-bind="click: addTariff"><i class="icon-plus"></i></button>					  
							</div>							
			            	<table class="table table-bordered table-white">
			            		<thead>
			            			<tr>
			            				<th><span data-bind="text: lang.lang.license"></span></th>
			            				<th><span data-bind="text: lang.lang.tariff_name"></span></th>	            				
			            				<th></th>
			            			</tr>
			            		</thead>
			            		<tbody data-role="listview"
			            				data-auto-bind="false"
				            			data-edit-template="edit-tariff-wSetting-template"
						                data-template="tariff-wSettings-template"
						                data-bind="source: tariffDS"></tbody>
			            	</table>
		            	</div>
		            	<div class="span6">		                	
						    <input class="span3" type="text" placeholder="usage ..." data-bind="value: tariffUsage">
						    <input class="span3" type="text" placeholder="price ..." data-bind="value: tariffPrice">							    					    
						    <input class="span2" data-role="dropdownlist"		            			   
	            			   data-auto-bind="false"			                   
			                   data-value-primitive="true"
			                   data-text-field="name"
			                   data-value-field="id"
			                   data-bind="value: tariffFlat,
		                              source: flatList"/>
						    <button class="btn btn-default" type="button" data-bind="click: addTariffItem, enabled: selectedTariff"><i class="icon-plus"></i></button>					  
						
							<span data-bind="text: selectedTariffName"></span>							

			            	<table class="table table-bordered table-white">
			            		<thead>
			            			<tr>
			            				<th><span data-bind="text: lang.lang.usage"></span></th>
			            				<th><span data-bind="text: lang.lang.p"></span></th>
			            				<th><span data-bind="text: lang.lang.flat"></span></th>	            				
			            				<th></th>
			            			</tr>
			            		</thead>
			            		<tbody data-role="listview"
			            				data-auto-bind="false"
				            			data-edit-template="edit-tariff-item-wSetting-template"
						                data-template="tariff-item-wSettings-template"
						                data-bind="source: tariffItemDS"></tbody>
			            	</table>
		            	</div>
	            	</div>
	            </div>
	            <!-- // Tab Tariff content END -->

	            <!-- Tab Exemption content -->
	            <div class="tab-pane" id="tab5-1">
	            	<input data-role="dropdownlist"
            			   data-option-label="(--- License ---)"
            			   data-auto-bind="false"			                   
		                   data-value-primitive="true"
		                   data-text-field="name"
		                   data-value-field="id"
		                   data-bind="value: exemptionCompanyId,
		                              source: branchDS"/>

	                <input data-role="dropdownlist"
            			   data-option-label="(--- Type ---)"
            			   data-auto-bind="false"			                   
		                   data-value-primitive="true"
		                   data-text-field="name"
		                   data-value-field="id"
		                   data-bind="value: exemptionType,
		                              source: exemptionTypeList"/>

                	<div class="input-append">
					    <input class="span6" id="appendedInputButtons" type="text" placeholder="exemption name ..." data-bind="value: exemptionName">
					    <input class="span6" id="appendedInputButtons" type="text" placeholder="price ..." data-bind="value: exemptionAmount">					    
					    <button class="btn btn-default" type="button" data-bind="click: addExemption"><i class="icon-plus"></i></button>					  
					</div>
	            	<table class="table table-bordered table-white">
	            		<thead>
	            			<tr>
	            				<th><span data-bind="text: lang.lang.license"></span></th>	            				
	            				<th><span data-bind="text: lang.lang.exemption_name"></span></th>
	            				<th><span data-bind="text: lang.lang.p"></span></th>
	            				<th><span data-bind="text: lang.lang.type2"></span></th>
	            				<th></th>
	            			</tr>
	            		</thead>
	            		<tbody data-role="listview"
	            				data-auto-bind="false"
		            			data-edit-template="edit-exemption-wSetting-template"
				                data-template="exemption-wSettings-template"
				                data-bind="source: exemptionDS"></tbody>
	            	</table>
	            </div>
	            <!-- // Tab Exemption content END -->

	            <!-- Tab content -->
	            <div class="tab-pane" id="tab6-1">
	            	<input data-role="dropdownlist"
            			   data-option-label="(--- Select ---)"
            			   data-auto-bind="false"			                   
		                   data-value-primitive="true"
		                   data-text-field="name"
		                   data-value-field="id"
		                   data-bind="value: maintenanceCompanyId,
		                              source: branchDS"/>

	                <div class="input-append">
					    <input class="span6" id="appendedInputButtons" type="text" placeholder="maintenance name ..." data-bind="value: maintenanceName">
					    <input class="span6" id="appendedInputButtons" type="text" placeholder="price ..." data-bind="value: maintenanceAmount">
					    <button class="btn btn-default" type="button" data-bind="click: addMaintenance"><i class="icon-plus"></i></button>					  
					</div>
	            	<table class="table table-bordered table-white">
	            		<thead>
	            			<tr>
	            				<th><span data-bind="text: lang.lang.license"></span></th>	            				
	            				<th><span data-bind="text: lang.lang.maintenance_name"></span></th>
	            				<th><span data-bind="text: lang.lang.p"></span></th>
	            				<th></th>
	            			</tr>
	            		</thead>
	            		<tbody data-role="listview"
	            				data-auto-bind="false"
		            			data-edit-template="edit-maintenance-wSetting-template"
				                data-template="maintenance-wSettings-template"
				                data-bind="source: maintenanceDS"></tbody>
	            	</table>
	            </div>
	            <!-- // Tab content END -->

	        </div>
	    </div>

	</div>
</script>
<script id="branch-wSettings-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>#=operation_license#</td>
   		<td>
   			<a href="\#/wBranch/#=id#"><i></i>#=name#</a>
   		</td>   		
   		<td>#=abbr#</td>
   		<td>#=representative#</td>   		
   		<td>#=phone# #=mobile#</td>   		
   		<td>#=address#</td>
   		<td>#=expire_date#</td>
   		<td>#=max_customer#</td>
   		<td>
   			#if(status==1){#
				<span class="glyphicons no-js ok"><i></i></span>
			#}else{#
				<span class="glyphicons no-js ban"><i></i></span>
			#}#
   		</td>		 		
   	</tr>
</script>
<script id="contact-type-wSettings-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>
    		 #:name#
   		</td>
   		<td>
   			#if(is_system=="0"){#
	   			<div class="edit-buttons">       
			        <a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
			        <a class="k-button" data-bind="click: deleteContactType"><span class="k-icon k-delete"></span></a>
			   	</div>
		   	#}#
   		</td>
   	</tr>
</script>
<script id="edit-contact-type-wSetting-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <dl>                
            <dd>
                <input type="text" class="k-textbox" data-bind="value:name" name="ProductName" required="required" validationMessage="required" />
                <span data-for="ProductName" class="k-invalid-msg"></span>
            </dd>               
        </dl>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>
<script id="block-wSettings-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>
    		#if(company[0]) {#
    			#=company[0].name#
    		#}#
    	</td>
    	<td>
    		#:name#
   		</td>
   		<td>
    		#:abbr#
   		</td>
   		<td>
   			<div class="edit-buttons">       
		        <a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
		        <a class="k-button k-delete-button" href="\\#"><span class="k-icon k-delete"></span></a>
		   	</div>
   		</td>
   	</tr>
</script>
<script id="edit-block-wSetting-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <dl>                
            <dd>
                <input data-role="dropdownlist"
        			   data-option-label="(--- Select ---)"        			   		                   
	                   data-value-primitive="true"
	                   data-text-field="name"
	                   data-value-field="id"
	                   data-bind="value: company_id,
	                              source: branchDS"/>
            </dd>
            <dd>
                <input type="text" class="k-textbox" data-bind="value:name" name="ProductName" required="required" validationMessage="required" />
                <span data-for="ProductName" class="k-invalid-msg"></span>
            </dd>
            <dd>
                <input type="text" class="k-textbox" data-bind="value:abbr" />                
            </dd>                
        </dl>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>
<script id="tariff-wSettings-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>
    		#if(company[0]) {#
    			#=company[0].name#
    		#}#
    	</td>
    	<td>
    		#:name#
   		</td>   		
		<td>
			<a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
            <a class="k-button k-delete-button" href="\\#"><span class="k-icon k-delete"></span></a>
            <span class="k-button" data-bind="click: loadTariffItem"><i class="icon-hand-right"></i></span>             
		</td>
   	</tr>
</script>
<script id="edit-tariff-wSetting-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <dl>                
            <dd>
                <input data-role="dropdownlist"
        			   data-option-label="(--- Select ---)"        			   		                   
	                   data-value-primitive="true"
	                   data-text-field="name"
	                   data-value-field="id"
	                   data-bind="value: company_id,
	                              source: branchDS"/>
            </dd>
            <dd>
                <input type="text" class="k-textbox" data-bind="value:name" name="ProductName" required="required" validationMessage="required" />
                <span data-for="ProductName" class="k-invalid-msg"></span>
            </dd>                         
        </dl>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>
<script id="tariff-item-wSettings-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>#=usage#</td>
    	<td>#=price#</td>
    	<td>
    		#if(is_flat){#
    			ថេរ
    		#}else{#
    			អត់ថេរ
    		#}#
    	</td>   		
   		<td>
   			<div class="edit-buttons">       
		        <a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
		        <a class="k-button k-delete-button" href="\\#" onclick="return confirm('Are you sure you want to delete this item?');"><span class="k-icon k-delete"></span></a>
		   	</div>
   		</td>
   	</tr>
</script>
<script id="edit-tariff-item-wSetting-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <dl>
        	<dd>
        		<input data-role="dropdownlist"		            			   
        			   data-auto-bind="false"			                   
	                   data-value-primitive="true"
	                   data-text-field="name"
	                   data-value-field="id"
	                   data-bind="value: is_flat,
                              source: flatList"/>
        	</dd>                
            <dd>
                <input type="text" class="k-textbox" data-bind="value:usage" name="usage" required="required" validationMessage="required" />
                <span data-for="usage" class="k-invalid-msg"></span>
            </dd> 
            <dd>
                <input type="text" class="k-textbox" data-bind="value:price" name="price" required="required" validationMessage="required" />
                <span data-for="price" class="k-invalid-msg"></span>
            </dd>                         
        </dl>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>
<script id="exemption-wSettings-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>
    		#if(company[0]) {#
    			#=company[0].name#
    		#}#
    	</td>    	
   		<td>
    		#:name#
   		</td>
   		<td>
    		#:amount#
   		</td>
   		<td>
    		#:unit#
   		</td>    		
		<td>
			<a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
            <a class="k-button k-delete-button" href="\\#"><span class="k-icon k-delete"></span></a>                        
		</td>
   	</tr>
</script>
<script id="edit-exemption-wSetting-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <dl>                
            <dd>
                <input data-role="dropdownlist"
        			   data-option-label="(--- Select ---)"        			   		                   
	                   data-value-primitive="true"
	                   data-text-field="name"
	                   data-value-field="id"
	                   data-bind="value: company_id,
	                              source: branchDS"/>
            </dd>
            <dd>
                <input data-role="dropdownlist"
        			   data-option-label="(--- Type ---)"
        			   data-auto-bind="false"			                   
	                   data-value-primitive="true"
	                   data-text-field="name"
	                   data-value-field="id"
	                   data-bind="value: unit,
	                              source: exemptionTypeList"/>
            </dd>
            <dd>
                <input type="text" class="k-textbox" data-bind="value:name" name="ProductName" required="required" validationMessage="required" />
                <span data-for="ProductName" class="k-invalid-msg"></span>
            </dd> 
            <dd>
                <input type="text" class="k-textbox" data-bind="value:amount" name="amount" required="required" validationMessage="required" />
                <span data-for="amount" class="k-invalid-msg"></span>
            </dd>                        
        </dl>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>
<script id="maintenance-wSettings-template" type="text/x-kendo-tmpl">                    
    <tr>
    	<td>
    		#if(company[0]) {#
    			#=company[0].name#
    		#}#
    	</td>    	
   		<td>
    		#:name#
   		</td>
   		<td>
    		#:amount#
   		</td>    		
		<td>
			<a class="k-button k-edit-button" href="\\#"><span class="k-icon k-edit"></span></a>
            <a class="k-button k-delete-button" href="\\#"><span class="k-icon k-delete"></span></a>                        
		</td>
   	</tr>
</script>
<script id="edit-maintenance-wSetting-template" type="text/x-kendo-tmpl">
    <div class="product-view k-widget">
        <dl>                
            <dd>
                <input data-role="dropdownlist"
        			   data-option-label="(--- Select ---)"        			   		                   
	                   data-value-primitive="true"
	                   data-text-field="name"
	                   data-value-field="id"
	                   data-bind="value: company_id,
	                              source: branchDS"/>
            </dd>           
            <dd>
                <input type="text" class="k-textbox" data-bind="value:name" name="ProductName" required="required" validationMessage="required" />
                <span data-for="ProductName" class="k-invalid-msg"></span>
            </dd> 
            <dd>
                <input type="text" class="k-textbox" data-bind="value:amount" name="amount" required="required" validationMessage="required" />
                <span data-for="amount" class="k-invalid-msg"></span>
            </dd>                        
        </dl>
        <div class="edit-buttons">
            <a class="k-button k-update-button" href="\\#"><span class="k-icon k-update"></span></a>
            <a class="k-button k-cancel-button" href="\\#"><span class="k-icon k-cancel"></span></a>
        </div>
    </div>
</script>


<!-- Water Reports -->
<!-- Water Customers -->
<script id="wReportCenter" type="text/x-kendo-template">
	<div>
		<span class="pull-right glyphicons no-js remove_2" 
				onclick="javascript:window.history.back()"><i></i></span>

		<table>
			<tr>
				<td>
					<h2><span data-bind="text: lang.lang.key_performance_indicators"></span></h2>
				</td>
				<td>
					<input data-role="dropdownlist"
					   data-option-label="(--- Select ---)"
	                   data-auto-bind="false"
	                   data-value-primitive="true"
	                   data-text-field="name"
	                   data-value-field="id"
	                   data-bind="value: branch_id,
	                              source: branchDS,
	                              events: {
	                                change: branchChanges
	                              }"
	                   style="width: 400px;" /> 
				</td>
			</tr>
		</table>
	</div>
	
	<br>	

	<div class="box-generic">
		<div class="row-fluid">							
			<div class="span2">
			
				<!-- Stats Widget -->
				<span class="widget-stats widget-stats-gray widget-stats-2">
					<span class="count"><a data-bind="text: obj.totalCustomer"></a></span>
					<span class="txt" style="font-size: small;"><span data-bind="text: lang.lang.total_no_of_customers"></span></span>
				</span>
				<!-- // Stats Widget END -->
				
			</div>
			<div class="span2">
			
				<!-- Stats Widget -->
				<span class="widget-stats widget-stats-2">
					<span class="count"><a data-format="p" data-bind="text: obj.totalAllowCustomer" style="font-size: 50px;"></a></span>
					<span class="txt" style="font-size: small;"><span data-bind="text: lang.lang.total_customers_ratio"></span></span>
				</span>
				<!-- // Stats Widget END -->
				
			</div>
			<div class="span3">
			
				<!-- Stats Widget -->
				<span class="widget-stats widget-stats-gray widget-stats-2">
					<span class="count"><a data-format="p" data-bind="text: obj.totalActiveCustomer"></a></span>
					<span class="txt" style="font-size: small;"><span data-bind="text: lang.lang.active_customers_ratio"></span></span>
				</span>
				<!-- // Stats Widget END -->
				
			</div>
			<div class="span5">
			
				<!-- Stats Widget -->
				<span class="widget-stats widget-stats-2">
					<span class="count"><a data-format="c0" data-bind="text: obj.totalIncome"></a></span>
					<span class="txt" style="font-size: small;"><span data-bind="text: lang.lang.total_water_revenue"></span></span>
				</span>
				<!-- // Stats Widget END -->
				
			</div>							
		</div>

		<div class="row-fluid">		
			<div class="span2">
			
				<!-- Stats Widget -->			
				<span class="widget-stats widget-stats-default widget-stats-2">
					<span class="count"><a data-bind="text: obj.totalUsage"></a></span>
					<span class="txt" style="font-size: small;"><span data-bind="text: lang.lang.water_sold"></span></span>
				</span>
				<!-- // Stats Widget END -->
				
			</div>
			<div class="span2">
			
				<!-- Stats Widget -->
				<span class="widget-stats widget-stats-2">
					<span class="count"><a data-format="n2" data-bind="text: obj.avgUsage"></a></span>
					<span class="txt" style="font-size: small;"><span data-bind="text: lang.lang.average_water_usage_per_connection"></span></span>
				</span>
				<!-- // Stats Widget END -->
				
			</div>
			<div class="span3">
			
				<!-- Stats Widget -->
				<span class="widget-stats widget-stats-default widget-stats-2">
					<span class="count"><a data-format="c0" data-bind="text: obj.avgIncome"></a></span>
					<span class="txt" style="font-size: small;"><span data-bind="text: lang.lang.avarage_reveune_per_connection"></span></span>
				</span>
				<!-- // Stats Widget END -->
				
			</div>
			<div class="span5">
			
				<!-- Stats Widget -->
				<span class="widget-stats widget-stats-2">
					<span class="count"><a data-format="c0" data-bind="text: obj.totalDeposit"></a></span>
					<span class="txt" style="font-size: small;"><span data-bind="text: lang.lang.total_deposit"></span></span>
				</span>
				<!-- // Stats Widget END -->
				
			</div>							
		</div>
	</div>

	<br>

	<h2><span data-bind="text: lang.lang.water_related_reports"></span></h2>
	<br>

	<div class="row-fluid">
		<div class="span3">
			<h4><span data-bind="text: lang.lang.customer_management_report"></span></h4>
			<div class="well margin-none" style="height: 250px;">
				<span data-bind="text: lang.lang.these_reports_are_useful_for_customer_information_management_meter_connections_and_usage_managements"></span>
				<br><br>
				<ul>
					<li><a href='#/wCustomer_list'><span data-bind="text: lang.lang.customer_list1"></span></a></li>
	  				<li><a href='#/wBrand_new_customer'><span data-bind="text: lang.lang.new_customer_list"></span></a></li>  				
	  				<li><a href='#/wCustomer_no_meter'><span data-bind="text: lang.lang.no_connection"></span></a></li>
	  				<br>
	  				<li><a href='#/wLow_consumption'><span data-bind="text: lang.lang.minimum_water_usage_list"></span></a></li>
	  				<li><a href='#/wDisconnect_list'><span data-bind="text: lang.lang.disconnected_list"></span></a></li>
				</ul>
			</div>
		</div>
		<div class="span3">
			<h4><span data-bind="text: lang.lang.receiveable_and_deposits"></span></h4>
			<div class="well margin-none" style="height: 250px;">
				<span data-bind="text: lang.lang.these_would_be_the_most_common_reports_that_you_will_be_using"></span>  
				<br><br>
				<ul>
					<li><a href='#/wCustomer_balance'><span data-bind="text: lang.lang.accounts_receivable_listing"></span></a></li>
	  				<li><a href='#/wCustomer_deposit'><span data-bind="text: lang.lang.customer_deposit"></span></a></li>  				  					  				  
	  				<li><a href='#/wAging_summary'><span data-bind="text: lang.lang.customer_aging_summary_list"></span></a></li> 
	  				<li><a href='#/wAging_detail'><span data-bind="text: lang.lang.customer_aging_detail_list"></span></a></li>
				</ul>
			</div>
		</div>
		<div class="span3">
			<h4><span data-bind="text: lang.lang.sale_report"></span></h4>
			<div class="well margin-none" style="height: 250px;">
				<span data-bind="text: lang.lang.summary_and_detail_sale_report_broken_down_by_Licenses_bloc_and_types_of_reveneues"></span>				
				<br><br>
				<ul>
					<li><a href='#/wSale_summary'><span data-bind="text: lang.lang.sale_summary_report"></span></a></li>
	  				<li><a href='#/wSale_detail'><span data-bind="text: lang.lang.sale_detail_report"></span></a></li>  				  					  				  
	  				<li><a ><span data-bind="text: lang.lang.connection_service"></span></a></li> 
	  				<li><a ><span data-bind="text: lang.lang.other_revenues"></span></a></li>
				</ul>
			</div>
		</div>
		<div class="span3">
			<h4><span data-bind="text: lang.lang.cash_receipt_report"></span></h4>
			<div class="well margin-none" style="height: 250px;">
				<span data-bind="text: lang.lang.summary_and_detail_cash_receipt_reports_grouped_by_sources_methods_of_receipts"></span>
				<br><br>
				<ul>
					<li><a href='#/wPayment_summary'><span data-bind="text: lang.lang.cash_receipt_by_summary"></span></a></li> 
  					<li><a href='#/wPayment_detail'><span data-bind="text: lang.lang.cash_receipt_by_detail"></span></a></li>  
	  				<li><a href='#/wPayment_by_source_summary'><span data-bind="text: lang.lang.cash_receipt_by_sources"></span></a></li>
	  				<li><a href='#/wPayment_by_source_detail'><span data-bind="text: lang.lang.cash_receipt_by_sources_detail"></span></a></li> 
				</ul>
			</div>
		</div>
	</div>

	<p class="separator text-center"><i class="icon-ellipsis-horizontal icon-3x"></i></p>
</script>
<script id="wCustomerList" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-fluid">
			<div class="row-fluid">
				<div class="span12">
					<div id="example" class="k-content">
						<div class="hidden-print">
							<span class="pull-right glyphicons no-js remove_2" 
								onclick="javascript:window.history.back()"><i></i></span>

							<input id="ddlBranch" />						                
							<input id="ddlLocation" disabled="disabled" />
							<button id="search" type="button" data-role="button"><i class="icon-search"></i></button> |
							<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>						
						</div>

						<h3 align="center">Customer List</h3>	

						<div id="grid"></div>
					    					
					</div> <!-- //End div example--> 
				</div><!-- //End div span12-->
			</div><!-- //End div row-fluid-->
		</div>
	</div>	
</script>
<script id="wCustomerNoMeter" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-fluid">
			<div class="row-fluid">
				<div class="span12">
					<div id="example" class="k-content">						
						
		                <!-- <div class="hidden-print">
		                	<span class="pull-right glyphicons no-js remove_2" 
								onclick="javascript:window.history.back();"><i></i></span>

		                	<input data-role="dropdownlist"
				                   data-auto-bind="false"
				                   data-text-field="name"
				                   data-value-field="id"
				                   data-bind="value: branch_id,
				                              source: branchDS"
				                   data-option-label="(--- License ---)" />

				            <button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button> |
							<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>   
		                </div>			           

						<br> -->
						
						<h4 align="center">Un-connected Customer List</h4>							

						<br>						

						<table class="table table-bordered table-striped table-white">
			        		<thead>
			        			<tr>			        				
			        				<th>Code</th>	
			        				<th>Name</th>			        					            				
			        				<th>Type</th>
			        				<th>Block</th>
			        				<th>License</th>			        				
			        				<th>Deposit</th>
			        				<th></th>		        				            					            				
			        			</tr>
			        		</thead>
			        		<tbody data-role="listview"
			        				data-auto-bind="true"	            					            			
					                data-template="wCustomer-no-meter-row-template"
					                data-bind="source: dataSource"></tbody>
			        	</table>

			        	<div data-role="pager" 
						    	data-auto-bind="true"
					            data-bind="source: dataSource"></div>						

					</div><!-- //End div example-->
				</div><!-- //End div span12-->
			</div><!-- //End div row-fluid-->
		</div>
	</div>	
</script>
<script id="wCustomer-no-meter-row-template" type="text/x-kendo-tmpl">		
	<tr>		
		<td>#=wnumber#</td>
		<td>
			<a data-bind="click: goToNewMeter">#=fullname#</a>
		</td>
		<td>#=contact_type_name#</td>
		<td>#=wlocation_name#</td>
		<td>#=wbranch_name#</td>							
		<td align="right">#=kendo.toString(wdeposit, "c0", banhji.userManagement.getLogin().institute[0].locale)#</td>
		<td>
			<span class="btn btn-success btn-icon glyphicons circle_plus" data-bind="click: goToNewMeter"><i></i>New Connected</span>			
		</td>							
    </tr>   
</script>
<script id="wBrandNewCustomer" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-fluid">
			<div class="row-fluid">
				<div class="span12">
					<div id="example" class="k-content">						
						
		                <form id="employeeForm" data-role="validator" novalidate="novalidate">
			                <div id="fieldlist" class="hidden-print">
			                	<span class="pull-right glyphicons no-js remove_2" 
									onclick="javascript:window.history.back();"><i></i></span>

			                	<input data-role="dropdownlist"                   
				                   data-value-primitive="true"
				                   data-text-field="text"
				                   data-value-field="value"
				                   data-bind="value: sorter,
				                              source: sortList,                              
				                              events: { change: sorterChanges }" />
				                                           
			                    <input type="text" data-role='datepicker' id="sdate" name="sdate" data-type="date" data-bind="value: sdate" />
			                    <span data-for='sdate' class='k-invalid-msg'></span>

			                    <input type="text" data-role='datepicker' id ="edate" data-type="date" name="edate" data-bind="value: edate" 
			                    		data-greaterdate-field="sdate" data-greaterdate-msg='Check Date' />
			                    <span data-for='edate' class='k-invalid-msg'></span>

			                    <input data-role="dropdownlist"
				                   data-auto-bind="false"
				                   data-text-field="name"
				                   data-value-field="id"
				                   data-bind="value: branch_id,
				                              source: branchDS"
				                   data-option-label="(--- License ---)" />
			               
			                    <button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button> |
								<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>     
			                </div>
			            </form>
					
						<div align="center">
							<h4>New Customer List</h4>
							
							<span data-bind="text: strDate()"></span>														
						</div>											

						<br>						

						<table class="table table-bordered table-striped table-white">
			        		<thead>
			        			<tr>			        				
			        				<th>Register Date</th>
			        				<th>Code</th>	
			        				<th>Name</th>			        					            				
			        				<th>Type</th>			        				
			        				<th>Block</th>
			        				<th>License</th>
			        				<th>Deposit</th>
			        				<th>Meter</th>		        				            					            				
			        			</tr>
			        		</thead>
			        		<tbody data-role="listview"
			        				data-auto-bind="false"	            					            			
					                data-template="wBranch-new-customer-row-template"
					                data-bind="source: dataSource"></tbody>
			        	</table>

			        	<div data-role="pager" 
						    	data-auto-bind="false"
					            data-bind="source: dataSource"></div>						

					</div><!-- //End div example-->
				</div><!-- //End div span12-->
			</div><!-- //End div row-fluid-->
		</div>
	</div>	
</script>
<script id="wBranch-new-customer-row-template" type="text/x-kendo-tmpl">		
	<tr>
		<td>#=kendo.toString(new Date(registered_date), "dd-MM-yyyy")#</td>		
		<td>#=wnumber#</td>
		<td>#=fullname#</td>
		<td>#=contact_type_name#</td>		
		<td>#=wlocation_name#</td>
		<td>#=wbranch_name#</td>						
		<td align="right">#=kendo.toString(wdeposit, "c0", banhji.userManagement.getLogin().institute[0].locale)#</td>
		<td>
			#for(var i=0; i<meters.length; i++) {#
				#:meters[i].number# <br>
			#}#
		</td>							
    </tr>   
</script>
<script id="wLowConsumption" type="text/x-kendo-template">
	<div class="row-fluid">
		<div class="span12">
			<div id="example" class="k-content">
				<div class="hidden-print">
					<a href="javascript:void()" 
						class="pull-right glyphicons no-js remove_2" 
						onclick="javascript: window.history.back()"><i></i></a>

					<input id="ddlBranch" />						                
					<input id="ddlLocation" disabled="disabled" />
					<input id="monthpicker" placeholder="Monthly" />
					<input id="usage" placeHolder="Minimux Usage" />	
					<button id="search" type="button" data-role="button"><i class="icon-search"></i></button> |
					<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>
				</div>

				<br>
				
				<div align="center">
					<h3>Minimux Usage List</h3>					
					<span id="strDate"></span>
				</div>
				
				<div id="grid"></div>					
								
			</div><!-- //End div example-->
		</div><!-- //End div span12-->
	</div><!-- //End div row-fluid-->	
</script>
<script id="wDisconnectList" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-fluid">
			<div class="row-fluid">
				<div class="span12">
					<div id="example" class="k-content">
						<div class="hidden-print">
							<a href="javascript:void()" 
								class="pull-right glyphicons no-js remove_2" 
								onclick="javascript: window.history.back()"><i></i></a>

							<input id="ddlBranch" />						                
							<input id="ddlLocation" disabled="disabled" />							
							<input id="days" placeHolder="Due Date" />	
							<button id="search" type="button" data-role="button"><i class="icon-search"></i></button> |
							<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>											
						</div>

						<br>

						<div align="center">
							<h3>Disconnected List</h3>		
						</div>
						
						<div id="grid"></div>
					</div>
				</div>
			</div>
		</div>
	</div>	
</script>

<!-- Customer Accounting -->
<script id="wCustomerBalance" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-fluid">
			<div class="row-fluid">
				<div class="span12">
					<div id="example" class="k-content">
						<div class="hidden-print">
							<span class="pull-right glyphicons no-js remove_2" 
								onclick="javascript:window.history.back()"><i></i></span>

							<input id="ddlBranch" />						                
							<input id="ddlLocation" disabled="disabled" />
							<button id="search" type="button" data-role="button"><i class="icon-search"></i></button> |
							<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>						
						</div>

						<h3 align="center">បញ្ជីសមតុល្យអតិថិជន</h3>	

						<div id="grid"></div>					
					    					
					</div> <!-- //End div example--> 
				</div><!-- //End div span12-->
			</div><!-- //End div row-fluid-->
		</div>
	</div>	
</script>
<script id="wCustomerDeposit" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-fluid">
			<div class="row-fluid">
				<div class="span12">
					<div id="example" class="k-content">
						<div class="hidden-print">
							<span class="pull-right glyphicons no-js remove_2" 
								onclick="javascript:window.history.back()"><i></i></span>

							<input id="ddlBranch" />						                
							<input id="ddlLocation" disabled="disabled" />
							<button id="search" type="button" data-role="button"><i class="icon-search"></i></button> |
							<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>						
						</div>

						<h3 align="center">បញ្ជីប្រាក់កក់អតិថិជន</h3>	

						<div id="grid"></div>					
					    					
					</div> <!-- //End div example--> 
				</div><!-- //End div span12-->
			</div><!-- //End div row-fluid-->
		</div>
	</div>	
</script>
<script id="wAgingSummary" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="row-fluid">
			<div class="span12">
				<div id="example" class="k-content">

					<div class="hidden-print">
						<span class="pull-right glyphicons no-js remove_2" 
							onclick="javascript:window.history.back();"><i></i></span>

						<input id="ddlBranch" data-bind="value: branch_id" />						                
						<input id="ddlLocation" data-bind="value: location_id" disabled="disabled" />
						<input data-role="datepicker" data-bind="value: search_date" data-format="dd-MM-yyyy" placeHolder="Date" />
						<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button> |
						<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>				
					</div>

					<br>
					
					<div align="center">
						<h3>បញ្ជីបំណុលអតិថិជនសង្ខេប</h3>
						គិតត្រឹម
						<span data-bind="text: strDate"></span>
					</div>

					<table class="table table-bordered table-striped table-white">
		        		<thead>
		        			<tr>
		        				<th>ឈ្មោះ</th>
		        				<th>បច្ចុប្បន្ន</th>
		        				<th>១-៣០ថ្ងៃ</th>			        				
		        				<th>៣១-៦០ថ្ងៃ</th>
		        				<th>៦១-៩០ថ្ងៃ</th>        				
		        				<th>លើសពី ៩០ថ្ងៃ</th>
		        				<th>សរុប</th>	            					            				
		        			</tr>
		        		</thead>
		        		<tbody data-role="listview"
		        				data-auto-bind="false"	            					            			
				                data-template="wAging-summary-row-template"
				                data-bind="source: dataSource"></tbody>
		        	</table>

		        	<div data-role="pager"
				    	 data-auto-bind="false"
			             data-bind="source: dataSource"></div>					
										
				</div><!-- //End div example-->
			</div><!-- //End div span12-->
		</div><!-- //End div row-fluid-->	
	</div>	
</script>
<script id="wAging-summary-row-template" type="text/x-kendo-tmpl">		
	<tr>		
		<td>#=fullIdName#</td>		
		<td class="right">#:kendo.toString(current, 'c0', banhji.institute.locale)#</td>		
		<td class="right">#:kendo.toString(oneMonth, 'c0', banhji.institute.locale)#</td>
		<td class="right">#:kendo.toString(twoMonth, 'c0', banhji.institute.locale)#</td>
		<td class="right">#:kendo.toString(threeMonth, 'c0', banhji.institute.locale)#</td>
		<td class="right">#:kendo.toString(overMonth, 'c0', banhji.institute.locale)#</td>
		<td class="right">#:kendo.toString(amount, 'c0', banhji.institute.locale)#</td>					
    </tr>   
</script>
<script id="wAgingDetail" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="row-fluid">
			<div class="span12">
				<div id="example" class="k-content">
					
					<div class="hidden-print">
						<span class="pull-right glyphicons no-js remove_2" 
							onclick="javascript:window.history.back();"><i></i></span>

						<input id="ddlBranch" data-bind="value: branch_id" />						                
						<input id="ddlLocation" data-bind="value: location_id" disabled="disabled" />
						<input data-role="datepicker" data-bind="value: search_date" data-format="dd-MM-yyyy" placeHolder="Date" />
						<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button> |
						<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>				
					</div>

					
					<div align="center">
						<h3>Account Received By Detail List</h3>
						To
						<span data-bind="text: strDate"></span>
					</div>

					<div id="grid"></div>		        	

				</div><!-- //End div example-->
			</div><!-- //End div span12-->
		</div><!-- //End div row-fluid-->	
	</div>	
</script>

<!-- Sale -->
<script id="wSaleSummary" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">
					
		            <div class="box-generic hidden-print">
		            	<span class="pull-right glyphicons no-js remove_2" 
							onclick="javascript:window.history.back()"><i></i></span>

		            	<input data-role="dropdownlist"                   
		                   data-value-primitive="true"
		                   data-text-field="text"
		                   data-value-field="value"
		                   data-bind="value: sorter,
		                              source: sortList,                              
		                              events: { change: sorterChanges }" />
		                                           
	                    <input data-role="datepicker"	                       
	                       data-format="dd-MM-yyyy"
	                       data-parse-formats="yyyy-MM-dd"
		                   data-bind="value: sdate"
		                   placeholder="From" />
	                    
	                   	<input data-role="datepicker"
	                       data-format="dd-MM-yyyy"
	                       data-parse-formats="yyyy-MM-dd"
		                   data-bind="value: edate"
		                   placeholder="To" />	                    	            	
		          		
		          		<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button>
		          		|
						<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>						          		
		            </div>

		            <br><br>

		            <div align="center">
						<h3>Sale By Summary</h3>
						
						<span data-bind="text: strDate"></span>														
					</div>

					<br>			        
			        
			        <div id="grid"></div>
			        
				</div> <!-- //End div example-->            
			</div> <!-- //End div span12-->		
		</div> <!-- //End div row-fluid-->
	</div>
</script>
<script id="wSaleDetail" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">
					
		            <div class="box-generic hidden-print">
		            	<span class="pull-right glyphicons no-js remove_2" 
							onclick="javascript:window.history.back()"><i></i></span>

						<table>
							<tr>
								<td>
					            	<input data-role="dropdownlist"                   
					                   data-value-primitive="true"
					                   data-text-field="text"
					                   data-value-field="value"
					                   data-bind="value: sorter,
					                              source: sortList,                              
					                              events: { change: sorterChanges }" />
					                                           
				                    <input data-role="datepicker"
				                       data-format="dd-MM-yyyy"
				                       data-parse-formats="yyyy-MM-dd"
					                   data-bind="value: sdate" />
				                    
				                   	<input data-role="datepicker"
				                       data-format="dd-MM-yyyy"
				                       data-parse-formats="yyyy-MM-dd"
					                   data-bind="value: edate" />

					                <input data-role="dropdownlist"
									   data-option-label="(--- រើស អាជ្ញាប័ណ្ណ ---)"
					                   data-auto-bind="false"
					                   data-value-primitive="true"
					                   data-text-field="name"
					                   data-value-field="id"
					                   data-bind="value: branch_id,
					                              source: branchDS,			                              
					                              events: {
					                                change: branchChanges
					                              }"/>
					            </td>
					            <td>
					            	<select data-role="multiselect"
							           data-placeholder="Block..."
							           data-value-primitive="true"
							           data-text-field="name"
							           data-value-field="id"
							           data-bind="value: selectedLocations,
							                      source: locationDS,
							                      enabled: isBranchSelected"
							           style="width: 200px;" 
							    	></select>
					            </td>	                    	            	
					          	<td>	
					          		<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button>
					          		|
									<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>
								</td>
							</tr>
						</table>						          		
		            </div>

		            <br><br>

		            <div align="center">
						<h3>Sale By Detail</h3>
						
						<span data-bind="text: strDate"></span>														
					</div>

					<br>			        
			        
			        <div id="grid"></div>

			        <div data-role="pager" 
					    	data-auto-bind="false"
					    	data-page-sizes='[50, 100, 200, "All"]'					    	
				            data-bind="source: dataSource"></div>
			        
				</div> <!-- //End div example-->            
			</div> <!-- //End div span12-->		
		</div> <!-- //End div row-fluid-->
	</div>
</script>

<!-- Payment -->
<script id="wPaymentSummary" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-fluid">
			<div class="row-fluid">
				<div class="span12">
					<div id="example" class="k-content">
						
						<form id="employeeForm" data-role="validator" novalidate="novalidate">
			                <div id="fieldlist" class="hidden-print">
			                	<span class="pull-right glyphicons no-js remove_2" 
									onclick="javascript:window.history.back();"><i></i></span>

			                	<input data-role="dropdownlist"                   
				                   data-value-primitive="true"
				                   data-text-field="text"
				                   data-value-field="value"
				                   data-bind="value: sorter,
				                              source: sortList,                              
				                              events: { change: sorterChanges }" />
				                                           
			                    <input type="text" data-role='datepicker' id="sdate" name="sdate" data-type="date" data-bind="value: sdate" />
			                    <span data-for='sdate' class='k-invalid-msg'></span>

			                    <input type="text" data-role='datepicker' id ="edate" data-type="date" name="edate" data-bind="value: edate" 
			                    		data-greaterdate-field="sdate" data-greaterdate-msg='សូមពិនិត្យមើលកាលបរិច្ឆទឡើងវិញ' />
			                    <span data-for='edate' class='k-invalid-msg'></span>
			               
			                    <button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button> 
			                    |
								<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>      
			                </div>
			            </form>

						<br>

						<div align="center">
							<h4>របាយការណ៍ទទួលប្រាក់សង្ខេប</h4>
							
							<span data-bind="text: strDate"></span>														
						</div>

						<br>						

						<table class="table table-bordered table-striped table-white">
			        		<thead>
			        			<tr>
			        				<th width="45">No.</th>
			        				<th>អាជ្ញាប័ណ្ណ</th>
			        				<th>តំបន់</th>			        				
			        				<th>ទឹកប្រាក់លក់</th>
			        				<th>ទទួលប្រាក់</th>        				
			        				<th>សមតុល្យ</th>	            					            				
			        			</tr>
			        		</thead>
			        		<tbody data-role="listview"
			        				data-auto-bind="false"	            					            			
					                data-template="wPayment-summary-row-template"
					                data-bind="source: dataSource"></tbody>
			        	</table>						

					</div><!-- //End div example-->
				</div><!-- //End div span12-->
			</div><!-- //End div row-fluid-->
		</div>
	</div>	
</script>
<script id="wPayment-summary-row-template" type="text/x-kendo-tmpl">		
	<tr>		
		<td>#=banhji.wPaymentSummary.dataSource.indexOf(data)+1#</td>
		<td>#=branch_name#</td>
		<td>#=location_name#</td>		
		<td class="right">#=kendo.toString(sale, "c0", banhji.eDashBoard.locale)#</td>
		<td class="right">#=kendo.toString(paid, "c0", banhji.eDashBoard.locale)#</td>
		<td class="right">#=kendo.toString(paid, "c0", banhji.eDashBoard.locale)#</td>						
    </tr>   
</script>
<script id="wPaymentDetail" type="text/x-kendo-template">
	<div id="slide-form">
		<div class="container-fluid">
			<div class="row-fluid">
				<div class="span12">
					<div id="example" class="k-content">

						<form id="employeeForm" data-role="validator" novalidate="novalidate">
			                <div id="fieldlist" class="hidden-print">
			                	<span class="pull-right glyphicons no-js remove_2" 
									onclick="javascript:window.history.back();"><i></i></span>

			                	<input data-role="dropdownlist"                   
				                   data-value-primitive="true"
				                   data-text-field="text"
				                   data-value-field="value"
				                   data-bind="value: sorter,
				                              source: sortList,                              
				                              events: { change: sorterChanges }" />
				                                           
			                    <input type="text" data-role='datepicker' id="sdate" name="sdate" data-type="date" data-bind="value: sdate" />
			                    <span data-for='sdate' class='k-invalid-msg'></span>

			                    <input type="text" data-role='datepicker' id ="edate" data-type="date" name="edate" data-bind="value: edate" 
			                    		data-greaterdate-field="sdate" data-greaterdate-msg='សូមពិនិត្យមើលកាលបរិច្ឆទឡើងវិញ' />
			                    <span data-for='edate' class='k-invalid-msg'></span>
			               
			                    <button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button> |
								<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>      
			                </div>
			            </form>

						<br>

						<div align="center">
							<h4>របាយការណ៍ទទួលប្រាក់លំអិត</h4>
							
							<span data-bind="text: strDate"></span>														
						</div>

						<br>            			

						<table class="table table-bordered table-striped table-white">
			        		<thead>
			        			<tr>			        				
			        				<th>Date</th>
			        				<th>បេឡាករ</th>
			        				<th>លេខកូដ</th>	
			        				<th>ឈ្មោះ</th>			        					            				
			        				<th>វិក្កយបត្រ</th>
			        				<th>បង់ប្រាក់</th>			        							        					        				            					            				
			        			</tr>
			        		</thead>
			        		<tbody data-role="listview"
			        				data-auto-bind="false"	            					            			
					                data-template="wPayment-detail-row-template"
					                data-bind="source: dataSource"></tbody>
			        	</table>

			        	<div data-role="pager" 
						    	data-auto-bind="false"
					            data-bind="source: dataSource"></div>
						
					</div><!-- //End div example-->
				</div><!-- //End div span12-->
			</div><!-- //End div row-fluid-->
		</div>
	</div>	
</script>
<script id="wPayment-detail-row-template" type="text/x-kendo-tmpl">		
	<tr>		
		<td>#=kendo.toString(new Date(payment_date), "dd-MM-yyyy")#</td>
		<td>#=employee#</td>
		<td>#=contact[0].wnumber#</td>
		<td>
			#if(contact[0].contact_type_id==6 || contact[0].contact_type_id==7 || contact[0].contact_type_id==8){#
				#=contact[0].company#
			#}else{#
				#=contact[0].surname# #=contact[0].name# 
			#}#
		</td>		
		<td>#=invoice#</td>		
		<td class="right">#=kendo.toString(amount, "c0", banhji.eDashBoard.locale)#</td>										
    </tr>   
</script>

<script id="wPaymentBySourceSummary" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">
					
		            <div class="box-generic hidden-print">
		            	<span class="pull-right glyphicons no-js remove_2" 
							onclick="javascript:window.history.back()"><i></i></span>

		            	<input data-role="dropdownlist"                   
		                   data-value-primitive="true"
		                   data-text-field="text"
		                   data-value-field="value"
		                   data-bind="value: sorter,
		                              source: sortList,                              
		                              events: { change: sorterChanges }" />
		                                           
	                    <input data-role="datepicker"	                       
	                       data-format="dd-MM-yyyy"
	                       data-parse-formats="yyyy-MM-dd"
		                   data-bind="value: sdate"
		                   placeholder="ចាប់ពីថ្ងៃទី" />
	                    
	                   	<input data-role="datepicker"
	                       data-format="dd-MM-yyyy"
	                       data-parse-formats="yyyy-MM-dd"
		                   data-bind="value: edate"
		                   placeholder="ដល់ថ្ងៃទី" />	                    	            	
		          		
		          		<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button>
		          		|
						<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>						          		
		            </div>

		            <br><br>

		            <div align="center">
						<h3>របាយការណ៍ទទួលប្រាក់តាមប្រភពសង្ខេប</h3>
						
						<span data-bind="text: strDate"></span>														
					</div>

					<br>			        
			        
			        <div id="grid"></div>
			        
				</div> <!-- //End div example-->            
			</div> <!-- //End div span12-->		
		</div> <!-- //End div row-fluid-->
	</div>
</script>
<script id="wPaymentBySourceDetail" type="text/x-kendo-template">
	<div class="container-fluid">
		<div class="row-fluid">    
			<div class="span12">
				<div id="example" class="k-content">
					
		            <div class="box-generic hidden-print">
		            	<span class="pull-right glyphicons no-js remove_2" 
							onclick="javascript:window.history.back()"><i></i></span>

						<table>
							<tr>
								<td>
					            	<input data-role="dropdownlist"                   
					                   data-value-primitive="true"
					                   data-text-field="text"
					                   data-value-field="value"
					                   data-bind="value: sorter,
					                              source: sortList,                              
					                              events: { change: sorterChanges }" />
					                                           
				                    <input data-role="datepicker"	                       
				                       data-format="dd-MM-yyyy"
				                       data-parse-formats="yyyy-MM-dd"
					                   data-bind="value: sdate"
					                   placeholder="ចាប់ពីថ្ងៃទី" />
				                    
				                   	<input data-role="datepicker"
				                       data-format="dd-MM-yyyy"
				                       data-parse-formats="yyyy-MM-dd"
					                   data-bind="value: edate"
					                   placeholder="ដល់ថ្ងៃទី" />

					                <input data-role="dropdownlist"
									   data-option-label="(--- រើស អាជ្ញាប័ណ្ណ ---)"
					                   data-auto-bind="false"
					                   data-value-primitive="true"
					                   data-text-field="name"
					                   data-value-field="id"
					                   data-bind="value: branch_id,
					                              source: branchDS,			                              
					                              events: {
					                                change: branchChanges
					                              }"/>
					            </td>
					            <td>
					            	<select data-role="multiselect"
							           data-placeholder="តំបន់..."
							           data-value-primitive="true"
							           data-text-field="name"
							           data-value-field="id"
							           data-bind="value: selectedLocations,
							                      source: locationDS,
							                      enabled: isBranchSelected"
							           style="width: 200px;" 
							    	></select>
					            </td>	                    	            	
					          	<td>	
					          		<button type="button" data-role="button" data-bind="click: search"><i class="icon-search"></i></button>
					          		|
									<button type="button" data-role="button" onclick="javascript:window.print()"><i class="icon-print"></i></button>
								</td>
							</tr>
						</table>						          		
		            </div>

		            <br><br>

		            <div align="center">
						<h3>របាយការណ៍ទទួលប្រាក់តាមប្រភពលំអិត</h3>
						
						<span data-bind="text: strDate"></span>														
					</div>

					<br>			        
			        
			        <div id="grid"></div>

			        <div data-role="pager" 
					    	data-auto-bind="false"
					    	data-page-sizes='[50, 100, 200, "All"]'					    	
				            data-bind="source: dataSource"></div>
			        
				</div> <!-- //End div example-->            
			</div> <!-- //End div span12-->		
		</div> <!-- //End div row-fluid-->
	</div>
</script>

<!-- ***************************
 *	Template List Section     *
**************************** -->

<script id="contact-list-tmpl" type="text/x-kendo-tmpl">
	<span>
		#=number# #=surname# #=name#
	</span>
</script>
<script id="currency-list-tmpl" type="text/x-kendo-tmpl">
	<span>
		#=code# - #=country#
	</span>
</script>
<script id="segment-list-tmpl" type="text/x-kendo-tmpl">
	<span>
		#=name# (#=segment.name#)
	</span>
</script>
<script id="item-list-tmpl" type="text/x-kendo-tmpl">
	<span>
		#=sku# #=name#
	</span>
</script>
<script id="account-list-tmpl" type="text/x-kendo-tmpl">
	<span>
		#=code# #=name#
	</span>
</script>
<script id="reference-list-tmpl" type="text/x-kendo-tmpl">
	<span>#=number# : #=kendo.toString(amount, "c", locale)#</span>
	<span class="pull-right">
		#if(status==1){#
			Paid
		#}else if(status==2){#
			Partially Paid
		#}else{#
			Open
		#}#
	</span>
</script>

<!-- ***************************
 *	Menu Section         	  *
**************************** -->
<script id="accountingMenu" type="text/x-kendo-template">
	<ul class="topnav">
	  	<li><a href='#/journal' class='glyphicons home'><i></i></a></li>
	  	<li><a href='#/journal'>Journal</a></li>
	  	<li role='presentation' class='dropdown'>
	  		<a class='dropdown-toggle' data-toggle='dropdown' href='#' role='button' aria-haspopup='true' aria-expanded='false'><span data-bind="text: lang.lang.activities"></span> <span class='caret'></span></a>
  			<ul class='dropdown-menu'>
  				<li><a href='#/currency_rate'>Exchange Rate</a></li>
  				<li><a href='#/recurring'>Recurring List</a></li>  					 				
  			</ul>
	  	</li>	  	
	  	<li><a href='#/journal_report'>Journal Report</a></li>
	  	<li><a href='#/' class='glyphicons settings'><i></i></a></li>			
	</ul>
</script>
<script id="vendorMenu" type="text/x-kendo-template">
	<ul class="topnav">
		<li><a href='#/vendors' class='glyphicons show_big_thumbnails'><i></i></a></li>
	  	<li><a href='#/vendor_center'>CENTER</a></li>
	  	<li role='presentation' class='dropdown'>
	  		<a class='dropdown-toggle glyphicons text_bigger' data-toggle='dropdown' href='#' role='button' aria-haspopup='true' aria-expanded='false'><i></i> <span class='caret'></span></a>
  			<ul class='dropdown-menu'>
  				<li><a href='#/vendor'>New Supplier</a></li>  				  				
  				<li><a href='#/purchase_order'>Purchase Order</a></li>
  				<li><a href='#/vendor_deposit'>Deposit</a></li>
  				<li><a href='#/grn'>Goods Received Note</a></li> 
  				<li><a href='#/purchase'>Purchase</a></li>  				
  				<li><a href='#/purchase_return'>Purchase Return</a></li>  				
  				<li><a href='#/cash_payment'>Pay Bill</a></li>  				 				  				 				
  			</ul>
	  	</li>	  	  	
	  	<li><a href='#/vendor_report_center'>REPORTS</a></li>	  	
	  	<li><a href='#/vendor_setting' class='glyphicons settings'><i></i></a></li>	  	
	</ul>
</script>
<script id="customerMenu" type="text/x-kendo-template">
	<ul class="topnav">
	  	<li><a href='#/customers' class='glyphicons show_big_thumbnails'><i></i></a></li>
	  	<li><a href='#/customer_center'>CENTER</a></li>
	  	<li role='presentation' class='dropdown'>
	  		<a class='dropdown-toggle glyphicons text_bigger' data-toggle='dropdown' href='#' role='button' aria-haspopup='true' aria-expanded='false'><i></i> <span class='caret'></span></a>
  			<ul class='dropdown-menu'>  				  				
  				<li><a href='#/quote'>Quote</a></li>  				
  				<li><a href='#/sale_order'>Sale Order</a></li>
  				<li><a href='#/gdn'>Goods Delivery Note</a></li>
  				<li><a href='#/customer_deposit'>Deposit</a></li>
  				<li><a href='#/cash_sale'>Cash Sale</a></li>  				
  				<li><a href='#/invoice'><span data-bind="text: lang.invoice"></span></a></li>
  				<li><a href='#/statement'>Statement</a></li>
  				<li><a href='#/cash_receipt'>Receive Payment</a></li>
  				<li><a href="#/customerInvoiceSent">Invoice Sent To</a></li>
  				<li><a href='#/customer'><span data-bind="text: lang.new_customer"></span></a></li> 				  				 				
  			</ul>
	  	</li>	  	  	
	  	<li><a href='#/customer_report_center'>REPORTS</a></li>	  	
	  	<li><a href='#/customer_setting' class='glyphicons settings'><i></i></a></li>	  		  	
	</ul>
</script>
<script id="waterMenu" type="text/x-kendo-template">
	<ul class="topnav">
	  	<li><a href='#/water' class='glyphicons home'><i></i></a></li>
	  	<li role='presentation' class='dropdown'>
	  		<a class='dropdown-toggle' data-toggle='dropdown' href='#' role='button' aria-haspopup='true' aria-expanded='false'><span data-bind="text: lang.lang.customer"></span> <span class='caret'></span></a>
  			<ul class='dropdown-menu'>  				
  				<li><a href='#/wCustomer_center'><span data-bind="text: lang.lang.customer_center"></span></a></li>
  				<li><a href='#/wNew_customer'><span data-bind="text: lang.lang.new_customer"></span></a></li>
  				<li><a href='#/wCustomer_order'><span data-bind="text: lang.lang.reorder_customer"></span></a></li>  				
  			</ul>
	  	</li>	  	
	  	<li role='presentation' class='dropdown'>
	  		<a class='dropdown-toggle' data-toggle='dropdown' href='#' role='button' aria-haspopup='true' aria-expanded='false'><span data-bind="text: lang.lang.reading"></span> <span class='caret'></span></a>
  			<ul class='dropdown-menu'> 
  				<li><a href='#/wReading'><span data-bind="text: lang.lang.take_reading"></span></a></li>
  				<li><a href='#/wIR_reader'><span data-bind="text: lang.lang.ir_reader"></span></a></li>  				
  				<li><a href='#/wReading_book'><span data-bind="text: lang.lang.reading_book"></span></a></li>
  				<li><a href='#/wReading_center'><span data-bind="text: lang.lang.edit_reading"></span></a></li>  				 
  			</ul>
	  	</li>
	  	<li role='presentation' class='dropdown'>
	  		<a class='dropdown-toggle' data-toggle='dropdown' href='#' role='button' aria-haspopup='true' aria-expanded='false'><span data-bind="text: lang.lang.invoice"></span> <span class='caret'></span></a>
  			<ul class='dropdown-menu'> 
  				<li><a href='#/wInvoice'><span data-bind="text: lang.lang.invoice"></span></a></li>
  				<li><a href='#/wPrint_center'><span data-bind="text: lang.lang.print"></span></a></li>  				  								 
  			</ul>
	  	</li>	  	
	  	<li><a href='#/cashier'><span data-bind="text: lang.lang.cashier"></span></a></li>	  	
	  	<li role='presentation' class='dropdown'>
	  		<a class='dropdown-toggle' data-toggle='dropdown' href='#' role='button' aria-haspopup='true' aria-expanded='false'><span data-bind="text: lang.lang.inventory"></span> <span class='caret'></span></a>
  			<ul class='dropdown-menu'>  				
  				<li><a href='#/wInventory_item'><span data-bind="text: lang.lang.inventory_center"></span></a></li>
  				<li><a href='#/item'><span data-bind="text: lang.lang.new_item"></span></a></li>
  				<li><a href='#/item_catalog'><span data-bind="text: lang.lang.new_catalog"></span></a></li>
  				<li><a href='#/item_assembly'><span data-bind="text: lang.lang.new_assembly"></span></a></li>  				 				 				
  			</ul>
	  	</li>
	  	<li><a href='#/wReport_center'><span data-bind="text: lang.lang.report"></span></a></li>	  	
	  	<li><a href='#/wSettings' class='glyphicons settings'><i></i></a></li>
	</ul>
</script>
<script id="inventoryMenu" type="text/x-kendo-template">
	<ul class="topnav">
		<li><a href='#/inventories' class='glyphicons show_big_thumbnails'><i></i></a></li>
	  	<li><a href='#/item_center'>CENTER</a></li>
	  	<li role='presentation' class='dropdown'>
	  		<a class='dropdown-toggle glyphicons text_bigger' data-toggle='dropdown' href='#' role='button' aria-haspopup='true' aria-expanded='false'><i></i> <span class='caret'></span></a>
  			<ul class='dropdown-menu'>  				  				  				
  				<li><a href='#/item'><span data-bind="text: lang.lang.new_item"></span></a></li>
  				<li><a href='#/item_catalog'><span data-bind="text: lang.lang.new_catalog"></span></a></li>
  				<li><a href='#/item_assembly'><span data-bind="text: lang.lang.new_assembly"></span></a></li>
  				<li><a href='#/item_adjustment'>Item Adjustment</a></li>  				 				  				 				
  			</ul>
	  	</li>	  	  	
	  	<li><a href='#/item_report_center'><span data-bind="text: lang.lang.report"></span></a></li>	  	
	  	<li><a href='#/item_setting' class='glyphicons settings'><i></i></a></li>	  	
	</ul>	
</script>
<!-- END OF DAWINE ==================================================================================================== -->

<!-- mockup portal -->
<script id="vendorReceiveBill" type="text/x-kendo-template">
	<button data-bind="click: close" class="btn btn-primary pull-right">X</button>
	<table class="table table-striped table-primary">
		<thead>
			<tr>
				<th>Type</th>
				<th>Vendor</th>
				<th>Invoice</th>
				<th>Amount</th>
				<th>Action</th>
			</tr>
		</thead>
		<tbody data-role="listview" data-bind="source: dataStore" data-template="vendorRecieveBill-list"></tbody>
	</table>
	<div data-role="notification" id="notification" 
			 data-width="250px" 
			 data-position="{top: 25, right: 10}"></div>
</script>
<script id="vendorRecieveBill-list" type="text/x-kendo-template">
	<tr data-bind="invisible: status">
		<td>#=type#</td>
		<td>#=sentFrom.name#</td>
		<td>#=invoice_number#</td>
		<td>
			# var amount = 0; #
			#for(var i = 0; i < data.length; i++) {#
				# amount += data[i].amount; #
			#}#
			#=amount#
		</td>
		<td><buttion data-bind="click: receive" class="btn btn-primary">Receive</buttion></td>
	</tr>
</script>
<script id="customerInvoiceSent" type="text/x-kendo-template">
	<button data-bind="click: close" class="btn btn-primary pull-right">X</button>
	<table class="table table-striped table-primary">
		<thead>
			<tr>
				<th>Type</th>
				<th>Customer</th>
				<th>Invoice</th>
				<th>Amount</th>
			</tr>
		</thead>
		<tbody data-role="listview" data-bind="source: dataStore" data-template="customerInvoiceSent-list"></tbody>
	</table>
</script>
<script id="customerInvoiceSent-list" type="text/x-kendo-template">
	<tr data-bind="invisible: status">
		<td>#=type#</td>
		<td>#=sentTo.name#</td>
		<td>#=invoice_number#</td>
		<td>
			# var amount = 0; #
			#for(var i = 0; i < data.length; i++) {#
				# amount += data[i].amount; #
			#}#
			#=amount#
		</td>
	</tr>
</script>

<script src="https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/components/js/libs/localforage.min.js"></script>
<script src="http://cdnjs.cloudflare.com/ajax/libs/jszip/2.4.0/jszip.js"></script>
<script src="https://maps.googleapis.com/maps/api/js"></script>
<script>
	localforage.config({
		driver: localforage.LOCALSTORAGE,
		name: 'userData'
	});
	var banhji = banhji || {};
	var baseUrl = "<?php echo base_url(); ?>";
	var apiUrl = baseUrl + 'api/';	
	banhji.token = null;
	banhji.pageLoaded = {};
	// Initializing AWS Cognito service
	var userPool = new AWSCognito.CognitoIdentityServiceProvider.CognitoUserPool(poolData);
	// Initializing AWS S3 Service
	var bucket = new AWS.S3({params: {Bucket: 'banhji'}});
	banhji.companyDS = new kendo.data.DataSource({
      transport: {
        read  : {
          url: baseUrl + 'api/profiles/company',
          type: "GET",
          dataType: 'json'
        },
        update  : {
          url: baseUrl + 'api/profiles/company',
          type: "PUT",
          dataType: 'json'
        },
        parameterMap: function(options, operation) {
          if(operation === 'read') {
            return {
              limit: options.take,
              page: options.page,
              filter: options.filter
            };
          } else {
            return {models: kendo.stringify(options.models)};
          }
        }
      },
      schema  : {
        model: {
          id: 'id'
        },
        data: 'results',
        total: 'count'
      },
      batch: true,
      serverFiltering: true,
      serverPaging: true,
      filter: {field: 'username', value: userPool.getCurrentUser() == null ? '': userPool.getCurrentUser().username},
      pageSize: 1
    });

	banhji.profileDS = new kendo.data.DataSource({
      transport: {
        read  : {
          url: baseUrl + 'api/profiles',
          type: "GET",
          dataType: 'json',
          headers: banhji.header,
        },
        parameterMap: function(options, operation) {
          if(operation === 'read') {
            return {
              limit: options.take,
              page: options.page,
              filter: options.filter
            };
          } else {
            return {models: kendo.stringify(options.models)};
          }
        }
      },
      schema  : {
        model: {
          id: 'id'
        },
        data: 'results',
        total: 'count'
      },
      batch: true,
      serverFiltering: true,
      serverPaging: true,
      filter: {field: 'username', value: userPool.getCurrentUser() == null ? '':userPool.getCurrentUser().username},
      pageSize: 100
    });

	banhji.aws = kendo.observable({
        password: null,
        confirm: null,
        email: null,
        verificationCode: null,
        cognitoUser: null,
        newPass: null,
        oldPass: null,
        image: "https://s3-ap-southeast-1.amazonaws.com/app-data-20160518/blank.png",
        getImage: function() {
          banhji.profileDS.fetch(function(e){
            banhji.aws.set('image', banhji.profileDS.data()[0].profile_photo);
          });
        },
        signUp: function() {
          // e.preventDefault();
          if(this.get('password') != this.get('confirm')) {
            alert('Passwords do not match');
          } else {
            // using cognito to sign up
            var attributeList = [];

            var dataEmail = {
                Name : 'email',
                Value : this.get('email')
            };

            var attributeEmail = new AWSCognito.CognitoIdentityServiceProvider.CognitoUserAttribute(dataEmail);

            attributeList.push(attributeEmail);

            userPool.signUp(this.get('email'), this.get('password'), attributeList, null, function(err, result){
                if (err) {
                    alert(err);
                    return;
                }
                // update attribute
                // 2. move to admin page
                // banhji.awsCognito.set('cognitoUser', result.user);
                banhji.router.navigate('confirm');
            });
          }           
        },
        comfirmCode: function(e) {
           e.preventDefault();
            // confirm user verification code after signed up
            var userData = {
                Username : userPool.getCurrentUser().username,
                Pool : userPool
            };
            var cognitoUser = new AWSCognito.CognitoIdentityServiceProvider.CognitoUser(userData);
            cognitoUser.confirmRegistration(this.get('verificationCode'), true, function(err, result) {
                if (err) {
                    alert(err);
                    return;
                }
                banhji.router.navigate('index');
            });
        },
        resendCode: function(e) {
          e.preventDefault();
          alert('code resent');
        },
        signIn: function() {
            var authenticationData = {
                Username : this.get('email'),
                Password : this.get('password'),
            };
            var authenticationDetails = new AWSCognito.CognitoIdentityServiceProvider.AuthenticationDetails(authenticationData);
            
            var userData = {
                Username : this.get('email'),
                Pool : userPool
            };
            var cognitoUser = new AWSCognito.CognitoIdentityServiceProvider.CognitoUser(userData);
            cognitoUser.authenticateUser(authenticationDetails, {
                onSuccess: function (result) {
                    banhji.awsCognito.set('cognitoUser', cognitoUser);
                },

                onFailure: function(err) {
                    alert(err);
                },

            });
        },
        signOut: function(e){
          e.preventDefault();
          var userData = {
              Username : userPool.getCurrentUser().username,
              Pool : userPool
          };
          var cognitoUser = new AWSCognito.CognitoIdentityServiceProvider.CognitoUser(userData);
          if(cognitoUser != null) {
              cognitoUser.signOut();
              localforage.clear().then(function(){
              	window.location.replace("<?php base_url(); ?>login");
              });              
          } else {
              console.log('No user');
          }
        },
        changePassword: function() {
            var userData = {
                Username : this.get('email'),
                Pool : userPool
            };
            var cognitoUser = new AWSCognito.CognitoIdentityServiceProvider.CognitoUser(userData);
            cognitoUser.changePassword('oldPassword', 'newPassword', function(err, result) {
                if (err) {
                    alert(err);
                    return;
                }
                console.log('call result: ' + result);
            });
        },
        forgotPassword: function(e) {
            e.preventDefault();
            var userData = {
                Username : this.get('email'),
                Pool : userPool
            };
            var cognitoUser = new AWSCognito.CognitoIdentityServiceProvider.CognitoUser(userData);
            cognitoUser.forgotPassword({
                onSuccess: function (result) {
                    console.log('call result: ' + result);
                },
                onFailure: function(err) {
                    alert(err);
                },
                inputVerificationCode() {
                    var verificationCode = prompt('Please input verification code ' ,'');
                    var newPassword = prompt('Enter new password ' ,'');
                    cognitoUser.confirmPassword(verificationCode, newPassword, this);
                }
            });
        },
        getCurrentUser: function() {
            var cognitoUser = null;
            if (userPool.getCurrentUser() != null) {
                cognitoUser = userPool.getCurrentUser();
            }
            return cognitoUser;
        }
    });
	// Check if user is logged and authenticated via cognito service
	if(userPool.getCurrentUser() == null) {
		// if not login return to login page		
	  	//window.location.replace('http://localhost/aws/login.html');
	} else {
	  	var cognitoUser = userPool.getCurrentUser();
	  	if(cognitoUser !== null) {
	    	// banhji.aws.getImage();
	    	cognitoUser.getSession(function(err, result) {
	      		if(result) {
	        		AWS.config.credentials = new AWS.CognitoIdentityCredentials({
	          			IdentityPoolId: 'us-east-1:35445541-da4c-4dbb-b83f-d1d0301a26a9',
	          			Logins: {
	            			'cognito-idp.us-east-1.amazonaws.com/us-east-1_56S0nUDS4' : result.getIdToken().getJwtToken()
	          			}
	        		});
	     		}
	    	});
	  	}
	}	
	var langVM = kendo.observable({
		lang 		: null,		
		localeCode 	: null,		
		changeToEn 	: function() {
			localforage.setItem("lang", "EN").then(function(value){
				location.reload(false);
			});
		},
		changeToKh 	: function() {
			localforage.setItem("lang", "KH").then(function(value){
				location.reload(false);
			});
		}
	});
	banhji.userData = JSON.parse(localStorage.getItem('userData/user')) ? JSON.parse(localStorage.getItem('userData/user')) : "";
	if(banhji.userData == "") {
		banhji.companyDS.fetch(function() {
			banhji.profileDS.fetch(function(){
				var data = banhji.companyDS.data();
				var id = 0;
				id = banhji.profileDS.data()[0].id;
				if(data.length > 0) {
					var user = {
						id: id,
						username: userPool.getCurrentUser().username,
						institute: data
					};
					localforage.setItem('user', user);
				}
				banhji.userData = JSON.parse(localStorage.getItem('userData/user'));
			});
		});
	}
	banhji.institute = banhji.userData ? banhji.userData.institute : "";
	banhji.locale = banhji.institute.currency.locale;
	banhji.header = { Institute: banhji.institute.id };	
	var dataStore = function(url) {
		var o = new kendo.data.DataSource({
				transport: {
					read 	: {
						url: url,
						type: "GET",
						headers: banhji.header,
						dataType: 'json'
					},
					create 	: {
						url: url,
						type: "POST",
						headers: banhji.header,
						dataType: 'json'
					},
					update 	: {
						url: url,
						type: "PUT",
						headers: banhji.header,
						dataType: 'json'
					},
					destroy 	: {
						url: url,
						type: "DELETE",
						headers: banhji.header,
						dataType: 'json'
					},
					parameterMap: function(options, operation) {
						if(operation === 'read') {
							return {
								page: options.page,
								limit: options.take,								
								filter: options.filter,
								sort: options.sort
							};
						} else {
							return {models: kendo.stringify(options.models)};
						}
					}
				},
				schema 	: {
					model: {
						id: 'id'
					},
					data: 'results',
					total: 'count'
				},
				batch: true,
				serverFiltering: true,
				serverSorting: true,
				serverPaging: true,
				page: 1,
				take: 100
			});
		return o;
	};	
	banhji.userManagement = kendo.observable({
		lang : langVM,
		searchCriteria: 'contact',
		searchContact: function() {
			this.set('searchCriteria', 'contact');
			$("#search-placeholder").attr('placeholder', "Search Contact");
		},
		searchTransaction: function() {
			this.set('searchCriteria', 'transaction');
			$("#search-placeholder").attr('placeholder', "Search Transaction");
		},
		searchItem: function() {
			this.set('searchCriteria', 'item');
			$("#search-placeholder").attr('placeholder', "Search Item");
		},
		searchBotton: function() {
			if(this.get('searchCriteria') == 'transaction') {
				banhji.view.layout.showIn('#content', banhji.view.schTranx);
			} else if(this.get('searchCriteria') == 'item') {
				banhji.view.layout.showIn('#content', banhji.view.schItem);
			} else {
				banhji.view.layout.showIn('#content', banhji.view.schContact);
			}
			// alert('searching ' +this.get('searchCriteria') + " " + $("#search-placeholder").val());
		},
		auth : new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + 'authentication',
					type: "GET",
					dataType: 'json'
				},
				create 	: {
					url: apiUrl + 'authentication',
					type: "POST",
					dataType: 'json'
				},
				update 	: {
					url: apiUrl + 'authentication',
					type: "PUT",
					dataType: 'json'
				},
				destroy : {
					url: apiUrl + 'authentication',
					type: "DELETE",
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true,
			serverPaging: true,
			// pageSize: 100
		}),		
		inst 	 : new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + 'banhji/company',
					type: "GET",
					dataType: 'json'
				},
				create 	: {
					url: apiUrl + 'banhji/company',
					type: "POST",
					dataType: 'json'
				},
				update 	: {
					url: apiUrl + 'banhji/company',
					type: "PUT",
					dataType: 'json'
				},
				destroy : {
					url: apiUrl + 'banhji/company',
					type: "DELETE",
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true,
			serverPaging: true,
			// pageSize: 100
		}),
		industry : new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + 'banhji/industry',
					type: "GET",
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true,
			serverPaging: true,
			// pageSize: 100
		}),
		countries: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + 'banhji/countries',
					type: "GET",
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true,
			serverPaging: true,
			// pageSize: 100
		}),
		provinces: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + 'banhji/provinces',
					type: "GET",
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true,
			serverPaging: true,
			// pageSize: 100
		}),
		types 	 : new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + 'banhji/types',
					type: "GET",
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true,
			serverPaging: true,
			// pageSize: 100
		}),
		instMod 	: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + 'admin/modules_institute',
					type: "GET",
					dataType: 'json'
				},
				create 	: {
					url: apiUrl + 'admin/modules_institute',
					type: "POST",
					dataType: 'json'
				},
				update 	: {
					url: apiUrl + 'admin/modules_institute',
					type: "PUT",
					dataType: 'json'
				},
				destroy : {
					url: apiUrl + 'admin/modules_institute',
					type: "DELETE",
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true,
			serverPaging: true,
			filter: {field: 'id', value: 1}
			// pageSize: 100
		}),
		onSuccessUpload: function(e){
			var logo = e.response.results.url;
			this.get('newInst').set('logo', logo);
			this.saveIntitute();
			// console.log(logo);
		},	 
		close 		: function() {
			window.history.back(-1);
			if(this.inst.hasChanges()) {
				this.inst.cancelChanges();
			}
			if(this.auth.hasChanges()) {
				this.auth.cancelChanges();
			}
		},
		getUsername : function() {
			var x = banhji.userData.username.substring(0,2);
			return x.toUpperCase();
		},
		taxRegimes: [
			{ code: 'small', type: 'ខ្នាតតូច'},
			{ code: 'medium', type: 'ខ្នាតមធ្យម'},
			{ code: 'large', type: 'ខ្នាតធំ'}
		],
		currency : [
			{ code: 'KHR', locale: 'km-KH'},
			{ code: 'USD', locale: 'us-US'},
			{ code: 'VND', locale: 'vn-VN'}
		],
		username : null,
		password : null,
		_password: null,
		pwdDS 	 : new kendo.data.DataSource({
			transport: {
				create 	: {
					url: apiUrl + 'banhji/password',
					type: "POST",
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true,
			serverPaging: true,
			pageSize: 100
		}),
		validateEmail: function() {
			var sQtext = '[^\\x0d\\x22\\x5c\\x80-\\xff]';
		  	var sDtext = '[^\\x0d\\x5b-\\x5d\\x80-\\xff]';
		  	var sAtom = '[^\\x00-\\x20\\x22\\x28\\x29\\x2c\\x2e\\x3a-\\x3c\\x3e\\x40\\x5b-\\x5d\\x7f-\\xff]+';
		  	var sQuotedPair = '\\x5c[\\x00-\\x7f]';
		  	var sDomainLiteral = '\\x5b(' + sDtext + '|' + sQuotedPair + ')*\\x5d';
		  	var sQuotedString = '\\x22(' + sQtext + '|' + sQuotedPair + ')*\\x22';
		  	var sDomain_ref = sAtom;
		  	var sSubDomain = '(' + sDomain_ref + '|' + sDomainLiteral + ')';
		  	var sWord = '(' + sAtom + '|' + sQuotedString + ')';
		  	var sDomain = sSubDomain + '(\\x2e' + sSubDomain + ')*';
		  	var sLocalPart = sWord + '(\\x2e' + sWord + ')*';
		  	var sAddrSpec = sLocalPart + '\\x40' + sDomain; // complete RFC822 email address spec
		  	var sValidEmail = '^' + sAddrSpec + '$'; // as whole string

		  	var reValidEmail = new RegExp(sValidEmail);

		  	if(!reValidEmail.test(this.get('username'))){
		  		alert("Please enter valid address");
				this.set('passed', false);
		  	}
		  	this.set('passed', false);
		},
		loginBtn : function() {
			banhji.view.layout.showIn('#content', banhji.view.loginView);
		},
		login  	 : function() {
			this.auth.query({
				filter: [
					{field: 'username', value: banhji.userManagement.get('username')},
					{field: 'password', value: banhji.userManagement.get('password')}
				]
			}).done(function(e){
				var data = banhji.userManagement.auth.data();
				if(data.length > 0) {
					var user = banhji.userManagement.auth.data()[0];
					localforage.setItem('user', user);
					if(user.institute.length === 0) {
						banhji.router.navigate('/no-page');
					} else {
						banhji.router.navigate('/');
					}
				} else {
					console.log('bad');
				}
			});
		},
		registerBtn: function() {
			banhji.view.layout.showIn('#content', banhji.view.signupView);	
		},
		logout 		: function(e) {
			e.preventDefault();
			var userData = {
              	Username : userPool.getCurrentUser().username,
              	Pool : userPool
	        };
          	var cognitoUser = new AWSCognito.CognitoIdentityServiceProvider.CognitoUser(userData);
          	if(cognitoUser != null) {
              	cognitoUser.signOut();
              	localforage.removeItem('user').then(function() {
				    // Run this code once the key has been removed.
				    console.log('Key is cleared!');
				}).catch(function(err) {
				    // This code runs if there were any errors
				    console.log(err);
				});
              	window.location.replace("<?php echo base_url(); ?>login");
          	} else {
              	console.log('No user');
          	}
		},
		setCurrent : function(current) {
			this.set('current', current);
		},
		changePwd  : function() {
			if(this.get('password') !== this.get('_password')) {
				alert("Password does not match");
			} else {
				this.pwdDS.sync();
			}
		},
		getLogin 	: function() {
			return JSON.parse(localStorage.getItem('userData/user'));
		},
		page 	 : function() {
			if(banhji.userManagement.getLogin()) {
				if(banhji.userManagement.getLogin().perm === 1) {
					return 'admin';
				}
			} else {
				return 'home';
			}
			// if(this.getLogin()) {
			// 	return '\#/page';
			// } else {
			// 	return '\#/page/';
			// }
			
		},
		createComp : function() {
			banhji.router.navigate('/create_company');
		},
		setInstitute: function(newIns) {
			this.set('newInst', newIns);
		},
		addInst    : function() {
			this.inst.insert(0, {
				name: "",
				email: "",
				address: "",
				description: "",
				industry: {id: null, name: null},
				type: {id: null, name: null},
				country: {id: null, code: null, name: null},
				province: {id: null, local: null, english: null},
				vat_no: null,
				fiscal_date: null,
				tax_regime: null,
				locale : null,
				legal_name: null,
				date_founded: null,
				logo: ""
			});
			this.setInstitute(this.inst.at(0));
		},
		cancelInst : function() {
			this.inst.cancelChanges();
		},
		saveIntitute: function() {
			if(this.get('newInst').industry.id !== null || this.get('newInst').province.id || this.get('newInst').country.id) {
				this.inst.sync();
				this.inst.bind('requestEnd', function(e){
					var type = e.type, res = e.response.results;
					if(e.response.error === false) {
						if(e.type === 'create') {
							$('#createComMessage').text("created. Please wait till site admin created database for you.");
						} else {
							localforage.removeItem('company', function(err){
								//
							});
							localforage.setItem('company', res);
							$('#createComMessage').text("Updated");
						}
					} else {
						$('#createComMessage').text("error creating company.");
					}
				});
			} else {
				alert('filling all fields');
			}
		},
		signup 	   : function() {
			this.auth.add({username: this.get('username'), password: this.get('password')});
			this.sync();
			this.auth.bind('requestEnd', function(e){
				if(e.type === 'create' && e.response.error === false) {
					alert("អ្នកបានចុះឈ្មោះរួច");
					banhji.router.route('')
				}
			});
		},
		onFileSelect: function(e) {
			console.log(e.files[0]);
		},
		sync: function() {
			this.auth.sync();
			this.auth.bind('requestEnd', function(e){
				var type = e.type;
				var result = e.response.results;
				if(type === "read" && e.error !== true) {
					// get login info
					console.log('true');
				} else if(type === "create") {
					if(e.response.error === true) {
						banhji.userManagement.auth.cancelChanges();
						alert('មានរួចហើយ');
					} else {
						var user = banhji.userManagement.auth.data()[0];
						localforage.setItem('user', user);
						if(!user.institute) {
							banhji.router.navigate('/page', false);
						} else {
							banhji.router.navigate('/app', false);
						}
					}
				}
			});
		}
	});	
	function getDB() {
		var entity = null;
		if(banhji.userManagement.getLogin()) {
			if(banhji.userManagement.getLogin().institute) {
				if(banhji.userManagement.getLogin().institute.length > 0) {
					entity = banhji.userManagement.getLogin().institute.name
				}
				
			} else {
				entity = false
			}
		}		
		return entity;
	}
	banhji.currency = kendo.observable({
		dataSource 			: dataStore(apiUrl + 'currencies'),				
		getCurrencyID 		: function(locale){
			var currency_id = 0;

			$.each(this.dataSource.data(), function(index, value){							
				if(value.locale===locale){
					currency_id = value.id;
					return false;
				}
			});

			return currency_id;
		}		
	});
	banhji.users = kendo.observable({
		dataStore	: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + 'banhji/users',
					type: "GET",
					headers: {
						"Entity": getDB(),
						"User": banhji.userManagement.getLogin() === null ? '': banhji.userManagement.getLogin().id
					},
					dataType: 'json'
				},
				create 	: {
					url: apiUrl + 'banhji/users',
					type: "POST",
					headers: {
						"Entity": getDB(),
						"User": banhji.userManagement.getLogin() === null ? '': banhji.userManagement.getLogin().id
					},
					dataType: 'json'
				},
				update 	: {
					url: apiUrl + 'banhji/users',
					type: "PUT",
					headers: {
						"Entity": getDB(),
						"User": banhji.userManagement.getLogin() === null ? '': banhji.userManagement.getLogin().id
					},
					dataType: 'json'
				},
				destroy : {
					url: apiUrl + 'banhji/users',
					type: "DELETE",
					headers: {
						"Entity": getDB(),
						"User": banhji.userManagement.getLogin() === null ? '': banhji.userManagement.getLogin().id
					},
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true,
			serverPaging: true,
			pageSize: 100
		}),
		roleDS 		: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + 'banhji/roles',
					type: "GET",
					headers: {
						"Entity": getDB(),
						"User": banhji.userManagement.getLogin() === null ? '': banhji.userManagement.getLogin().id
					},
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true,
			serverPaging: true,
			pageSize: 100
		}),
		add 		: function() {
			banhji.view.pageAdmin.showIn('#col2', banhji.view.addUserView);
			this.dataStore.insert(0, {username: '', password: null, permission: {id: null, name: null}});
			this.setCurrent(this.dataStore.at(0));
		},
		remove 		: function(e) {
			var user = confirm('Are you sure you want to remove this user?');
			if(user === true) {
				this.dataStore.remove(e.data);
				this.sync();
			}
		},
		editRight 	: function(e) {
			banhji.view.pageAdmin.showIn('#col2', banhji.view.editRoleView);
			this.setCurrent(e.data);
		},
		cancelAdd 	: function() {
			banhji.view.pageAdmin.showIn('#col2', banhji.view.userListView);
			this.dataStore.cancelChanges();
		},
		setCurrent 	: function(current) {
			this.set('current', current);
		},
		sync 		: function() {
			this.dataStore.sync();
			this.dataStore.bind('requestEnd', function(e){
				var type = e.type;
				var data = e.response.results;
				if(type !== 'read') {
					console.log('data recorded');
				}
			});
		}
	});
	banhji.people = kendo.observable({
		dataSource : new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "people",
					type: "GET",
					headers: {
						"Entity": banhji.userManagement.getLogin() !== null ? banhji.userManagement.getLogin().institute.name:""
					},
					dataType: 'json'
				},
				create 	: {
					url: apiUrl + "people",
					type: "POST",
					headers: {
						"Entity": banhji.userManagement.getLogin() !== null ? banhji.userManagement.getLogin().institute.name:""
					},
					dataType: 'json'
				},
				update 	: {
					url: apiUrl + "people",
					type: "PUT",
					headers: {
						"Entity": banhji.userManagement.getLogin() !== null ? banhji.userManagement.getLogin().institutename:""
					},
					dataType: 'json'
				},
				destroy : {
					url: apiUrl + "people",
					type: "DELETE",
					headers: {
						"Entity": banhji.userManagement.getLogin() !== null ? banhji.userManagement.getLogin().institute.name:""
					},
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							offset: options.skip,
							filter: options.filter
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count',
				errors: 'error'
			},
			batch: true,
			serverFiltering: true,
			serverPaging: true,
			pageSize: 20
		}),
		filterBy   : function() {},
		save 	   : function() {}
	});
	// end TEst offline
	var obj = function(url) {
		var o = kendo.observable({
			dataStore: new kendo.data.DataSource({
				transport: {
					read 	: {
						url: url,
						type: "GET",
						headers: {
							"Entity": getDB()
						},
						dataType: 'json'
					},
					create 	: {
						url: url,
						type: "POST",
						headers: {
							"Entity": getDB()
						},
						dataType: 'json'
					},
					update 	: {
						url: url,
						type: "PUT",
						headers: {
							"Entity": getDB()
						},
						dataType: 'json'
					},
					destroy : {
						url: url,
						type: "DELETE",
						headers: {
							"Entity": getDB()
						},
						dataType: 'json'
					},
					parameterMap: function(options, operation) {
						if(operation === 'read') {
							return {
								limit: options.take,
								offset: options.skip,
								filter: options.filter
							};
						} else {
							return {models: kendo.stringify(options.models)};
						}
					}
				},
				schema 	: {
					model: {
						id: 'id'
					},
					data: 'results',
					total: 'count',
					errors: 'error'
				},
				batch: true,
				serverFiltering: true,
				serverPaging: true,
				pageSize: 20
			}),
			findById: function(id) {},
			findBy 	: function(arr) {},
			insert 	: function(data) {},
			remove 	: function(model) {
				this.dataStore.remove(model);
				this.save();
			},
			save 	: function() {
				this.dataStore.sync();
				this.dataStore.bind('requestEnd', function(e){
					var type = e.type, res = e.response.results;
					console.log(type + " operation is successful.");
				});
			}
		});
		return o;
	}	
	banhji.Layout = kendo.observable({
		locale: "km-KH",
		menu 	: [],
		// isShown : true,
		// isAdmin : auth.isAdmin(),
		// logout 	: function(e) {
		// 	e.preventDefault();
		// 	auth.logout();
		// },
		// isLogin : function(){
		// 	if(banhji.userManagement.getLogin()) {
		// 		return true;
		// 	} else {
		// 		return false;
		// 	}
		// },
		// init: function() {
		// 	// initialize when the whole page load
		// },
		// ui: function() {
		// 	// get UI information from source base on locale
		// }
	});	
	var role = kendo.observable({
		dataStore 	: new kendo.data.DataSource({
			transport: {
				read: {
					url: apiUrl + 'roles',
					dataType: 'json',
					headers: {
						"Entity": getDB()
					},
					type: 'GET'
				},
				create: {
					url: apiUrl + 'roles',
					dataType: 'json',
					headers: {
						"Entity": getDB()
					},
					type: 'GET'
				},
				update: {
					url: apiUrl + 'roles',
					dataType: 'json',
					headers: {
						"Entity": getDB()
					},
					type: 'GET'
				},
				destroy: {
					url: apiUrl + 'roles',
					dataType: 'json',
					headers: {
						"Entity": getDB()
					},
					type: 'GET'
				},
				parameterMap: function(data, operation) {
					if(operation === 'read') {
						return {
							limit: data.take,
							offset: data.skip,
							filter: data.filter
						};
					}
					return {models: kendo.stringify(data.models)};
				}
			},
			schema: {
	        	model: {
	        		id: "id"
	        	},
	        	data: "results"
	        },
			pageSize: 20,
			serverPaging: true,
			serverFiltering: true,
			batch: true
		}),
		roleUserDs 	: new kendo.data.DataSource({
			transport: {
				read: {
					url: apiUrl + 'roles/user',
					dataType: 'json',
					headers: {
						"Entity": getDB()
					},
					type: 'GET'
				},
				create: {
					url: apiUrl + 'roles/user',
					dataType: 'json',
					headers: {
						"Entity": getDB()
					},
					type: 'POST'
				},
				update: {
					url: apiUrl + 'roles/user',
					dataType: 'json',
					headers: {
						"Entity": getDB()
					},
					type: 'PUT'
				},
				destroy: {
					url: apiUrl + 'roles/user',
					dataType: 'json',
					headers: {
						"Entity": getDB()
					},
					type: 'DELETE'
				},
				parameterMap: function(data, operation) {
					if(operation === 'read') {
						return {
							limit: data.take,
							offset: data.skip,
							filter: data.filter
						};
					}
					return {models: kendo.stringify(data.models)};
				}
			},
			schema: {
	        	model: {
	        		id: "id"
	        	},
	        	data: "results"
	        },
			pageSize: 20,
			serverPaging: true,
			serverFiltering: true,
			batch: true
		}),
		find 		: function(arg) {},
		setCurrent 	: function(currentRole) {},
		save 		: function() {}
	});
	banhji.index = kendo.observable({
		lang 	: langVM,
		salesData : new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + 'sales',
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true,
			serverPaging: true,
			pageSize: 100
		}),
		companyLogo: '',
		// customers : banhji.customer.dataSource,
		expenseDS : new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + 'sales/expense',
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true,
			serverPaging: true,
			pageSize: 100
		}),
		expense   : 0,
		customer  : new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + 'sales/top',
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true,
			serverPaging: true,
			pageSize: 100
		}),
		equation  : new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + 'sales/equation',
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					}
				}
			},
			schema 	: {
				data: 'results'
			}
		}),
		cash 	  : new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + 'sales/cash',
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					}
				}
			},
			schema 	: {
				data: 'results'
			}
		}),
		modules 	: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + 'admin/modules',
					type: "GET",
					dataType: 'json'
				},
				create 	: {
					url: apiUrl + 'admin/modules',
					type: "POST",
					dataType: 'json'
				},
				update 	: {
					url: apiUrl + 'admin/modules',
					type: "PUT",
					dataType: 'json'
				},
				destroy : {
					url: apiUrl + 'admin/modules',
					type: "DELETE",
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true,
			serverPaging: true,
			// pageSize: 100
		}),
		companyName: null,
		companyInf: function() {
			var company = JSON.parse(localStorage.getItem('userData/user'));
			return company;
		},
		curDate   : function() {
			return Date();
		},
		getLogo   : function() {
			banhji.companyDS.fetch(function(){
				if(banhji.companyDS.data().length > 0) {
					banhji.index.set('companyLogo', banhji.companyDS.data()[0].logo);
				}
			});
		},
		cashBal   : 0,
		asset 	  : 0,
		liability : 0,
		equity 	  : 0,

		dataSource 			: dataStore(apiUrl + "invoices/home_dashboard"),

		selectedDate 		: new Date(),
		totalSale 			: 0,
		totalOpenInvoice 	: 0,
		totalUnbill 		: 0,
		totalCustomer 		: 0,
		totalOrder 			: 0,

		dateChanges			: function(){
			var self = this, selectedDate = this.get("selectedDate");

			if(selectedDate){
				var today = new Date(),
				searchDate = new Date(selectedDate),
				firstDayOfYear = new Date(today.getFullYear(), 0, 1);

				if(firstDayOfYear){
					this.dataSource.query({
						filter: [
							{ field:"issued_date", operatoin:">=", value:kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
							{ field:"issued_date", operatoin:"<=", value:kendo.toString(searchDate, "yyyy-MM-dd") }
						]
					}).then(function(){
						var view = self.dataSource.view();

						self.set("totalSale", kendo.toString(view[0].totalSale, "c", banhji.institute.locale));
						self.set("totalOpenInvoice", view[0].totalOpenInvoice);
						self.set("totalUnbill", view[0].totalUnbill);
						self.set("totalCustomer", view[0].totalCustomer);
						self.set("totalOrder", view[0].totalOrder);
					});
				}
			}
		} 		
	});


	//DAWINE -----------------------------------------------------------------------------------------
	banhji.source =  kendo.observable({
		lang 					: langVM,
		//Setting
		contactDS				: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "contacts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			group: { field: "contact_type" },
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		customerDS				: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "contacts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: { field:"parent_id", operator:"where_related", model:"contact_type", value:1 },
			group: { field: "contact_type" },
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		supplierDS				: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "contacts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: { field:"parent_id", operator:"where_related", model:"contact_type", value:2 },
			group: { field: "contact_type" },
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		employeeDS				: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "contacts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: { field:"parent_id", operator:"where_related", model:"contact_type", value:3 },
			group: { field: "contact_type" },
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		customerTypeDS			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "contacts/type",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: { field:"parent_id", value: 1 },
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		supplierTypeDS			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "contacts/type",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: { field:"parent_id", value: 2 },
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		currencyDS				: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "currencies",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			group: { field: "group"},
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		itemDS					: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "items",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			group: { field: "category"},
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		taxItemDS				: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "tax_items",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			group: { field: "category"},
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		accountDS				: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "accounts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			group: { field: "account_type[0].name"},
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		cashAccountDS			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "accounts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"account_type_id", value: 10 },
					{ field:"status", value: 1 }
			],
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		//Item Income / Item Revenue / Customer Revenue / Service Revenue Account
		incomeAccountDS				: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "accounts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"account_type_id", operator:"where_in", value: [35,39] },
					{ field:"status", value: 1 }
			],
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		ARAccountDS				: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "accounts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"account_type_id", value: 12 },
					{ field:"status", value: 1 }
			],
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		APAccountDS				: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "accounts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"account_type_id", operator:"where_in", value: [23,24] },
					{ field:"status", value: 1 }
			],
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),		
		tradeDiscountDS		: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "accounts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"id", value: 72 },
					{ field:"status", value: 1 }
			],
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		settlementDiscountDS		: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "accounts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"id", value:99 },
					{ field:"status", value: 1 }
			],
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		supplierTradeDiscountDS		: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "accounts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"account_type_id", value: 35 },
					{ field:"status", value: 1 }
			],
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		supplierSettlementDiscountDS		: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "accounts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"id", value:109 },
					{ field:"status", value: 1 }
			],
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		prepaidAccountDS		: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "accounts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"account_type_id", operator:"where_in", value: [14,21] },
					{ field:"status", value: 1 }
			],
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		depositAccountDS		: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "accounts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"account_type_id", operator:"where_in", value: [25,30] },
					{ field:"status", value: 1 }
			],
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		//ITEM ACCOUNT
		cogsAccountDS		: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "accounts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"account_type_id", value: 36 },
					{ field:"status", value: 1 }
			],
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		inventoryAccountDS		: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "accounts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"account_type_id", value: 13 },
					{ field:"status", value: 1 }
			],
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		paymentTermDS			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "payment_terms",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},			
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),
		paymentMethodDS			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "payment_methods",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},			
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			page:1,
			pageSize: 100			
		}),		
		segmentItemDS			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "segments/items",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							page: options.page,
							limit: options.take,								
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			group: { field: "segment.name"},
			batch: true,
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100			
		}),		
		frequencyList 			: [
			{ id: 'Daily', name: 'Day' },
			{ id: 'Weekly', name: 'Week' },
			{ id: 'Monthly', name: 'Month' },
			{ id: 'Annually', name: 'Annual' }		
		],
		monthOptionList 		: [
			{ id: 'Day', name: 'Day' },		
			{ id: '1st', name: '1st' },
			{ id: '2nd', name: '2nd' },
			{ id: '3rd', name: '3rd' },
			{ id: '4th', name: '4th' }
		],
		monthList 				: [
			{ id: 0, name: 'January' },
			{ id: 1, name: 'February' },
			{ id: 2, name: 'March' },
			{ id: 3, name: 'April' },
			{ id: 4, name: 'May' },
			{ id: 5, name: 'June' },
			{ id: 6, name: 'July' },
			{ id: 7, name: 'August' },
			{ id: 8, name: 'September' },
			{ id: 9, name: 'October' },
			{ id: 10, name: 'November' },
			{ id: 11, name: 'December' }
		],
		weekDayList 			: [
			{ id: 0, name: 'Sunday' },
			{ id: 1, name: 'Monday' },
			{ id: 2, name: 'Tuesday' },
			{ id: 3, name: 'Wednesday' },
			{ id: 4, name: 'Thurday' },
			{ id: 5, name: 'Friday' },
			{ id: 6, name: 'Saturday' }
		],
		dayList 				: [					
			{ id: 1, name: '1st' },
			{ id: 2, name: '2nd' },
			{ id: 3, name: '3rd' },
			{ id: 4, name: '4th' },
			{ id: 5, name: '5th' },
			{ id: 6, name: '6th' },
			{ id: 7, name: '7th' },
			{ id: 8, name: '8th' },
			{ id: 9, name: '9th' },
			{ id: 10, name: '10th' },
			{ id: 11, name: '11st' },
			{ id: 12, name: '12nd' },
			{ id: 13, name: '13rd' },
			{ id: 14, name: '14th' },
			{ id: 15, name: '15th' },
			{ id: 16, name: '16th' },
			{ id: 17, name: '17th' },
			{ id: 18, name: '18th' },
			{ id: 19, name: '19th' },
			{ id: 20, name: '20th' },
			{ id: 21, name: '21st' },
			{ id: 22, name: '22nd' },
			{ id: 23, name: '23rd' },
			{ id: 24, name: '24th' },
			{ id: 25, name: '25th' },
			{ id: 26, name: '26th' },
			{ id: 27, name: '27th' },
			{ id: 28, name: '28th' },
			{ id: 0, name: 'Last' }
		],
		sortList				: [ 
	 		{ text:"All", value: "all" }, 
	 		{ text:"Today", value: "today" }, 
	 		{ text:"This Week", value: "week" }, 
	 		{ text:"This Month", value: "month" }, 
	 		{ text:"This Year", value: "year" } 
		],
		statusList 				: [            
			{ "id": 1, "name": "Active" },
			{ "id": 0, "name": "Inactive" },
			{ "id": 2, "name": "Void" }
        ],
		genderList				: ["M", "F"],
		user_id					: banhji.userData.id,								
		pageLoad 				: function(){
			
		}		         		
	});
	/*********************
	*  Accounting Section  *
	**********************/
	banhji.journal =  kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "transactions"),						
		lineDS  			: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "journal_lines"),
		accountDS 			: banhji.source.accountDS,
		contactDS 			: banhji.source.contactDS,				
		currencyDS 			: banhji.source.currencyDS,
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		segmentItemDS 		: banhji.source.segmentItemDS,					
		types 				: [
			{id: 'Journal', name: 'General Journal'},
			{id: 'Adjustment', name: 'Adjustment'},
			{id: 'Opening_Balance', name: 'Opening Balance'},
			{id: 'Closing_Entry', name: 'Closing Entry'},
			{id: 'Reclassification', name: 'Reclassification'},
			{id: 'Accrual', name: 'Accrual'},
			{id: 'Depreciation_amortization', name: 'Depreciation/Amortization'},
			{id: 'Others', name: 'Others'}
		],
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,				
		showRef 			: true,
		showName 			: false,
		showSegment 		: false,
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,		
		obj 				: null,		
		isEdit 				: false,			
		uer_id				: banhji.source.user_id,
		dr 					: 0,
		cr 					: 0,									
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);							
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},
		loadObj 			: function(id,is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 1
			}).then(function(e){
				var view = self.dataSource.view();

				if(view.length>0){	       
					self.set("obj", view[0]);
					self.set("dr", kendo.toString(view[0].amount, "c0", view[0].locale));
			        self.set("cr", kendo.toString(view[0].amount, "c0", view[0].locale));
		        }				

				self.lineDS.query({
					filter: { field: "transaction_id", value: id },
					page: 1,
					take: 100
				});								
			});				
		},			
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", view[0].locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", banhji.institute.locale);												
					});
				}
			});				
		},															
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);

			this.set("obj", null);
			this.set("dr", 0);
			this.set("cr", 0);				

			this.dataSource.add({
				recurring_id 		: "",
				user_id 			: this.get("uer_id"), 	    			    		
			   	type				: "Journal", //required
			   	journal_type 		: "Journal",			   				   		   					   				   	
			   	amount				: 0,
			   	rate				: 1,			   	
			   	locale 				: banhji.institute.locale,			   	
			   	issued_date 		: new Date(),			   	   	
			   	memo 				: "",
			   	memo2 				: "",
			   	is_journal 			: 1,
			   	//Recuring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0			
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);			

			this.addRow();
			this.addRow();

			this.setRate();			
		},
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,
				account_id 			: "",				
				contact_id 			: "",				
				description 		: "",
				reference_no 		: "",
				segments 	 		: [],								
				dr 	 				: 0,
				cr 					: 0,				
				rate				: obj.rate,
				locale				: obj.locale
			});																	
		},		
		remove 				: function(e){						
			var d = e.data;
			if(this.lineDS.total()>2){				
				this.lineDS.remove(d);
	        	this.changes();
	        }else{
	        	alert("There must be 2 rows at least.");
	        } 		        
		},
		changes				: function(){
			var obj = this.get("obj");
			
			if(this.lineDS.total()>0){			
				var dr = 0, cr = 0;								
				
				$.each(this.lineDS.data(), function(index, value) {
					if(value.dr >0 && value.cr >0){
						value.set("dr", 0);
						value.set("cr", 0);

						alert("Please enter only one side.");
					}else{
						dr += kendo.parseFloat(value.dr);
						cr += kendo.parseFloat(value.cr);						
					}
		        });		       	

		        this.set("dr", kendo.toString(dr, "c0", obj.locale));
		        this.set("cr", kendo.toString(cr, "c0", obj.locale));
		        
		        obj.set("amount", dr);		       								    	
	    	}else{
	    		this.set("dr", 0);
		        this.set("cr", 0);
		        
		        //obj.set("amount", 0);				
	    	}   	
		},
		segmentChanges  	: function(e) {					
			var dataArr = e.data.segments;
			var lastIndex = dataArr.length - 1;
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current = this.segmentItemDS.get(dataArr[i]);
					var last = this.segmentItemDS.get(dataArr[lastIndex]);
					if(current.segment.id === last.segment.id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},						
		validates 			: function(){
			var dr = 0, cr = 0, has_account = false, result = true;

			$.each(this.lineDS.data(), function(index, value){				

				dr += kendo.parseFloat(value.dr);
				cr += kendo.parseFloat(value.cr);
			});
			
			if(dr==0 || cr==0){
				result = false;
				alert("Please enter amount of DEBIT and CREDIT");
			}

			if(dr!==cr){
				result = false;
				alert("TOTAL DEBIT must equal to TOTAL CREDIT");
			}

			return result;
		},		  
		transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this; 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();
	    		this.lineDS.sync();
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);												
					});

					self.lineDS.sync();			
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();
			
			window.history.back();
		},
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);				
												
				obj.set("journal_type", recur.journal_type);
				obj.set("amount", recur.amount);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,
							account_id 			: value.account_id,				
							contact_id 			: value.contact_id,				
							description 		: value.description,
							reference_no 		: value.reference_no,
							segments 	 		: value.segments,								
							dr 	 				: value.dr,
							cr 					: value.cr,				
							rate				: value.rate,
							locale				: value.locale
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,
			   	journal_type 		: obj.journal_type,			   				   		   					   				   	
			   	amount				: obj.amount,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,
					account_id 			: value.account_id,				
					contact_id 			: value.contact_id,				
					description 		: value.description,
					reference_no 		: value.reference_no,
					segments 	 		: value.segmets,								
					dr 	 				: value.dr,
					cr 					: value.cr,				
					rate				: value.rate,
					locale				: value.locale
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);
	    		this.save();
	    	}	    	
	    }	    	   
	});
	banhji.currencyRate =  kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "currencies/rate"),
		baseCurrencyDS		: banhji.source.currencyDS,
		currencyDS 			: banhji.source.currencyDS,
		sortList			: banhji.source.sortList,
		sorter 				: "all",		
		sdate 				: "",
		edate 				: "",
		obj 				: null,
		isEdit 				: false,
		user_id				: banhji.source.user_id,				
		baseCode 			: "",
		reprotCode 			: "",						
		pageLoad 			: function(id){
			if(id){
				this.set("isEdit", true);							
				this.loadObj(id);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},
		setBaseCurrency 	: function(){
			var self = this;

			this.baseCurrencyDS.query({
				filter: { field:"locale", value: banhji.institute.locale },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.baseCurrencyDS.view();

				self.set("baseCode", view[0].country +" - "+ view[0].code);
			});		
		},
		openWindow			: function(){
      		this.addEmpty();

         	var window = $("#window").data("kendoWindow");
          	window.title("Exchange Rate");          	
          	window.center().open();         	
      	},
      	closeWindow 		: function(){	      		
      		this.dataSource.cancelChanges();

      		var window = $("#window").data("kendoWindow");          	         	
          	window.close();          	
      	},	   								
		addEmpty 		 	: function(){			
			this.dataSource.add({				
				currency_id : "",				
				user_id 	: this.get("user_id"),
 	    		rate 		: 1,
 	    		locale 		: "",
			   	source		: "",
			   	method 		: "Manual",			   		   	
			   	date 		: new Date(),

			   	currency 	: []			   				
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);					
		},			
		remove 				: function(e){						
			var d = e.data;				
			this.lineDS.remove(d);
	        this.changes();		        
		},
		save 				: function(){
      		this.dataSource.sync();
      		
      		var window = $("#window").data("kendoWindow");          	         	
          	window.close(); 		
      	},
      	edit 				: function(e){
      		var data = e.data;
      		
      		this.set("obj", data);

      		var window = $("#window").data("kendoWindow");
          	window.title("Exchange Rate");          	
          	window.center().open();       		
      	},      	
      	delete 				: function(e){
			if (confirm("Are you sure, you want to delete it?")) {        
		        var data = e.data;
		        this.dataSource.remove(data);
		        this.dataSource.sync();		        
	    	}	    	
	    }			         		
	});
	banhji.recurring =  kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "transactions"),		
		user_id				: banhji.source.user_id,
		referenceTypes 		: [
			{ id:"Estimate", name:"Estimate" },
			{ id:"SO", name:"Sale Order" },
			{ id:"GDN", name:"GDN" }
		],											
		pageLoad 			: function(){
			
		},
		goToTemplate 		: function(e){
			var data = e.data;			

			banhji.router.navigate('/'+data.type.toLowerCase()+"/"+data.id+"/"+true);			
		},		   	
      	delete 				: function(e){
			if (confirm("Are you sure, you want to delete it?")) {        
		        var data = e.data;
		        this.dataSource.remove(data);
		        this.dataSource.sync();		        
	    	}	    	
	    }			         		
	});
	banhji.journalReport =  kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "accounting_reports/journal"),		
		sortList			: banhji.source.sortList,
		sorter 				: "all",		
		sdate 				: "",
		edate 				: "",
		showDescription 	: false,
		showRef 			: true,
		showName 			: false,
		showSegment 		: false,
		currentSort 		: "asc",							
		pageLoad 			: function(){
			
		},
		sort 				: function(e){
			var col = "",
			target = e.currentTarget.innerText;

			if(this.get("currentSort")=="asc"){
				this.set("currentSort", "desc");
			}else{
				this.set("currentSort", "asc");
			}

			switch(target) {
			    case "TYPE":
			        col = "type";
			        break;
			    case "DATE":
			        col = "issued_date";
			        break;
			    case "ACCOUNT":
			        col = "account_id";
			        break;
			    default:
			        //default code block
			}			

			this.dataSource.sort({ field:col, dir:this.get("currentSort") });
		}		      		
	});	
	banhji.saleTax =  kendo.observable({
		lang 				: langVM,		
        dataSource 			: dataStore(apiUrl + "tax_types"),        
        itemDS 	 			: dataStore(apiUrl + "tax_items"),
        typeList			: [ 
	 		{ id:"Invoice Based", name: "Invoice Based" }, 
	 		{ id:"Payment Based", name: "Payment Based" },
	 		{ id:"No Tax", name: "No Tax" }
		],
		obj 				: null,
		item 				: null,
		pageLoad 			: function() {
        	
        },        
        addType 			: function(){
		    
        	this.dataSource.add({	        		
        		number 				: "",
        		name 				: "",
        		agency 				: "",
        		tax_system 			: "Invoice Based",
        		end_date 			: new Date(),
        		submission_date 	: new Date()
        	});
        	var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);
	            	
        },
        addItem				: function(e){
		    var data = e.data;

        	this.itemDS.add({	        		
        		tax_type_id 		: data.id,
        		account_id 			: "",
        		name 				: "",
        		rate 				: "",
        		is_system 			: "",
        		account 			: [{name: ""}]
        	});
        	var data = this.itemDS.data();
			var obj = data[data.length-1];			
			this.set("item", obj);
			this.openWindowItem();
	            	
        },
        openWindow			: function(){
      		this.addType();

         	var window = $("#saleTax-window").data("kendoWindow");
          	window.title("Tax Type");          	
          	window.center().open();         	
      	},
      	closeWindow 		: function(){	      		
      		this.dataSource.cancelChanges();

      		var window = $("#saleTax-window").data("kendoWindow");          	         	
          	window.close();          	
      	},
      	
        loadItem 			: function(e){
	        var d = e.data;

	        this.set("selectedType", true);
	        this.set("tax_type_id", d.id);
	        this.set("selectedTypeName", d.name);
	        
	        this.itemDS.query({
	        	filter: { field:"tax_type_id", value: d.id },	        	
	        	page: 1,
	        	take: 100
	        });  	
        },
        save 				: function(){
        	var self = this;
        	this.dataSource.sync();
        	this.dataSource.bind("requestEnd", function(e){
        		if( e.type == "create" || e.type == "update"){ 
        			var window = $("#saleTax-window").data("kendoWindow");          	         	
          			window.close(); 
        		}
        	});
        },
        edit 				: function(e){
      		var data = e.data;      		
      		this.set("obj", data);

      		var window = $("#saleTax-window").data("kendoWindow");
          	window.title("Tax Type");          	
          	window.center().open();       		
      	},      	
      	delete 				: function(e){
			if (confirm("Are you sure, you want to delete it?")) {        
		        var data = e.data;
		        this.dataSource.remove(data);
		        this.dataSource.sync();
		        banhji.itemCenter.dataSource.fetch();
	    	}	    	
	    },
	    view 				: function(e){
	    	var data = e.data;
	    	this.itemDS.filter({ field: "tax_type_id", value: data.id});

	    },
	    openWindowItem		: function(){
      		

         	var window = $("#item-window").data("kendoWindow");
          	window.title("Item Type");          	
          	window.center().open();         	
      	},
      	closeWindowItem 	: function(){	      		
      		this.itemDS.cancelChanges();

      		var window = $("#item-window").data("kendoWindow");          	         	
          	window.close();          	
      	},
      	saveItem 				: function(){
        	var self = this;
        	this.itemDS.sync();
        	this.itemDS.bind("requestEnd", function(e){
        		if( e.type == "create" || e.type == "update"){ 
        			var window = $("#item-window").data("kendoWindow");          	         	
          			window.close(); 
        		}
        	});
        },
        editItem 				: function(e){
      		var data = e.data;      		
      		this.set("obj", data);

      		var window = $("#item-window").data("kendoWindow");
          	window.title("Item Type");          	
          	window.center().open();       		
      	}, 
      	deleteItem 				: function(e){
			if (confirm("Are you sure, you want to delete it?")) {        
		        var data = e.data;
		        this.itemDS.remove(data);
		        this.itemDS.sync();
		        banhji.itemCenter.itemDS.fetch();
	    	}	    	
	    }
    });


	/*********************
	*   Employee Section   *
	**********************/
	banhji.employee = kendo.observable({
		dataSource 	: dataStore(apiUrl + 'employees'),
		setCurrent 	: function(current) {
			this.set('current', current);
		},
		add 		: function() {	
			this.dataSource.insert(0, {
				surname: null,
				name: null,
				department: null,
				position: null,
				role_id: null,
			});
			this.setCurrent(this.dataSource.at(0));
			banhji.view.pageAdmin.showIn('#col2', employeeForm);
		},
		edit 		: function(e) {
			banhji.view.pageAdmin.showIn('#col2', employeeForm);
			this.setCurrent(e.data);
			// console.log(e.data);
		},
		cancel 		: function() {
			this.dataSource.cancelChanges();
			banhji.view.pageAdmin.showIn('#col2', employeeView);
		},
		remove 		: function(e) {
			this.dataSource.remove(e.data);
			this.save();
		},
		save 		: function() {
			this.dataSource.sync();
			this.dataSource.bind('requestEnd', function(e){
				var type = e.type, res = e.response;
				if(type === 'create' && res.results.length > 0) {
					alert('created');
				} else if(type === 'update') {
					alert('updated');
				} else if(type === 'destroy') {
					alert('deleted');
				}
				banhji.view.pageAdmin.showIn('#col2', employeeView);
			});
		}
	});
	banhji.cashAdvance =  kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "transactions"),						
		lineDS  			: dataStore(apiUrl + "account_lines"),
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "account_lines"),		
		contactDS 			: banhji.source.contactDS,				
		currencyDS 			: banhji.source.currencyDS,
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		paymentMethodDS		: banhji.source.paymentMethodDS,
		accountDS  			: banhji.source.accountDS,
		cashAccountDS  		: banhji.source.accountDS,
		segmentItemDS 		: banhji.source.segmentItemDS,					
		types 				: [
			{id: 'Deposit', name: 'Deposit'},
			{id: 'Witdraw', name: 'Witdraw'},
			{id: 'Transfer', name: 'Transfer'}
		],
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,		
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,
		showRef 			: true,
		showName 			: false,
		showSegment 		: false,		
		obj 				: null,		
		isEdit 				: false,			
		uer_id				: banhji.source.user_id,
		total				: 0,													
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);							
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},
		loadObj 			: function(id,is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 1
			}).then(function(e){
				var view = self.dataSource.view();

				if(view.length>0){	       
					self.set("obj", view[0]);					
		        }				

				self.lineDS.query({
					filter: { field: "transaction_id", value: id },
					page: 1,
					take: 100
				});								
			});				
		},			
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", view[0].locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", banhji.institute.locale);												
					});
				}
			});				
		},															
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);
			this.journalLineDS.data([]);

			this.set("obj", null);
			this.set("total", 0);								

			this.dataSource.add({
				recurring_id 		: "",
				account_id 			: "",				
				user_id 			: this.get("uer_id"), 	    			    		
			   	type				: "Cash_Advance", //required			   		   				   		   					   				   	
			   	amount				: 0,
			   	rate				: 1,			   	
			   	locale 				: banhji.institute.locale,			   	
			   	issued_date 		: new Date(),
			   	due_date 			: new Date(),			   	   	
			   	memo 				: "",
			   	memo2 				: "",
			   	segments 			: [],
			   	is_journal 			: 1,
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0			
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);
			
			this.addRow();
			this.setRate();				
		},
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,				
				account_id 			: "",								
				description 		: "",
				reference_no 		: "",
				segments 	 		: [],								
				amount 	 			: 0,							
				rate				: obj.rate,
				locale				: obj.locale
			});																	
		},		
		remove 				: function(e){						
			var d = e.data;
							
			this.lineDS.remove(d);
        	this.changes();	        	        
		},
		changes				: function(){
			var obj = this.get("obj");
			
			if(this.lineDS.total()>0){			
				var sum = 0;								
				
				$.each(this.lineDS.data(), function(index, value) {
					sum += value.amount;
		        });		       	

		        this.set("total", kendo.toString(sum, "c0", obj.locale));		        
		        obj.set("amount", sum);		       								    	
	    	}else{
	    		this.set("total", 0);		        
		        obj.set("amount", 0);				
	    	}   	
		},		
		transactionSegmentChanges  	: function() {									
			dataArr = this.get("obj").segments,			
			lastIndex = dataArr.length - 1;
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current = this.segmentItemDS.get(dataArr[i]);
					var last = this.segmentItemDS.get(dataArr[lastIndex]);
					if(current.segment.id === last.segment.id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},
		segmentChanges  	: function(e) {					
			var dataArr = e.data.segments;			
			var lastIndex = dataArr.length - 1;
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current = this.segmentItemDS.get(dataArr[i]);
					var last = this.segmentItemDS.get(dataArr[lastIndex]);
					if(current.segment.id === last.segment.id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},				  
		transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this; 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();
	    		this.lineDS.sync();
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){				

					//Add Cash Account on Dr
					self.journalLineDS.add({					
						transaction_id 		: data[0].id,
						account_id 			: data[0].account_id,										
						description 		: "",
						reference_no 		: "",
						segments 	 		: data[0].segments,								
						dr 	 				: data[0].amount,
						cr 					: 0,				
						rate				: data[0].rate,
						locale				: data[0].locale
					});

					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);						

						//Add Cash Advance Account on Cr
						self.journalLineDS.add({					
							transaction_id 		: data[0].id,
							account_id 			: value.account_id,											
							description 		: value.description,
							reference_no 		: value.reference_no,
							segments 	 		: value.segments,								
							dr 	 				: 0,
							cr 					: value.amount,				
							rate				: value.rate,
							locale				: value.locale
						});						
					});

					self.lineDS.sync();
					self.journalLineDS.sync();			
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();			

			window.history.back();
		},		
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);
				
				obj.set("account_id", recur.account_id);
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,							
							account_id 			: value.account_id,									
							description 		: value.description,
							reference_no 		: value.reference_no,
							segments 	 		: value.segments,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({
				account_id 			: obj.account_id,
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,					
					account_id 			: value.account_id,								
					description 		: value.description,
					reference_no 		: value.reference_no,
					segments 	 		: value.segmets,								
					amount 	 			: value.amount,						
					rate				: value.rate,
					locale				: value.locale
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);
	    		
	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	    	   
	});
	banhji.expense =  kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "transactions"),						
		lineDS  			: dataStore(apiUrl + "account_lines"),
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		referenceDS 		: dataStore(apiUrl + "transactions"),
		referenceLineDS 	: dataStore(apiUrl + "account_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "account_lines"),		
		contactDS  			: banhji.source.employeeDS,
		supplierDS  		: banhji.source.supplierDS,
		currencyDS  		: banhji.source.currencyDS,
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),		
		accountDS  			: banhji.source.accountDS,
		cashAccountDS  		: banhji.source.accountDS,
		taxItemDS  			: dataStore(apiUrl + "tax_items"),
		segmentItemDS 		: banhji.source.segmentItemDS,		
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,		
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,
		showRef 			: true,
		showName 			: false,
		showSegment 		: false,
		showCashAdvance 	: false,
		bgColor 			: "#D5DBDB",		
		obj 				: null,		
		isEdit 				: false,
		sub_total 			: 0,
		tax 				: 0,
		total				: 0,
		credit 		 		: 0,
		remain 				: 0,			
		uer_id				: banhji.source.user_id,																	
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);							
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},
		loadObj 			: function(id,is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 1
			}).then(function(e){
				var view = self.dataSource.view();

				if(view.length>0){	       
					self.set("obj", view[0]);					
		        }				

				self.lineDS.filter({ field: "transaction_id", value: id });								
			});				
		},			
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", view[0].locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", banhji.institute.locale);												
					});
				}
			});				
		},
		//Contact
		loadContact 		: function(id){
			var self = this;			

			this.contactDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.contactDS.view(),
				obj = self.get("obj");
		    	
		    	obj.set("contact_id", view[0].id);		    			    	
		    	obj.set("locale", view[0].currency[0].locale);				
				
				self.setRate();											
			});
		},		
		contactChanges 		: function(){
			var obj = this.get("obj");

	    	if(obj.contact_id>0){		    			    	
		    	contact = this.contactDS.get(obj.contact_id);
		    			    	
		    	obj.set("locale", contact.currency[0].locale);

		    	this.referenceDS.filter([
		    		{ field:"contact_id", value: obj.contact_id },
		    		{ field:"type", value: "Cash_Advance" },
		    		{ field:"status", value: 0 }
		    	]);
		    	
		    	this.setRate();		    			    			    	
	    	}
	    },
	    referenceChanges 	: function(){
	    	var obj = this.get("obj");
	    	if(obj.reference_id>0){
	    		var reference = this.referenceDS.get(obj.reference_id);
	    		obj.set("credit", reference.amount);

	    		this.referenceLineDS.filter({ field:"transaction_id", value:obj.reference_id });
	    	}else{
	    		obj.set("credit", 0);
	    	}

	    	this.changes();
	    },
	    typeChanges 		: function(){
	    	var obj = this.get("obj");

	    	switch(obj.type) {
			    case "Reimbursement":
			        this.set("showCashAdvance", false);
			        break;
			    case "Advance_Settlement":
			        this.set("showCashAdvance", true);
			        break;
			    default:			         
			        this.set("showCashAdvance", false);
			}
	    },															
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);
			this.journalLineDS.data([]);

			this.set("obj", null);
			this.set("sub_total", 0);
			this.set("tax", 0);
			this.set("total", 0);								

			this.dataSource.add({
				recurring_id 		: "",
				reference_id 		: "",
				account_id 			: "",				
				user_id 			: this.get("uer_id"), 	    			    		
			   	type				: "Direct_Expense", //required
			   	sub_total 			: 0,
			   	tax 				: 0,			   		   				   		   					   				   	
			   	amount				: 0,
			   	rate				: 1,			   	
			   	locale 				: banhji.institute.locale,			   	
			   	issued_date 		: new Date(),			   			   	   	
			   	memo 				: "",
			   	memo2 				: "",
			   	segments 			: [],
			   	is_journal 			: 1,
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0			
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);
			
			this.addRow();
			this.setRate();				
		},
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,
				tax_item_id 		: "",
				contact_id 			: "",				
				account_id 			: "",								
				description 		: "",
				reference_no 		: "",
				segments 	 		: [],								
				amount 	 			: 0,							
				rate				: obj.rate,
				locale				: obj.locale,
				reference_date 		: new Date()
			});																	
		},		
		remove 				: function(e){						
			var d = e.data;			
						
			this.lineDS.remove(d);
        	this.changes();        	        	        
		},
		changes				: function(){
			var self = this, obj = this.get("obj");
			
			//if(this.lineDS.total()>0){			
				var subTotal = 0, total = 0, tax = 0, remain = 0;								
				
				$.each(this.lineDS.data(), function(index, value) {					
					if(value.tax_item_id>0){
						var taxItem = self.taxItemDS.get(value.tax_item_id);
						tax += value.amount * taxItem.rate;
					}

					subTotal += value.amount;
		        });

		        total = subTotal + tax;

		        if(obj.credit>0){
		        	remain = obj.credit - total;
		        }

		        this.set("sub_total", kendo.toString(subTotal, "c0", obj.locale));
		        this.set("tax", kendo.toString(tax, "c0", obj.locale));
		        this.set("total", kendo.toString(total, "c0", obj.locale));
		        this.set("credit", kendo.toString(obj.credit, "c0", obj.locale));
		        this.set("remain", kendo.toString(remain, "c0", obj.locale));

		        obj.set("sub_total", subTotal);
		        obj.set("tax", tax);
		        obj.set("amount", total);		       								    	
	    	//}	
		},		
		transactionSegmentChanges  	: function() {									
			dataArr = this.get("obj").segments,			
			lastIndex = dataArr.length - 1;
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current = this.segmentItemDS.get(dataArr[i]);
					var last = this.segmentItemDS.get(dataArr[lastIndex]);
					if(current.segment.id === last.segment.id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},
		segmentChanges  	: function(e) {					
			var dataArr = e.data.segments;			
			var lastIndex = dataArr.length - 1;
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current = this.segmentItemDS.get(dataArr[i]);
					var last = this.segmentItemDS.get(dataArr[lastIndex]);
					if(current.segment.id === last.segment.id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},				  
		transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this, obj = this.get("obj");

	    	//Update references
			// if(obj.reference_id>0){
			// 	var ref = this.referenceDS.get(obj.reference_id);
			// 	ref.set("status", 1);
			// 	this.referenceDS.sync();
			// } 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();
	    		this.lineDS.sync();
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){					
					self.addJournal(data[0].id);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);									
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();			

			window.history.back();
		},
		//Journal
		addJournal 			: function(transaction_id){
			var self = this, obj = this.get("obj"),
			taxList = {};

			//Tax accounts
			if(obj.tax>0){				
				$.each(this.lineDS.data(), function(index, value){
					var taxItem = self.taxItemDS.get(value.tax_item_id),
					taxAmount = value.amount * taxItem.rate;

					if(taxItem.account_id>0){
						if(taxList[taxItem.account_id]===undefined){
							taxList[taxItem.account_id]={"id": taxItem.account_id, "amount":taxAmount};						
						}else{											
							if(taxList[taxItem.account_id].id===taxItem.account_id){
								taxList[taxItem.account_id].amount += taxAmount;
							}else{
								taxList[taxItem.account_id]={"id": taxItem.account_id, "amount": taxAmount};
							}
						}
					}
				});

				//Tax account on Dr
				if(!jQuery.isEmptyObject(taxList)){				
					$.each(taxList, function(index, value){
						self.journalLineDS.add({					
							transaction_id 		: transaction_id,
							account_id 			: value.id,				
							contact_id 			: value.contact_id,				
							description 		: "",
							reference_no 		: "",
							segments 	 		: [],								
							dr 	 				: value.amount,
							cr 					: 0,				
							rate				: obj.rate,
							locale				: obj.locale
						});										
					});
				}
			}

			switch(obj.type) {
			    case "Advance_Settlement":
			    	//Zero Expense
			    	if(obj.amount==0 && obj.credit>0){			    		
			    		//Cash on Dr
			    		this.journalLineDS.add({					
							transaction_id 		: transaction_id,
							contact_id 			: obj.contact_id,
							account_id 			: obj.account_id,										
							description 		: "",
							reference_no 		: "",
							segments 	 		: obj.segments,								
							dr 	 				: obj.credit,
							cr 					: 0,				
							rate				: obj.rate,
							locale				: obj.locale
						});

			    		//Cash Advance on Cr
			    		$.each(this.referenceLineDS.data(), function(index, value){			    			
							self.journalLineDS.add({					
								transaction_id 		: transaction_id,
								contact_id 			: value.contact_id,
								account_id 			: value.account_id,											
								description 		: value.description,
								reference_no 		: value.reference_no,
								segments 	 		: value.segments,								
								dr 	 				: 0,
								cr 					: value.amount,				
								rate				: value.rate,
								locale				: value.locale
							});													
						});
			    	}

			    	//Full Expense
			    	if(obj.amount==obj.credit){			    		
			    		//Expense on Dr
			    		$.each(this.lineDS.data(), function(index, value){				
							self.journalLineDS.add({					
								transaction_id 		: transaction_id,
								contact_id 			: value.contact_id,
								account_id 			: value.account_id,											
								description 		: value.description,
								reference_no 		: value.reference_no,
								segments 	 		: value.segments,								
								dr 	 				: value.amount,
								cr 					: 0,				
								rate				: value.rate,
								locale				: value.locale
							});						
						});

			    		//Cash Advance on Cr
			    		$.each(this.referenceLineDS.data(), function(index, value){							
							self.journalLineDS.add({					
								transaction_id 		: transaction_id,
								contact_id 			: value.contact_id,
								account_id 			: value.account_id,											
								description 		: value.description,
								reference_no 		: value.reference_no,
								segments 	 		: value.segments,								
								dr 	 				: 0,
								cr 					: value.amount,				
								rate				: value.rate,
								locale				: value.locale
							});						
						});
			    	}

			   		//Over Expense
			    	if(obj.amount>obj.credit){			    		
			    		//Expense on Dr
			    		$.each(this.lineDS.data(), function(index, value){				
							self.journalLineDS.add({					
								transaction_id 		: transaction_id,
								contact_id 			: value.contact_id,
								account_id 			: value.account_id,											
								description 		: value.description,
								reference_no 		: value.reference_no,
								segments 	 		: value.segments,								
								dr 	 				: value.amount,
								cr 					: 0,				
								rate				: value.rate,
								locale				: value.locale
							});						
						});

						//Cash Advance on Cr
			    		$.each(this.referenceLineDS.data(), function(index, value){							
							self.journalLineDS.add({					
								transaction_id 		: transaction_id,
								contact_id 			: value.contact_id,
								account_id 			: value.account_id,											
								description 		: value.description,
								reference_no 		: value.reference_no,
								segments 	 		: value.segments,								
								dr 	 				: 0,
								cr 					: value.amount,				
								rate				: value.rate,
								locale				: value.locale
							});						
						});

						//Cash on Cr
						this.journalLineDS.add({					
							transaction_id 		: transaction_id,
							contact_id 			: obj.contact_id,
							account_id 			: obj.account_id,										
							description 		: "",
							reference_no 		: "",
							segments 	 		: obj.segments,								
							dr 	 				: 0,
							cr 					: obj.amount - obj.credit,				
							rate				: obj.rate,
							locale				: obj.locale
						});
			    	}

			    	//Less Expense
			    	if(obj.amount>0 && obj.amount<obj.credit){
			    		//Cash on Dr			    		
						this.journalLineDS.add({					
							transaction_id 		: transaction_id,
							contact_id 			: obj.contact_id,
							account_id 			: obj.account_id,										
							description 		: "",
							reference_no 		: "",
							segments 	 		: obj.segments,								
							dr 	 				: obj.credit - obj.amount,
							cr 					: 0,				
							rate				: obj.rate,
							locale				: obj.locale
						});

			    		//Expense on Dr
			    		$.each(this.lineDS.data(), function(index, value){				
							self.journalLineDS.add({					
								transaction_id 		: transaction_id,
								contact_id 			: value.contact_id,
								account_id 			: value.account_id,											
								description 		: value.description,
								reference_no 		: value.reference_no,
								segments 	 		: value.segments,								
								dr 	 				: value.amount,
								cr 					: 0,				
								rate				: value.rate,
								locale				: value.locale
							});						
						});

						//Advance account on Cr
			    		$.each(this.referenceLineDS.data(), function(index, value){							
							self.journalLineDS.add({					
								transaction_id 		: transaction_id,
								contact_id 			: value.contact_id,
								account_id 			: value.account_id,											
								description 		: value.description,
								reference_no 		: value.reference_no,
								segments 	 		: value.segments,								
								dr 	 				: 0,
								cr 					: value.amount,				
								rate				: value.rate,
								locale				: value.locale
							});						
						});						
			    	}
			        
			        break;			    
			    default:
			    //Direct Expense & Reimbursement
			    //Expense on Dr
			    console.log("Derect Expense & Reimbursement");
			    $.each(this.lineDS.data(), function(index, value){				
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						contact_id 			: value.contact_id,
						account_id 			: value.account_id,											
						description 		: value.description,
						reference_no 		: value.reference_no,
						segments 	 		: value.segments,								
						dr 	 				: value.amount,
						cr 					: 0,				
						rate				: value.rate,
						locale				: value.locale
					});						
				});

			    //Cash on Cr
				this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					contact_id 			: obj.contact_id,
					account_id 			: obj.account_id,										
					description 		: "",
					reference_no 		: "",
					segments 	 		: obj.segments,								
					dr 	 				: 0,
					cr 					: obj.amount,				
					rate				: obj.rate,
					locale				: obj.locale
				});
			}
			
			this.journalLineDS.sync();
		},		
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);
				
				obj.set("account_id", recur.account_id);
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,							
							account_id 			: value.account_id,									
							description 		: value.description,
							reference_no 		: value.reference_no,
							segments 	 		: value.segments,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({
				account_id 			: obj.account_id,
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,					
					account_id 			: value.account_id,								
					description 		: value.description,
					reference_no 		: value.reference_no,
					segments 	 		: value.segmets,								
					amount 	 			: value.amount,						
					rate				: value.rate,
					locale				: value.locale
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);
	    		
	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	    	   
	});

	/*********************
	*   Vendor Section   *
	**********************/
	banhji.vendorDashboard = kendo.observable({
		lang 				: langVM,
		summaryDS 			: dataStore(apiUrl + "dashboards/customer_summary"),
		topCustomerDS 		: dataStore(apiUrl + "dashboards/top_customer"),
		topARDS 			: dataStore(apiUrl + "dashboards/top_ar"),
		topProductDS 		: dataStore(apiUrl + "dashboards/top_product"),
		graphDS 			: dataStore(apiUrl + 'dashboards/monthly_sale'),
		sale 				: 0,
		sale_customer 		: 0,
		sale_product 		: 0,
		sale_order 			: 0,
		order 				: 0,
		order_avg 			: 0,
		order_open 			: 0,
		ar 					: 0,
		ar_open 			: 0,
		ar_customer 		: 0,
		ar_overdue 			: 0,						
		pageLoad 			: function(){
			var self = this, today = new Date(),
			firstDayOfYear = new Date(today.getFullYear(), 0, 1);

			this.summaryDS.query({
				filter: [
					{ field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
					{ field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
				],								
				page: 1,
				take: 5
			}).then(function(){
				var view = self.summaryDS.view();

				self.set("sale", kendo.toString(view[0].sale, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale));
				self.set("sale_customer", kendo.toString(view[0].sale_customer, "n0"));
				self.set("sale_product", kendo.toString(view[0].sale_product, "n0"));
				self.set("sale_order", kendo.toString(view[0].sale_order, "n0"));

				self.set("order", kendo.toString(view[0].order, "n0"));
				self.set("order_avg", kendo.toString(view[0].order_avg, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale));				
				self.set("order_open", kendo.toString(view[0].order_open, "n0"));

				self.set("ar", kendo.toString(view[0].ar, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale));
				self.set("ar_open", kendo.toString(view[0].ar_open, "n0"));
				self.set("ar_customer", kendo.toString(view[0].ar_customer, "n0"));
				self.set("ar_overdue", kendo.toString(view[0].ar_overdue, "n0"));
			});

			this.topCustomerDS.query({
				filter: [
					{ field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
					{ field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
				],								
				page: 1,
				take: 5
			});

			this.topARDS.query({
				filter: [
					{ field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
					{ field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
				],							
				page: 1,
				take: 5
			});

			this.topProductDS.query({
				filter: [
					{ field:"issued_date >=", operator:"where_related", model:"transaction", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
					{ field:"issued_date <=", operator:"where_related", model:"transaction", value:  kendo.toString(today, "yyyy-MM-dd") }
				],							
				page: 1,
				take: 5
			});

			this.loadGraph();								
		},
		loadGraph 			: function(){
			var self = this, 
			today = new Date(),
			firstDayOfYear = new Date(today.getFullYear(), 0, 1);

			this.graphDS.query({
				filter: [
					{ field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
					{ field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
				],
				page: 1,
				take: 100
			}).then(function(e) {
			    var view = self.graphDS.view();
			    
				$('#graph').kendoChart({
					dataSource: {data: view},												
					series: [
						{field: 'sale', categoryField:'month', type: 'line', axis: 'order'}
					],
					valueAxes: [
						{
		                    name: "order",
		                    color: "#007eff",
		                    min: 0,
		                    majorUnit: 500000,
		                    max: 1000000
		                }
	                ],
	                categoryAxis: {
	                    //categories: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],		                    
	                    axisCrossingValues: [0, 13],
	                    justified: true
	                },
	                tooltip: {
	                    visible: true,
	                    format: "{0}",
	                    template: "#= series.field #: #= value #"
	                }
				});
			});		
		}		
	});
	banhji.vendorCenter = kendo.observable({
		lang 				: langVM,
		transactionDS  		: dataStore(apiUrl + 'transactions'),
		contactDS 			: dataStore(apiUrl + 'contacts'),
		contactTypeDS		: banhji.source.supplierTypeDS,
		noteDS 				: dataStore(apiUrl + 'notes'),		
		currencyDS 			: banhji.source.currencyDS,		
		summaryDS 			: dataStore(apiUrl + "transactions"),
		sortList			: banhji.source.sortList,
		sorter 				: "year",
		sdate 				: "",
		edate 				: "",				
		obj 				: null,
		note 				: "",		
		searchText 			: "",		
		contact_type_id 	: 0,
		currency_id 		: 0,
		user_id 			: banhji.source.user_id,
		balance 			: 0,
		po 					: 0,
		openInvoice 		: 0,
		overInvoice 		: 0,		
		pageLoad 			: function(){		
												
		},				
		loadSummary 		: function(id){
			var self = this, obj = this.get("obj");

			this.summaryDS.query({
			  	filter: [
			  		{ field:"contact_id", value: obj.id },
			  		{ field:"type", operator:"where_in", value: ["Cash_Purchase","Credit_Purchase", "Purchase_Order"] },
			  		{ field:"status", value: 0 }
			  	],
			  	sort: { field: "issued_date", dir: "desc" },
			  	page: 1,
			  	take: 100
			}).then(function(){
				var view = self.summaryDS.view(),
				balance = 0, open = 0, over = 0, po = 0, today = new Date();

				$.each(view, function(index, value){
					if(value.type=="Purchase_Order"){
						po++;
					}else{
						balance += kendo.parseFloat(value.amount);
						open++;

						if(new Date(value.due_date)<today){						
							over++;
						}
					}									
				});
				
				self.set("balance", kendo.toString(balance, "c", obj.currency[0].locale));
				self.set("po", kendo.toString(po, "n0"));
				self.set("openInvoice", kendo.toString(open, "n0"));
				self.set("overInvoice", kendo.toString(over, "n0"));
			});
		},
		loadTransaction 	: function(id){
			this.transactionDS.query({
			  	filter: { field:"contact_id", value: id },
			  	sort: { field: "issued_date", dir: "desc" },
			  	page: 1,
			  	take: 100
			});
		},
		loadBalance 		: function(){
			var obj = this.get("obj");

			this.transactionDS.query({
			  	filter: [
			  		{ field:"contact_id", value: obj.id },
			  		{ field:"type", operator:"where_in", value:["Purchase","Expense"] },			  		
			  		{ field:"status", value: 0 }
			  	],
			  	sort: { field: "issued_date", dir: "desc" },
			  	page: 1,
			  	take: 100
			});
		},
		loadPO 				: function(){
			var obj = this.get("obj");

			this.transactionDS.query({
			  	filter: [
			  		{ field:"contact_id", value: obj.id },
			  		{ field:"type", value:"PO" },			  		
			  		{ field:"status", value: 0 }
			  	],
			  	sort: { field: "issued_date", dir: "desc" },
			  	page: 1,
			  	take: 100
			});
		},
		loadOverInvoice 	: function(){
			var obj = this.get("obj");

			this.transactionDS.query({
			  	filter: [
			  		{ field:"contact_id", value: obj.id },
			  		{ field:"type", operator:"where_in", value: ["Purchase","Expense"] },
			  		{ field:"due_date <", value: new Date() },
			  		{ field:"status", value: 0 }
			  	],
			  	sort: { field: "issued_date", dir: "desc" },
			  	page: 1,
			  	take: 100
			});
		},		
		loadNote 			: function(id){
			this.noteDS.query({
				filter: { field:"contact_id", value: id },
				sort: { field:"noted_date", dir:"desc" },
				page: 1,
				take: 100
			});
		},			
		selectedRow			: function(e){
			var id = e.data.id,
			data = e.data;			
			
			this.set("obj", data);			
			this.loadSummary(id);
			this.loadTransaction(id);			
			this.loadNote(id);
		},
		sorterChanges 		: function(){
			var value = this.get("sorter");

			switch(value){
			case "today":
				var today = new Date();
				
				this.set("sdate", today);
				this.set("edate", today);
			  					
			  	break;
			case "week":
			  	var thisWeek = new Date;
				var first = thisWeek.getDate() - thisWeek.getDay(); 
				var last = first + 6;

				var firstDayOfWeek = new Date(thisWeek.setDate(first));
				var lastDayOfWeek = new Date(thisWeek.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":
				var thisMonth = new Date;				  	
				var firstDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth(), 1);
				var lastDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":
				var thisYear = new Date();
			  	var firstDayOfYear = new Date(thisYear.getFullYear(), 0, 1);
				var lastDayOfYear = new Date(thisYear.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},
		enterSearch 		: function(e){
			e.preventDefault();

			this.search();
		},
		search 				: function(){
			var self = this, 
			para = [],
      		txtSearch = this.get("searchText"),       		
      		contact_type_id = this.get("contact_type_id"),
      		currency_id = this.get("currency_id");      		
      		
      		if(txtSearch){
      			para.push(      				
      				{ field: "number", operator: "like", value: txtSearch },
      				{ field: "surname", operator: "or_like", value: txtSearch },
					{ field: "name", operator: "or_like", value: txtSearch },
					{ field: "company", operator: "or_like", value: txtSearch }
      			);
      		}      		

      		if(contact_type_id){
      			para.push({ field: "contact_type_id", value: contact_type_id });
      		}else{
      			para.push({ field: "parent_id", model:"contact_type", operator:"where_related", value: 2 });
      		}

      		if(currency_id){
      			para.push({ field: "currency_id", value: currency_id });
      		}      		

      		this.contactDS.filter(para);
      		var loaded = false;
      		this.contactDS.bind("requestEnd", function(){
      			if(loaded==false){
      				loaded = true;

      				//Clear search filters
		      		self.set("searchText", "");		      		
		      		self.set("contact_type_id", 0);
		      		self.set("currency_id", 0);
      			}
      		});      			
		},
		searchTransaction	: function(){
			var self = this,
				para = [],
				obj = this.get("obj"),
				start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"),
        		end = kendo.toString(this.get("edate"), "yyyy-MM-dd");

        	//Dates
        	if(start && end){
            	para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
            	para.push({ field:"issued_date <=", value: kendo.toString(end, "yyyy-MM-dd") });            	            	
            }else if(start){
            	para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
            	para.push({ field:"issued_date <=", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{
            	
            }

            para.push({ field:"contact_id", value: obj.id });            

            this.transactionDS.query({
            	filter: para,
            	sort: { field: "issued_date", dir: "desc" },
            	page: 1,
            	take: 100
            });            
		},	
		goEditContact 		: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/vendor/'+obj.id);
		},
		goPO				: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/purchase_order');
			banhji.po.loadContact(obj.id);			
		},
		goDeposit			: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/vendor_deposit');
			banhji.vendorDeposit.loadContact(obj.id);			
		},
		goPurchase			: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/purchase');
			banhji.purchase.loadContact(obj.id);
		},
		goPurchaseReturn			: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/purchase_return');
			banhji.purchaseReturn.loadContact(obj.id);
		},
		goGRN				: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/grn');
			banhji.grn.loadContact(obj.id);
		},		
		goPayBill			: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/cashier');
			banhji.cashier.loadContact(obj.id);
		},		
		saveNote 			: function(){
			var self = this;

			if(this.get("note")!==""){
				this.noteDS.insert(0, {
					contact_id 	: this.get("obj").id,
					note 		: this.get("note"),
					noted_date	: new Date(),
					created_by 	: this.get("user_id"),

					creator 	: ""
				});
				var saved = false;
				this.noteDS.sync();
				this.noteDS.bind("requestEnd", function(){
					if(saved==false){
						saved = true;

						self.set("note", "");
					}
				});
			}else{
				alert("memo is required");
			}
		}		
	});
	banhji.vendor = kendo.observable({
		lang 					: langVM,
		dataSource 				: dataStore(apiUrl + "contacts"),
		patternDS 				: dataStore(apiUrl + "contacts"),
		deleteDS 				: dataStore(apiUrl + "transactions"),		
		existingDS 				: dataStore(apiUrl + "contacts"),
		businessTypeDS			: dataStore(apiUrl + "businesstypes"),		
		contactTypeDS  			: banhji.source.supplierTypeDS,
		contactPersonDS			: dataStore(apiUrl + "contact_persons"),
		currencyDS 				: banhji.source.currencyDS,		
		apDS  					: banhji.source.APAccountDS,
		discountDS  			: banhji.source.discountAccountDS,
		prepaymentDS  			: banhji.source.prepaidAccountDS,
		taxItemDS				: dataStore(apiUrl + "tax_items"),
		paymentTermDS			: dataStore(apiUrl + "payment_terms"),
		paymentMethodDS			: dataStore(apiUrl + "payment_methods"),
		genders					: banhji.source.genderList,
		statusList 				: banhji.source.statusList,
        obj 					: null,       
		originalNo				: null,		
		isDuplicateNumber 		: false,		
		isCompany 				: false,
		isEdit 					: false,
		pageLoad 				: function(id){
			if(id){
				this.set("isEdit", true);							
				this.loadObj(id);
				this.loadContactPerson(id);				
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
										
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}else{
					var obj = this.get("obj");

					obj.set("is_pattern", false);	
				}								
			}			
		},
		setPattern 				: function(id){
			var obj = this.get("obj");

			obj.set("contact_type_id", id);
			obj.set("is_pattern", true);
		},
		loadPattern 			: function(id){
			var self = this;

			this.patternDS.query({
				filter: [
					{ field:"contact_type_id", value: id },
					{ field:"is_pattern", value: true }
				],
				page: 1,
				take: 1
			}).then(function(data){
				var view = self.patternDS.view(),
				obj = self.get("obj");

				if(view.length>0){
					obj.set("account_id", view[0].account_id);
					obj.set("discount_account_id", view[0].discount_account_id);
					obj.set("deposit_account_id", view[0].deposit_account_id);
					obj.set("tax_item_id", view[0].tax_item_id);
					obj.set("currency_id", view[0].currency_id);
					obj.set("credit_limit", view[0].credit_limit);

					obj.set("payment_term_id", view[0].payment_term_id);
					obj.set("payment_method_id", view[0].payment_method_id);
					obj.set("business_type_id", view[0].business_type_id);
				}else{
					obj.set("account_id", 0);
					obj.set("discount_account_id", 0);
					obj.set("deposit_account_id", 0);
					obj.set("tax_item_id", 0);
					obj.set("currency_id", 0);
					obj.set("credit_limit", 0);

					obj.set("payment_term_id", 0);
					obj.set("payment_method_id", 0);
					obj.set("business_type_id", 0);
				}
			});
		},			
		loadObj 				: function(id){
			var self = this;

			this.dataSource.query({
				filter:{ "field":"id", value: id },
				page: 1,
				pageSize: 100
			}).then(function(e){
				var view = self.dataSource.view();

				if(view[0].contact_type_id=="6" || view[0].contact_type_id=="7" || view[0].contact_type_id=="8"){
					self.set("isCompany", true);
				}else{
					self.set("isCompany", false);
				}

				self.set("obj", view[0]);
				self.loadMap();
				self.set("originalNo", view[0].number);											
			});
		},
		loadPatternEdit			: function(id){
			var self = this;

			this.dataSource.query({
				filter:[
					{ "field":"id", value: id },
					{ "field":"is_pattern", value: 1 }
				],
				page: 1,
				pageSize: 100
			}).then(function(e){
				var view = self.dataSource.view();				

				self.set("obj", view[0]);														
			});
		},		
		loadContactPerson		: function(id){
			this.contactPersonDS.query({
				filter: { "field":"contact_id", value: id },
				page: 1,
				pageSize: 100
			});
		},
		loadMap 				: function(){
			var obj = this.get("obj"), lat = kendo.parseFloat(obj.latitute),
			lng = kendo.parseFloat(obj.longtitute);
			
			if(lat && lng){
				var myLatLng = {lat:lat, lng:lng};
				var mapOptions = {
					zoom: 17,					
					center: myLatLng,
					mapTypeControl: false,
					zoomControl: false,
					scaleControl: false,
					streetViewControl: false
				};
				var map = new google.maps.Map(document.getElementById('map'),mapOptions);
				var marker = new google.maps.Marker({
					position: myLatLng,
					map: map,
					title: obj.number
				});
			} 
		},
		copyBillTo 				: function(){
			var obj = this.get("obj");

			obj.set("ship_to", obj.bill_to);
		},
		contactTypeChanges 		: function(){
			var obj = this.get("obj");

			if(obj.contact_type_id>0){
				this.loadPattern(obj.contact_type_id);
			}
		},      	
		checkExistingNumber 	: function(){
			var self = this;	
			
			var number = this.get("obj").number;
			var originalNo = this.get("originalNo");
			
			if(number.length>0 && number!==originalNo){
				this.existingDS.query({
					filter: { field:"number", value: number },
					page: 1,
					pageSize: 100
				}).then(function(e){
					var view = self.existingDS.view();
					
					if(view.length>0){
				 		self.set("isDuplicateNumber", true);						
					}else{
						self.set("isDuplicateNumber", false);
					}
				});							
			}else{
				this.set("isDuplicateNumber", false);
			}			
		},		
		addEmptyContactPerson 	: function(){
			var contact_id = 0;
			if(this.get("isEdit")){
				contact_id = this.get("obj").id;
			}

			this.contactPersonDS.add({					 			
				contact_id 			: contact_id,
      			prefix 				: "",      			
				name 				: "",
				department			: "",
				phone				: "",
				email				: ""
			});								
		},
		deleteContactPerson 	: function(e){
			if (confirm("Are you sure, you want to delete it?")) {
				var d = e.data,
				obj = this.contactPersonDS.getByUid(d.uid);

				this.contactPersonDS.remove(obj);
			}
		},
      	addEmpty 				: function(){
      		this.dataSource.data([]);
      		this.set("obj", null);

			this.dataSource.add({
				"company_id" 			: 0,
				"ebranch_id" 			: 0,
				"elocation_id"			: 0,
				"wbranch_id" 			: 0,
				"wlocation_id" 			: 0,			
				"currency_id" 			: 0,
				"user_id" 				: 0,
				"contact_type_id" 		: 0,							
				"number"				: "",
				"enumber"				: "",
				"wnumber"				: "",
				"surname"				: "",
				"name"					: "",
				"gender"				: "M",
				"dob"					: "",
				"pob"					: "",
				"latitute" 				: "",
				"longtitute" 			: "",
				"credit_limit"			: 0,				
				"id_number"				: "",
				"phone" 				: "",
				"email" 				: "",
				"website" 				: "",			
				"job"					: "",				
				"vat_no"				: "",
				"family_member"			: "",
				"address" 				: "",
				"bill_to" 				: "",
				"ship_to" 				: "",
				"memo"					: "",				
				"image_url"				: "",
				"company"				: "",
				"company_en"			: "",		
				"bank_name"				: "",
				"bank_address"			: "",
				"bank_account_name"		: "",
				"bank_account_number"	: "",
				"name_on_cheque"		: "",				
				"business_type_id"		: 0,
				"payment_term_id"		: 0,
				"payment_method_id"		: 0,
				"deposit_account_id"	: 0,
				"discount_account_id"	: 0,				
				"account_id"	: 0,
				"ra_id"					: 0,
				"tax_item_id"			: 0,				
				"phase_id"				: 0,
				"voltage_id"			: 0,
				"ampere_id"				: 0,
				"registered_date" 		: new Date(),			
				"use_electricity"		: 0,
				"use_water"				: 0,
				"is_local" 				: 0,
				"is_pattern" 			: 0,				
				"status"				: 1							
			});			

			var data = this.dataSource.data();			
			var obj = data[data.length - 1];			
			this.set("obj", obj);	
		},
		contactSync 			: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },			
		save 					: function(){			
			var self = this, saved = false;

			if(this.get("isEdit")){
				this.dataSource.sync();
				this.contactPersonDS.sync();
			}else{
				this.contactSync().then(function(data){
					self.saveContactPerson(data[0].id);

					if(data[0].is_pattern){
						self.savePattern(data[0].contact_type_id, data[0].id);
					}
				}).then(function(){					
					self.contactPersonDS.data([]);

					self.addEmpty();
				});
			}						
		},
		delete 					: function(){
			var self = this,
			obj = this.get("obj"),
			id = obj.id;

			if (confirm("Are you sure, you want to delete it?")) {				
				this.deleteDS.query({
				  	filter: { field: "contact_id", value: id },
				  	page: 1,
				  	take: 1
				}).then(function() {
					var view = self.deleteDS.view();

					if(view.length>0){
						alert("Sorry, you can not delete it because it is using now.");
					}else{
						var data = self.dataSource.get(id);
				        self.dataSource.remove(data);
				        self.save();

				        window.history.back();
					}
				});
	    	}
		},
		cancel 					: function(){
			this.dataSource.cancelChanges();
			this.contactPersonDS.cancelChanges();

			window.history.back();
		},
		saveContactPerson 		: function(id){
			$.each(this.contactPersonDS.data(), function(index, value) {
				value.set("contact_id", id);
			});

			this.contactPersonDS.sync();
		},
		savePattern 			: function(contact_type_id, contact_id){
			var data = this.contactTypeDS.get(contact_type_id);
			data.set("contact_id", contact_id);
			this.contactTypeDS.sync();

			banhji.vendorSetting.contactTypeDS.fetch();
			window.history.back();
		}
	});
	banhji.po =  kendo.observable({
		dataSource 			: dataStore(apiUrl + "transactions"),
		lineDS  			: dataStore(apiUrl + "transactions/line"),
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "transactions/line"),
		referenceDS			: dataStore(apiUrl + "transactions"),
		referenceLineDS		: dataStore(apiUrl + "transactions/line"),
		depositDS			: dataStore(apiUrl + "transactions"),		
		balanceDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		totalDepositDS  	: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		currencyDS  		: banhji.source.currencyDS,
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		contactDS  			: banhji.source.supplierDS,
		itemDS  			: banhji.source.itemDS,
		taxItemDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "tax_items",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"tax_type_id", value: 1}
			],					
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		catalogDS			: dataStore(apiUrl + "items"),
		assemblyDS			: dataStore(apiUrl + "items/assembly"),
		paymentMethodDS 	: dataStore(apiUrl + "payment_methods"),
		segmentItemDS		: banhji.source.segmentItemDS,		
		referenceTypes 		: [
			{ id:"Sale_Order", name:"Sale Order" },
			{ id:"Quote", name:"Quote" },
			{ id:"GDN", name:"Goods Delivery Note" }
		],
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,			    
	    bgColor 			: "#D5DBDB",
	    item 				: null,
	    showDeposit 		: false,	    
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,
		obj 				: null,
		isEdit 				: false,
		bolReference 		: false,
		showDiscount 		: false,
		sub_total 			: 0,
		tax 				: 0,
		discount 			: 0,
		balance 			: 0,
		total_credit		: 0,
		total 				: 0,
		original_total 		: 0,
		original_credit 	: 0,
		user_id				: banhji.source.user_id,
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);
				this.set("original_total", 0);							
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					this.set("original_total", 0);					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},	    			
		loadObj 			: function(id, is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}			

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.dataSource.view();				

				self.set("sub_total", kendo.toString(view[0].sub_total, "c", view[0].locale));
				self.set("discount", kendo.toString(view[0].discount, "c", view[0].locale));
		        self.set("tax", kendo.toString(view[0].tax, "c", view[0].locale));
		        self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));	  			
								
				//self.contactDS.filter({ field: "id", value: view[0].contact_id });				
				self.lineDS.filter({ field: "transaction_id", value: view[0].id });
				self.journalLineDS.filter({ field: "transaction_id", value: view[0].id });				
				self.depositDS.filter([
					{ field: "reference_id", value: view[0].id },
					{ field: "type", value: "Credit" }
				]);

				self.set("obj", view[0]);
				self.set("original_total", view[0].amount);
				self.set("original_credit", view[0].credit);

				self.loadDeposit();				
			});				
		},
		//Deposit
		loadDeposit 		: function(){
			var self = this, obj = this.get("obj");

			this.totalDepositDS.query({
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Credit" }
				],
				page: 1,
				pageSize: 100
			}).then(function(){
				var view = self.totalDepositDS.view(),
				amount = 0;

				if(self.get("isEdit")){
					amount = view[0].amount + obj.credit;
				}else{
					amount = view[0].amount;
				}

				self.set("total_credit", amount);
			});
		},		
		saveDeposit 		: function(transaction_id){
			var obj = this.get("obj");		

			this.depositDS.data([]);

			//Deposit apply
			if(obj.deposit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Deposit",			   	  		   					   				   	
				   	amount				: obj.deposit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

			//Credit apply
			if(obj.credit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Credit",			   	  		   					   				   	
				   	amount				: obj.credit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

	    	this.depositDS.sync();
		},
		//Contact
		loadContact 		: function(id){
			var self = this;			

			this.contactDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.contactDS.view(),
				obj = self.get("obj");
		    	
		    	obj.set("contact_id", view[0].id);
		    	obj.set("payment_method_id", view[0].payment_method_id);		    	
		    	obj.set("locale", view[0].currency[0].locale);				
				obj.set("bill_to", view[0].bill_to);
				obj.set("ship_to", view[0].ship_to);
				
				self.setRate();
				self.setTerm();
				self.loadDeposit();							
			});				

		},
		loadBalance 		: function(){
			var self = this, obj = this.get("obj");			

			this.balanceDS.query({    			
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Invoice" }
				],
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.balanceDS.view(),				
				contact = self.contactDS.get(obj.contact_id),
				balance = view[0].amount,
				creditAllowed = 0;

				if(contact.credit_limit > balance){
					creditAllowed = contact.credit_limit - balance;
				}
						    	
		    	self.set("balance", kendo.toString(balance, "c", obj.locale));
		    	obj.set("credit_allowed", creditAllowed, "c");		
			});				
		},
		contactChanges 		: function(){
			var obj = this.get("obj");

	    	if(obj.contact_id>0){		    			    	
		    	contact = this.contactDS.get(obj.contact_id);		    	
		    	
		    	obj.set("payment_method_id", contact.payment_method_id);		    	
		    	obj.set("locale", contact.currency[0].locale);
		    	obj.set("bill_to", contact.bill_to);
		    	obj.set("ship_to", contact.ship_to);

		    	this.setRate();		    	
		    	this.loadDeposit();
		    	this.loadBalance();		    			    	
	    	}else{
	    		this.set("total_credit", 0);
	    	}
	    },
		//Reference					
		loadReference 		: function(e){			
			var obj = this.get("obj");

			if(obj.reference_type){
				this.set("bolReference", true);

				this.referenceDS.filter([
					{ field: "contact_id", value: obj.contact_id },
					{ field: "status", value: 0 },
					{ field: "type", value: obj.reference_type }
				]);				
			}else{
				this.set("bolReference", false);
			}							
		},
		referenceChanges 	: function(e){
			var self = this, obj = this.get("obj");
			
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);

				//Deposit
				if(obj.deposit>0){
					this.set("showDeposit", true);
				}else{
					this.set("showDeposit", false);
				}

				obj.set("vat_id", ref.vat_id);								
				obj.set("deposit", ref.deposit);
				obj.set("discount", ref.discount);
				obj.set("discount_amount", ref.discount_amount);
				obj.set("fine", ref.fine);
				obj.set("vat", ref.vat);
								
			 	this.referenceLineDS.query({
			 		filter: { field:"transaction_id", value: obj.reference_id },
			 		page: 1,
			 		take: 100
			 	}).then(function(){
			 		var view = self.referenceLineDS.view();					

			 		self.lineDS.data([]);
			 		$.each(view, function(index, value){
			 			self.lineDS.add({					
							transaction_id 		: obj.id,
							item_id 			: value.item_id,
							measurement_id 		: value.measurement_id,							
							description 		: value.description,				
							quantity 	 		: value.quantity,
							price 				: value.price,												
							amount 				: value.amount,
							discount 			: value.discount,
							fine 				: value.fine,
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,							

							item_prices			: value.item_prices
						});
			 		});

			 		self.changes();
			 	});			 				 				 				 				
			}else{
				obj.set("deposit", 0);
				this.set("showDeposit", false);
			}								
		},
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", obj.locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", obj.locale);												
					});
				}

				self.changes();
			});				
		},		
		changes				: function(){
			var self = this, obj = this.get("obj");

			if(this.lineDS.total()>0){			
				var total = 0, subTotal = 0, discount =0, tax = 0;
								
				if(kendo.parseInt(obj.tax_item_id)>0){
					var selectedVat 					
					vatAmt = kendo.parseFloat(selectedVat.item_prices[0].price);
				}								

				$.each(this.lineDS.data(), function(index, value) {				
					var amt = value.quantity * value.price;					

					//Discount by line
					if(value.discount>0){										
						var discount_amount = amt * value.discount;
						amt -= discount_amount;
						discount += discount_amount;																	
					}

					//Tax by line
					if(value.tax_item_id>0){
						var taxItem = self.taxItemDS.get(value.tax_item_id);										
						tax += amt * taxItem.rate;																	
					}					

					value.set("amount", amt);					
					subTotal += amt;					
		        });				

		    	//Total
		        total = subTotal + tax;

		        //Apply Deposit
		        if(obj.deposit > 0){
		        	if(obj.deposit <= total){
		        		total -= obj.deposit;
		        	}else{
		        		obj.set("deposit", total);
		        		total = 0;
		        	}
		        }

		        //Apply Credit
		        if(obj.credit > 0){
		        	if(obj.credit <= this.get("total_credit")){
			        	if(obj.credit <= total){
			        		total -= obj.credit;
			        	}else{
			        		obj.set("credit", total);
			        		total = 0;
			        	}
		        	}else{
		        		alert("Over Credit To Apply!");
		        		obj.set("credit", 0);
		        	}
		        }

		        //Warning over credit allowed
		        if(obj.credit_allowed>0 && total>obj.credit_allowed){
		        	this.set("bgColor", "Gold");		        	
		        }else{
		        	this.set("bgColor", "#D5DBDB");
		        }

		        this.set("sub_total", kendo.toString(subTotal, "c", obj.locale));
		        this.set("discount", kendo.toString(discount, "c", obj.locale));
		        this.set("tax", kendo.toString(tax, "c", obj.locale));
		        this.set("total", kendo.toString(total, "c", obj.locale));

		        obj.set("sub_total", subTotal);
		        obj.set("discount", discount);
		        obj.set("tax", tax);			
				obj.set("amount", total);									    	
	    	}else{
	    		this.set("sub_total", kendo.toString(0, "c", obj.locale));
	    		this.set("discount", kendo.toString(0, "c", obj.locale));
		        this.set("tax", kendo.toString(0, "c", obj.locale));
		        this.set("total", kendo.toString(0, "c", obj.locale));

		        obj.set("sub_total", 0);
		        obj.set("discount", 0);
		        obj.set("tax", 0);			
				obj.set("amount", 0);				
	    	}   	
		},		
	    segmentChanges 		: function(e) {
			var dataArr = this.get("obj").segments,
			lastIndex = dataArr.length - 1,
			last = this.segmentItemDS.get(dataArr[lastIndex]);
			
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current_index = dataArr[i],
					current = this.segmentItemDS.get(current_index);

					if(current.segment_id === last.segment_id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},
		//Item		
		itemChanges 		: function(e){								
			var self = this, 
			data = e.data,
			transaction_id = 0, 
			obj = this.get("obj"), 
			item = this.itemDS.get(data.item_id),
			rate = obj.rate / item.item_prices[0].rate;
			
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
			
			if(data.item_id>0){		        
		        if(item.is_catalog=="1"){
		        	this.catalogDS.query({
		        		filter: { field:"id", operator:"where_in", value:item.catalogs }
		        	}).then(function(){
		        		self.lineDS.remove(data);

		        		$.each(self.catalogDS.view(), function(index, value){										
							self.lineDS.add({					
								transaction_id 		: transaction_id,
								item_id 			: value.id,
								measurement_id 		: value.item_prices[0].measurement_id,								
								description 		: value.name,				
								quantity 	 		: 1,
								price 				: value.item_prices[0].price*rate,												
								amount 				: value.item_prices[0].price*rate,
								discount 			: 0,
								fine 				: 0,
								rate				: obj.rate,
								locale				: obj.locale,
								has_vat 			: false,
								movement 			: -1,								

								item_prices 		: value.item_prices
							});								
		        		});

		        		self.changes();
		        	});
		        }else if(item.is_assemble=="1"){
		    		data.set("description", item.name);	    		
			        data.set("price", item.price*rate);
			        data.set("measurement_id", 0);
			        data.set("rate", obj.rate);		        	        
			       	data.set("item_prices", []);

			        this.changes();		     
		        }else{
		        	data.set("measurement_id", item.item_prices[0].measurement_id);		        	
		    		data.set("description", item.name);
		    		data.set("quantity", 1);	    		
			        data.set("price", 0);			        		        
			        data.set("rate", obj.rate);
			        data.set("item_prices", item.item_prices);			        

			        this.changes();
		    	}		        
	        }                	        	
		},
		measurementChanges 	: function(e){										
			var self = this, data = e.data, obj = this.get("obj");			

			if(data.measurement_id>0){
				$.each(data.item_prices, function(index, value){
					if(value.measurement_id==data.measurement_id){
						var rate = obj.rate / value.rate;						
				        data.set("price", value.price*rate);				       			       
				        
						return false;
					}
				});	    		
		        	        
		        this.changes();
	        }	                	        	
		},					
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);
			this.journalLineDS.data([]);

			this.set("obj", null);
			this.set("sub_total", 0);
			this.set("tax", 0);
			this.set("discount", 0);			
			this.set("fine", 0);	
			this.set("total", 0);				

			this.dataSource.add({				
				contact_id 			: "",
				payment_method_id	: 0,				
				reference_id 		: 0,
				recurring_id 		: "",				
				user_id 			: this.get("user_id"),
				seller_id 			: this.get("user_id"), 	    		
			   	type				: "Purchase_Order",
			   	sub_total 			: 0,
			   	account_id 			: 0,				   		   					   				   	
			   	amount				: 0,
			   	credit_allowed 		: 0,
			   	credit 				: 0,
			   	deposit 			: 0,
			   	discount 			: 0,		   	
			   	fine 				: 0,
			   	tax 				: 0,
			   	check_no 			: "",
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),
			   	due_date 			: new Date(),			   	
			   	bill_to 			: "",
			   	ship_to 			: "",
			   	memo 				: "",
			   	memo2 				: "",
			   	status 				: 0,
			   	segments 			: [],
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0				
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);

			this.addRow();
			this.setRate();			
		},
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,
				tax_item_id 		: "",
				item_id 			: "",				
				measurement_id 		: 0,				
				description 		: "",				
				quantity 	 		: 1,
				price 				: 0,												
				amount 				: 0,
				discount 			: 0,
				fine 				: 0,
				rate				: obj.rate,
				locale				: obj.locale,							
				movement 			: -1,

				item_prices 		: []
			});																	
		},		
		removeRow 			: function(e){						
			var d = e.data;
			if(this.lineDS.total()>1){				
				this.lineDS.remove(d);
		        this.changes();
	        }		        
		},							    
	    transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this, obj = this.get("obj");

	    	//Warning over credit allowed
	        if(obj.credit_limit>0 && obj.amount>obj.credit_allowed){
	        	alert("Over credit allowed!");		        	
	        }

	    	//Update references
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);
				ref.set("status", 1);
				this.referenceDS.sync();
			} 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();

	    		//Update credit changes
	    		if(this.get("original_credit") !== obj.credit){	    			
	    			this.set("original_credit", obj.credit);    			

					var deposit = this.depositDS.at(0);
					deposit.set("amount", obj.credit*-1);

					this.depositDS.sync();
	    		}	    		

	    		//Update total changes
	    		if(this.get("original_total") == obj.amount){
	    			this.lineDS.sync();	    			
	    		}else{
	    			this.set("original_total", obj.amount);

	    			$.each(this.journalLineDS.data(), function(index, value){										
						value.set("deleted", 1);										
					});

					this.addJournal(obj.id);
	    		}	    		
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){
					//Deposit
					if(obj.deposit > 0 || obj.credit > 0){
						self.saveDeposit(data[0].id);
					}

					//Journal
				

					//Item line
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);										
					});
					self.lineDS.sync();																	
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();			

			window.history.back();
		},
	    //Journal	        
	 
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);				
				
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("discount", recur.discount);
				obj.set("fine", recur.fine);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,							
							item_id 			: value.item_id,									
							description 		: value.description,							
							quantity 			: value.quantity,
							price 				: value.price,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,

							item_prices 		: value.item_prices
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({				
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	discount 			: obj.discount,
			   	fine 				: obj.fine,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,					
					item_id 			: value.item_id,								
					description 		: value.description,													
					amount 	 			: value.amount,
					discount 			: value.discount,
					fine 				: value.fine,						
					rate				: value.rate,
					locale				: value.locale,
					has_vat 			: value.has_vat
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);
	    		
	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	 		
	});
	banhji.grn =  kendo.observable({
		dataSource 			: dataStore(apiUrl + "transactions"),
		lineDS  			: dataStore(apiUrl + "transactions/line"),
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "transactions/line"),
		referenceDS			: dataStore(apiUrl + "transactions"),
		referenceLineDS		: dataStore(apiUrl + "transactions/line"),
		depositDS			: dataStore(apiUrl + "transactions"),		
		balanceDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		totalDepositDS  	: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		currencyDS  		: banhji.source.currencyDS,
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		contactDS  			: banhji.source.supplierDS,					
		itemDS  			: banhji.source.itemDS,
		taxItemDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "tax_items",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"tax_type_id", value: 1}
			],					
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		catalogDS			: dataStore(apiUrl + "items"),
		assemblyDS			: dataStore(apiUrl + "items/assembly"),
		paymentTermDS 		: dataStore(apiUrl + "payment_terms"),
		segmentItemDS		: banhji.source.segmentItemDS,		
		referenceTypes 		: [
			{ id:"Purchase_Order", name:"Purchase Order" }			
		],
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,			    
	    bgColor 			: "#D5DBDB",
	    showDeposit 		: false,	    
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,
		obj 				: null,
		isEdit 				: false,
		bolReference 		: false,
		showDiscount 		: false,
		sub_total 			: 0,
		tax 				: 0,
		discount 			: 0,
		balance 			: 0,
		total_credit		: 0,
		total 				: 0,
		original_total 		: 0,
		original_credit 	: 0,
		user_id				: banhji.source.user_id,
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);
				this.set("original_total", 0);							
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					this.set("original_total", 0);					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},	    			
		loadObj 			: function(id, is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}			

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.dataSource.view();				

				self.set("sub_total", kendo.toString(view[0].sub_total, "c", view[0].locale));
				self.set("discount", kendo.toString(view[0].discount, "c", view[0].locale));
		        self.set("tax", kendo.toString(view[0].tax, "c", view[0].locale));
		        self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));	  			
								
				//self.contactDS.filter({ field: "id", value: view[0].contact_id });				
				self.lineDS.filter({ field: "transaction_id", value: view[0].id });
				self.journalLineDS.filter({ field: "transaction_id", value: view[0].id });				
				self.depositDS.filter([
					{ field: "reference_id", value: view[0].id },
					{ field: "type", value: "Credit" }
				]);

				self.set("obj", view[0]);
				self.set("original_total", view[0].amount);
				self.set("original_credit", view[0].credit);

				self.loadDeposit();				
			});				
		},
		//Deposit
		loadDeposit 		: function(){
			var self = this, obj = this.get("obj");

			this.totalDepositDS.query({
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Credit" }
				],
				page: 1,
				pageSize: 100
			}).then(function(){
				var view = self.totalDepositDS.view(),
				amount = 0;

				if(self.get("isEdit")){
					amount = view[0].amount + obj.credit;
				}else{
					amount = view[0].amount;
				}

				self.set("total_credit", amount);
			});
		},		
		saveDeposit 		: function(transaction_id){
			var obj = this.get("obj");		

			this.depositDS.data([]);

			//Deposit apply
			if(obj.deposit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Deposit",			   	  		   					   				   	
				   	amount				: obj.deposit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

			//Credit apply
			if(obj.credit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Credit",			   	  		   					   				   	
				   	amount				: obj.credit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

	    	this.depositDS.sync();
		},
		//Contact
		loadContact 		: function(id){
			var self = this;			

			this.contactDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.contactDS.view(),
				obj = self.get("obj");
		    	
		    	obj.set("contact_id", view[0].id);
		    	obj.set("payment_term_id", view[0].payment_term_id);		    	
		    	obj.set("locale", view[0].currency[0].locale);				
				obj.set("bill_to", view[0].bill_to);
				obj.set("ship_to", view[0].ship_to);
				
				self.setRate();
				self.setTerm();
				self.loadDeposit();							
			});				

		},
		loadBalance 		: function(){
			var self = this, obj = this.get("obj");			

			this.balanceDS.query({    			
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Invoice" }
				],
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.balanceDS.view(),				
				contact = self.contactDS.get(obj.contact_id),
				balance = view[0].amount,
				creditAllowed = 0;

				if(contact.credit_limit > balance){
					creditAllowed = contact.credit_limit - balance;
				}
						    	
		    	self.set("balance", kendo.toString(balance, "c", obj.locale));
		    	obj.set("credit_allowed", creditAllowed, "c");		
			});				
		},
		contactChanges 		: function(){
			var obj = this.get("obj");

	    	if(obj.contact_id>0){		    			    	
		    	contact = this.contactDS.get(obj.contact_id);		    	
		    	
		    	obj.set("payment_term_id", contact.payment_term_id);
		    	obj.set("vat_id", contact.tax_item_id);
		    	obj.set("locale", contact.currency[0].locale);
		    	obj.set("bill_to", contact.bill_to);
		    	obj.set("ship_to", contact.ship_to);

		    	this.setRate();
		    	this.loadDeposit();
		    	this.loadBalance();		    			    	
	    	}else{
	    		this.set("total_credit", 0);
	    	}
	    },
		//Reference					
		loadReference 		: function(e){			
			var obj = this.get("obj");

			if(obj.reference_type){
				this.set("bolReference", true);

				this.referenceDS.filter([
					{ field: "contact_id", value: obj.contact_id },
					{ field: "status", value: 0 },
					{ field: "type", value: obj.reference_type }
				]);				
			}else{
				this.set("bolReference", false);
			}							
		},
		referenceChanges 	: function(e){
			var self = this, obj = this.get("obj");
			
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);

				//Deposit
				if(obj.deposit>0){
					this.set("showDeposit", true);
				}else{
					this.set("showDeposit", false);
				}

				obj.set("vat_id", ref.vat_id);								
				obj.set("deposit", ref.deposit);
				obj.set("discount", ref.discount);
				obj.set("discount_amount", ref.discount_amount);
				obj.set("fine", ref.fine);
				obj.set("vat", ref.vat);
								
			 	this.referenceLineDS.query({
			 		filter: { field:"transaction_id", value: obj.reference_id },
			 		page: 1,
			 		take: 100
			 	}).then(function(){
			 		var view = self.referenceLineDS.view();					

			 		self.lineDS.data([]);
			 		$.each(view, function(index, value){
			 			self.lineDS.add({					
							transaction_id 		: obj.id,
							item_id 			: value.item_id,
							measurement_id 		: value.measurement_id,							
							description 		: value.description,				
							quantity 	 		: value.quantity,
							price 				: value.price,												
							amount 				: value.amount,
							discount 			: value.discount,
							fine 				: value.fine,
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,							

							item_prices			: value.item_prices
						});
			 		});

			 		self.changes();
			 	});			 				 				 				 				
			}else{
				obj.set("deposit", 0);
				this.set("showDeposit", false);
			}								
		},
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", obj.locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", obj.locale);												
					});
				}

				self.changes();
			});				
		},		
		changes				: function(){
			var self = this, obj = this.get("obj");

			if(this.lineDS.total()>0){			
				var total = 0;										

				$.each(this.lineDS.data(), function(index, value) {				
					total += value.quantity;										
		        });		       	       			
				obj.set("amount", total);									    	
	    	}
		},		
	    segmentChanges 		: function(e) {
			var dataArr = this.get("obj").segments,
			lastIndex = dataArr.length - 1,
			last = this.segmentItemDS.get(dataArr[lastIndex]);
			
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current_index = dataArr[i],
					current = this.segmentItemDS.get(current_index);

					if(current.segment_id === last.segment_id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},
		//Item		
		itemChanges 		: function(e){								
			var self = this, 
			data = e.data,
			transaction_id = 0, 
			obj = this.get("obj"), 
			item = this.itemDS.get(data.item_id),
			rate = obj.rate / item.item_prices[0].rate;
			
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
			
			if(data.item_id>0){		        
		        if(item.is_catalog=="1"){
		        	this.catalogDS.query({
		        		filter: { field:"id", operator:"where_in", value:item.catalogs }
		        	}).then(function(){
		        		self.lineDS.remove(data);

		        		$.each(self.catalogDS.view(), function(index, value){										
							self.lineDS.add({					
								transaction_id 		: transaction_id,
								item_id 			: value.id,
								measurement_id 		: value.item_prices[0].measurement_id,								
								description 		: value.name,				
								quantity 	 		: 1,
								price 				: value.item_prices[0].price*rate,												
								amount 				: value.item_prices[0].price*rate,
								discount 			: 0,
								fine 				: 0,
								rate				: obj.rate,
								locale				: obj.locale,
								has_vat 			: false,
								movement 			: -1,								

								item_prices 		: value.item_prices
							});								
		        		});

		        		self.changes();
		        	});
		        }else if(item.is_assemble=="1"){
		    		data.set("description", item.name);	    		
			        data.set("price", item.price*rate);
			        data.set("measurement_id", 0);
			        data.set("rate", obj.rate);		        	        
			       	data.set("item_prices", []);

			        this.changes();		     
		        }else{
		        	data.set("measurement_id", item.item_prices[0].measurement_id);		        	
		    		data.set("description", item.name);
		    		data.set("quantity", 1);	    		
			        data.set("price", item.item_prices[0].price*rate);			        		        
			        data.set("rate", obj.rate);
			        data.set("item_prices", item.item_prices);			        

			        this.changes();
		    	}		        
	        }                	        	
		},
		measurementChanges 	: function(e){										
			var self = this, data = e.data, obj = this.get("obj");			

			if(data.measurement_id>0){
				$.each(data.item_prices, function(index, value){
					if(value.measurement_id==data.measurement_id){
						var rate = obj.rate / value.rate;						
				        data.set("price", value.price*rate);				       			       
				        
						return false;
					}
				});	    		
		        	        
		        this.changes();
	        }	                	        	
		},					
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);
			this.journalLineDS.data([]);

			this.set("obj", null);
			this.set("sub_total", 0);
			this.set("tax", 0);
			this.set("discount", 0);			
			this.set("fine", 0);	
			this.set("total", 0);				

			this.dataSource.add({				
				contact_id 			: "",
				payment_term_id		: 0,				
				reference_id 		: 0,
				recurring_id 		: "",				
				user_id 			: this.get("user_id"),
				seller_id 			: this.get("user_id"), 	    		
			   	type				: "GRN",
			   	sub_total 			: 0,				   		   					   				   	
			   	amount				: 0,
			   	credit_allowed 		: 0,
			   	credit 				: 0,
			   	deposit 			: 0,
			   	discount 			: 0,		   	
			   	fine 				: 0,
			   	tax 				: 0,
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),
			   	due_date 			: new Date(),			   	
			   	bill_to 			: "",
			   	ship_to 			: "",
			   	memo 				: "",
			   	memo2 				: "",
			   	status 				: 0,
			   	segments 			: [],
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0				
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);

			this.addRow();
			this.setRate();			
		},
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,
				tax_item_id 		: "",
				item_id 			: "",				
				measurement_id 		: 0,				
				description 		: "",				
				quantity 	 		: 1,
				price 				: 0,												
				amount 				: 0,
				discount 			: 0,
				fine 				: 0,
				rate				: obj.rate,
				locale				: obj.locale,							
				movement 			: -1,

				item_prices 		: []
			});																	
		},		
		removeRow 			: function(e){						
			var d = e.data;
			if(this.lineDS.total()>1){				
				this.lineDS.remove(d);
		        this.changes();
	        }		        
		},							    
	    transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this, obj = this.get("obj");

	    	//Warning over credit allowed
	        if(obj.credit_limit>0 && obj.amount>obj.credit_allowed){
	        	alert("Over credit allowed!");		        	
	        }

	    	//Update references
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);
				ref.set("status", 1);
				this.referenceDS.sync();
			} 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();

	    		//Update credit changes
	    		if(this.get("original_credit") !== obj.credit){	    			
	    			this.set("original_credit", obj.credit);    			

					var deposit = this.depositDS.at(0);
					deposit.set("amount", obj.credit*-1);

					this.depositDS.sync();
	    		}	    		

	    		//Update total changes
	    		if(this.get("original_total") == obj.amount){
	    			this.lineDS.sync();	    			
	    		}else{
	    			this.set("original_total", obj.amount);

	    			$.each(this.journalLineDS.data(), function(index, value){										
						value.set("deleted", 1);										
					});

					this.addJournal(obj.id);
	    		}	    		
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){
					//Deposit
					if(obj.deposit > 0 || obj.credit > 0){
						self.saveDeposit(data[0].id);
					}

					//Journal
					self.addJournal(data[0].id);

					//Item line
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);										
					});
					self.lineDS.sync();																	
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();			

			window.history.back();
		},
	    //Journal	        
	    addJournal 			: function(transaction_id){
	    	var self = this,
	    	obj = this.get("obj"),
	    	contact = this.contactDS.get(obj.contact_id),	    				    	
	    	saleList = {},
	    	taxList = {},
	    	inventoryList = {},
			cogsList = {};			
			
			//Arrange sale, cogs, inventory
			$.each(this.lineDS.data(), function(index, value){										
				var item = self.itemDS.get(value.item_id),
				amount = value.quantity * value.price;				
				
				//Add sale list
				var incomeID = item.income_account_id;																				
				if(incomeID>0){
					if(saleList[incomeID]===undefined){
						saleList[incomeID]={"id": incomeID, "amount": amount};						
					}else{											
						if(saleList[incomeID].id===incomeID){
							saleList[incomeID].amount += amount;
						}else{
							saleList[incomeID]={"id": incomeID, "amount": amount};
						}
					}
				}

				//Add tax list																							
				if(value.tax_item_id>0){
					var taxItem = self.taxItemDS.get(value.tax_item_id),
					taxID = taxItem.account_id,
					taxAmt = value.amount*taxItem.rate;

					if(taxList[taxID]===undefined){
						taxList[taxID]={"id": taxID, "amount": taxAmt};						
					}else{											
						if(taxList[taxID].id===taxID){
							taxList[taxID].amount += taxAmt;
						}else{
							taxList[taxID]={"id": taxID, "amount": taxAmt};
						}
					}
				}				
				
				//Inventory
				if(item.item_type_id==1){
					//Add cogs list
					var itemCost = value.quantity*item.cost,
					cogsID = item.cogs_account_id;				
					if(cogsList[cogsID]===undefined){
						cogsList[cogsID]={"id": cogsID, "amount": itemCost};						
					}else{											
						if(cogsList[cogsID].id===cogsID){
							cogsList[cogsID].amount += itemCost;
						}else{
							cogsList[cogsID]={"id": cogsID, "amount": itemCost};
						}
					}						

					//Add inventory list
					var inventoryID = item.inventory_account_id;
					if(inventoryList[inventoryID]===undefined){
						inventoryList[inventoryID]={"id": inventoryID, "amount": itemCost};						
					}else{											
						if(inventoryList[inventoryID].id===inventoryID){
							inventoryList[inventoryID].amount += itemCost;
						}else{
							inventoryList[inventoryID]={"id": inventoryID, "amount": itemCost};
						}
					}
				}					  	
			});//End Foreach Loop			

			//Start journal
			//A/R on Dr
			this.journalLineDS.add({					
				transaction_id 		: transaction_id,
				account_id 			: contact.account_id,				
				contact_id 			: obj.contact_id,				
				description 		: "",
				reference_no 		: "",
				segments 	 		: [],								
				dr 	 				: obj.amount,
				cr 					: 0,				
				rate				: obj.rate,
				locale				: obj.locale
			});

			//Discount on Dr			
			if(obj.discount > 0){				
				this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: contact.discount_account_id,				
					contact_id 			: obj.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: [],								
					dr 	 				: obj.discount,
					cr 					: 0,				
					rate				: obj.rate,
					locale				: obj.locale
				});
			}

			//Deposit and Credit on Dr
			if(obj.deposit > 0 || obj.credit > 0){				
				this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: contact.deposit_account_id,				
					contact_id 			: obj.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: [],								
					dr 	 				: obj.deposit + obj.credit,
					cr 					: 0,				
					rate				: obj.rate,
					locale				: obj.locale
				});
			}

			//Sale accounts on Cr		
			if(!jQuery.isEmptyObject(saleList)){				
				$.each(saleList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});										
				});
			}

			//Tax on Cr					
			if(!jQuery.isEmptyObject(taxList)){				
				$.each(taxList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});										
				});
			}	

			//Inventory to journal
			//COGS on Dr 			
			if(!jQuery.isEmptyObject(cogsList)){							
				$.each(cogsList, function(index, value){				
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: value.amount,
						cr 					: 0,				
						rate				: obj.rate,
						locale				: obj.locale
					});								
				});							
			}
			//Inventory on Cr
			if(!jQuery.isEmptyObject(inventoryList)){
				$.each(inventoryList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});						
				});
			}

			this.journalLineDS.sync();
		},
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);				
				
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("discount", recur.discount);
				obj.set("fine", recur.fine);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,							
							item_id 			: value.item_id,									
							description 		: value.description,							
							quantity 			: value.quantity,
							price 				: value.price,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,

							item_prices 		: value.item_prices
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({				
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	discount 			: obj.discount,
			   	fine 				: obj.fine,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,					
					item_id 			: value.item_id,								
					description 		: value.description,													
					amount 	 			: value.amount,
					discount 			: value.discount,
					fine 				: value.fine,						
					rate				: value.rate,
					locale				: value.locale,
					has_vat 			: value.has_vat
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);
	    		
	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	 		
	});
	banhji.vendorDeposit =  kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "transactions"),						
		lineDS  			: dataStore(apiUrl + "account_lines"),
		referenceLineDS		: dataStore(apiUrl + "account_lines"),
		referenceDS			: dataStore(apiUrl + "transactions"),
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "account_lines"),						
		currencyDS 			: dataStore(apiUrl + "currencies"),
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		paymentMethodDS		: dataStore(apiUrl + "payment_methods"),
		contactDS 			: banhji.source.customerDS,
		depositAccountDS 	: banhji.source.depositAccountDS,
		segmentItemDS 		: banhji.source.segmentItemDS,
		accountDS 			: banhji.source.cashAccountDS,
		frequencyList 		: banhji.source.frequencyList,
		monthList 			: banhji.source.monthList,	
		monthOptionList 	: banhji.source.monthOptionList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,						
		referenceTypes 		: [
			{ id:"Purchase_Order", name:"Purchase Order" }
		],						
		showRef 			: true,
		showName 			: false,
		showSegment 		: false,
		showMonthOption 	: false,
		showMonth 			: false,
		bolReference 		: false,
		showWeek 			: false,
		showDay 			: false,		
		obj 				: null,		
		isEdit 				: false,			
		uer_id				: banhji.userManagement.getLogin() === null ? 0 : banhji.userManagement.getLogin().id,
		total				: 0,													
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);							
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},
		loadObj 			: function(id,is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 1
			}).then(function(e){
				var view = self.dataSource.view();

				if(view.length>0){	       
					self.set("obj", view[0]);					
		        }				

				self.lineDS.query({
					filter: { field: "transaction_id", value: id },
					page: 1,
					take: 100
				});								
			});				
		},			
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", view[0].locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", banhji.institute.locale);												
					});
				}
			});				
		},															
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);
			this.journalLineDS.data([]);

			this.set("obj", null);
			this.set("total", 0);								

			this.dataSource.add({
				recurring_id 		: "",
				account_id 			: "",				
				user_id 			: this.get("uer_id"), 	
				reference_id	 	: 0,    			    		
			   	type				: "Deposit", //required			   		   				   		   					   				   	
			   	amount				: 0,
			   	rate				: 1,			   	
			   	locale 				: banhji.institute.locale,			   	
			   	issued_date 		: new Date(),			   	   	
			   	memo 				: "",
			   	memo2 				: "",
			   	segments 			: [],
			   	is_journal 			: 1,
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0			
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);			
			this.addRow();
			this.setRate();				
		},
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,
				payment_method_id 	: 0,
				account_id 			: "",				
				contact_id 			: "",				
				description 		: "",
				reference_no 		: "",
				segments 	 		: [],								
				amount 	 			: 0,							
				rate				: obj.rate,
				locale				: obj.locale
			});																	
		},		
		remove 				: function(e){						
			var d = e.data;
							
			this.lineDS.remove(d);
        	this.changes();	        	        
		},
		changes				: function(){
			var obj = this.get("obj");
			
			if(this.lineDS.total()>0){			
				var sum = 0;								
				
				$.each(this.lineDS.data(), function(index, value) {
					sum += value.amount;
		        });		       	

		        this.set("total", kendo.toString(sum, "c0", obj.locale));		        
		        obj.set("amount", sum);		       								    	
	    	}else{
	    		this.set("total", 0);		        
		        obj.set("amount", 0);				
	    	}   	
		},
		contactChanges 		: function(){
			var obj = this.get("obj");

	    	if(obj.contact_id>0){		    			    	
		    	contact = this.contactDS.get(obj.contact_id);		    	
		    	
		    	obj.set("account_id", contact.deposit_account_id);
		    	obj.set("locale", contact.currency[0].locale);
		    

		    	this.setRate();		    		    			    	
	    	}
	    },
				
		segmentChanges 		: function(e) {
			var dataArr = this.get("obj").segments,
			lastIndex = dataArr.length - 1,
			last = this.segmentItemDS.get(dataArr[lastIndex]);
			
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current_index = dataArr[i],
					current = this.segmentItemDS.get(current_index);

					if(current.segment_id === last.segment_id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},			  
		transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this; 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();
	    		this.lineDS.sync();
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);
												
					});

					self.lineDS.sync();
					self.addJournal(data[0].id);		
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();
			
			window.history.back();
		},
		addJournal 			: function(transaction_id){
	    	var self = this,
	    	sum =0 ,
	    	obj = this.get("obj"),
	    	contact = this.contactDS.get(obj.contact_id);			

			//Cash account on DR
					
			$.each(this.lineDS.data(), function(index, value){
				sum += value.amount;
				self.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: value.account_id,				
					contact_id 			: value.contact_id,				
					description 		: "",
					reference_no 		: value.reference_no,
					segments 	 		: [],								
					dr 	 				: 0,	
					cr 					: value.amount,			
					rate				: value.rate,
					locale				: value.locale
				});
			});

			this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: obj.account_id,				
					contact_id 			: obj.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: obj.segments,								
					dr 	 				: sum,	
					cr 					: 0,			
					rate				: obj.rate,
					locale				: obj.locale
				});
			

			this.journalLineDS.sync();
		},		
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);
				
				obj.set("account_id", recur.account_id);
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,
							payment_method_id 	: value.payment_method_id,
							account_id 			: value.account_id,				
							contact_id 			: value.contact_id,				
							description 		: value.description,
							reference_no 		: value.reference_no,
							segments 	 		: value.segments,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({
				account_id 			: obj.account_id,
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,
					payment_method_id 	: value.payment_method_id,
					account_id 			: value.account_id,
					contact_id 			: value.contact_id,				
					description 		: value.description,
					reference_no 		: value.reference_no,
					segments 	 		: value.segmets,								
					amount 	 			: value.amount,						
					rate				: value.rate,
					locale				: value.locale
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);

	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	    	   
	});
	banhji.purchase =  kendo.observable({
		dataSource 			: dataStore(apiUrl + "transactions"),
		lineDS  			: dataStore(apiUrl + "transactions/line"),
		accountLineDS  		: dataStore(apiUrl + "account_lines"),
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		additionalCostDS 	: dataStore(apiUrl + "transactions"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "transactions/line"),
		referenceDS			: dataStore(apiUrl + "transactions"),
		referenceLineDS		: dataStore(apiUrl + "transactions/line"),
		depositDS			: dataStore(apiUrl + "transactions"),		
		balanceDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		totalDepositDS  	: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		currencyDS  		: banhji.source.currencyDS,
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		contactListDS 		: banhji.source.supplierDS,
		contactDS  			: banhji.source.supplierDS,
		selectAccountDS  	: banhji.source.accountDS,		
		accountDS  			: banhji.source.accountDS,
		itemDS  			: banhji.source.itemDS,
		taxItemDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "tax_items",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"tax_type_id", value: 1}
			],					
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		catalogDS			: dataStore(apiUrl + "items"),
		assemblyDS			: dataStore(apiUrl + "items/assembly"),
		paymentTermDS 	: dataStore(apiUrl + "payment_terms"),
		paymentMethodDS 	: dataStore(apiUrl + "payment_methods"),
		segmentItemDS		: banhji.source.segmentItemDS,		
		referenceTypes 		: [
			{ id:"PO", name:"Purchase Order" },
			{ id:"GRN", name:"Goods Received Note" }
		],
		typeList 			: [
			{ id:"Cash_Purchase", name:"Cash" },
			{ id:"Credit_Purchase", name:"Credit" }
		],
		statusList 			: [
			{ id:1, name:"Cash" },
			{ id:0, name:"Credit" }
		],
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,			    
	    bgColor 			: "#D5DBDB",
	    showDeposit 		: false,	    
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,
		obj 				: null,
		isEdit 				: false,
		isCash 				: true,
		bolReference 		: false,
		showDiscount 		: false,
		showAdditionalCost 	: false,
		showRef 			: true,
		showName 			: false,
		showSegment 		: false,
		showDueDateColumn	: false,								
		sub_total 			: 0,
		tax 				: 0,
		discount 			: 0,
		balance 			: 0,
		total_credit		: 0,
		total 				: 0,
		additional_cost 	: 0,
		original_total 		: 0,
		original_credit 	: 0,
		user_id				: banhji.source.user_id,
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);
				this.set("original_total", 0);
				this.set("original_credit", 0);

				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					this.set("original_total", 0);
					this.set("original_credit", 0);										
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},	    			
		loadObj 			: function(id, is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}			

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.dataSource.view();				

				self.set("sub_total", kendo.toString(view[0].sub_total, "c", view[0].locale));
				self.set("discount", kendo.toString(view[0].discount, "c", view[0].locale));
		        self.set("tax", kendo.toString(view[0].tax, "c", view[0].locale));
		        self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));
		        self.set("additional_cost", kendo.toString(view[0].additional_cost, "c", view[0].locale));
								
				self.lineDS.filter({ field: "transaction_id", value: view[0].id });
				self.accountLineDS.filter({ field: "transaction_id", value: view[0].id });
				self.additionalCostDS.filter({ field: "reference_id", value: view[0].id });
				self.journalLineDS.filter({ field: "transaction_id", value: view[0].id });				
				self.depositDS.filter([
					{ field: "reference_id", value: view[0].id },
					{ field: "type", value: "Credit" }
				]);

				self.set("obj", view[0]);
				self.set("original_total", view[0].amount);
				self.set("original_credit", view[0].credit);

				if(view[0].additional_cost>0){
					self.set("showAdditionalCost", true);
				}

				if(view[0].discount>0){
					self.set("showDiscount", true);
				}

				self.loadDeposit();
				self.typeChanges();				
			});				
		},
		//Deposit
		loadDeposit 		: function(){
			var self = this, obj = this.get("obj");

			this.totalDepositDS.query({
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Credit" }
				],
				page: 1,
				pageSize: 100
			}).then(function(){
				var view = self.totalDepositDS.view(),
				amount = 0;

				if(self.get("isEdit")){
					amount = view[0].amount + obj.credit;
				}else{
					amount = view[0].amount;
				}

				self.set("total_credit", amount);
			});
		},		
		saveDeposit 		: function(transaction_id){
			var obj = this.get("obj");		

			this.depositDS.data([]);

			//Deposit apply
			if(obj.deposit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Deposit",			   	  		   					   				   	
				   	amount				: obj.deposit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

			//Credit apply
			if(obj.credit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Credit",			   	  		   					   				   	
				   	amount				: obj.credit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

	    	this.depositDS.sync();
		},
		//Contact
		loadContact 		: function(id){
			var self = this;			

			this.contactDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.contactDS.view(),
				obj = self.get("obj");
		    	
		    	obj.set("contact_id", view[0].id);
		    	obj.set("payment_term_id", view[0].payment_term_id);
		    	obj.set("payment_method_id", view[0].payment_method_id);		    	
		    	obj.set("locale", view[0].currency[0].locale);				
				obj.set("bill_to", view[0].bill_to);
				obj.set("ship_to", view[0].ship_to);
				
				self.setRate();				
				self.loadDeposit();							
			});
		},
		loadBalance 		: function(){
			var self = this, obj = this.get("obj");			

			this.balanceDS.query({    			
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Credit_Purchase" }
				],
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.balanceDS.view(),				
				contact = self.contactDS.get(obj.contact_id),
				balance = view[0].amount,
				creditAllowed = 0;

				if(contact.credit_limit > balance){
					creditAllowed = contact.credit_limit - balance;
				}
						    	
		    	self.set("balance", kendo.toString(balance, "c", obj.locale));
		    	obj.set("credit_allowed", creditAllowed, "c");		
			});				
		},
		contactChanges 		: function(){
			var obj = this.get("obj");

	    	if(obj.contact_id>0){		    			    	
		    	contact = this.contactDS.get(obj.contact_id);		    	
		    	console.log(contact);
		    	// obj.set("account_id", contact.account_id);
		    	// obj.set("payment_term_id", contact.payment_term_id);
		    	// obj.set("payment_method_id", contact.payment_method_id);		    	
		    	// obj.set("locale", contact.currency[0].locale);
		    	// obj.set("bill_to", contact.bill_to);
		    	// obj.set("ship_to", contact.ship_to);

		    	// this.setRate();		    	
		    	// this.loadDeposit();
		    	// this.loadBalance();

	    	}else{
	    		this.set("total_credit", 0);
	    	}
	    },
		//Reference					
		loadReference 		: function(e){			
			var obj = this.get("obj");

			if(obj.reference_type){
				this.set("bolReference", true);

				this.referenceDS.filter([
					{ field: "contact_id", value: obj.contact_id },
					{ field: "status", value: 0 },
					{ field: "type", value: obj.reference_type }
				]);				
			}else{
				this.set("bolReference", false);
			}							
		},
		referenceChanges 	: function(e){
			var self = this, obj = this.get("obj");
			
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);

				//Deposit
				if(obj.deposit>0){
					this.set("showDeposit", true);
				}else{
					this.set("showDeposit", false);
				}
												
				obj.set("deposit", ref.deposit);
				obj.set("discount", ref.discount);
				obj.set("discount_amount", ref.discount_amount);
				obj.set("fine", ref.fine);
				obj.set("tax", ref.tax);
								
			 	this.referenceLineDS.query({
			 		filter: { field:"transaction_id", value: obj.reference_id },
			 		page: 1,
			 		take: 100
			 	}).then(function(){
			 		var view = self.referenceLineDS.view();					

			 		self.lineDS.data([]);
			 		$.each(view, function(index, value){
			 			self.lineDS.add({					
							transaction_id 		: obj.id,
							item_id 			: value.item_id,
							measurement_id 		: value.measurement_id,							
							description 		: value.description,				
							quantity 	 		: value.quantity,
							price 				: value.price,												
							amount 				: value.amount,
							discount 			: value.discount,
							fine 				: value.fine,
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,							

							item_prices			: value.item_prices
						});
			 		});

			 		self.changes();
			 	});			 				 				 				 				
			}else{
				obj.set("deposit", 0);
				this.set("showDeposit", false);
			}								
		},
		//Currency
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", obj.locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", obj.locale);												
					});
				}

				self.changes();
			});				
		},	    
		//Item		
		itemChanges 		: function(e){								
			var self = this, 
			data = e.data,
			transaction_id = 0, 
			obj = this.get("obj"), 
			item = this.itemDS.get(data.item_id),
			rate = obj.rate / item.item_prices[0].rate;
			
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
			
			if(data.item_id>0){		        
		        if(item.is_catalog=="1"){
		        	this.catalogDS.query({
		        		filter: { field:"id", operator:"where_in", value:item.catalogs }
		        	}).then(function(){
		        		self.lineDS.remove(data);

		        		$.each(self.catalogDS.view(), function(index, value){										
							self.lineDS.add({					
								transaction_id 		: transaction_id,
								item_id 			: value.id,
								measurement_id 		: value.item_prices[0].measurement_id,								
								description 		: value.name,				
								quantity 	 		: 1,
								price 				: value.item_prices[0].price*rate,												
								amount 				: value.item_prices[0].price*rate,
								discount 			: 0,
								fine 				: 0,
								rate				: obj.rate,
								locale				: obj.locale,
								has_vat 			: false,
								movement 			: 1,								

								item_prices 		: value.item_prices
							});								
		        		});

		        		self.changes();
		        	});
		        }else if(item.is_assemble=="1"){
		    		data.set("description", item.name);	    		
			        data.set("price", item.price*rate);
			        data.set("measurement_id", 0);
			        data.set("rate", obj.rate);		        	        
			       	data.set("item_prices", []);

			        this.changes();		     
		        }else{
		        	data.set("measurement_id", item.item_prices[0].measurement_id);		        	
		    		data.set("description", item.name);
		    		data.set("quantity", 1);	    		
			        data.set("price", 0);			        		        
			        data.set("rate", obj.rate);
			        data.set("item_prices", item.item_prices);			        

			        this.changes();
		    	}		        
	        }                	        	
		},
		measurementChanges 	: function(e){										
			var self = this, data = e.data, obj = this.get("obj");			

			if(data.measurement_id>0){
				$.each(data.item_prices, function(index, value){
					if(value.measurement_id==data.measurement_id){
						var rate = obj.rate / value.rate;						
				        data.set("price", value.price*rate);				       			       
				        
						return false;
					}
				});	    		
		        	        
		        this.changes();
	        }	                	        	
		},		
		//Account
		addRowAccount		: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.accountLineDS.add({					
				transaction_id 		: transaction_id,
				tax_item_id 		: "",				
				account_id 			: "",								
				description 		: "",
				reference_no 		: "",
				segments 	 		: [],								
				amount 	 			: 0,							
				rate				: obj.rate,
				locale				: obj.locale
			});																	
		},
		removeRowAccount	: function(e){						
			var d = e.data;
			if(this.lineDS.total()==0 && this.accountLineDS.total()==0){

			}else{				
				this.accountLineDS.remove(d);
		        this.changes();
	        }		        
		},
		//Additional Cost
		addRowAdditionalCost: function(){
			var self = this, transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}

			this.additionalCostDS.add({				
				contact_id 			: "",
				payment_term_id		: 0,				
				reference_id 		: transaction_id,
				recurring_id 		: "",
				tax_item_id 		: "",				
				user_id 			: this.get("user_id"),
				seller_id 			: this.get("user_id"), 	    		
			   	type				: "Cash_Purchase",
			   	sub_total 			: 0,				   		   					   				   	
			   	amount				: 0,
			   	credit_allowed 		: 0,
			   	credit 				: 0,
			   	deposit 			: 0,
			   	discount 			: 0,		   	
			   	fine 				: 0,
			   	tax 				: 0,
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),
			   	due_date 			: new Date(),			   	
			   	bill_to 			: "",
			   	ship_to 			: "",
			   	memo 				: "",
			   	memo2 				: "",
			   	status 				: 0,
			   	segments 			: [],
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0				
	    	});

	    	$.each(this.lineDS.data(), function(index, value) {	    		
	    		if(value.item_id>0){
	    			var item = self.itemDS.get(value.item_id);

	    			if(item.item_type_id==1){
	    				value.set("additional_applied", true);
	    			}
	    		}
	    	});					
		},
		removeRowAdditionalCost: function(e){						
			var d = e.data;
							
			this.additionalCostDS.remove(d);
	        this.changes();	        		        
		},
		typeColumnChanges 	: function(e){
			var data = e.data;

			if(data.type=="Cash_Purchase"){
				data.set("status", 1);
				this.set("showDueDateColumn", false);
			}else{
				data.set("status", 0);
				this.set("showDueDateColumn", true);				
			}
		},			
		typeChanges 		: function(){
			var obj = this.get("obj");

			if(obj.type=="Cash_Purchase"){
				this.set("isCash", true);				

				this.selectAccountDS.filter({ field:"account_type_id", value: 6 });
			}else{
				this.set("isCash", false);				

				this.selectAccountDS.filter({ field:"account_type_id", value: 13 });
			}			
		},
		segmentChanges 		: function(e) {
			var dataArr = this.get("obj").segments,
			lastIndex = dataArr.length - 1,
			last = this.segmentItemDS.get(dataArr[lastIndex]);
			
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current_index = dataArr[i],
					current = this.segmentItemDS.get(current_index);

					if(current.segment_id === last.segment_id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},
		changes				: function(){
			var self = this, obj = this.get("obj");

			if(this.lineDS.total()>0 || this.accountLineDS.total()>0 || this.additionalCostDS.total()>0){			
				var total = 0, subTotal = 0, discount =0, tax = 0, 
				countAdditCheck = 0, amountAdditCheck = 0, additionalCost = 0;													
				
				//Item
				$.each(this.lineDS.data(), function(index, value) {				
					var amt = value.quantity * value.price;					

					//Discount by line
					if(value.discount>0){										
						var discount_amount = amt * value.discount;
						amt -= discount_amount;
						discount += discount_amount;																	
					}

					//Tax by line
					if(value.tax_item_id>0){
						var taxItem = self.taxItemDS.get(value.tax_item_id);										
						tax += amt * taxItem.rate;																	
					}

					//Count additional cost and check
					if(value.additional_applied){
						amountAdditCheck += amt;
						countAdditCheck++;
					}
										
					subTotal += amt;
					value.set("amount", amt);					
		        });

				//Account
		        $.each(this.accountLineDS.data(), function(index, value) {
					//Tax by line
					if(value.tax_item_id>0){
						var taxItem = self.taxItemDS.get(value.tax_item_id);										
						tax += value.amount * taxItem.rate;																	
					}

					subTotal += value.amount;					
		        });

		        //Additional Cost
		        $.each(this.additionalCostDS.data(), function(index, value) {
		        	var additionalTax = 0;
		        	//Tax by line
					if(value.tax_item_id>0){
						var taxItem = self.taxItemDS.get(value.tax_item_id);										
						additionalTax += value.sub_total * taxItem.rate;
						tax += additionalTax;																							
					}

					additionalCost += value.sub_total;

					value.set("amount", value.sub_total + additionalTax);									
		        });

		        //Apply additional cost
		        if(additionalCost>0){
		        	this.set("showAdditionalCost", true);

		        	if(countAdditCheck>0){
				        $.each(this.lineDS.data(), function(index, value) {
							if(value.additional_applied){
					        	if(obj.additional_apply=="Equal"){
					        		//subTotal += singleAdditionalCost;
					        		var singleAdditionalCost = additionalCost / countAdditCheck;
					        		value.set("additional_cost", singleAdditionalCost);
					        	}else{
					        		var percentageAdditionalCheck = value.amount / amountAdditCheck;
					        		var weightedAdditionalCost = additionalCost * percentageAdditionalCheck;

					        		//subTotal += weightedAdditionalCost;
					        		value.set("additional_cost", weightedAdditionalCost);
				        		}
				        	}else{
				        		value.set("additional_cost", 0);
				        	}			        			        	
				        });
			    	}
		        }else{
		        	this.set("showAdditionalCost", false);

		        	$.each(this.lineDS.data(), function(index, value) {
		        		value.set("additional_cost", 0);
		        		value.set("additional_applied", false);
		        	});
		        }	

		    	//Total
		        total = subTotal + tax;

		        //Apply Deposit
		        if(obj.deposit > 0){
		        	if(obj.deposit <= total){
		        		total -= obj.deposit;
		        	}else{
		        		obj.set("deposit", total);
		        		total = 0;
		        	}
		        }

		        //Apply Credit
		        if(obj.credit > 0){
		        	if(obj.credit <= this.get("total_credit")){
			        	if(obj.credit <= total){
			        		total -= obj.credit;
			        	}else{
			        		obj.set("credit", total);
			        		total = 0;
			        	}
		        	}else{
		        		alert("Over Credit To Apply!");
		        		obj.set("credit", 0);
		        	}
		        }

		        //Warning over credit allowed
		        if(obj.credit_allowed>0 && total>obj.credit_allowed){
		        	this.set("bgColor", "Gold");		        	
		        }else{
		        	this.set("bgColor", "#D5DBDB");
		        }

		        this.set("sub_total", kendo.toString(subTotal, "c", obj.locale));
		        this.set("discount", kendo.toString(discount, "c", obj.locale));
		        this.set("tax", kendo.toString(tax, "c", obj.locale));
		        this.set("total", kendo.toString(total, "c", obj.locale));
		        this.set("additional_cost", kendo.toString(additionalCost, "c", obj.locale));

		        obj.set("sub_total", subTotal);
		        obj.set("discount", discount);
		        obj.set("tax", tax);			
				obj.set("amount", total);
				obj.set("additional_cost", additionalCost);									    	
	    	}
		},					
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);
			this.accountLineDS.data([]);
			this.journalLineDS.data([]);
			this.additionalCostDS.data([]);

			this.set("obj", null);
			this.set("sub_total", 0);
			this.set("tax", 0);
			this.set("discount", 0);			
			this.set("total", 0);
			this.set("additional_cost", 0);				

			this.dataSource.add({				
				contact_id 			: "",
				payment_term_id		: 0,
				payment_method_id	: 0,				
				reference_id 		: 0,
				recurring_id 		: "",				
				user_id 			: this.get("user_id"),
				seller_id 			: this.get("user_id"), 	    		
			   	type				: "Cash_Purchase",
			   	sub_total 			: 0,				   		   					   				   	
			   	amount				: 0,
			   	credit_allowed 		: 0,
			   	credit 				: 0,
			   	deposit 			: 0,
			   	discount 			: 0,		   	
			   	fine 				: 0,
			   	tax 				: 0,
			   	additional_cost 	: 0,
			   	additional_apply 	: "Equal",
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),
			   	bill_date 			: new Date(),
			   	due_date 			: new Date(),			   	
			   	bill_to 			: "",
			   	ship_to 			: "",
			   	memo 				: "",
			   	memo2 				: "",
			   	status 				: 0,
			   	check_no 			: "",
			   	segments 			: [],
			   	is_journal 			: 1,
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0				
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);

			this.addRow();			
			this.setRate();
			this.typeChanges();			
		},		
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,
				tax_item_id 		: "",
				item_id 			: "",				
				measurement_id 		: 0,				
				description 		: "",				
				quantity 	 		: 1,
				price 				: 0,												
				amount 				: 0,
				discount 			: 0,
				fine 				: 0,
				rate				: obj.rate,
				locale				: obj.locale,
				additional_cost 	: 0,
				additional_applied 	: false,							
				movement 			: 1,

				item_prices 		: []
			});																	
		},						
		removeRow 			: function(e){						
			var d = e.data;
			if(this.lineDS.total()==0 && this.accountLineDS.total()==0){

			}else{				
				this.lineDS.remove(d);
		        this.changes();
	        }		        
		},											    
	    transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this, obj = this.get("obj");

	    	//Warning over credit allowed
	        if(obj.credit_limit>0 && obj.amount>obj.credit_allowed){
	        	alert("Over credit allowed!");		        	
	        }

	    	//Update references
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);
				ref.set("status", 1);
				this.referenceDS.sync();
			} 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();
	    		this.lineDS.sync();	    		
	    		this.accountLineDS.sync();
	    		this.additionalCostDS.sync();

	    		//Update credit changes
	    		if(this.get("original_credit") !== obj.credit){	    			
	    			this.set("original_credit", obj.credit);    			

					var deposit = this.depositDS.at(0);
					deposit.set("amount", obj.credit*-1);

					this.depositDS.sync();
	    		}	    		

	    		//Update total changes
	    		if(this.get("original_total") !== obj.amount){	    		
	    			this.set("original_total", obj.amount);

	    			$.each(this.journalLineDS.data(), function(index, value){										
						value.set("deleted", 1);										
					});

					this.addJournal(obj.id);
	    		}	    		
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){
					//Deposit
					if(obj.deposit > 0 || obj.credit > 0){
						self.saveDeposit(data[0].id);
					}

					//Journal
					self.addJournal(data[0].id);

					//Item line
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);										
					});

					//Account line
					$.each(self.accountLineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);										
					});

					//Additional Cost line
					$.each(self.additionalCostDS.data(), function(index, value){										
						value.set("reference_id", data[0].id);										
					});

					self.lineDS.sync();
					self.accountLineDS.sync();
					self.additionalCostDS.sync();																	
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();
			this.accountLineDS.cancelChanges();
			this.additionalCostDS.cancelChanges();			

			window.history.back();
		},
	    //Journal	        
	    addJournal 			: function(transaction_id){
	    	var self = this,
	    	obj = this.get("obj"),
	    	contact = this.contactDS.get(obj.contact_id),	    	
	    	taxList = {},
	    	inventoryList = {};			
			
			//Item line
			$.each(this.lineDS.data(), function(index, value){										
				var item = self.itemDS.get(value.item_id);				

				//Add tax list																							
				if(value.tax_item_id>0){
					var taxItem = self.taxItemDS.get(value.tax_item_id),
					taxID = taxItem.account_id,
					taxAmt = value.amount*taxItem.rate;
					console.log("item: "+taxAmt);
					if(taxList[taxID]===undefined){
						taxList[taxID]={"id": taxID, "amount": taxAmt};						
					}else{											
						if(taxList[taxID].id===taxID){
							taxList[taxID].amount += taxAmt;
						}else{
							taxList[taxID]={"id": taxID, "amount": taxAmt};
						}
					}
				}				
				
				//Add Inventory
				if(item.item_type_id==1){					
					var inventoryID = item.inventory_account_id,
					inventoryAmt = (value.quantity*value.price) + value.additional_cost;
					if(inventoryList[inventoryID]===undefined){
						inventoryList[inventoryID]={"id": inventoryID, "amount": inventoryAmt };						
					}else{											
						if(inventoryList[inventoryID].id===inventoryID){
							inventoryList[inventoryID].amount += inventoryAmt;
						}else{
							inventoryList[inventoryID]={"id": inventoryID, "amount": inventoryAmt};
						}
					}
				}					  	
			});

			//Account line
			$.each(this.accountLineDS.data(), function(index, value){				
				//Add tax list																							
				if(value.tax_item_id>0){
					var taxItem = self.taxItemDS.get(value.tax_item_id),
					taxID = taxItem.account_id,
					taxAmt = value.amount*taxItem.rate;
					console.log("account: "+taxAmt);
					if(taxList[taxID]===undefined){
						taxList[taxID]={"id": taxID, "amount": taxAmt};						
					}else{											
						if(taxList[taxID].id===taxID){
							taxList[taxID].amount += taxAmt;
						}else{
							taxList[taxID]={"id": taxID, "amount": taxAmt};
						}
					}
				}								  	
			});

			//Additional Cost line
			$.each(this.additionalCostDS.data(), function(index, value){				
				//Add tax list																							
				if(value.tax_item_id>0){
					var taxItem = self.taxItemDS.get(value.tax_item_id),
					taxID = taxItem.account_id,
					taxAmt = value.sub_total*taxItem.rate;
					console.log("additional cost: "+taxAmt);
					if(taxList[taxID]===undefined){
						taxList[taxID]={"id": taxID, "amount": taxAmt};						
					}else{											
						if(taxList[taxID].id===taxID){
							taxList[taxID].amount += taxAmt;
						}else{
							taxList[taxID]={"id": taxID, "amount": taxAmt};
						}
					}
				}								  	
			});

			//Start journal
			//Inventory on Dr
			if(!jQuery.isEmptyObject(inventoryList)){
				$.each(inventoryList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: value.amount,
						cr 					: 0,				
						rate				: obj.rate,
						locale				: obj.locale
					});						
				});
			}

			//Expense Account on Dr
			$.each(this.accountLineDS.data(), function(index, value){
				self.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: value.account_id,				
					contact_id 			: obj.contact_id,				
					description 		: value.description,
					reference_no 		: value.reference_no,
					segments 	 		: value.segments,								
					dr 	 				: value.amount,
					cr 					: 0,				
					rate				: obj.rate,
					locale				: obj.locale
				});
			});			

			//Tax account on Dr
			if(!jQuery.isEmptyObject(taxList)){				
				$.each(taxList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: value.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: value.amount,
						cr 					: 0,				
						rate				: obj.rate,
						locale				: obj.locale
					});										
				});
			}

			//Cash OR A/P on Cr
			this.journalLineDS.add({					
				transaction_id 		: transaction_id,
				account_id 			: obj.account_id,				
				contact_id 			: obj.contact_id,				
				description 		: "",
				reference_no 		: "",
				segments 	 		: [],								
				dr 	 				: 0,
				cr 					: obj.amount + obj.additional_cost,				
				rate				: obj.rate,
				locale				: obj.locale
			});			

			//Discount on Cr			
			if(obj.discount > 0){				
				this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: contact.discount_account_id,				
					contact_id 			: obj.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: [],								
					dr 	 				: 0,
					cr 					: obj.discount,				
					rate				: obj.rate,
					locale				: obj.locale
				});
			}			

			this.journalLineDS.sync();
		},
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);				
				
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("discount", recur.discount);
				obj.set("fine", recur.fine);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,							
							item_id 			: value.item_id,									
							description 		: value.description,							
							quantity 			: value.quantity,
							price 				: value.price,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,

							item_prices 		: value.item_prices
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({				
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	discount 			: obj.discount,
			   	fine 				: obj.fine,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,					
					item_id 			: value.item_id,								
					description 		: value.description,													
					amount 	 			: value.amount,
					discount 			: value.discount,
					fine 				: value.fine,						
					rate				: value.rate,
					locale				: value.locale,
					has_vat 			: value.has_vat
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);
	    		
	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	 		
	});
	banhji.purchaseReturn =  kendo.observable({
		dataSource 			: dataStore(apiUrl + "transactions"),
		lineDS  			: dataStore(apiUrl + "transactions/line"),		
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "transactions/line"),
		referenceDS			: dataStore(apiUrl + "transactions"),
		referenceLineDS		: dataStore(apiUrl + "transactions/line"),
		returnDS			: dataStore(apiUrl + "transactions"),
		invoiceDS			: dataStore(apiUrl + "transactions"),		
		currencyDS  		: banhji.source.currencyDS,
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		contactDS  			: banhji.source.supplierDS,
		itemDS  			: banhji.source.itemDS,
		taxItemDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "tax_items",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"tax_type_id", value: 1}
			],					
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		accountDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "accounts",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: { field:"account_type_id", value: 6 },
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		catalogDS			: dataStore(apiUrl + "items"),
		assemblyDS			: dataStore(apiUrl + "items/assembly"),		
		segmentItemDS		: banhji.source.segmentItemDS,
		optionList 			: [
			{ id:"Offset_Invoice", name:"Charge Against Invoice" },
			{ id:"Credit", name:"Add To Credit" },
			{ id:"Credit_Note", name:"Cash Refund" }
		],		
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,			    
	    bgColor 			: "#D5DBDB",	     
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,
		obj 				: null,
		isEdit 				: false,
		bolReference 		: false,
		showReturn 			: true,
		showDiscount 		: false,		
		sub_total 			: 0,		
		discount 			: 0,
		tax 				: 0,		
		total 				: 0,
		remain 				: 0,
		original_total 		: 0,		
		user_id				: banhji.source.user_id,
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);
				this.set("original_total", 0);									
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					this.set("original_total", 0);										
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},	    			
		loadObj 			: function(id, is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}			

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.dataSource.view();				

				self.set("sub_total", kendo.toString(view[0].sub_total, "c", view[0].locale));				
		        self.set("discount", kendo.toString(view[0].discount, "c", view[0].locale));
		        self.set("tax", kendo.toString(view[0].tax, "c", view[0].locale));				
		        self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));						
						
				self.lineDS.filter({ field: "transaction_id", value: view[0].id });
				self.journalLineDS.filter({ field: "transaction_id", value: view[0].id });				

				self.set("obj", view[0]);
				self.set("original_total", view[0].amount);
			});				
		},		
		//Contact
		loadContact 		: function(id){
			var self = this;			

			this.contactDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.contactDS.view(),
				obj = self.get("obj");
		    	
		    	obj.set("contact_id", view[0].id);		    		    	
		    	obj.set("locale", view[0].currency[0].locale);				
				obj.set("bill_to", view[0].bill_to);
				obj.set("ship_to", view[0].ship_to);
				
				self.setRate();
				self.loadReference();		
			});
		},
		loadBalance 		: function(){
			var self = this, obj = this.get("obj");			

			this.balanceDS.query({    			
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Invoice" }
				],
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.balanceDS.view(),				
				contact = self.contactDS.get(obj.contact_id),
				balance = view[0].amount,
				creditAllowed = 0;

				if(contact.credit_limit > balance){
					creditAllowed = contact.credit_limit - balance;
				}
						    	
		    	self.set("balance", kendo.toString(balance, "c", obj.locale));
		    	obj.set("credit_allowed", creditAllowed, "c");		
			});				
		},
		contactChanges 		: function(){
			var obj = this.get("obj");

	    	if(obj.contact_id>0){		    			    	
		    	contact = this.contactDS.get(obj.contact_id);   	
		    		    	
		    	obj.set("locale", contact.currency[0].locale);
		    	obj.set("bill_to", contact.bill_to);
		    	obj.set("ship_to", contact.ship_to);

		    	this.setRate();
		    	this.loadReference();		    		    			    	
	    	}
	    },
		//Reference					
		loadReference 		: function(){			
			var obj = this.get("obj");

			if(obj.contact_id>0){
				this.set("bolReference", true);

				this.referenceDS.filter([
					{ field: "contact_id", value: obj.contact_id },					
					{ field: "type", value:"Invoice" }
				]);				
			}else{
				obj.set("reference_id", "");
				this.set("bolReference", false);				
			}							
		},
		referenceChanges 	: function(e){
			var self = this, obj = this.get("obj");
			
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);
				obj.set("amount_paid", ref.amount_paid);

				if(ref.type=="Cash_Sale"){
					this.set("showReturn", true);
				}else{
					if(ref.status==0){
						this.set("showReturn", false);

						this.returnDS.data([]);
						this.addRowOption();
					}else{
						this.set("showReturn", true);
					}
				}				
									
			 	this.referenceLineDS.query({
			 		filter: { field:"transaction_id", value: obj.reference_id },
			 		page: 1,
			 		take: 100
			 	}).then(function(){
			 		var view = self.referenceLineDS.view();					

			 		self.lineDS.data([]);
			 		$.each(view, function(index, value){
			 			self.lineDS.add({					
							transaction_id 		: obj.id,
							item_id 			: value.item_id,
							tax_item_id 		: value.tax_item_id,
							measurement_id 		: value.measurement_id,							
							description 		: value.description,				
							quantity 	 		: value.quantity,
							price 				: value.price,												
							amount 				: value.amount,
							discount 			: value.discount,
							fine 				: value.fine,
							rate				: value.rate,
							locale				: value.locale,													

							item_prices			: value.item_prices
						});
			 		});

			 		self.changes();
			 	});			 				 				 				 				
			}else{
				this.returnDS.data([]);
				this.addRowOption();
			}							
		},		
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", obj.locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", obj.locale);												
					});
				}

				self.changes();
			});				
		},		
		changes				: function(){
			var self = this, obj = this.get("obj"), 
			subTotal = 0, discount =0, tax = 0, returnAmount = 0, remain = 0;
			
	        $.each(this.lineDS.data(), function(index, value) {				
				var amt = value.quantity * value.price;					

				//Discount by line
				if(value.discount>0){										
					var discount_amount = amt * value.discount;
					amt -= discount_amount;
					discount += discount_amount;																	
				}

				//Tax by line
				if(value.tax_item_id>0){
					var taxItem = self.taxItemDS.get(value.tax_item_id);										
					tax += amt * taxItem.rate;																	
				}					

				value.set("amount", amt);
				subTotal += amt;									
	        });

	        total = subTotal + tax;

	        //Return
	        $.each(this.returnDS.data(), function(index, value) {								
				returnAmount += value.amount;					
	        });
	       
	        remain = obj.amount_paid - returnAmount;

	        this.set("sub_total", kendo.toString(subTotal, "c", obj.locale));
	        this.set("discount", kendo.toString(discount, "c", obj.locale));
	        this.set("tax", kendo.toString(tax, "c", obj.locale));
	        this.set("total", kendo.toString(total, "c", obj.locale));

	        obj.set("sub_total", subTotal);
	        obj.set("discount", discount);
	        obj.set("tax", tax);			
			obj.set("amount", total);

			this.set("remain", remain);    	
		},		
	    segmentChanges 		: function(e) {
			var dataArr = this.get("obj").segments,
			lastIndex = dataArr.length - 1,
			last = this.segmentItemDS.get(dataArr[lastIndex]);
			
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current_index = dataArr[i],
					current = this.segmentItemDS.get(current_index);

					if(current.segment_id === last.segment_id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},
		//Item		
		itemChanges 		: function(e){								
			var self = this, 
			data = e.data,
			transaction_id = 0, 
			obj = this.get("obj"), 
			item = this.itemDS.get(data.item_id),
			rate = obj.rate / item.item_prices[0].rate;
			
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
			
			if(data.item_id>0){		        
		        if(item.is_catalog=="1"){
		        	this.catalogDS.query({
		        		filter: { field:"id", operator:"where_in", value:item.catalogs }
		        	}).then(function(){
		        		self.lineDS.remove(data);

		        		$.each(self.catalogDS.view(), function(index, value){										
							self.lineDS.add({					
								transaction_id 		: transaction_id,
								item_id 			: value.id,
								measurement_id 		: value.item_prices[0].measurement_id,								
								description 		: value.name,				
								quantity 	 		: 1,
								price 				: value.item_prices[0].price*rate,												
								amount 				: value.item_prices[0].price*rate,
								discount 			: 0,
								fine 				: 0,
								rate				: obj.rate,
								locale				: obj.locale,
								has_vat 			: false,
								movement 			: -1,								

								item_prices 		: value.item_prices
							});								
		        		});

		        		self.changes();
		        	});
		        }else if(item.is_assemble=="1"){
		    		data.set("description", item.name);	    		
			        data.set("price", item.price*rate);
			        data.set("measurement_id", 0);
			        data.set("rate", obj.rate);		        	        
			       	data.set("item_prices", []);

			        this.changes();		     
		        }else{
		        	data.set("measurement_id", item.item_prices[0].measurement_id);		        	
		    		data.set("description", item.name);
		    		data.set("quantity", 1);	    		
			        data.set("price", item.item_prices[0].price*rate);			        		        
			        data.set("rate", obj.rate);
			        data.set("item_prices", item.item_prices);			        

			        this.changes();
		    	}		        
	        }                	        	
		},
		measurementChanges 	: function(e){										
			var self = this, data = e.data, obj = this.get("obj");			

			if(data.measurement_id>0){
				$.each(data.item_prices, function(index, value){
					if(value.measurement_id==data.measurement_id){
						var rate = obj.rate / value.rate;						
				        data.set("price", value.price*rate);				       			       
				        
						return false;
					}
				});	    		
		        	        
		        this.changes();
	        }	                	        	
		},
		//Return Option
		addRowOption 		: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}

			var account_id = 0;
			if(this.accountDS.total()>0){
				account_id = this.accountDS.at(0).id;
			}
						
			this.returnDS.add({					
				return_id 		: transaction_id,				
				reference_id 	: "",
				account_id 		: account_id,
				type 			: "",													
				amount 			: 0,				
				rate			: obj.rate,
				locale			: obj.locale,
				issued_date 	: obj.issued_date,
				
				showInvoice 	: false,
				showAccount 	: false				
			});																	
		},
		removeRowOption 	: function(e){						
			var d = e.data;
			
			if(this.returnDS.total()>1){			
				this.returnDS.remove(d);
		        this.changes();
	        }	        	        
		},
		invoiceChanges 		: function(e){
			var data = e.data;
			
			if(data.reference_id>0){
				var inv = this.invoiceDS.get(data.reference_id);
				data.set("amount", inv.amount - inv.amount_paid);

				this.changes();
			}else{
				data.set("amount", 0);
			}							
		},
		optionChanges 		: function(e){
			var data = e.data, obj = this.get("obj");

			switch(data.type) {
			    case "Offset_Invoice": //Invoice		    	
			        data.set("showInvoice", true);
			        data.set("showAccount", false);

			        if(obj.contact_id>0){
			        	var para = [
					 			{ field:"contact_id", value: obj.contact_id },
					 			{ field:"status", operator:"where_in", value:[0,2] },
					 			{ field:"type", value:"Invoice" },
					 	];

					 	if(obj.reference_id>0){
					 		para.push({ field:"id", operator:"where_not_in", value:[obj.reference_id] });
					 	} 

				        this.invoiceDS.filter(para);
				 	}

			        break;
			    case "Credit_Note": //Refund		    	
			        data.set("showInvoice", false);
			        data.set("showAccount", true);
			        break;
			    default: //Credit		    	
			        data.set("showInvoice", false);
			        data.set("showAccount", false);
			}			
		},		
		//Obj					
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);
			this.journalLineDS.data([]);
			this.returnDS.data([]);
			this.referenceDS.data([]);

			this.set("obj", null);						
			this.set("total", 0);	
			this.set("remain", 0);				

			this.dataSource.add({				
				contact_id 			: "",								
				reference_id 		: "",
				recurring_id 		: "",				
				user_id 			: this.get("user_id"),
				seller_id 			: this.get("user_id"), 	    		
			   	type				: "Purchase_Return", //Require
			   	sub_total 			: 0,				   		   					   				   	
			   	amount				: 0,
			   	amount_paid 		: 0,
			   	credit_allowed 		: 0,
			   	credit 				: 0,
			   	deposit 			: 0,
			   	discount 			: 0,		   	
			   	fine 				: 0,
			   	tax 				: 0,
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),			   			   	
			   	bill_to 			: "",
			   	ship_to 			: "",
			   	memo 				: "",
			   	memo2 				: "",
			   	status 				: 0,
			   	segments 			: [],
			   	is_journal 			: 1,
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0				
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);

			this.addRow();
			this.addRowOption();
			this.setRate();			
		},
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,
				tax_item_id 		: "",
				item_id 			: "",				
				measurement_id 		: 0,				
				description 		: "",				
				quantity 	 		: 1,
				price 				: 0,												
				amount 				: 0,
				discount 			: 0,
				fine 				: 0,
				rate				: obj.rate,
				locale				: obj.locale,							
				movement 			: -1,

				item_prices 		: []
			});																	
		},		
		removeRow 			: function(e){						
			var d = e.data;
			if(this.lineDS.total()>1){				
				this.lineDS.remove(d);
		        this.changes();
	        }		        
		},							    
	    transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this, obj = this.get("obj");	    	

	    	//Update references
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);
				ref.set("status", 1);
				this.referenceDS.sync();
			} 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();	    	    		
	    		this.lineDS.sync();
	    		this.returnDS.sync();

	    		//Update total changes
	    		if(this.get("original_total") !== obj.amount){	    		
	    			this.set("original_total", obj.amount);

	    			$.each(this.journalLineDS.data(), function(index, value){										
						value.set("deleted", 1);										
					});

					this.addJournal(obj.id);
	    		}	    		
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){					
					//Journal
					self.addJournal(data[0].id);

					//Return
					$.each(self.returnDS.data(), function(index, value){										
						value.set("return_id", data[0].id);

						if(value.type=="Offset_Invoice" && value.reference_id>0){
							var inv = self.invoiceDS.get(value.reference_id),
							amountPaid = inv.amount_paid + value.amount;

							inv.set("amount_paid", amountPaid);

							if(amountPaid>=inv.amount){								
								inv.set("status", 1); //Paid							
							}else{
								inv.set("status", 2); //Partially Paid
							}
						}										
					});
					self.returnDS.sync();

					//Item line
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);										
					});
					self.lineDS.sync();																	
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();			

			window.history.back();
		},
	    //Journal	        
	    addJournal 			: function(transaction_id){
	    	var self = this,
	    	obj = this.get("obj"),
	    	contact = this.contactDS.get(obj.contact_id),
	    	saleList = {},
	    	taxList = {},	    	
	    	inventoryList = {},
	    	cogsList = {},
	    	cashList = {},
	    	sumInvoice = 0,
	    	sumCredit = 0;			
			
			//Group Account from lineDS
			$.each(this.lineDS.data(), function(index, value){
				var item = self.itemDS.get(value.item_id),
				amount = value.quantity * value.price;

				//Income Account
				var incomeID = item.income_account_id;																				
				if(incomeID>0){
					if(saleList[incomeID]===undefined){
						saleList[incomeID]={"id": incomeID, "amount": amount};						
					}else{											
						if(saleList[incomeID].id===incomeID){
							saleList[incomeID].amount += amount;
						}else{
							saleList[incomeID]={"id": incomeID, "amount": amount};
						}
					}
				}

				//Discount by line
				if(value.discount>0){										
					var discount_amount = amount * value.discount;
					amount -= discount_amount;																						
				}

				//TAX Account																								
				if(value.tax_item_id>0){
					var taxItem = self.taxItemDS.get(value.tax_item_id),
					taxID = taxItem.account_id,
					taxAmt = amount * taxItem.rate;
					if(taxList[taxID]===undefined){
						taxList[taxID]={"id": taxID, "amount": taxAmt};						
					}else{											
						if(taxList[taxID].id===taxID){
							taxList[taxID].amount += taxAmt;
						}else{
							taxList[taxID]={"id": taxID, "amount": taxAmt};
						}
					}
				}				

				//Inventory
				if(item.item_type_id==1){
					var itemCost = value.quantity * item.cost;

					//Add inventory list
					var inventoryID = item.inventory_account_id;					
					if(inventoryList[inventoryID]===undefined){
						inventoryList[inventoryID]={"id": inventoryID, "amount": itemCost};						
					}else{											
						if(inventoryList[inventoryID].id===inventoryID){
							inventoryList[inventoryID].amount += itemCost;
						}else{
							inventoryList[inventoryID]={"id": inventoryID, "amount": itemCost};
						}
					}

					//Add cogs list
					var cogsID = item.cogs_account_id;				
					if(cogsList[cogsID]===undefined){
						cogsList[cogsID]={"id": cogsID, "amount": itemCost};						
					}else{											
						if(cogsList[cogsID].id===cogsID){
							cogsList[cogsID].amount += itemCost;
						}else{
							cogsList[cogsID]={"id": cogsID, "amount": itemCost};
						}
					}
				}					  	
			});

			//Group Account from returnDS
			$.each(this.returnDS.data(), function(index, value){
				//Offset Invoice
				if(value.type=="Offset_Invoice"){
					sumInvoice += value.amount;
				}

				//Credit
				if(value.type=="Credit"){ 
					sumCredit += value.amount;
				}

				//Refund
				if(value.type=="Credit_Note"){
					var cashID = value.account_id,
					cashAmt = value.amount;

					if(cashList[cashID]===undefined){
						cashList[cashID]={"id": cashID, "amount": cashAmt};						
					}else{											
						if(cashList[cashID].id===cashID){
							cashList[cashID].amount += cashAmt;
						}else{
							cashList[cashID]={"id": cashID, "amount": cashAmt};
						}
					}
				}
			});		

			//Start journal			
			//Sale on Dr
			if(!jQuery.isEmptyObject(saleList)){
				$.each(saleList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: value.amount,
						cr 					: 0,				
						rate				: obj.rate,
						locale				: obj.locale
					});						
				});
			}

			//Tax on Dr
			if(!jQuery.isEmptyObject(taxList)){
				$.each(taxList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: value.amount,
						cr 					: 0,				
						rate				: obj.rate,
						locale				: obj.locale
					});						
				});
			}			

			//Discount on Cr
			if(obj.discount>0){			
				this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: contact.discount_account_id,				
					contact_id 			: obj.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: [],								
					dr 	 				: 0,
					cr 					: obj.discount,				
					rate				: obj.rate,
					locale				: obj.locale
				});
			}

			//A/R on Cr
			var ar = (obj.amount - obj.amount_paid) + sumInvoice;						
			this.journalLineDS.add({					
				transaction_id 		: transaction_id,
				account_id 			: contact.account_id,				
				contact_id 			: obj.contact_id,				
				description 		: "",
				reference_no 		: "",
				segments 	 		: [],								
				dr 	 				: 0,
				cr 					: ar,				
				rate				: obj.rate,
				locale				: obj.locale
			});			

			//Deposit on Cr
			if(sumCredit>0){			
				this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: contact.deposit_account_id,				
					contact_id 			: obj.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: [],								
					dr 	 				: 0,
					cr 					: sumCredit,				
					rate				: obj.rate,
					locale				: obj.locale
				});
			}

			//Cash on Cr
			if(!jQuery.isEmptyObject(cashList)){
				$.each(cashList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});						
				});
			}

			//INVENTORY
			//Inventory on Dr
			if(!jQuery.isEmptyObject(inventoryList)){
				$.each(inventoryList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: value.amount,
						cr 					: 0,				
						rate				: obj.rate,
						locale				: obj.locale
					});						
				});
			}

			//Cogs on Cr
			if(!jQuery.isEmptyObject(cogsList)){
				$.each(cogsList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});						
				});
			}

			this.journalLineDS.sync();
		},
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);				
				
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("discount", recur.discount);
				obj.set("fine", recur.fine);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,							
							item_id 			: value.item_id,									
							description 		: value.description,							
							quantity 			: value.quantity,
							price 				: value.price,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,

							item_prices 		: value.item_prices
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({				
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	discount 			: obj.discount,
			   	fine 				: obj.fine,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,					
					item_id 			: value.item_id,								
					description 		: value.description,													
					amount 	 			: value.amount,
					discount 			: value.discount,
					fine 				: value.fine,						
					rate				: value.rate,
					locale				: value.locale,
					has_vat 			: value.has_vat
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);
	    		
	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	 		
	});		
	banhji.vendorSetting =  kendo.observable({
		lang 				: langVM,		
        contactTypeDS 		: dataStore(apiUrl + "contacts/type"),
        paymentMethodDS		: dataStore(apiUrl + "payment_methods"),
        paymentTermDS		: dataStore(apiUrl + "payment_terms"),
        contactTypeName 	: "",
        paymentMethodName 	: "",
        paymentTermName 	: "",
        paymentTermNetDue 		: "",
        paymentTermDiscountPeriod : "",
        paymentTermDiscountPercentage 	: "",
        pageLoad 			: function() {
        	
        },	    
        addContactType 		: function(){
        	var self = this, 
        	name = this.get("contactTypeName");

        	if(name!==""){
	        	this.contactTypeDS.add({
	        		parent_id 	: 2,
	        		contact_id 	: 0,
	        		name 		: name,
	        		description : "",
	        		is_system 	: 0
	        	});

	        	this.contactTypeDS.sync();
	        	this.contactTypeDS.bind("requestEnd", function(){
	        		self.set("contactTypeName", "");
	        	});
        	}
        },
        addPaymentMethod 		: function(){
        	var self = this, name = this.get("paymentMethodName");

        	if(name!==""){
	        	this.paymentMethodDS.add({	        		
	        		name 		: name,
	        		description : ""
	        	});

	        	this.paymentMethodDS.sync();
	        	this.paymentMethodDS.bind("requestEnd", function(){
	        		self.set("paymentMethodName", "");
	        	});
        	}
        },
        addPaymentTerm 		: function(){
        	var self = this, 
        	name = this.get("paymentTermName"),
        	netDue = this.get("paymentTermNetDue");

        	if(name!=="" && netDue!==""){
	        	this.paymentTermDS.add({	        		
	        		name 				: name,
	        		net_due 			: netDue,
	        		discount_period 	: this.get("paymentTermDiscountPeriod"),
	        		discount_percentage : this.get("paymentTermDiscountPercentage"),
	        		is_system 			: 0
	        	});

	        	this.paymentTermDS.sync();
	        	this.paymentTermDS.bind("requestEnd", function(){
	        		self.set("paymentTermName", "");
	        		self.set("paymentTermNetDue", "");
	        		self.set("paymentTermDiscountPeriod", "");
	        		self.set("paymentTermDiscountPercentage", "");
	        	});
        	}else{
        		alert("Term and Net Due are required.");
        	}
        },
        goPattern 	: function(e){
        	var data = e.data;

        	banhji.router.navigate('/vendor');        	

        	if(kendo.parseInt(data.contact_id)>0){
	        	banhji.vendor.loadPatternEdit(data.contact_id);   	
        	}else{
        		banhji.vendor.setPattern(data.id);
        	}
        }        
    });	


	/*************************
	*   SME Section   *
	**************************/
	banhji.customerDashboard = kendo.observable({
		lang 				: langVM,
		summaryDS 			: dataStore(apiUrl + "dashboards/customer_summary"),
		topCustomerDS 		: dataStore(apiUrl + "dashboards/top_customer"),
		topARDS 			: dataStore(apiUrl + "dashboards/top_ar"),
		topProductDS 		: dataStore(apiUrl + "dashboards/top_product"),
		graphDS 			: dataStore(apiUrl + 'dashboards/monthly_sale'),
		sale 				: 0,
		sale_customer 		: 0,
		sale_product 		: 0,
		sale_order 			: 0,
		order 				: 0,
		order_avg 			: 0,
		order_open 			: 0,
		ar 					: 0,
		ar_open 			: 0,
		ar_customer 		: 0,
		ar_overdue 			: 0,						
		pageLoad 			: function(){
			var self = this, today = new Date(),
			firstDayOfYear = new Date(today.getFullYear(), 0, 1);

			this.summaryDS.query({
				filter: [
					{ field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
					{ field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
				],								
				page: 1,
				take: 5
			}).then(function(){
				var view = self.summaryDS.view();
				
				self.set("sale", kendo.toString(view[0].sale, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale));
				self.set("sale_customer", kendo.toString(view[0].sale_customer, "n0"));
				self.set("sale_product", kendo.toString(view[0].sale_product, "n0"));
				self.set("sale_order", kendo.toString(view[0].sale_order, "n0"));

				self.set("order", kendo.toString(view[0].order, "n0"));
				self.set("order_avg", kendo.toString(view[0].order_avg, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale));				
				self.set("order_open", kendo.toString(view[0].order_open, "n0"));

				self.set("ar", kendo.toString(view[0].ar, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale));
				self.set("ar_open", kendo.toString(view[0].ar_open, "n0"));
				self.set("ar_customer", kendo.toString(view[0].ar_customer, "n0"));
				self.set("ar_overdue", kendo.toString(view[0].ar_overdue, "n0"));
			});

			this.topCustomerDS.query({
				filter: [
					{ field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
					{ field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
				],								
				page: 1,
				take: 5
			});

			this.topARDS.query({
				filter: [
					{ field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
					{ field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
				],							
				page: 1,
				take: 5
			});

			this.topProductDS.query({
				filter: [
					{ field:"issued_date >=", operator:"where_related", model:"transaction", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
					{ field:"issued_date <=", operator:"where_related", model:"transaction", value:  kendo.toString(today, "yyyy-MM-dd") }
				],							
				page: 1,
				take: 5
			});

			this.loadGraph();								
		},
		loadGraph 			: function(){
			var self = this, 
			today = new Date(),
			firstDayOfYear = new Date(today.getFullYear(), 0, 1);

			this.graphDS.query({
				filter: [
					{ field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
					{ field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
				],
				page: 1,
				take: 100
			}).then(function(e) {
			    var view = self.graphDS.view();
			    
				$('#graph').kendoChart({
					dataSource: {data: view},												
					series: [
						{field: 'sale', categoryField:'month', type: 'line', axis: 'order'}
					],
					valueAxes: [
						{
		                    name: "order",
		                    color: "#007eff",
		                    min: 0,
		                    majorUnit: 500000,
		                    max: 1000000
		                }
	                ],
	                categoryAxis: {
	                    //categories: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],		                    
	                    axisCrossingValues: [0, 13],
	                    justified: true
	                },
	                tooltip: {
	                    visible: true,
	                    format: "{0}",
	                    template: "#= series.field #: #= value #"
	                }
				});
			});		
		}		
	});
	banhji.customerCenter = kendo.observable({
		lang 				: langVM,
		transactionDS  		: dataStore(apiUrl + 'transactions'),		
		contactDS  			: dataStore(apiUrl + 'contacts'),			
		contactTypeDS  		: banhji.source.customerTypeDS,
		noteDS 				: dataStore(apiUrl + 'notes'),		
		currencyDS  		: banhji.source.currencyDS,
		outstandingDS 		: dataStore(apiUrl + "dashboards/outstanding"),
		sortList			: banhji.source.sortList,
		sorter 				: "year",
		sdate 				: "",
		edate 				: "",				
		obj 				: null,
		note 				: "",		
		searchText 			: "",		
		contact_type_id 	: 0,
		currency_id 		: 0,
		user_id 			: banhji.source.user_id,
		balance 			: 0,
		deposit 			: 0,
		outInvoice 			: 0,
		overInvoice 		: 0,		
		pageLoad 			: function(){		
												
		},
		loadOutStandingInvoice: function(id){
			var self = this, obj = this.get("obj");

			this.outstandingDS.query({
				filter: { field: "contact_id", value: id },
				page: 1,
				take: 100
			}).then(function(e) {
				var view = self.outstandingDS.view();

				self.set("deposit", kendo.toString(view[0].deposit, obj.currency[0].locale=="km-KH"?"c0":"c", obj.currency[0].locale));
				self.set("outInvoice", kendo.toString(view[0].open, "n0"));
				self.set("overInvoice", kendo.toString(view[0].overdue, "n0"));
				self.set("balance", kendo.toString(view[0].balance, obj.currency[0].locale=="km-KH"?"c0":"c", obj.currency[0].locale));
			});
		},
		loadTransaction 	: function(id){
			this.transactionDS.query({
			  	filter: { field:"contact_id", value: id },
			  	sort: { field: "issued_date", dir: "desc" },
			  	page: 1,
			  	take: 100
			});
		},
		loadBalance 		: function(){
			var obj = this.get("obj");

			this.transactionDS.query({
			  	filter: [
			  		{ field:"contact_id", value: obj.id },
			  		{ field:"type", value:"Invoice" },
			  		{ field:"status", operator:"where_in", value: [0,2] }
			  	],
			  	sort: { field: "issued_date", dir: "desc" },
			  	page: 1,
			  	take: 100
			});
		},
		loadDeposit 		: function(){
			var obj = this.get("obj");

			this.transactionDS.query({
			  	filter: [
			  		{ field:"contact_id", value: obj.id },
			  		{ field:"type", value:"Deposit" }
			  	],
			  	sort: { field: "issued_date", dir: "desc" },
			  	page: 1,
			  	take: 100
			});
		},
		loadOverInvoice 	: function(){
			var obj = this.get("obj");

			this.transactionDS.query({
			  	filter: [
			  		{ field:"contact_id", value: obj.id },
			  		{ field:"type", value: "Invoice" },
			  		{ field:"status", operator:"where_in", value: [0,2] },
			  		{ field:"due_date <", value: kendo.toString(new Date(), "yyyy-MM-dd") }
			  	],
			  	sort: { field: "issued_date", dir: "desc" },
			  	page: 1,
			  	take: 100
			});
		},		
		loadNote 			: function(id){
			this.noteDS.query({
				filter: { field:"contact_id", value: id },
				sort: { field:"noted_date", dir:"desc" },
				page: 1,
				take: 100
			});
		},			
		selectedRow			: function(e){
			var id = e.data.id,
			data = e.data;			
			
			this.set("obj", data);			
			this.loadOutStandingInvoice(id);
			this.loadTransaction(id);			
			this.loadNote(id);
		},
		sorterChanges 		: function(){
			var value = this.get("sorter");

			switch(value){
			case "today":
				var today = new Date();
				
				this.set("sdate", today);
				this.set("edate", today);
			  					
			  	break;
			case "week":
			  	var thisWeek = new Date;
				var first = thisWeek.getDate() - thisWeek.getDay(); 
				var last = first + 6;

				var firstDayOfWeek = new Date(thisWeek.setDate(first));
				var lastDayOfWeek = new Date(thisWeek.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":
				var thisMonth = new Date;				  	
				var firstDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth(), 1);
				var lastDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":
				var thisYear = new Date();
			  	var firstDayOfYear = new Date(thisYear.getFullYear(), 0, 1);
				var lastDayOfYear = new Date(thisYear.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},
		enterSearch 		: function(e){
			e.preventDefault();

			this.search();
		},
		search 				: function(){
			var self = this, 
			para = [],
      		txtSearch = this.get("searchText"),       		
      		contact_type_id = this.get("contact_type_id"),
      		currency_id = this.get("currency_id");      		
      		
      		if(txtSearch){
      			para.push(      				
      				{ field: "number", operator: "like", value: txtSearch },
      				{ field: "surname", operator: "or_like", value: txtSearch },
					{ field: "name", operator: "or_like", value: txtSearch },
					{ field: "company", operator: "or_like", value: txtSearch }
      			);
      		}      		

      		if(contact_type_id){
      			para.push({ field: "contact_type_id", value: contact_type_id });
      		}else{
      			para.push({ field: "parent_id", model:"contact_type", operator:"where_related", value: 1 });
      		}

      		if(currency_id){
      			para.push({ field: "currency_id", value: currency_id });
      		}      		

      		this.contactDS.filter(para);
      		var loaded = false;
      		this.contactDS.bind("requestEnd", function(){
      			if(loaded==false){
      				loaded = true;

      				//Clear search filters
		      		self.set("searchText", "");		      		
		      		self.set("contact_type_id", 0);
		      		self.set("currency_id", 0);
      			}
      		});      			
		},
		searchTransaction	: function(){
			var self = this,
				start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"),
        		end = kendo.toString(this.get("edate"), "yyyy-MM-dd"),	        		
        		para = [];

        	//Dates
        	if(start && end){
            	para.push({ field:"start_date", value: kendo.toString(start, "yyyy-MM-dd") });
            	para.push({ field:"end_date", value: kendo.toString(end, "yyyy-MM-dd") });            	            	
            }else if(start){
            	para.push({ field:"start_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
            	para.push({ field:"end_date", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{
            	
            }            

            this.transactionDS.query({
            	filter: para,
            	sort: { field: "issued_date", dir: "desc" },
            	page: 1,
            	pageSize: 100
            });            
		},	
		goEditContact 		: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/customer/'+obj.id);
		},
		goQuote				: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/quote');
			banhji.quote.loadContact(obj.id);			
		},
		goSaleOrder			: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/sale_order');
			banhji.saleOrder.loadContact(obj.id);
		},
		goCashSale			: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/cash_sale');
			banhji.cashSale.loadContact(obj.id);
		},
		goInvoice			: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/invoice');
			banhji.invoice.loadContact(obj.id);					
		},
		goGDN				: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/gdn');
			banhji.gdn.loadContact(obj.id);
		},
		goSaleReturn		: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/sale_return');
			banhji.saleReturn.loadContact(obj.id);
		},
		goStatement			: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/statement');
			banhji.statement.loadContact(obj.id);
		},
		goReceivePayment	: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/cash_receipt');
			banhji.cashReceipt.loadContact(obj.id);
		},
		saveNote 			: function(){
			var self = this;

			if(this.get("note")!==""){
				this.noteDS.insert(0, {
					contact_id 	: this.get("obj").id,
					note 		: this.get("note"),
					noted_date	: new Date(),
					created_by 	: this.get("user_id"),

					creator 	: ""
				});
				var saved = false;
				this.noteDS.sync();
				this.noteDS.bind("requestEnd", function(){
					if(saved==false){
						saved = true;

						self.set("note", "");
					}
				});
			}else{
				alert("required memo...");
			}
		}		
	});
	banhji.customer = kendo.observable({
		lang 					: langVM,
		dataSource 				: dataStore(apiUrl + "contacts"),
		deleteDS 				: dataStore(apiUrl + "transactions"),		
		existingDS 				: dataStore(apiUrl + "contacts"),		
		contactPersonDS			: dataStore(apiUrl + "contact_persons"),		
		paymentTermDS			: dataStore(apiUrl + "payment_terms"),
		paymentMethodDS			: dataStore(apiUrl + "payment_methods"),
		taxItemDS				: dataStore(apiUrl + "tax_items"),
		contactTypeDS  			: banhji.source.customerTypeDS,
		currencyDS 		  		: banhji.source.currencyDS,
		arDS 		  			: banhji.source.ARAccountDS,
		raDS 		  			: banhji.source.incomeAccountDS,
		depositDS 		  		: banhji.source.depositAccountDS,
		tradeDiscountDS 		: banhji.source.tradeDiscountDS,
		settlementDiscountDS 	: banhji.source.settlementDiscountDS,
		genders					: banhji.source.genderList,
		statusList 				: banhji.source.statusList,
        obj 					: null,       
		originalNo				: null,	
		isDuplicateNumber 		: false,
		isCompany 				: false,
		isEdit 					: false,		
		pageLoad 				: function(id){
			if(id){
				this.set("isEdit", true);							
				this.loadCustomer(id);
				this.loadContactPerson(id);				
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
										
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}			
		},		
		loadCustomer 			: function(id){
			var self = this;

			this.dataSource.query({
				filter: { "field":"id", value: id },
				page: 1,
				pageSize: 100
			}).then(function(e){
				var view = self.dataSource.view();

				if(view[0].contact_type_id=="6" || view[0].contact_type_id=="7" || view[0].contact_type_id=="8"){
					self.set("isCompany", true);
				}else{
					self.set("isCompany", false);
				}

				self.set("obj", view[0]);
				self.loadMap();
				self.set("originalNo", view[0].number);
				self.set("originalENo", view[0].enumber);
				self.set("originalWNo", view[0].wnumber);								
			});
		},
		loadContactPerson		: function(id){
			this.contactPersonDS.query({
				filter: { "field":"contact_id", value: id },
				page: 1,
				take: 100
			});
		},
		loadMap 				: function(){
			var obj = this.get("obj"), lat = kendo.parseFloat(obj.latitute),
			lng = kendo.parseFloat(obj.longtitute);
			
			if(lat && lng){
				var myLatLng = {lat:lat, lng:lng};
				var mapOptions = {
					zoom: 17,					
					center: myLatLng,
					mapTypeControl: false,
					zoomControl: false,
					scaleControl: false,
					streetViewControl: false
				};
				var map = new google.maps.Map(document.getElementById('map'),mapOptions);
				var marker = new google.maps.Marker({
					position: myLatLng,
					map: map,
					title: obj.number
				});
			} 
		},
		copyBillTo 				: function(){
			var obj = this.get("obj");

			obj.set("ship_to", obj.bill_to);
		},      	
		checkExistingNumber 	: function(){
			var self = this;	
			
			var number = this.get("obj").number;
			var originalNo = this.get("originalNo");
			
			if(number.length>0 && number!==originalNo){
				this.existingDS.query({
					filter: { field:"number", value: number },
					page: 1,
					pageSize: 100
				}).then(function(e){
					var view = self.existingDS.view();
					
					if(view.length>0){
				 		self.set("isDuplicateNumber", true);						
					}else{
						self.set("isDuplicateNumber", false);
					}
				});							
			}else{
				this.set("isDuplicateNumber", false);
			}			
		},		
		addEmptyContactPerson 	: function(){
			var contact_id = 0;
			if(this.get("isEdit")){
				contact_id = this.get("obj").id;
			}

			this.contactPersonDS.add({					 			
				contact_id 			: contact_id,
      			prefix 				: "",      			
				name 				: "",
				department			: "",
				phone				: "",
				email				: ""
			});								
		},
		deleteContactPerson 	: function(e){
			if (confirm("Are you sure, you want to delete it?")) {
				var d = e.data,
				obj = this.contactPersonDS.getByUid(d.uid);

				this.contactPersonDS.remove(obj);
			}
		},
      	addEmpty 				: function(){
      		this.dataSource.data([]);
      		this.set("obj", null);

			this.dataSource.add({
				"company_id" 			: 0,
				"ebranch_id" 			: 0,
				"elocation_id"			: 0,
				"wbranch_id" 			: 0,
				"wlocation_id" 			: 0,			
				"currency_id" 			: 0,
				"user_id" 				: 0,
				"contact_type_id" 		: 0,							
				"number"				: "",
				"enumber"				: "",
				"wnumber"				: "",
				"surname"				: "",
				"name"					: "",
				"gender"				: "M",
				"dob"					: "",
				"pob"					: "",				
				"family_member"			: "",
				"id_number"				: "",
				"phone" 				: "",
				"email" 				: "",			
				"job"					: "",
				"company"				: "",
				"company_en"			: "",		
				"business_type_id"		: 0,
				"vat_no"				: "",				
				"image_url"				: "",
				"memo"					: "",
				"address" 				: "",
				"bill_to" 				: "",
				"ship_to" 				: "",
				"latitute" 				: "",
				"longtitute" 			: "",														
				"payment_term_id"		: 0,
				"payment_method_id"		: 0,
				"credit_limit"			: 0,				
				"registered_date" 		: new Date(),
				"account_id"			: 0,
				"ra_id"					: 0,
				"tax_item_id"			: 0,
				"deposit_account_id"	: 0,
				"trade_discount_id"		: 0,
				"settlement_discount_id": 0,
				"phase_id"				: 0,
				"voltage_id"			: 0,
				"ampere_id"				: 0,			
				"use_electricity"		: 0,
				"use_water"				: 0,
				"is_pattern" 			: 0,
				"status"				: 1								
			});			

			var data = this.dataSource.data();			
			var obj = data[data.length - 1];			
			this.set("obj", obj);	
		},
		contactSync 			: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },			
		save 					: function(){			
			var self = this, saved = false;

			if(this.get("isEdit")){
				this.dataSource.sync();
				this.contactPersonDS.sync();
			}else{
				this.contactSync().then(function(data){
					self.saveContactPerson(data[0].id);
				}).then(function(){					
					self.contactPersonDS.data([]);

					self.addEmpty();
				});
			}						
		},
		delete 					: function(){
			var self = this,
			obj = this.get("obj");

			if (confirm("Are you sure, you want to delete it?")) {				
				this.deleteDS.query({
				  	filter: { field: "contact_id", value: obj.id },
				  	page: 1,
				  	take: 1
				}).then(function() {
					var view = self.deleteDS.view();

					if(view.length>0){
						alert("Sorry, you can not delete it because it is using now.");
					}else{
						var data = self.dataSource.get(obj.id);
				        self.dataSource.remove(data);
				        self.save();

				        window.history.back();				        
					}
				});								
	    	}
		},
		cancel 					: function(){
			this.dataSource.cancelChanges();
			this.contactPersonDS.cancelChanges();

			window.history.back();
		},
		saveContactPerson 		: function(id){
			$.each(this.contactPersonDS.data(), function(index, value) {
				value.set("contact_id", id);
			});

			this.contactPersonDS.sync();
		}
	});	
	banhji.invoice =  kendo.observable({
		dataSource 			: dataStore(apiUrl + "transactions"),
		lineDS  			: dataStore(apiUrl + "transactions/line"),
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "transactions/line"),
		referenceDS			: dataStore(apiUrl + "transactions"),
		referenceLineDS		: dataStore(apiUrl + "transactions/line"),
		depositDS			: dataStore(apiUrl + "transactions"),		
		balanceDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum	",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		totalDepositDS  	: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		currencyDS  		: banhji.source.currencyDS,
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		contactDS  			: banhji.source.customerDS,
		itemDS  			: banhji.source.itemDS,
		taxItemDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "tax_items",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"tax_type_id", value: 1}
			],					
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		catalogDS			: dataStore(apiUrl + "items"),
		assemblyDS			: dataStore(apiUrl + "items/assembly"),
		paymentTermDS 		: dataStore(apiUrl + "payment_terms"),
		segmentItemDS		: banhji.source.segmentItemDS,		
		referenceTypes 		: [
			{ id:"Sale_Order", name:"Sale Order" },
			{ id:"Quote", name:"Quote" },
			{ id:"GDN", name:"Goods Delivery Note" }
		],
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,			    
	    bgColor 			: "#D5DBDB",
	    showDeposit 		: false,	    
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,
		obj 				: null,
		isEdit 				: false,
		bolReference 		: false,
		showDiscount 		: false,
		sub_total 			: 0,
		tax 				: 0,
		discount 			: 0,
		balance 			: 0,
		total_credit		: 0,
		total 				: 0,
		original_total 		: 0,
		original_credit 	: 0,
		user_id				: banhji.userManagement.getLogin() === null ? 0 : banhji.userManagement.getLogin().id,
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);
				this.set("original_total", 0);
				this.set("original_credit", 0);							
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					this.set("original_total", 0);
					this.set("original_credit", 0);					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},	    			
		loadObj 			: function(id, is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}			

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.dataSource.view();				

				self.set("sub_total", kendo.toString(view[0].sub_total, "c", view[0].locale));
				self.set("discount", kendo.toString(view[0].discount, "c", view[0].locale));
		        self.set("tax", kendo.toString(view[0].tax, "c", view[0].locale));
		        self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));	  			
								
				//self.contactDS.filter({ field: "id", value: view[0].contact_id });				
				self.lineDS.filter({ field: "transaction_id", value: view[0].id });
				self.journalLineDS.filter({ field: "transaction_id", value: view[0].id });				
				self.depositDS.filter([
					{ field: "reference_id", value: view[0].id },
					{ field: "type", value: "Credit" }
				]);

				self.set("obj", view[0]);
				self.set("original_total", view[0].amount);
				self.set("original_credit", view[0].credit);

				self.loadDeposit();				
			});				
		},
		//Deposit
		loadDeposit 		: function(){
			var self = this, obj = this.get("obj");

			this.totalDepositDS.query({
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Credit" }
				],
				page: 1,
				pageSize: 100
			}).then(function(){
				var view = self.totalDepositDS.view(),
				amount = 0;

				if(self.get("isEdit")){
					amount = view[0].amount + obj.credit;
				}else{
					amount = view[0].amount;
				}

				self.set("total_credit", amount);
			});
		},		
		saveDeposit 		: function(transaction_id){
			var obj = this.get("obj");		

			this.depositDS.data([]);

			//Deposit apply
			if(obj.deposit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Deposit",			   	  		   					   				   	
				   	amount				: obj.deposit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

			//Credit apply
			if(obj.credit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Credit",			   	  		   					   				   	
				   	amount				: obj.credit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

	    	this.depositDS.sync();
		},
		//Contact
		loadContact 		: function(id){
			var self = this;			

			this.contactDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.contactDS.view(),
				obj = self.get("obj");
		    	
		    	obj.set("contact_id", view[0].id);
		    	obj.set("payment_term_id", view[0].payment_term_id);		    	
		    	obj.set("locale", view[0].currency[0].locale);				
				obj.set("bill_to", view[0].bill_to);
				obj.set("ship_to", view[0].ship_to);
				
				self.setRate();
				self.setTerm();
				self.loadDeposit();							
			});
		},
		loadBalance 		: function(){
			var self = this, obj = this.get("obj");			

			this.balanceDS.query({    			
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Invoice" }
				],
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.balanceDS.view(),				
				contact = self.contactDS.get(obj.contact_id),
				balance = view[0].amount,
				creditAllowed = 0;

				if(contact.credit_limit > balance){
					creditAllowed = contact.credit_limit - balance;
				}
						    	
		    	self.set("balance", kendo.toString(balance, "c", obj.locale));
		    	obj.set("credit_allowed", creditAllowed, "c");		
			});				
		},
		contactChanges 		: function(){
			var obj = this.get("obj");

	    	if(obj.contact_id>0){		    			    	
		    	contact = this.contactDS.get(obj.contact_id);		    	
		    	
		    	obj.set("payment_term_id", contact.payment_term_id);
		    	obj.set("vat_id", contact.tax_item_id);
		    	obj.set("locale", contact.currency[0].locale);
		    	obj.set("bill_to", contact.bill_to);
		    	obj.set("ship_to", contact.ship_to);

		    	this.setRate();
		    	this.setTerm();
		    	this.loadDeposit();
		    	this.loadBalance();		    			    	
	    	}else{
	    		this.set("total_credit", 0);
	    	}
	    },
		//Reference					
		loadReference 		: function(e){			
			var obj = this.get("obj");

			if(obj.reference_type){
				this.set("bolReference", true);

				this.referenceDS.filter([
					{ field: "contact_id", value: obj.contact_id },
					{ field: "status", value: 0 },
					{ field: "type", value: obj.reference_type }
				]);				
			}else{
				this.set("bolReference", false);
			}							
		},
		referenceChanges 	: function(e){
			var self = this, obj = this.get("obj");
			
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);

				//Deposit
				if(obj.deposit>0){
					this.set("showDeposit", true);
				}else{
					this.set("showDeposit", false);
				}

				obj.set("sub_total", ref.sub_total);
				obj.set("discount", ref.discount);
				obj.set("tax", ref.tax);								
				obj.set("deposit", ref.deposit);				
				obj.set("fine", ref.fine);				
								
			 	this.referenceLineDS.query({
			 		filter: { field:"transaction_id", value: obj.reference_id },
			 		page: 1,
			 		take: 100
			 	}).then(function(){
			 		var view = self.referenceLineDS.view();					

			 		self.lineDS.data([]);
			 		$.each(view, function(index, value){
			 			self.lineDS.add({					
							transaction_id 		: obj.id,
							tax_item_id 		: value.tax_item_id,
							item_id 			: value.item_id,
							measurement_id 		: value.measurement_id,							
							description 		: value.description,				
							quantity 	 		: value.quantity,
							price 				: value.price,												
							amount 				: value.amount,
							discount 			: value.discount,
							fine 				: value.fine,
							rate				: value.rate,
							locale				: value.locale,													

							item_prices			: value.item_prices
						});
			 		});

			 		self.changes();
			 	});			 				 				 				 				
			}else{
				obj.set("deposit", 0);
				this.set("showDeposit", false);
			}								
		},
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", obj.locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", obj.locale);												
					});
				}

				self.changes();
			});				
		},
		setTerm 			: function(){
			var duedate = new Date(), obj = this.get("obj");

			if(obj.payment_term_id>0){
				var term = this.paymentTermDS.get(obj.payment_term_id);

				duedate.setDate(duedate.getDate() + term.net_due);

				obj.set("due_date", duedate);
			}else{
				obj.set("due_date", new Date());
			}			
		},
		changes				: function(){
			var self = this, obj = this.get("obj");

			if(this.lineDS.total()>0){			
				var total = 0, subTotal = 0, discount =0, tax = 0;											

				$.each(this.lineDS.data(), function(index, value) {				
					var amt = value.quantity * value.price;					

					//Discount by line
					if(value.discount>0){										
						var discount_amount = amt * value.discount;
						amt -= discount_amount;
						discount += discount_amount;																	
					}

					//Tax by line
					if(value.tax_item_id>0){
						var taxItem = self.taxItemDS.get(value.tax_item_id);										
						tax += amt * taxItem.rate;																	
					}					

					value.set("amount", amt);					
					subTotal += amt;					
		        });				

		    	//Total
		        total = subTotal + tax;

		        //Apply Deposit
		        if(obj.deposit > 0){
		        	if(obj.deposit <= total){
		        		total -= obj.deposit;
		        	}else{
		        		obj.set("deposit", total);
		        		total = 0;
		        	}
		        }

		        //Apply Credit
		        if(obj.credit > 0){
		        	if(obj.credit <= this.get("total_credit")){
			        	if(obj.credit <= total){
			        		total -= obj.credit;
			        	}else{
			        		obj.set("credit", total);
			        		total = 0;
			        	}
		        	}else{
		        		alert("Over Credit To Apply!");
		        		obj.set("credit", 0);
		        	}
		        }

		        //Warning over credit allowed
		        if(obj.credit_allowed>0 && total>obj.credit_allowed){
		        	this.set("bgColor", "Gold");		        	
		        }else{
		        	this.set("bgColor", "#D5DBDB");
		        }

		        this.set("sub_total", kendo.toString(subTotal, "c", obj.locale));
		        this.set("discount", kendo.toString(discount, "c", obj.locale));
		        this.set("tax", kendo.toString(tax, "c", obj.locale));
		        this.set("total", kendo.toString(total, "c", obj.locale));

		        obj.set("sub_total", subTotal);
		        obj.set("discount", discount);
		        obj.set("tax", tax);			
				obj.set("amount", total);									    	
	    	}	
		},		
	    segmentChanges 		: function(e) {
			var dataArr = this.get("obj").segments,
			lastIndex = dataArr.length - 1,
			last = this.segmentItemDS.get(dataArr[lastIndex]);
			
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current_index = dataArr[i],
					current = this.segmentItemDS.get(current_index);

					if(current.segment_id === last.segment_id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},
		//Item		
		itemChanges 		: function(e){								
			var self = this, 
			data = e.data,
			transaction_id = 0, 
			obj = this.get("obj"), 
			item = this.itemDS.get(data.item_id),
			rate = obj.rate / item.item_prices[0].rate;
			
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
			
			if(data.item_id>0){		        
		        if(item.is_catalog=="1"){
		        	this.catalogDS.query({
		        		filter: { field:"id", operator:"where_in", value:item.catalogs }
		        	}).then(function(){
		        		self.lineDS.remove(data);

		        		$.each(self.catalogDS.view(), function(index, value){										
							self.lineDS.add({					
								transaction_id 		: transaction_id,
								item_id 			: value.id,
								measurement_id 		: value.item_prices[0].measurement_id,								
								description 		: value.name,				
								quantity 	 		: 1,
								price 				: value.item_prices[0].price*rate,												
								amount 				: value.item_prices[0].price*rate,
								discount 			: 0,
								fine 				: 0,
								rate				: obj.rate,
								locale				: obj.locale,
								has_vat 			: false,
								movement 			: -1,								

								item_prices 		: value.item_prices
							});								
		        		});

		        		self.changes();
		        	});
		        }else if(item.is_assemble=="1"){
		    		data.set("description", item.name);	    		
			        data.set("price", item.price*rate);
			        data.set("measurement_id", 0);
			        data.set("rate", obj.rate);		        	        
			       	data.set("item_prices", []);

			        this.changes();		     
		        }else{
		        	data.set("measurement_id", item.item_prices[0].measurement_id);		        	
		    		data.set("description", item.name);
		    		data.set("quantity", 1);	    		
			        data.set("price", item.item_prices[0].price*rate);			        		        
			        data.set("rate", obj.rate);
			        data.set("item_prices", item.item_prices);			        

			        this.changes();
		    	}		        
	        }                	        	
		},
		measurementChanges 	: function(e){										
			var self = this, data = e.data, obj = this.get("obj");			

			if(data.measurement_id>0){
				$.each(data.item_prices, function(index, value){
					if(value.measurement_id==data.measurement_id){
						var rate = obj.rate / value.rate;						
				        data.set("price", value.price*rate);				       			       
				        
						return false;
					}
				});	    		
		        	        
		        this.changes();
	        }	                	        	
		},					
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);
			this.journalLineDS.data([]);

			this.set("obj", null);
			this.set("sub_total", 0);
			this.set("tax", 0);
			this.set("discount", 0);			
			this.set("fine", 0);	
			this.set("total", 0);				

			this.dataSource.add({				
				contact_id 			: "",
				payment_term_id		: 0,				
				reference_id 		: 0,
				recurring_id 		: "",				
				user_id 			: this.get("user_id"),
				seller_id 			: this.get("user_id"), 	    		
			   	type				: "Invoice",
			   	sub_total 			: 0,				   		   					   				   	
			   	amount				: 0,
			   	credit_allowed 		: 0,
			   	credit 				: 0,
			   	deposit 			: 0,
			   	discount 			: 0,		   	
			   	fine 				: 0,
			   	tax 				: 0,
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),
			   	due_date 			: new Date(),			   	
			   	bill_to 			: "",
			   	ship_to 			: "",
			   	memo 				: "",
			   	memo2 				: "",
			   	status 				: 0,
			   	segments 			: [],
			   	is_journal 			: 1,
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0				
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);

			this.addRow();
			this.setRate();			
		},
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,
				tax_item_id 		: "",
				item_id 			: "",				
				measurement_id 		: 0,				
				description 		: "",				
				quantity 	 		: 1,
				price 				: 0,												
				amount 				: 0,
				discount 			: 0,
				fine 				: 0,
				rate				: obj.rate,
				locale				: obj.locale,							
				movement 			: -1,

				item_prices 		: []
			});																	
		},		
		removeRow 			: function(e){						
			var d = e.data;
			if(this.lineDS.total()>1){				
				this.lineDS.remove(d);
		        this.changes();
	        }		        
		},							    
	    transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this, obj = this.get("obj");

	    	//Warning over credit allowed
	        if(obj.credit_limit>0 && obj.amount>obj.credit_allowed){
	        	alert("Over credit allowed!");		        	
	        }

	    	//Update references
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);
				ref.set("status", 1);
				this.referenceDS.sync();
			} 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();

	    		//Update credit changes
	    		if(this.get("original_credit") !== obj.credit){	    			
	    			this.set("original_credit", obj.credit);    			

					var deposit = this.depositDS.at(0);
					deposit.set("amount", obj.credit*-1);

					this.depositDS.sync();
	    		}	    		

	    		//Update total changes
	    		if(this.get("original_total") == obj.amount){
	    			this.lineDS.sync();	    			
	    		}else{
	    			this.set("original_total", obj.amount);

	    			$.each(this.journalLineDS.data(), function(index, value){										
						value.set("deleted", 1);										
					});

					this.addJournal(obj.id);
	    		}	    		
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){
					//Deposit
					if(obj.deposit > 0 || obj.credit > 0){
						self.saveDeposit(data[0].id);
					}

					//Journal
					self.addJournal(data[0].id);

					//Item line
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);										
					});
					self.lineDS.sync();																	
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();			

			window.history.back();
		},
	    //Journal	        
	    addJournal 			: function(transaction_id){
	    	var self = this,
	    	obj = this.get("obj"),
	    	contact = this.contactDS.get(obj.contact_id),	    				    	
	    	saleList = {},
	    	taxList = {},
	    	inventoryList = {},
			cogsList = {};			
			
			//Arrange sale, cogs, inventory
			$.each(this.lineDS.data(), function(index, value){										
				var item = self.itemDS.get(value.item_id),
				amount = value.quantity * value.price;				
				
				//Add sale list
				var incomeID = item.income_account_id;																				
				if(incomeID>0){
					if(saleList[incomeID]===undefined){
						saleList[incomeID]={"id": incomeID, "amount": amount};						
					}else{											
						if(saleList[incomeID].id===incomeID){
							saleList[incomeID].amount += amount;
						}else{
							saleList[incomeID]={"id": incomeID, "amount": amount};
						}
					}
				}

				//Add tax list																							
				if(value.tax_item_id>0){
					var taxItem = self.taxItemDS.get(value.tax_item_id),
					taxID = taxItem.account_id,
					taxAmt = value.amount*taxItem.rate;

					if(taxList[taxID]===undefined){
						taxList[taxID]={"id": taxID, "amount": taxAmt};						
					}else{											
						if(taxList[taxID].id===taxID){
							taxList[taxID].amount += taxAmt;
						}else{
							taxList[taxID]={"id": taxID, "amount": taxAmt};
						}
					}
				}				
				
				//Inventory
				if(item.item_type_id==1){
					//Add cogs list
					var itemCost = value.quantity*item.cost,
					cogsID = item.cogs_account_id;				
					if(cogsList[cogsID]===undefined){
						cogsList[cogsID]={"id": cogsID, "amount": itemCost};						
					}else{											
						if(cogsList[cogsID].id===cogsID){
							cogsList[cogsID].amount += itemCost;
						}else{
							cogsList[cogsID]={"id": cogsID, "amount": itemCost};
						}
					}						

					//Add inventory list
					var inventoryID = item.inventory_account_id;
					if(inventoryList[inventoryID]===undefined){
						inventoryList[inventoryID]={"id": inventoryID, "amount": itemCost};						
					}else{											
						if(inventoryList[inventoryID].id===inventoryID){
							inventoryList[inventoryID].amount += itemCost;
						}else{
							inventoryList[inventoryID]={"id": inventoryID, "amount": itemCost};
						}
					}
				}					  	
			});//End Foreach Loop			

			//Start journal
			//A/R on Dr
			this.journalLineDS.add({					
				transaction_id 		: transaction_id,
				account_id 			: contact.account_id,				
				contact_id 			: obj.contact_id,				
				description 		: "",
				reference_no 		: "",
				segments 	 		: [],								
				dr 	 				: obj.amount,
				cr 					: 0,				
				rate				: obj.rate,
				locale				: obj.locale
			});

			//Discount on Dr			
			if(obj.discount > 0){				
				this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: contact.discount_account_id,				
					contact_id 			: obj.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: [],								
					dr 	 				: obj.discount,
					cr 					: 0,				
					rate				: obj.rate,
					locale				: obj.locale
				});
			}

			//Deposit and Credit on Dr
			if(obj.deposit > 0 || obj.credit > 0){				
				this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: contact.deposit_account_id,				
					contact_id 			: obj.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: [],								
					dr 	 				: obj.deposit + obj.credit,
					cr 					: 0,				
					rate				: obj.rate,
					locale				: obj.locale
				});
			}

			//Sale accounts on Cr		
			if(!jQuery.isEmptyObject(saleList)){				
				$.each(saleList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});										
				});
			}

			//Tax on Cr					
			if(!jQuery.isEmptyObject(taxList)){				
				$.each(taxList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});										
				});
			}	

			//Inventory to journal
			//COGS on Dr 			
			if(!jQuery.isEmptyObject(cogsList)){							
				$.each(cogsList, function(index, value){				
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: value.amount,
						cr 					: 0,				
						rate				: obj.rate,
						locale				: obj.locale
					});								
				});							
			}
			//Inventory on Cr
			if(!jQuery.isEmptyObject(inventoryList)){
				$.each(inventoryList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});						
				});
			}

			this.journalLineDS.sync();
		},
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);				
				
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("discount", recur.discount);
				obj.set("fine", recur.fine);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,							
							item_id 			: value.item_id,									
							description 		: value.description,							
							quantity 			: value.quantity,
							price 				: value.price,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,

							item_prices 		: value.item_prices
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({				
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	discount 			: obj.discount,
			   	fine 				: obj.fine,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,					
					item_id 			: value.item_id,								
					description 		: value.description,													
					amount 	 			: value.amount,
					discount 			: value.discount,
					fine 				: value.fine,						
					rate				: value.rate,
					locale				: value.locale,
					has_vat 			: value.has_vat
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);
	    		
	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	 		
	});
	banhji.cashSale =  kendo.observable({
		dataSource 			: dataStore(apiUrl + "transactions"),
		lineDS  			: dataStore(apiUrl + "transactions/line"),
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "transactions/line"),
		referenceDS			: dataStore(apiUrl + "transactions"),
		referenceLineDS		: dataStore(apiUrl + "transactions/line"),
		depositDS			: dataStore(apiUrl + "transactions"),		
		balanceDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum	",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		totalDepositDS  	: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		currencyDS  		: banhji.source.currencyDS,
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		contactDS  			: banhji.source.customerDS,
		itemDS  			: banhji.source.itemDS,
		taxItemDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "tax_items",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"tax_type_id", value: 1}
			],					
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		catalogDS			: dataStore(apiUrl + "items"),
		assemblyDS			: dataStore(apiUrl + "items/assembly"),
		paymentMethodDS 	: dataStore(apiUrl + "payment_methods"),
		segmentItemDS		: banhji.source.segmentItemDS,		
		referenceTypes 		: [
			{ id:"Sale_Order", name:"Sale Order" },
			{ id:"Quote", name:"Quote" },
			{ id:"GDN", name:"Goods Delivery Note" }
		],
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,			    
	    bgColor 			: "#D5DBDB",
	    item 				: null,
	    showDeposit 		: false,	    
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,
		obj 				: null,
		isEdit 				: false,
		bolReference 		: false,
		showDiscount 		: false,
		sub_total 			: 0,
		tax 				: 0,
		discount 			: 0,
		balance 			: 0,
		total_credit		: 0,
		total 				: 0,
		original_total 		: 0,
		original_credit 	: 0,
		user_id				: banhji.userManagement.getLogin() === null ? 0 : banhji.userManagement.getLogin().id,
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);
				this.set("original_total", 0);							
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					this.set("original_total", 0);					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},	    			
		loadObj 			: function(id, is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}			

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.dataSource.view();				

				self.set("sub_total", kendo.toString(view[0].sub_total, "c", view[0].locale));
				self.set("discount", kendo.toString(view[0].discount, "c", view[0].locale));
		        self.set("tax", kendo.toString(view[0].tax, "c", view[0].locale));
		        self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));	  			
								
				//self.contactDS.filter({ field: "id", value: view[0].contact_id });				
				self.lineDS.filter({ field: "transaction_id", value: view[0].id });
				self.journalLineDS.filter({ field: "transaction_id", value: view[0].id });				
				self.depositDS.filter([
					{ field: "reference_id", value: view[0].id },
					{ field: "type", value: "Credit" }
				]);

				self.set("obj", view[0]);
				self.set("original_total", view[0].amount);
				self.set("original_credit", view[0].credit);

				self.loadDeposit();				
			});				
		},
		//Deposit
		loadDeposit 		: function(){
			var self = this, obj = this.get("obj");

			this.totalDepositDS.query({
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Credit" }
				],
				page: 1,
				pageSize: 100
			}).then(function(){
				var view = self.totalDepositDS.view(),
				amount = 0;

				if(self.get("isEdit")){
					amount = view[0].amount + obj.credit;
				}else{
					amount = view[0].amount;
				}

				self.set("total_credit", amount);
			});
		},		
		saveDeposit 		: function(transaction_id){
			var obj = this.get("obj");		

			this.depositDS.data([]);

			//Deposit apply
			if(obj.deposit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Deposit",			   	  		   					   				   	
				   	amount				: obj.deposit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

			//Credit apply
			if(obj.credit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Credit",			   	  		   					   				   	
				   	amount				: obj.credit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

	    	this.depositDS.sync();
		},
		//Contact
		loadContact 		: function(id){
			var self = this;			

			this.contactDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.contactDS.view(),
				obj = self.get("obj");
		    	
		    	obj.set("contact_id", view[0].id);
		    	obj.set("payment_method_id", view[0].payment_method_id);		    	
		    	obj.set("locale", view[0].currency[0].locale);				
				obj.set("bill_to", view[0].bill_to);
				obj.set("ship_to", view[0].ship_to);
				
				self.setRate();
				self.setTerm();
				self.loadDeposit();							
			});				

		},
		loadBalance 		: function(){
			var self = this, obj = this.get("obj");			

			this.balanceDS.query({    			
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Invoice" }
				],
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.balanceDS.view(),				
				contact = self.contactDS.get(obj.contact_id),
				balance = view[0].amount,
				creditAllowed = 0;

				if(contact.credit_limit > balance){
					creditAllowed = contact.credit_limit - balance;
				}
						    	
		    	self.set("balance", kendo.toString(balance, "c", obj.locale));
		    	obj.set("credit_allowed", creditAllowed, "c");		
			});				
		},
		contactChanges 		: function(){
			var obj = this.get("obj");

	    	if(obj.contact_id>0){		    			    	
		    	contact = this.contactDS.get(obj.contact_id);		    	
		    	
		    	obj.set("payment_method_id", contact.payment_method_id);		    	
		    	obj.set("locale", contact.currency[0].locale);
		    	obj.set("bill_to", contact.bill_to);
		    	obj.set("ship_to", contact.ship_to);

		    	this.setRate();		    	
		    	this.loadDeposit();
		    	this.loadBalance();		    			    	
	    	}else{
	    		this.set("total_credit", 0);
	    	}
	    },
		//Reference					
		loadReference 		: function(e){			
			var obj = this.get("obj");

			if(obj.reference_type){
				this.set("bolReference", true);

				this.referenceDS.filter([
					{ field: "contact_id", value: obj.contact_id },
					{ field: "status", value: 0 },
					{ field: "type", value: obj.reference_type }
				]);				
			}else{
				this.set("bolReference", false);
			}							
		},
		referenceChanges 	: function(e){
			var self = this, obj = this.get("obj");
			
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);

				//Deposit
				if(obj.deposit>0){
					this.set("showDeposit", true);
				}else{
					this.set("showDeposit", false);
				}

				obj.set("vat_id", ref.vat_id);								
				obj.set("deposit", ref.deposit);
				obj.set("discount", ref.discount);
				obj.set("discount_amount", ref.discount_amount);
				obj.set("fine", ref.fine);
				obj.set("vat", ref.vat);
								
			 	this.referenceLineDS.query({
			 		filter: { field:"transaction_id", value: obj.reference_id },
			 		page: 1,
			 		take: 100
			 	}).then(function(){
			 		var view = self.referenceLineDS.view();					

			 		self.lineDS.data([]);
			 		$.each(view, function(index, value){
			 			self.lineDS.add({					
							transaction_id 		: obj.id,
							item_id 			: value.item_id,
							measurement_id 		: value.measurement_id,							
							description 		: value.description,				
							quantity 	 		: value.quantity,
							price 				: value.price,												
							amount 				: value.amount,
							discount 			: value.discount,
							fine 				: value.fine,
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,							

							item_prices			: value.item_prices
						});
			 		});

			 		self.changes();
			 	});			 				 				 				 				
			}else{
				obj.set("deposit", 0);
				this.set("showDeposit", false);
			}								
		},
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", obj.locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", obj.locale);												
					});
				}

				self.changes();
			});				
		},		
		changes				: function(){
			var self = this, obj = this.get("obj");

			if(this.lineDS.total()>0){			
				var total = 0, subTotal = 0, discount =0, tax = 0;
								
				if(kendo.parseInt(obj.tax_item_id)>0){
					var selectedVat 					
					vatAmt = kendo.parseFloat(selectedVat.item_prices[0].price);
				}								

				$.each(this.lineDS.data(), function(index, value) {				
					var amt = value.quantity * value.price;					

					//Discount by line
					if(value.discount>0){										
						var discount_amount = amt * value.discount;
						amt -= discount_amount;
						discount += discount_amount;																	
					}

					//Tax by line
					if(value.tax_item_id>0){
						var taxItem = self.taxItemDS.get(value.tax_item_id);										
						tax += amt * taxItem.rate;																	
					}					

					value.set("amount", amt);					
					subTotal += amt;					
		        });				

		    	//Total
		        total = subTotal + tax;

		        //Apply Deposit
		        if(obj.deposit > 0){
		        	if(obj.deposit <= total){
		        		total -= obj.deposit;
		        	}else{
		        		obj.set("deposit", total);
		        		total = 0;
		        	}
		        }

		        //Apply Credit
		        if(obj.credit > 0){
		        	if(obj.credit <= this.get("total_credit")){
			        	if(obj.credit <= total){
			        		total -= obj.credit;
			        	}else{
			        		obj.set("credit", total);
			        		total = 0;
			        	}
		        	}else{
		        		alert("Over Credit To Apply!");
		        		obj.set("credit", 0);
		        	}
		        }

		        //Warning over credit allowed
		        if(obj.credit_allowed>0 && total>obj.credit_allowed){
		        	this.set("bgColor", "Gold");		        	
		        }else{
		        	this.set("bgColor", "#D5DBDB");
		        }

		        this.set("sub_total", kendo.toString(subTotal, "c", obj.locale));
		        this.set("discount", kendo.toString(discount, "c", obj.locale));
		        this.set("tax", kendo.toString(tax, "c", obj.locale));
		        this.set("total", kendo.toString(total, "c", obj.locale));

		        obj.set("sub_total", subTotal);
		        obj.set("discount", discount);
		        obj.set("tax", tax);			
				obj.set("amount", total);									    	
	    	}else{
	    		this.set("sub_total", kendo.toString(0, "c", obj.locale));
	    		this.set("discount", kendo.toString(0, "c", obj.locale));
		        this.set("tax", kendo.toString(0, "c", obj.locale));
		        this.set("total", kendo.toString(0, "c", obj.locale));

		        obj.set("sub_total", 0);
		        obj.set("discount", 0);
		        obj.set("tax", 0);			
				obj.set("amount", 0);				
	    	}   	
		},		
	    segmentChanges 		: function(e) {
			var dataArr = this.get("obj").segments,
			lastIndex = dataArr.length - 1,
			last = this.segmentItemDS.get(dataArr[lastIndex]);
			
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current_index = dataArr[i],
					current = this.segmentItemDS.get(current_index);

					if(current.segment_id === last.segment_id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},
		//Item		
		itemChanges 		: function(e){								
			var self = this, 
			data = e.data,
			transaction_id = 0, 
			obj = this.get("obj"), 
			item = this.itemDS.get(data.item_id),
			rate = obj.rate / item.item_prices[0].rate;
			
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
			
			if(data.item_id>0){		        
		        if(item.is_catalog=="1"){
		        	this.catalogDS.query({
		        		filter: { field:"id", operator:"where_in", value:item.catalogs }
		        	}).then(function(){
		        		self.lineDS.remove(data);

		        		$.each(self.catalogDS.view(), function(index, value){										
							self.lineDS.add({					
								transaction_id 		: transaction_id,
								item_id 			: value.id,
								measurement_id 		: value.item_prices[0].measurement_id,								
								description 		: value.name,				
								quantity 	 		: 1,
								price 				: value.item_prices[0].price*rate,												
								amount 				: value.item_prices[0].price*rate,
								discount 			: 0,
								fine 				: 0,
								rate				: obj.rate,
								locale				: obj.locale,
								has_vat 			: false,
								movement 			: -1,								

								item_prices 		: value.item_prices
							});								
		        		});

		        		self.changes();
		        	});
		        }else if(item.is_assemble=="1"){
		    		data.set("description", item.name);	    		
			        data.set("price", item.price*rate);
			        data.set("measurement_id", 0);
			        data.set("rate", obj.rate);		        	        
			       	data.set("item_prices", []);

			        this.changes();		     
		        }else{
		        	data.set("measurement_id", item.item_prices[0].measurement_id);		        	
		    		data.set("description", item.name);
		    		data.set("quantity", 1);	    		
			        data.set("price", item.item_prices[0].price*rate);			        		        
			        data.set("rate", obj.rate);
			        data.set("item_prices", item.item_prices);			        

			        this.changes();
		    	}		        
	        }                	        	
		},
		measurementChanges 	: function(e){										
			var self = this, data = e.data, obj = this.get("obj");			

			if(data.measurement_id>0){
				$.each(data.item_prices, function(index, value){
					if(value.measurement_id==data.measurement_id){
						var rate = obj.rate / value.rate;						
				        data.set("price", value.price*rate);				       			       
				        
						return false;
					}
				});	    		
		        	        
		        this.changes();
	        }	                	        	
		},					
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);
			this.journalLineDS.data([]);

			this.set("obj", null);
			this.set("sub_total", 0);
			this.set("tax", 0);
			this.set("discount", 0);			
			this.set("fine", 0);	
			this.set("total", 0);				

			this.dataSource.add({				
				contact_id 			: "",
				payment_method_id	: 0,				
				reference_id 		: 0,
				recurring_id 		: "",				
				user_id 			: this.get("user_id"),
				seller_id 			: this.get("user_id"), 	    		
			   	type				: "Cash_Sale",
			   	sub_total 			: 0,
			   	account_id 			: 0,				   		   					   				   	
			   	amount				: 0,
			   	credit_allowed 		: 0,
			   	credit 				: 0,
			   	deposit 			: 0,
			   	discount 			: 0,		   	
			   	fine 				: 0,
			   	tax 				: 0,
			   	check_no 			: "",
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),
			   	due_date 			: new Date(),			   	
			   	bill_to 			: "",
			   	ship_to 			: "",
			   	memo 				: "",
			   	memo2 				: "",
			   	status 				: 0,
			   	segments 			: [],
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0				
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);

			this.addRow();
			this.setRate();			
		},
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,
				tax_item_id 		: "",
				item_id 			: "",				
				measurement_id 		: 0,				
				description 		: "",				
				quantity 	 		: 1,
				price 				: 0,												
				amount 				: 0,
				discount 			: 0,
				fine 				: 0,
				rate				: obj.rate,
				locale				: obj.locale,							
				movement 			: -1,

				item_prices 		: []
			});																	
		},		
		removeRow 			: function(e){						
			var d = e.data;
			if(this.lineDS.total()>1){				
				this.lineDS.remove(d);
		        this.changes();
	        }		        
		},							    
	    transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this, obj = this.get("obj");

	    	//Warning over credit allowed
	        if(obj.credit_limit>0 && obj.amount>obj.credit_allowed){
	        	alert("Over credit allowed!");		        	
	        }

	    	//Update references
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);
				ref.set("status", 1);
				this.referenceDS.sync();
			} 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();

	    		//Update credit changes
	    		if(this.get("original_credit") !== obj.credit){	    			
	    			this.set("original_credit", obj.credit);    			

					var deposit = this.depositDS.at(0);
					deposit.set("amount", obj.credit*-1);

					this.depositDS.sync();
	    		}	    		

	    		//Update total changes
	    		if(this.get("original_total") == obj.amount){
	    			this.lineDS.sync();	    			
	    		}else{
	    			this.set("original_total", obj.amount);

	    			$.each(this.journalLineDS.data(), function(index, value){										
						value.set("deleted", 1);										
					});

					this.addJournal(obj.id);
	    		}	    		
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){
					//Deposit
					if(obj.deposit > 0 || obj.credit > 0){
						self.saveDeposit(data[0].id);
					}

					//Journal
					self.addJournal(data[0].id);

					//Item line
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);										
					});
					self.lineDS.sync();																	
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();			

			window.history.back();
		},
	    //Journal	        
	    addJournal 			: function(transaction_id){
	    	var self = this,
	    	obj = this.get("obj"),
	    	contact = this.contactDS.get(obj.contact_id),	    				    	
	    	saleList = {},
	    	taxList = {},
	    	inventoryList = {},
			cogsList = {};			
			
			//Arrange sale, cogs, inventory
			$.each(this.lineDS.data(), function(index, value){										
				var item = self.itemDS.get(value.item_id),
				amount = value.quantity * value.price;				
				
				//Add sale list
				var incomeID = item.income_account_id;																				
				if(incomeID>0){
					if(saleList[incomeID]===undefined){
						saleList[incomeID]={"id": incomeID, "amount": amount};						
					}else{											
						if(saleList[incomeID].id===incomeID){
							saleList[incomeID].amount += amount;
						}else{
							saleList[incomeID]={"id": incomeID, "amount": amount};
						}
					}
				}

				//Add tax list																							
				if(value.tax_item_id>0){
					var taxItem = self.taxItemDS.get(value.tax_item_id),
					taxID = taxItem.account_id,
					taxAmt = value.amount*taxItem.rate;

					if(taxList[taxID]===undefined){
						taxList[taxID]={"id": taxID, "amount": taxAmt};						
					}else{											
						if(taxList[taxID].id===taxID){
							taxList[taxID].amount += taxAmt;
						}else{
							taxList[taxID]={"id": taxID, "amount": taxAmt};
						}
					}
				}				
				
				//Inventory
				if(item.item_type_id==1){
					//Add cogs list
					var itemCost = value.quantity*item.cost,
					cogsID = item.cogs_account_id;				
					if(cogsList[cogsID]===undefined){
						cogsList[cogsID]={"id": cogsID, "amount": itemCost};						
					}else{											
						if(cogsList[cogsID].id===cogsID){
							cogsList[cogsID].amount += itemCost;
						}else{
							cogsList[cogsID]={"id": cogsID, "amount": itemCost};
						}
					}						

					//Add inventory list
					var inventoryID = item.inventory_account_id;
					if(inventoryList[inventoryID]===undefined){
						inventoryList[inventoryID]={"id": inventoryID, "amount": itemCost};						
					}else{											
						if(inventoryList[inventoryID].id===inventoryID){
							inventoryList[inventoryID].amount += itemCost;
						}else{
							inventoryList[inventoryID]={"id": inventoryID, "amount": itemCost};
						}
					}
				}					  	
			});//End Foreach Loop			

			//Start journal
			//cash 
			this.journalLineDS.add({					
				transaction_id 		: transaction_id,
				account_id 			: contact.account_id,				
				contact_id 			: obj.contact_id,				
				description 		: "",
				reference_no 		: "",
				segments 	 		: [],								
				dr 	 				: 0,
				cr 					: obj.amount,				
				rate				: obj.rate,
				locale				: obj.locale
			});

			//Discount on Dr			
			if(obj.discount > 0){				
				this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: contact.discount_account_id,				
					contact_id 			: obj.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: [],								
					dr 	 				: obj.discount,
					cr 					: 0,				
					rate				: obj.rate,
					locale				: obj.locale
				});
			}

			//Deposit and Credit on Dr
			if(obj.deposit > 0 || obj.credit > 0){				
				this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: contact.deposit_account_id,				
					contact_id 			: obj.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: [],								
					dr 	 				: obj.deposit + obj.credit,
					cr 					: 0,				
					rate				: obj.rate,
					locale				: obj.locale
				});
			}

			//Sale accounts on Cr		
			if(!jQuery.isEmptyObject(saleList)){				
				$.each(saleList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});										
				});
			}

			//Tax on Cr					
			if(!jQuery.isEmptyObject(taxList)){				
				$.each(taxList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});										
				});
			}	

			//Inventory to journal
			//COGS on Dr 			
			if(!jQuery.isEmptyObject(cogsList)){							
				$.each(cogsList, function(index, value){				
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: value.amount,
						cr 					: 0,				
						rate				: obj.rate,
						locale				: obj.locale
					});								
				});							
			}
			//Inventory on Cr
			if(!jQuery.isEmptyObject(inventoryList)){
				$.each(inventoryList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});						
				});
			}

			this.journalLineDS.sync();
		},
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);				
				
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("discount", recur.discount);
				obj.set("fine", recur.fine);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,							
							item_id 			: value.item_id,									
							description 		: value.description,							
							quantity 			: value.quantity,
							price 				: value.price,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,

							item_prices 		: value.item_prices
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({				
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	discount 			: obj.discount,
			   	fine 				: obj.fine,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,					
					item_id 			: value.item_id,								
					description 		: value.description,													
					amount 	 			: value.amount,
					discount 			: value.discount,
					fine 				: value.fine,						
					rate				: value.rate,
					locale				: value.locale,
					has_vat 			: value.has_vat
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);
	    		
	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	 		
	});
	banhji.saleOrder =  kendo.observable({
		dataSource 			: dataStore(apiUrl + "transactions"),
		lineDS  			: dataStore(apiUrl + "transactions/line"),
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "transactions/line"),
		referenceDS			: dataStore(apiUrl + "transactions"),
		referenceLineDS		: dataStore(apiUrl + "transactions/line"),
		depositDS			: dataStore(apiUrl + "transactions"),		
		balanceDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		totalDepositDS  	: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		currencyDS  		: banhji.source.currencyDS,
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		contactDS  			: banhji.source.customerDS,
		itemDS  			: banhji.source.itemDS,
		taxItemDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "tax_items",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"tax_type_id", value: 1}
			],					
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		catalogDS			: dataStore(apiUrl + "items"),
		assemblyDS			: dataStore(apiUrl + "items/assembly"),
		paymentMethodDS 	: dataStore(apiUrl + "payment_methods"),
		segmentItemDS		: banhji.source.segmentItemDS,		
		referenceTypes 		: [			
			{ id:"Quote", name:"Quote" }			
		],
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,			    
	    bgColor 			: "#D5DBDB",
	    item 				: null,
	    showDeposit 		: false,	    
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,
		obj 				: null,
		isEdit 				: false,
		bolReference 		: false,
		showDiscount 		: false,
		sub_total 			: 0,		
		discount 			: 0,
		balance 			: 0,
		total_credit		: 0,
		total 				: 0,
		original_total 		: 0,
		original_credit 	: 0,
		user_id				: banhji.userManagement.getLogin() === null ? 0 : banhji.userManagement.getLogin().id,
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);
				this.set("original_total", 0);							
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					this.set("original_total", 0);					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},	    			
		loadObj 			: function(id, is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}			

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.dataSource.view();				

				self.set("sub_total", kendo.toString(view[0].sub_total, "c", view[0].locale));
				self.set("discount", kendo.toString(view[0].discount, "c", view[0].locale));
		        self.set("tax", kendo.toString(view[0].tax, "c", view[0].locale));
		        self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));	  			
								
				//self.contactDS.filter({ field: "id", value: view[0].contact_id });				
				self.lineDS.filter({ field: "transaction_id", value: view[0].id });
				self.journalLineDS.filter({ field: "transaction_id", value: view[0].id });				
				self.depositDS.filter([
					{ field: "reference_id", value: view[0].id },
					{ field: "type", value: "Credit" }
				]);

				self.set("obj", view[0]);
				self.set("original_total", view[0].amount);
				self.set("original_credit", view[0].credit);

				self.loadDeposit();				
			});				
		},
		//Deposit
		loadDeposit 		: function(){
			var self = this, obj = this.get("obj");

			this.totalDepositDS.query({
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Credit" }
				],
				page: 1,
				pageSize: 100
			}).then(function(){
				var view = self.totalDepositDS.view(),
				amount = 0;

				if(self.get("isEdit")){
					amount = view[0].amount + obj.credit;
				}else{
					amount = view[0].amount;
				}

				self.set("total_credit", amount);
			});
		},		
		saveDeposit 		: function(transaction_id){
			var obj = this.get("obj");		

			this.depositDS.data([]);

			//Deposit apply
			if(obj.deposit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Deposit",			   	  		   					   				   	
				   	amount				: obj.deposit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

			//Credit apply
			if(obj.credit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Credit",			   	  		   					   				   	
				   	amount				: obj.credit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

	    	this.depositDS.sync();
		},
		//Contact
		loadContact 		: function(id){
			var self = this;			

			this.contactDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.contactDS.view(),
				obj = self.get("obj");
		    	
		    	obj.set("contact_id", view[0].id);
		    	obj.set("payment_method_id", view[0].payment_method_id);		    	
		    	obj.set("locale", view[0].currency[0].locale);				
				obj.set("bill_to", view[0].bill_to);
				obj.set("ship_to", view[0].ship_to);
				
				self.setRate();
				self.setTerm();
				self.loadDeposit();							
			});				

		},
		loadBalance 		: function(){
			var self = this, obj = this.get("obj");			

			this.balanceDS.query({    			
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Invoice" }
				],
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.balanceDS.view(),				
				contact = self.contactDS.get(obj.contact_id),
				balance = view[0].amount,
				creditAllowed = 0;

				if(contact.credit_limit > balance){
					creditAllowed = contact.credit_limit - balance;
				}
						    	
		    	self.set("balance", kendo.toString(balance, "c", obj.locale));
		    	obj.set("credit_allowed", creditAllowed, "c");		
			});				
		},
		contactChanges 		: function(){
			var obj = this.get("obj");

	    	if(obj.contact_id>0){		    			    	
		    	contact = this.contactDS.get(obj.contact_id);		    	
		    	
		    	obj.set("payment_method_id", contact.payment_method_id);		    	
		    	obj.set("locale", contact.currency[0].locale);
		    	obj.set("bill_to", contact.bill_to);
		    	obj.set("ship_to", contact.ship_to);

		    	this.setRate();		    	
		    	this.loadDeposit();
		    	this.loadBalance();		    			    	
	    	}else{
	    		this.set("total_credit", 0);
	    	}
	    },
		//Reference					
		loadReference 		: function(e){			
			var obj = this.get("obj");

			if(obj.reference_type){
				this.set("bolReference", true);

				this.referenceDS.filter([
					{ field: "contact_id", value: obj.contact_id },
					{ field: "status", value: 0 },
					{ field: "type", value: obj.reference_type }
				]);				
			}else{
				this.set("bolReference", false);
			}							
		},
		referenceChanges 	: function(e){
			var self = this, obj = this.get("obj");
			
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);

				//Deposit
				if(obj.deposit>0){
					this.set("showDeposit", true);
				}else{
					this.set("showDeposit", false);
				}

				obj.set("vat_id", ref.vat_id);								
				obj.set("deposit", ref.deposit);
				obj.set("discount", ref.discount);
				obj.set("discount_amount", ref.discount_amount);
				obj.set("fine", ref.fine);
				obj.set("vat", ref.vat);
								
			 	this.referenceLineDS.query({
			 		filter: { field:"transaction_id", value: obj.reference_id },
			 		page: 1,
			 		take: 100
			 	}).then(function(){
			 		var view = self.referenceLineDS.view();					

			 		self.lineDS.data([]);
			 		$.each(view, function(index, value){
			 			self.lineDS.add({					
							transaction_id 		: obj.id,
							item_id 			: value.item_id,
							measurement_id 		: value.measurement_id,							
							description 		: value.description,				
							quantity 	 		: value.quantity,
							price 				: value.price,												
							amount 				: value.amount,
							discount 			: value.discount,
							fine 				: value.fine,
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,							

							item_prices			: value.item_prices
						});
			 		});

			 		self.changes();
			 	});			 				 				 				 				
			}else{
				obj.set("deposit", 0);
				this.set("showDeposit", false);
			}								
		},
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", obj.locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", obj.locale);												
					});
				}

				self.changes();
			});				
		},		
		changes				: function(){
			var self = this, obj = this.get("obj");

			if(this.lineDS.total()>0){			
				var total = 0, subTotal = 0, discount =0, tax = 0;
								
				if(kendo.parseInt(obj.tax_item_id)>0){
					var selectedVat 					
					vatAmt = kendo.parseFloat(selectedVat.item_prices[0].price);
				}								

				$.each(this.lineDS.data(), function(index, value) {				
					var amt = value.quantity * value.price;					

					//Discount by line
					if(value.discount>0){										
						var discount_amount = amt * value.discount;
						amt -= discount_amount;
						discount += discount_amount;																	
					}

					//Tax by line
					if(value.tax_item_id>0){
						var taxItem = self.taxItemDS.get(value.tax_item_id);										
						tax += amt * taxItem.rate;																	
					}					

					value.set("amount", amt);					
					subTotal += amt;					
		        });				

		    	//Total
		        total = subTotal + tax;

		        //Apply Deposit
		        if(obj.deposit > 0){
		        	if(obj.deposit <= total){
		        		total -= obj.deposit;
		        	}else{
		        		obj.set("deposit", total);
		        		total = 0;
		        	}
		        }

		        //Apply Credit
		        if(obj.credit > 0){
		        	if(obj.credit <= this.get("total_credit")){
			        	if(obj.credit <= total){
			        		total -= obj.credit;
			        	}else{
			        		obj.set("credit", total);
			        		total = 0;
			        	}
		        	}else{
		        		alert("Over Credit To Apply!");
		        		obj.set("credit", 0);
		        	}
		        }

		        //Warning over credit allowed
		        if(obj.credit_allowed>0 && total>obj.credit_allowed){
		        	this.set("bgColor", "Gold");		        	
		        }else{
		        	this.set("bgColor", "#D5DBDB");
		        }

		        this.set("sub_total", kendo.toString(subTotal, "c", obj.locale));
		        this.set("discount", kendo.toString(discount, "c", obj.locale));
		        this.set("tax", kendo.toString(tax, "c", obj.locale));
		        this.set("total", kendo.toString(total, "c", obj.locale));

		        obj.set("sub_total", subTotal);
		        obj.set("discount", discount);
		        obj.set("tax", tax);			
				obj.set("amount", total);									    	
	    	}else{
	    		this.set("sub_total", kendo.toString(0, "c", obj.locale));
	    		this.set("discount", kendo.toString(0, "c", obj.locale));
		        this.set("tax", kendo.toString(0, "c", obj.locale));
		        this.set("total", kendo.toString(0, "c", obj.locale));

		        obj.set("sub_total", 0);
		        obj.set("discount", 0);
		        obj.set("tax", 0);			
				obj.set("amount", 0);				
	    	}   	
		},		
	    segmentChanges 		: function(e) {
			var dataArr = this.get("obj").segments,
			lastIndex = dataArr.length - 1,
			last = this.segmentItemDS.get(dataArr[lastIndex]);
			
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current_index = dataArr[i],
					current = this.segmentItemDS.get(current_index);

					if(current.segment_id === last.segment_id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},
		//Item		
		itemChanges 		: function(e){								
			var self = this, 
			data = e.data,
			transaction_id = 0, 
			obj = this.get("obj"), 
			item = this.itemDS.get(data.item_id),
			rate = obj.rate / item.item_prices[0].rate;
			
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
			
			if(data.item_id>0){		        
		        if(item.is_catalog=="1"){
		        	this.catalogDS.query({
		        		filter: { field:"id", operator:"where_in", value:item.catalogs }
		        	}).then(function(){
		        		self.lineDS.remove(data);

		        		$.each(self.catalogDS.view(), function(index, value){										
							self.lineDS.add({					
								transaction_id 		: transaction_id,
								item_id 			: value.id,
								measurement_id 		: value.item_prices[0].measurement_id,								
								description 		: value.name,				
								quantity 	 		: 1,
								price 				: value.item_prices[0].price*rate,												
								amount 				: value.item_prices[0].price*rate,
								discount 			: 0,
								fine 				: 0,
								rate				: obj.rate,
								locale				: obj.locale,
								has_vat 			: false,
								movement 			: -1,								

								item_prices 		: value.item_prices
							});								
		        		});

		        		self.changes();
		        	});
		        }else if(item.is_assemble=="1"){
		    		data.set("description", item.name);	    		
			        data.set("price", item.price*rate);
			        data.set("measurement_id", 0);
			        data.set("rate", obj.rate);		        	        
			       	data.set("item_prices", []);

			        this.changes();		     
		        }else{
		        	data.set("measurement_id", item.item_prices[0].measurement_id);		        	
		    		data.set("description", item.name);
		    		data.set("quantity", 1);	    		
			        data.set("price", item.item_prices[0].price*rate);			        		        
			        data.set("rate", obj.rate);
			        data.set("item_prices", item.item_prices);			        

			        this.changes();
		    	}		        
	        }                	        	
		},
		measurementChanges 	: function(e){										
			var self = this, data = e.data, obj = this.get("obj");			

			if(data.measurement_id>0){
				$.each(data.item_prices, function(index, value){
					if(value.measurement_id==data.measurement_id){
						var rate = obj.rate / value.rate;						
				        data.set("price", value.price*rate);				       			       
				        
						return false;
					}
				});	    		
		        	        
		        this.changes();
	        }	                	        	
		},					
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);
			this.journalLineDS.data([]);

			this.set("obj", null);
			this.set("sub_total", 0);
			this.set("tax", 0);
			this.set("discount", 0);			
			this.set("fine", 0);	
			this.set("total", 0);				

			this.dataSource.add({				
				contact_id 			: "",
				payment_method_id	: 0,				
				reference_id 		: 0,
				recurring_id 		: "",				
				user_id 			: this.get("user_id"),
				seller_id 			: this.get("user_id"), 	    		
			   	type				: "Sale_Order",
			   	sub_total 			: 0,
			   	account_id 			: 0,				   		   					   				   	
			   	amount				: 0,
			   	credit_allowed 		: 0,
			   	credit 				: 0,
			   	deposit 			: 0,
			   	discount 			: 0,		   	
			   	fine 				: 0,
			   	tax 				: 0,
			   	check_no 			: "",
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),
			   	due_date 			: new Date(),			   	
			   	bill_to 			: "",
			   	ship_to 			: "",
			   	memo 				: "",
			   	memo2 				: "",
			   	status 				: 0,
			   	segments 			: [],
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0				
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);

			this.addRow();
			this.setRate();			
		},
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,
				tax_item_id 		: "",
				item_id 			: "",				
				measurement_id 		: 0,				
				description 		: "",				
				quantity 	 		: 1,
				price 				: 0,												
				amount 				: 0,
				discount 			: 0,
				fine 				: 0,
				rate				: obj.rate,
				locale				: obj.locale,							
				movement 			: -1,

				item_prices 		: []
			});																	
		},		
		removeRow 			: function(e){						
			var d = e.data;
			if(this.lineDS.total()>1){				
				this.lineDS.remove(d);
		        this.changes();
	        }		        
		},							    
	    transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this, obj = this.get("obj");

	    	//Warning over credit allowed
	        if(obj.credit_limit>0 && obj.amount>obj.credit_allowed){
	        	alert("Over credit allowed!");		        	
	        }

	    	//Update references
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);
				ref.set("status", 1);
				this.referenceDS.sync();
			} 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();

	    		//Update credit changes
	    		if(this.get("original_credit") !== obj.credit){	    			
	    			this.set("original_credit", obj.credit);    			

					var deposit = this.depositDS.at(0);
					deposit.set("amount", obj.credit*-1);

					this.depositDS.sync();
	    		}	    		

	    		//Update total changes
	    		if(this.get("original_total") == obj.amount){
	    			this.lineDS.sync();	    			
	    		}else{
	    			this.set("original_total", obj.amount);

	    			$.each(this.journalLineDS.data(), function(index, value){										
						value.set("deleted", 1);										
					});

					this.addJournal(obj.id);
	    		}	    		
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){
					//Deposit
					if(obj.deposit > 0 || obj.credit > 0){
						self.saveDeposit(data[0].id);
					}

					//Journal
				

					//Item line
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);										
					});
					self.lineDS.sync();																	
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();			

			window.history.back();
		},
	    //Journal	        
	 
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);				
				
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("discount", recur.discount);
				obj.set("fine", recur.fine);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,							
							item_id 			: value.item_id,									
							description 		: value.description,							
							quantity 			: value.quantity,
							price 				: value.price,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,

							item_prices 		: value.item_prices
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({				
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	discount 			: obj.discount,
			   	fine 				: obj.fine,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,					
					item_id 			: value.item_id,								
					description 		: value.description,													
					amount 	 			: value.amount,
					discount 			: value.discount,
					fine 				: value.fine,						
					rate				: value.rate,
					locale				: value.locale,
					has_vat 			: value.has_vat
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);
	    		
	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	 		
	});
	banhji.quote =  kendo.observable({
		dataSource 			: dataStore(apiUrl + "transactions"),
		lineDS  			: dataStore(apiUrl + "transactions/line"),
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "transactions/line"),		
		referenceLineDS		: dataStore(apiUrl + "transactions/line"),
		depositDS			: dataStore(apiUrl + "transactions"),		
		balanceDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		totalDepositDS  	: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		currencyDS  		: banhji.source.currencyDS,
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		contactDS  			: banhji.source.customerDS,
		itemDS  			: banhji.source.itemDS,
		catalogDS			: dataStore(apiUrl + "items"),
		assemblyDS			: dataStore(apiUrl + "items/assembly"),
		paymentMethodDS 	: dataStore(apiUrl + "payment_methods"),
		segmentItemDS		: banhji.source.segmentItemDS,		
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,			    
	    bgColor 			: "#D5DBDB",
	    item 				: null,
	    showDeposit 		: false,	    
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,
		obj 				: null,
		isEdit 				: false,
		bolReference 		: false,
		showDiscount 		: false,
		sub_total 			: 0,		
		discount 			: 0,
		balance 			: 0,
		total_credit		: 0,
		total 				: 0,
		original_total 		: 0,
		original_credit 	: 0,
		user_id				: banhji.source.user_id,
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);
				this.set("original_total", 0);							
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					this.set("original_total", 0);					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},	    			
		loadObj 			: function(id, is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}			

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.dataSource.view();				

				self.set("sub_total", kendo.toString(view[0].sub_total, "c", view[0].locale));
				self.set("discount", kendo.toString(view[0].discount, "c", view[0].locale));
		        self.set("tax", kendo.toString(view[0].tax, "c", view[0].locale));
		        self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));	  			
								
				//self.contactDS.filter({ field: "id", value: view[0].contact_id });				
				self.lineDS.filter({ field: "transaction_id", value: view[0].id });
				self.journalLineDS.filter({ field: "transaction_id", value: view[0].id });				
				self.depositDS.filter([
					{ field: "reference_id", value: view[0].id },
					{ field: "type", value: "Credit" }
				]);

				self.set("obj", view[0]);
				self.set("original_total", view[0].amount);
				self.set("original_credit", view[0].credit);

				self.loadDeposit();				
			});				
		},
		//Deposit
		loadDeposit 		: function(){
			var self = this, obj = this.get("obj");

			this.totalDepositDS.query({
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Credit" }
				],
				page: 1,
				pageSize: 100
			}).then(function(){
				var view = self.totalDepositDS.view(),
				amount = 0;

				if(self.get("isEdit")){
					amount = view[0].amount + obj.credit;
				}else{
					amount = view[0].amount;
				}

				self.set("total_credit", amount);
			});
		},		
		saveDeposit 		: function(transaction_id){
			var obj = this.get("obj");		

			this.depositDS.data([]);

			//Deposit apply
			if(obj.deposit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Deposit",			   	  		   					   				   	
				   	amount				: obj.deposit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

			//Credit apply
			if(obj.credit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Credit",			   	  		   					   				   	
				   	amount				: obj.credit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

	    	this.depositDS.sync();
		},
		//Contact
		loadContact 		: function(id){
			var self = this;			

			this.contactDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.contactDS.view(),
				obj = self.get("obj");
		    	
		    	obj.set("contact_id", view[0].id);
		    	obj.set("payment_method_id", view[0].payment_method_id);		    	
		    	obj.set("locale", view[0].currency[0].locale);				
				obj.set("bill_to", view[0].bill_to);
				obj.set("ship_to", view[0].ship_to);
				
				self.setRate();
				self.setTerm();
				self.loadDeposit();							
			});				

		},
		loadBalance 		: function(){
			var self = this, obj = this.get("obj");			

			this.balanceDS.query({    			
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Invoice" }
				],
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.balanceDS.view(),				
				contact = self.contactDS.get(obj.contact_id),
				balance = view[0].amount,
				creditAllowed = 0;

				if(contact.credit_limit > balance){
					creditAllowed = contact.credit_limit - balance;
				}
						    	
		    	self.set("balance", kendo.toString(balance, "c", obj.locale));
		    	obj.set("credit_allowed", creditAllowed, "c");		
			});				
		},
		contactChanges 		: function(){
			var obj = this.get("obj");

	    	if(obj.contact_id>0){		    			    	
		    	contact = this.contactDS.get(obj.contact_id);		    	
		    	
		    	obj.set("payment_method_id", contact.payment_method_id);		    	
		    	obj.set("locale", contact.currency[0].locale);
		    	obj.set("bill_to", contact.bill_to);
		    	obj.set("ship_to", contact.ship_to);

		    	this.setRate();		    	
		    	this.loadDeposit();
		    	this.loadBalance();		    			    	
	    	}else{
	    		this.set("total_credit", 0);
	    	}
	    },
		//Reference					
		loadReference 		: function(e){			
			var obj = this.get("obj");

			if(obj.reference_type){
				this.set("bolReference", true);

				this.referenceDS.filter([
					{ field: "contact_id", value: obj.contact_id },
					{ field: "status", value: 0 },
					{ field: "type", value: obj.reference_type }
				]);				
			}else{
				this.set("bolReference", false);
			}							
		},
		referenceChanges 	: function(e){
			var self = this, obj = this.get("obj");
			
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);

				//Deposit
				if(obj.deposit>0){
					this.set("showDeposit", true);
				}else{
					this.set("showDeposit", false);
				}

				obj.set("vat_id", ref.vat_id);								
				obj.set("deposit", ref.deposit);
				obj.set("discount", ref.discount);
				obj.set("discount_amount", ref.discount_amount);
				obj.set("fine", ref.fine);
				obj.set("vat", ref.vat);
								
			 	this.referenceLineDS.query({
			 		filter: { field:"transaction_id", value: obj.reference_id },
			 		page: 1,
			 		take: 100
			 	}).then(function(){
			 		var view = self.referenceLineDS.view();					

			 		self.lineDS.data([]);
			 		$.each(view, function(index, value){
			 			self.lineDS.add({					
							transaction_id 		: obj.id,
							item_id 			: value.item_id,
							measurement_id 		: value.measurement_id,							
							description 		: value.description,				
							quantity 	 		: value.quantity,
							price 				: value.price,												
							amount 				: value.amount,
							discount 			: value.discount,
							fine 				: value.fine,
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,							

							item_prices			: value.item_prices
						});
			 		});

			 		self.changes();
			 	});			 				 				 				 				
			}else{
				obj.set("deposit", 0);
				this.set("showDeposit", false);
			}								
		},
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", obj.locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", obj.locale);												
					});
				}

				self.changes();
			});				
		},		
		changes				: function(){
			var self = this, obj = this.get("obj");

			if(this.lineDS.total()>0){			
				var total = 0, subTotal = 0, discount =0, tax = 0;
								
				if(kendo.parseInt(obj.tax_item_id)>0){
					var selectedVat 					
					vatAmt = kendo.parseFloat(selectedVat.item_prices[0].price);
				}								

				$.each(this.lineDS.data(), function(index, value) {				
					var amt = value.quantity * value.price;					

					//Discount by line
					if(value.discount>0){										
						var discount_amount = amt * value.discount;
						amt -= discount_amount;
						discount += discount_amount;																	
					}

					//Tax by line
					if(value.tax_item_id>0){
						var taxItem = self.taxItemDS.get(value.tax_item_id);										
						tax += amt * taxItem.rate;																	
					}					

					value.set("amount", amt);					
					subTotal += amt;					
		        });				

		    	//Total
		        total = subTotal + tax;

		        //Apply Deposit
		        if(obj.deposit > 0){
		        	if(obj.deposit <= total){
		        		total -= obj.deposit;
		        	}else{
		        		obj.set("deposit", total);
		        		total = 0;
		        	}
		        }

		        //Apply Credit
		        if(obj.credit > 0){
		        	if(obj.credit <= this.get("total_credit")){
			        	if(obj.credit <= total){
			        		total -= obj.credit;
			        	}else{
			        		obj.set("credit", total);
			        		total = 0;
			        	}
		        	}else{
		        		alert("Over Credit To Apply!");
		        		obj.set("credit", 0);
		        	}
		        }

		        //Warning over credit allowed
		        if(obj.credit_allowed>0 && total>obj.credit_allowed){
		        	this.set("bgColor", "Gold");		        	
		        }else{
		        	this.set("bgColor", "#D5DBDB");
		        }

		        this.set("sub_total", kendo.toString(subTotal, "c", obj.locale));
		        this.set("discount", kendo.toString(discount, "c", obj.locale));
		        this.set("tax", kendo.toString(tax, "c", obj.locale));
		        this.set("total", kendo.toString(total, "c", obj.locale));

		        obj.set("sub_total", subTotal);
		        obj.set("discount", discount);
		        obj.set("tax", tax);			
				obj.set("amount", total);									    	
	    	}else{
	    		this.set("sub_total", kendo.toString(0, "c", obj.locale));
	    		this.set("discount", kendo.toString(0, "c", obj.locale));
		        this.set("tax", kendo.toString(0, "c", obj.locale));
		        this.set("total", kendo.toString(0, "c", obj.locale));

		        obj.set("sub_total", 0);
		        obj.set("discount", 0);
		        obj.set("tax", 0);			
				obj.set("amount", 0);				
	    	}   	
		},		
	    segmentChanges 		: function(e) {
			var dataArr = this.get("obj").segments,
			lastIndex = dataArr.length - 1,
			last = this.segmentItemDS.get(dataArr[lastIndex]);
			
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current_index = dataArr[i],
					current = this.segmentItemDS.get(current_index);

					if(current.segment_id === last.segment_id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},
		//Item		
		itemChanges 		: function(e){								
			var self = this, 
			data = e.data,
			transaction_id = 0, 
			obj = this.get("obj"), 
			item = this.itemDS.get(data.item_id),
			rate = obj.rate / item.item_prices[0].rate;
			
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
			
			if(data.item_id>0){		        
		        if(item.is_catalog=="1"){
		        	this.catalogDS.query({
		        		filter: { field:"id", operator:"where_in", value:item.catalogs }
		        	}).then(function(){
		        		self.lineDS.remove(data);

		        		$.each(self.catalogDS.view(), function(index, value){										
							self.lineDS.add({					
								transaction_id 		: transaction_id,
								item_id 			: value.id,
								measurement_id 		: value.item_prices[0].measurement_id,								
								description 		: value.name,				
								quantity 	 		: 1,
								price 				: value.item_prices[0].price*rate,												
								amount 				: value.item_prices[0].price*rate,
								discount 			: 0,
								fine 				: 0,
								rate				: obj.rate,
								locale				: obj.locale,
								has_vat 			: false,
								movement 			: -1,								

								item_prices 		: value.item_prices
							});								
		        		});

		        		self.changes();
		        	});
		        }else if(item.is_assemble=="1"){
		    		data.set("description", item.name);	    		
			        data.set("price", item.price*rate);
			        data.set("measurement_id", 0);
			        data.set("rate", obj.rate);		        	        
			       	data.set("item_prices", []);

			        this.changes();		     
		        }else{
		        	data.set("measurement_id", item.item_prices[0].measurement_id);		        	
		    		data.set("description", item.name);
		    		data.set("quantity", 1);	    		
			        data.set("price", item.item_prices[0].price*rate);			        		        
			        data.set("rate", obj.rate);
			        data.set("item_prices", item.item_prices);			        

			        this.changes();
		    	}		        
	        }                	        	
		},
		measurementChanges 	: function(e){										
			var self = this, data = e.data, obj = this.get("obj");			

			if(data.measurement_id>0){
				$.each(data.item_prices, function(index, value){
					if(value.measurement_id==data.measurement_id){
						var rate = obj.rate / value.rate;						
				        data.set("price", value.price*rate);				       			       
				        
						return false;
					}
				});	    		
		        	        
		        this.changes();
	        }	                	        	
		},					
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);
			this.journalLineDS.data([]);

			this.set("obj", null);
			this.set("sub_total", 0);
			this.set("tax", 0);
			this.set("discount", 0);			
			this.set("fine", 0);	
			this.set("total", 0);				

			this.dataSource.add({				
				contact_id 			: "",
				payment_method_id	: 0,				
				reference_id 		: 0,
				recurring_id 		: "",				
				user_id 			: this.get("user_id"),
				seller_id 			: this.get("user_id"), 	    		
			   	type				: "Quote",
			   	sub_total 			: 0,
			   	account_id 			: 0,				   		   					   				   	
			   	amount				: 0,
			   	credit_allowed 		: 0,
			   	credit 				: 0,
			   	deposit 			: 0,
			   	discount 			: 0,		   	
			   	fine 				: 0,
			   	tax 				: 0,
			   	check_no 			: "",
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),
			   	due_date 			: new Date(),			   	
			   	bill_to 			: "",
			   	ship_to 			: "",
			   	memo 				: "",
			   	memo2 				: "",
			   	status 				: 0,
			   	segments 			: [],
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0				
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);

			this.addRow();
			this.setRate();			
		},
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,
				tax_item_id 		: "",
				item_id 			: "",				
				measurement_id 		: 0,				
				description 		: "",				
				quantity 	 		: 1,
				price 				: 0,												
				amount 				: 0,
				discount 			: 0,
				fine 				: 0,
				rate				: obj.rate,
				locale				: obj.locale,							
				movement 			: -1,

				item_prices 		: []
			});																	
		},		
		removeRow 			: function(e){						
			var d = e.data;
			if(this.lineDS.total()>1){				
				this.lineDS.remove(d);
		        this.changes();
	        }		        
		},							    
	    transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this, obj = this.get("obj");

	    	//Warning over credit allowed
	        if(obj.credit_limit>0 && obj.amount>obj.credit_allowed){
	        	alert("Over credit allowed!");		        	
	        }

	    	//Update references
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);
				ref.set("status", 1);
				this.referenceDS.sync();
			} 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();

	    		//Update credit changes
	    		if(this.get("original_credit") !== obj.credit){	    			
	    			this.set("original_credit", obj.credit);    			

					var deposit = this.depositDS.at(0);
					deposit.set("amount", obj.credit*-1);

					this.depositDS.sync();
	    		}	    		

	    		//Update total changes
	    		if(this.get("original_total") == obj.amount){
	    			this.lineDS.sync();	    			
	    		}else{
	    			this.set("original_total", obj.amount);

	    			$.each(this.journalLineDS.data(), function(index, value){										
						value.set("deleted", 1);										
					});

					this.addJournal(obj.id);
	    		}	    		
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){
					//Deposit
					if(obj.deposit > 0 || obj.credit > 0){
						self.saveDeposit(data[0].id);
					}

					//Journal
				

					//Item line
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);										
					});
					self.lineDS.sync();																	
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();			

			window.history.back();
		},
	    //Journal	        
	 
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);				
				
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("discount", recur.discount);
				obj.set("fine", recur.fine);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,							
							item_id 			: value.item_id,									
							description 		: value.description,							
							quantity 			: value.quantity,
							price 				: value.price,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,

							item_prices 		: value.item_prices
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({				
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	discount 			: obj.discount,
			   	fine 				: obj.fine,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,					
					item_id 			: value.item_id,								
					description 		: value.description,													
					amount 	 			: value.amount,
					discount 			: value.discount,
					fine 				: value.fine,						
					rate				: value.rate,
					locale				: value.locale,
					has_vat 			: value.has_vat
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);
	    		
	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	 		
	});
	banhji.gdn =  kendo.observable({
		dataSource 			: dataStore(apiUrl + "transactions"),
		lineDS  			: dataStore(apiUrl + "transactions/line"),
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "transactions/line"),
		referenceDS			: dataStore(apiUrl + "transactions"),
		referenceLineDS		: dataStore(apiUrl + "transactions/line"),
		depositDS			: dataStore(apiUrl + "transactions"),		
		balanceDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		totalDepositDS  	: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "transactions/amount_sum",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},								
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		currencyDS  		: banhji.source.currencyDS,
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		contactDS  			: banhji.source.customerDS,
		itemDS  			: banhji.source.itemDS,
		taxItemDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "tax_items",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"tax_type_id", value: 1}
			],					
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		catalogDS			: dataStore(apiUrl + "items"),
		assemblyDS			: dataStore(apiUrl + "items/assembly"),
		paymentTermDS 		: dataStore(apiUrl + "payment_terms"),
		segmentItemDS		: banhji.source.segmentItemDS,		
		referenceTypes 		: [
			{ id:"Quote", name:"Quote" },
			{ id:"Sale_Order", name:"Sale Order" }			
		],
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,			    
	    bgColor 			: "#D5DBDB",
	    showDeposit 		: false,	    
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,
		obj 				: null,
		isEdit 				: false,
		bolReference 		: false,
		showDiscount 		: false,
		sub_total 			: 0,
		tax 				: 0,
		discount 			: 0,
		balance 			: 0,
		total_credit		: 0,
		total 				: 0,
		original_total 		: 0,
		original_credit 	: 0,
		user_id				: banhji.source.user_id,
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);
				this.set("original_total", 0);							
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					this.set("original_total", 0);					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},	    			
		loadObj 			: function(id, is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}			

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.dataSource.view();				

				self.set("sub_total", kendo.toString(view[0].sub_total, "c", view[0].locale));
				self.set("discount", kendo.toString(view[0].discount, "c", view[0].locale));
		        self.set("tax", kendo.toString(view[0].tax, "c", view[0].locale));
		        self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));	  			
								
				//self.contactDS.filter({ field: "id", value: view[0].contact_id });				
				self.lineDS.filter({ field: "transaction_id", value: view[0].id });
				self.journalLineDS.filter({ field: "transaction_id", value: view[0].id });				
				self.depositDS.filter([
					{ field: "reference_id", value: view[0].id },
					{ field: "type", value: "Credit" }
				]);

				self.set("obj", view[0]);
				self.set("original_total", view[0].amount);
				self.set("original_credit", view[0].credit);

				self.loadDeposit();				
			});				
		},
		//Deposit
		loadDeposit 		: function(){
			var self = this, obj = this.get("obj");

			this.totalDepositDS.query({
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Credit" }
				],
				page: 1,
				pageSize: 100
			}).then(function(){
				var view = self.totalDepositDS.view(),
				amount = 0;

				if(self.get("isEdit")){
					amount = view[0].amount + obj.credit;
				}else{
					amount = view[0].amount;
				}

				self.set("total_credit", amount);
			});
		},		
		saveDeposit 		: function(transaction_id){
			var obj = this.get("obj");		

			this.depositDS.data([]);

			//Deposit apply
			if(obj.deposit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Deposit",			   	  		   					   				   	
				   	amount				: obj.deposit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

			//Credit apply
			if(obj.credit > 0){				
				this.depositDS.add({				
					contact_id 			: obj.contact_id,								
					reference_id 		: transaction_id,				
					user_id 			: this.get("user_id"),				    		
				   	type				: "Credit",			   	  		   					   				   	
				   	amount				: obj.credit*-1,			   	
				   	rate				: obj.rate,			   	
				   	locale 				: obj.locale,			   	
				   	issued_date 		: obj.issued_date			   	
		    	});
			}

	    	this.depositDS.sync();
		},
		//Contact
		loadContact 		: function(id){
			var self = this;			

			this.contactDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.contactDS.view(),
				obj = self.get("obj");
		    	
		    	obj.set("contact_id", view[0].id);
		    	obj.set("payment_term_id", view[0].payment_term_id);		    	
		    	obj.set("locale", view[0].currency[0].locale);				
				obj.set("bill_to", view[0].bill_to);
				obj.set("ship_to", view[0].ship_to);
				
				self.setRate();
				self.setTerm();
				self.loadDeposit();							
			});				

		},
		loadBalance 		: function(){
			var self = this, obj = this.get("obj");			

			this.balanceDS.query({    			
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Invoice" }
				],
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.balanceDS.view(),				
				contact = self.contactDS.get(obj.contact_id),
				balance = view[0].amount,
				creditAllowed = 0;

				if(contact.credit_limit > balance){
					creditAllowed = contact.credit_limit - balance;
				}
						    	
		    	self.set("balance", kendo.toString(balance, "c", obj.locale));
		    	obj.set("credit_allowed", creditAllowed, "c");		
			});				
		},
		contactChanges 		: function(){
			var obj = this.get("obj");

	    	if(obj.contact_id>0){		    			    	
		    	contact = this.contactDS.get(obj.contact_id);		    	
		    	
		    	obj.set("payment_term_id", contact.payment_term_id);
		    	obj.set("vat_id", contact.tax_item_id);
		    	obj.set("locale", contact.currency[0].locale);
		    	obj.set("bill_to", contact.bill_to);
		    	obj.set("ship_to", contact.ship_to);

		    	this.setRate();
		    	this.loadDeposit();
		    	this.loadBalance();		    			    	
	    	}else{
	    		this.set("total_credit", 0);
	    	}
	    },
		//Reference					
		loadReference 		: function(e){			
			var obj = this.get("obj");

			if(obj.reference_type){
				this.set("bolReference", true);

				this.referenceDS.filter([
					{ field: "contact_id", value: obj.contact_id },
					{ field: "status", value: 0 },
					{ field: "type", value: obj.reference_type }
				]);				
			}else{
				this.set("bolReference", false);
			}							
		},
		referenceChanges 	: function(e){
			var self = this, obj = this.get("obj");
			
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);

				//Deposit
				if(obj.deposit>0){
					this.set("showDeposit", true);
				}else{
					this.set("showDeposit", false);
				}

				obj.set("vat_id", ref.vat_id);								
				obj.set("deposit", ref.deposit);
				obj.set("discount", ref.discount);
				obj.set("discount_amount", ref.discount_amount);
				obj.set("fine", ref.fine);
				obj.set("vat", ref.vat);
								
			 	this.referenceLineDS.query({
			 		filter: { field:"transaction_id", value: obj.reference_id },
			 		page: 1,
			 		take: 100
			 	}).then(function(){
			 		var view = self.referenceLineDS.view();					

			 		self.lineDS.data([]);
			 		$.each(view, function(index, value){
			 			self.lineDS.add({					
							transaction_id 		: obj.id,
							item_id 			: value.item_id,
							measurement_id 		: value.measurement_id,							
							description 		: value.description,				
							quantity 	 		: value.quantity,
							price 				: value.price,												
							amount 				: value.amount,
							discount 			: value.discount,
							fine 				: value.fine,
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,							

							item_prices			: value.item_prices
						});
			 		});

			 		self.changes();
			 	});			 				 				 				 				
			}else{
				obj.set("deposit", 0);
				this.set("showDeposit", false);
			}								
		},
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", obj.locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", obj.locale);												
					});
				}

				self.changes();
			});				
		},		
		changes				: function(){
			var self = this, obj = this.get("obj");

			if(this.lineDS.total()>0){			
				var total = 0;										

				$.each(this.lineDS.data(), function(index, value) {				
					total += value.quantity;										
		        });		       	       			
				obj.set("amount", total);									    	
	    	}
		},		
	    segmentChanges 		: function(e) {
			var dataArr = this.get("obj").segments,
			lastIndex = dataArr.length - 1,
			last = this.segmentItemDS.get(dataArr[lastIndex]);
			
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current_index = dataArr[i],
					current = this.segmentItemDS.get(current_index);

					if(current.segment_id === last.segment_id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},
		//Item		
		itemChanges 		: function(e){								
			var self = this, 
			data = e.data,
			transaction_id = 0, 
			obj = this.get("obj"), 
			item = this.itemDS.get(data.item_id),
			rate = obj.rate / item.item_prices[0].rate;
			
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
			
			if(data.item_id>0){		        
		        if(item.is_catalog=="1"){
		        	this.catalogDS.query({
		        		filter: { field:"id", operator:"where_in", value:item.catalogs }
		        	}).then(function(){
		        		self.lineDS.remove(data);

		        		$.each(self.catalogDS.view(), function(index, value){										
							self.lineDS.add({					
								transaction_id 		: transaction_id,
								item_id 			: value.id,
								measurement_id 		: value.item_prices[0].measurement_id,								
								description 		: value.name,				
								quantity 	 		: 1,
								price 				: value.item_prices[0].price*rate,												
								amount 				: value.item_prices[0].price*rate,
								discount 			: 0,
								fine 				: 0,
								rate				: obj.rate,
								locale				: obj.locale,
								has_vat 			: false,
								movement 			: -1,								

								item_prices 		: value.item_prices
							});								
		        		});

		        		self.changes();
		        	});
		        }else if(item.is_assemble=="1"){
		    		data.set("description", item.name);	    		
			        data.set("price", item.price*rate);
			        data.set("measurement_id", 0);
			        data.set("rate", obj.rate);		        	        
			       	data.set("item_prices", []);

			        this.changes();		     
		        }else{
		        	data.set("measurement_id", item.item_prices[0].measurement_id);		        	
		    		data.set("description", item.name);
		    		data.set("quantity", 1);	    		
			        data.set("price", item.item_prices[0].price*rate);			        		        
			        data.set("rate", obj.rate);
			        data.set("item_prices", item.item_prices);			        

			        this.changes();
		    	}		        
	        }                	        	
		},
		measurementChanges 	: function(e){										
			var self = this, data = e.data, obj = this.get("obj");			

			if(data.measurement_id>0){
				$.each(data.item_prices, function(index, value){
					if(value.measurement_id==data.measurement_id){
						var rate = obj.rate / value.rate;						
				        data.set("price", value.price*rate);				       			       
				        
						return false;
					}
				});	    		
		        	        
		        this.changes();
	        }	                	        	
		},					
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);
			this.journalLineDS.data([]);

			this.set("obj", null);
			this.set("sub_total", 0);
			this.set("tax", 0);
			this.set("discount", 0);			
			this.set("fine", 0);	
			this.set("total", 0);				

			this.dataSource.add({				
				contact_id 			: "",
				payment_term_id		: 0,				
				reference_id 		: 0,
				recurring_id 		: "",				
				user_id 			: this.get("user_id"),
				seller_id 			: this.get("user_id"), 	    		
			   	type				: "GDN",
			   	sub_total 			: 0,				   		   					   				   	
			   	amount				: 0,
			   	credit_allowed 		: 0,
			   	credit 				: 0,
			   	deposit 			: 0,
			   	discount 			: 0,		   	
			   	fine 				: 0,
			   	tax 				: 0,
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),
			   	due_date 			: new Date(),			   	
			   	bill_to 			: "",
			   	ship_to 			: "",
			   	memo 				: "",
			   	memo2 				: "",
			   	status 				: 0,
			   	segments 			: [],
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0				
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);

			this.addRow();
			this.setRate();			
		},
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,
				tax_item_id 		: "",
				item_id 			: "",				
				measurement_id 		: 0,				
				description 		: "",				
				quantity 	 		: 1,
				price 				: 0,												
				amount 				: 0,
				discount 			: 0,
				fine 				: 0,
				rate				: obj.rate,
				locale				: obj.locale,							
				movement 			: -1,

				item_prices 		: []
			});																	
		},		
		removeRow 			: function(e){						
			var d = e.data;
			if(this.lineDS.total()>1){				
				this.lineDS.remove(d);
		        this.changes();
	        }		        
		},							    
	    transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this, obj = this.get("obj");

	    	//Warning over credit allowed
	        if(obj.credit_limit>0 && obj.amount>obj.credit_allowed){
	        	alert("Over credit allowed!");		        	
	        }

	    	//Update references
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);
				ref.set("status", 1);
				this.referenceDS.sync();
			} 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();

	    		//Update credit changes
	    		if(this.get("original_credit") !== obj.credit){	    			
	    			this.set("original_credit", obj.credit);    			

					var deposit = this.depositDS.at(0);
					deposit.set("amount", obj.credit*-1);

					this.depositDS.sync();
	    		}	    		

	    		//Update total changes
	    		if(this.get("original_total") == obj.amount){
	    			this.lineDS.sync();	    			
	    		}else{
	    			this.set("original_total", obj.amount);

	    			$.each(this.journalLineDS.data(), function(index, value){										
						value.set("deleted", 1);										
					});

					this.addJournal(obj.id);
	    		}	    		
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){
					//Deposit
					if(obj.deposit > 0 || obj.credit > 0){
						self.saveDeposit(data[0].id);
					}

					//Journal
					self.addJournal(data[0].id);

					//Item line
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);										
					});
					self.lineDS.sync();																	
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();			

			window.history.back();
		},
	    //Journal	        
	    addJournal 			: function(transaction_id){
	    	var self = this,
	    	obj = this.get("obj"),
	    	contact = this.contactDS.get(obj.contact_id),	    				    	
	    	saleList = {},
	    	taxList = {},
	    	inventoryList = {},
			cogsList = {};			
			
			//Arrange sale, cogs, inventory
			$.each(this.lineDS.data(), function(index, value){										
				var item = self.itemDS.get(value.item_id),
				amount = value.quantity * value.price;				
				
				//Add sale list
				var incomeID = item.income_account_id;																				
				if(incomeID>0){
					if(saleList[incomeID]===undefined){
						saleList[incomeID]={"id": incomeID, "amount": amount};						
					}else{											
						if(saleList[incomeID].id===incomeID){
							saleList[incomeID].amount += amount;
						}else{
							saleList[incomeID]={"id": incomeID, "amount": amount};
						}
					}
				}

				//Add tax list																							
				if(value.tax_item_id>0){
					var taxItem = self.taxItemDS.get(value.tax_item_id),
					taxID = taxItem.account_id,
					taxAmt = value.amount*taxItem.rate;

					if(taxList[taxID]===undefined){
						taxList[taxID]={"id": taxID, "amount": taxAmt};						
					}else{											
						if(taxList[taxID].id===taxID){
							taxList[taxID].amount += taxAmt;
						}else{
							taxList[taxID]={"id": taxID, "amount": taxAmt};
						}
					}
				}				
				
				//Inventory
				if(item.item_type_id==1){
					//Add cogs list
					var itemCost = value.quantity*item.cost,
					cogsID = item.cogs_account_id;				
					if(cogsList[cogsID]===undefined){
						cogsList[cogsID]={"id": cogsID, "amount": itemCost};						
					}else{											
						if(cogsList[cogsID].id===cogsID){
							cogsList[cogsID].amount += itemCost;
						}else{
							cogsList[cogsID]={"id": cogsID, "amount": itemCost};
						}
					}						

					//Add inventory list
					var inventoryID = item.inventory_account_id;
					if(inventoryList[inventoryID]===undefined){
						inventoryList[inventoryID]={"id": inventoryID, "amount": itemCost};						
					}else{											
						if(inventoryList[inventoryID].id===inventoryID){
							inventoryList[inventoryID].amount += itemCost;
						}else{
							inventoryList[inventoryID]={"id": inventoryID, "amount": itemCost};
						}
					}
				}					  	
			});//End Foreach Loop			

			//Start journal
			//A/R on Dr
			this.journalLineDS.add({					
				transaction_id 		: transaction_id,
				account_id 			: contact.account_id,				
				contact_id 			: obj.contact_id,				
				description 		: "",
				reference_no 		: "",
				segments 	 		: [],								
				dr 	 				: obj.amount,
				cr 					: 0,				
				rate				: obj.rate,
				locale				: obj.locale
			});

			//Discount on Dr			
			if(obj.discount > 0){				
				this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: contact.discount_account_id,				
					contact_id 			: obj.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: [],								
					dr 	 				: obj.discount,
					cr 					: 0,				
					rate				: obj.rate,
					locale				: obj.locale
				});
			}

			//Deposit and Credit on Dr
			if(obj.deposit > 0 || obj.credit > 0){				
				this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: contact.deposit_account_id,				
					contact_id 			: obj.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: [],								
					dr 	 				: obj.deposit + obj.credit,
					cr 					: 0,				
					rate				: obj.rate,
					locale				: obj.locale
				});
			}

			//Sale accounts on Cr		
			if(!jQuery.isEmptyObject(saleList)){				
				$.each(saleList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});										
				});
			}

			//Tax on Cr					
			if(!jQuery.isEmptyObject(taxList)){				
				$.each(taxList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});										
				});
			}	

			//Inventory to journal
			//COGS on Dr 			
			if(!jQuery.isEmptyObject(cogsList)){							
				$.each(cogsList, function(index, value){				
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: value.amount,
						cr 					: 0,				
						rate				: obj.rate,
						locale				: obj.locale
					});								
				});							
			}
			//Inventory on Cr
			if(!jQuery.isEmptyObject(inventoryList)){
				$.each(inventoryList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});						
				});
			}

			this.journalLineDS.sync();
		},
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);				
				
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("discount", recur.discount);
				obj.set("fine", recur.fine);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,							
							item_id 			: value.item_id,									
							description 		: value.description,							
							quantity 			: value.quantity,
							price 				: value.price,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,

							item_prices 		: value.item_prices
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({				
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	discount 			: obj.discount,
			   	fine 				: obj.fine,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,					
					item_id 			: value.item_id,								
					description 		: value.description,													
					amount 	 			: value.amount,
					discount 			: value.discount,
					fine 				: value.fine,						
					rate				: value.rate,
					locale				: value.locale,
					has_vat 			: value.has_vat
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);
	    		
	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	 		
	});
	banhji.saleReturn =  kendo.observable({
		dataSource 			: dataStore(apiUrl + "transactions"),
		lineDS  			: dataStore(apiUrl + "transactions/line"),		
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "transactions/line"),
		referenceDS			: dataStore(apiUrl + "transactions"),
		referenceLineDS		: dataStore(apiUrl + "transactions/line"),
		returnDS			: dataStore(apiUrl + "transactions"),
		invoiceDS			: dataStore(apiUrl + "transactions"),		
		currencyDS  		: banhji.source.currencyDS,
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		contactDS  			: banhji.source.customerDS,
		itemDS  			: banhji.source.itemDS,
		taxItemDS  			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "tax_items",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				}
			},
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			filter: [
					{ field:"tax_type_id", value: 1}
			],					
			batch: true,			
			serverFiltering: true,
			serverSorting: true,
			serverPaging: true,
			pageSize: 100
		}),
		accountDS  			: banhji.source.cashAccountDS,
		catalogDS			: dataStore(apiUrl + "items"),
		assemblyDS			: dataStore(apiUrl + "items/assembly"),		
		segmentItemDS		: banhji.source.segmentItemDS,
		optionList 			: [
			{ id:"Offset_Invoice", name:"Charge Against Purchase" },
			{ id:"Credit", name:"Add To Credit" },
			{ id:"Credit_Note", name:"Cash Refund" }
		],		
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,			    
	    bgColor 			: "#D5DBDB",	     
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,
		obj 				: null,
		isEdit 				: false,
		bolReference 		: false,
		showReturn 			: true,
		showDiscount 		: false,		
		sub_total 			: 0,		
		discount 			: 0,
		tax 				: 0,		
		total 				: 0,
		remain 				: 0,
		original_total 		: 0,		
		user_id				: banhji.source.user_id,
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);
				this.set("original_total", 0);									
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					this.set("original_total", 0);										
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},	    			
		loadObj 			: function(id, is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}			

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.dataSource.view();				

				self.set("sub_total", kendo.toString(view[0].sub_total, "c", view[0].locale));				
		        self.set("discount", kendo.toString(view[0].discount, "c", view[0].locale));
		        self.set("tax", kendo.toString(view[0].tax, "c", view[0].locale));				
		        self.set("total", kendo.toString(view[0].amount, "c", view[0].locale));						
						
				self.lineDS.filter({ field: "transaction_id", value: view[0].id });
				self.journalLineDS.filter({ field: "transaction_id", value: view[0].id });				

				self.set("obj", view[0]);
				self.set("original_total", view[0].amount);
			});				
		},		
		//Contact
		loadContact 		: function(id){
			var self = this;			

			this.contactDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.contactDS.view(),
				obj = self.get("obj");
		    	
		    	obj.set("contact_id", view[0].id);		    		    	
		    	obj.set("locale", view[0].currency[0].locale);				
				obj.set("bill_to", view[0].bill_to);
				obj.set("ship_to", view[0].ship_to);
				
				self.setRate();
				self.loadReference();		
			});
		},
		loadBalance 		: function(){
			var self = this, obj = this.get("obj");			

			this.balanceDS.query({    			
				filter:[
					{ field:"contact_id", value:obj.contact_id },
					{ field:"type", value:"Invoice" }
				],
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.balanceDS.view(),				
				contact = self.contactDS.get(obj.contact_id),
				balance = view[0].amount,
				creditAllowed = 0;

				if(contact.credit_limit > balance){
					creditAllowed = contact.credit_limit - balance;
				}
						    	
		    	self.set("balance", kendo.toString(balance, "c", obj.locale));
		    	obj.set("credit_allowed", creditAllowed, "c");		
			});				
		},
		contactChanges 		: function(){
			var obj = this.get("obj");

	    	if(obj.contact_id>0){		    			    	
		    	contact = this.contactDS.get(obj.contact_id);   	
		    		    	
		    	obj.set("locale", contact.currency[0].locale);
		    	obj.set("bill_to", contact.bill_to);
		    	obj.set("ship_to", contact.ship_to);

		    	this.setRate();
		    	this.loadReference();		    		    			    	
	    	}
	    },
		//Reference					
		loadReference 		: function(){			
			var obj = this.get("obj");

			if(obj.contact_id>0){
				this.set("bolReference", true);

				this.referenceDS.filter([
					{ field: "contact_id", value: obj.contact_id },					
					{ field: "type", value:"Invoice" }
				]);				
			}else{
				obj.set("reference_id", "");
				this.set("bolReference", false);				
			}							
		},
		referenceChanges 	: function(e){
			var self = this, obj = this.get("obj");
			
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);
				obj.set("amount_paid", ref.amount_paid);

				if(ref.type=="Cash_Sale"){
					this.set("showReturn", true);
				}else{
					if(ref.status==0){
						this.set("showReturn", false);

						this.returnDS.data([]);
						this.addRowOption();
					}else{
						this.set("showReturn", true);
					}
				}				
									
			 	this.referenceLineDS.query({
			 		filter: { field:"transaction_id", value: obj.reference_id },
			 		page: 1,
			 		take: 100
			 	}).then(function(){
			 		var view = self.referenceLineDS.view();					

			 		self.lineDS.data([]);
			 		$.each(view, function(index, value){
			 			self.lineDS.add({					
							transaction_id 		: obj.id,
							item_id 			: value.item_id,
							tax_item_id 		: value.tax_item_id,
							measurement_id 		: value.measurement_id,							
							description 		: value.description,				
							quantity 	 		: value.quantity,
							price 				: value.price,												
							amount 				: value.amount,
							discount 			: value.discount,
							fine 				: value.fine,
							rate				: value.rate,
							locale				: value.locale,													

							item_prices			: value.item_prices
						});
			 		});

			 		self.changes();
			 	});			 				 				 				 				
			}else{
				this.returnDS.data([]);
				this.addRowOption();
			}							
		},		
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", obj.locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", obj.locale);												
					});
				}

				self.changes();
			});				
		},		
		changes				: function(){
			var self = this, obj = this.get("obj"), 
			subTotal = 0, discount =0, tax = 0, returnAmount = 0, remain = 0;
			
	        $.each(this.lineDS.data(), function(index, value) {				
				var amt = value.quantity * value.price;					

				//Discount by line
				if(value.discount>0){										
					var discount_amount = amt * value.discount;
					amt -= discount_amount;
					discount += discount_amount;																	
				}

				//Tax by line
				if(value.tax_item_id>0){
					var taxItem = self.taxItemDS.get(value.tax_item_id);										
					tax += amt * taxItem.rate;																	
				}					

				value.set("amount", amt);
				subTotal += amt;									
	        });

	        total = subTotal + tax;

	        //Return
	        $.each(this.returnDS.data(), function(index, value) {								
				returnAmount += value.amount;					
	        });
	       
	        remain = obj.amount_paid - returnAmount;

	        this.set("sub_total", kendo.toString(subTotal, "c", obj.locale));
	        this.set("discount", kendo.toString(discount, "c", obj.locale));
	        this.set("tax", kendo.toString(tax, "c", obj.locale));
	        this.set("total", kendo.toString(total, "c", obj.locale));

	        obj.set("sub_total", subTotal);
	        obj.set("discount", discount);
	        obj.set("tax", tax);			
			obj.set("amount", total);

			this.set("remain", remain);    	
		},		
	    segmentChanges 		: function(e) {
			var dataArr = this.get("obj").segments,
			lastIndex = dataArr.length - 1,
			last = this.segmentItemDS.get(dataArr[lastIndex]);
			
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current_index = dataArr[i],
					current = this.segmentItemDS.get(current_index);

					if(current.segment_id === last.segment_id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},
		//Item		
		itemChanges 		: function(e){								
			var self = this, 
			data = e.data,
			transaction_id = 0, 
			obj = this.get("obj"), 
			item = this.itemDS.get(data.item_id),
			rate = obj.rate / item.item_prices[0].rate;
			
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
			
			if(data.item_id>0){		        
		        if(item.is_catalog=="1"){
		        	this.catalogDS.query({
		        		filter: { field:"id", operator:"where_in", value:item.catalogs }
		        	}).then(function(){
		        		self.lineDS.remove(data);

		        		$.each(self.catalogDS.view(), function(index, value){										
							self.lineDS.add({					
								transaction_id 		: transaction_id,
								item_id 			: value.id,
								measurement_id 		: value.item_prices[0].measurement_id,								
								description 		: value.name,				
								quantity 	 		: 1,
								price 				: value.item_prices[0].price*rate,												
								amount 				: value.item_prices[0].price*rate,
								discount 			: 0,
								fine 				: 0,
								rate				: obj.rate,
								locale				: obj.locale,
								has_vat 			: false,
								movement 			: -1,								

								item_prices 		: value.item_prices
							});								
		        		});

		        		self.changes();
		        	});
		        }else if(item.is_assemble=="1"){
		    		data.set("description", item.name);	    		
			        data.set("price", item.price*rate);
			        data.set("measurement_id", 0);
			        data.set("rate", obj.rate);		        	        
			       	data.set("item_prices", []);

			        this.changes();		     
		        }else{
		        	data.set("measurement_id", item.item_prices[0].measurement_id);		        	
		    		data.set("description", item.name);
		    		data.set("quantity", 1);	    		
			        data.set("price", item.item_prices[0].price*rate);			        		        
			        data.set("rate", obj.rate);
			        data.set("item_prices", item.item_prices);			        

			        this.changes();
		    	}		        
	        }                	        	
		},
		measurementChanges 	: function(e){										
			var self = this, data = e.data, obj = this.get("obj");			

			if(data.measurement_id>0){
				$.each(data.item_prices, function(index, value){
					if(value.measurement_id==data.measurement_id){
						var rate = obj.rate / value.rate;						
				        data.set("price", value.price*rate);				       			       
				        
						return false;
					}
				});	    		
		        	        
		        this.changes();
	        }	                	        	
		},
		//Return Option
		addRowOption 		: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}

			var account_id = 0;
			if(this.accountDS.total()>0){
				account_id = this.accountDS.at(0).id;
			}
						
			this.returnDS.add({					
				return_id 		: transaction_id,				
				reference_id 	: "",
				account_id 		: account_id,
				type 			: "",													
				amount 			: 0,				
				rate			: obj.rate,
				locale			: obj.locale,
				issued_date 	: obj.issued_date,
				
				showInvoice 	: false,
				showAccount 	: false				
			});																	
		},
		removeRowOption 	: function(e){						
			var d = e.data;
			
			if(this.returnDS.total()>1){			
				this.returnDS.remove(d);
		        this.changes();
	        }	        	        
		},
		invoiceChanges 		: function(e){
			var data = e.data;
			
			if(data.reference_id>0){
				var inv = this.invoiceDS.get(data.reference_id);
				data.set("amount", inv.amount - inv.amount_paid);

				this.changes();
			}else{
				data.set("amount", 0);
			}							
		},
		optionChanges 		: function(e){
			var data = e.data, obj = this.get("obj");

			switch(data.type) {
			    case "Offset_Invoice": //Invoice		    	
			        data.set("showInvoice", true);
			        data.set("showAccount", false);

			        if(obj.contact_id>0){
			        	var para = [
					 			{ field:"contact_id", value: obj.contact_id },
					 			{ field:"status", operator:"where_in", value:[0,2] },
					 			{ field:"type", value:"Credit_Purchase" },
					 	];

					 	if(obj.reference_id>0){
					 		para.push({ field:"id", operator:"where_not_in", value:[obj.reference_id] });
					 	} 

				        this.invoiceDS.filter(para);
				 	}

			        break;
			    case "Credit_Note": //Refund		    	
			        data.set("showInvoice", false);
			        data.set("showAccount", true);
			        break;
			    default: //Credit		    	
			        data.set("showInvoice", false);
			        data.set("showAccount", false);
			}			
		},		
		//Obj					
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);
			this.journalLineDS.data([]);
			this.returnDS.data([]);
			this.referenceDS.data([]);

			this.set("obj", null);						
			this.set("total", 0);	
			this.set("remain", 0);				

			this.dataSource.add({				
				contact_id 			: "",								
				reference_id 		: "",
				recurring_id 		: "",				
				user_id 			: this.get("user_id"),
				seller_id 			: this.get("user_id"), 	    		
			   	type				: "Purchase_Return", //Require
			   	sub_total 			: 0,				   		   					   				   	
			   	amount				: 0,
			   	amount_paid 		: 0,
			   	credit_allowed 		: 0,
			   	credit 				: 0,
			   	deposit 			: 0,
			   	discount 			: 0,		   	
			   	fine 				: 0,
			   	tax 				: 0,
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),			   			   	
			   	bill_to 			: "",
			   	ship_to 			: "",
			   	memo 				: "",
			   	memo2 				: "",
			   	status 				: 0,
			   	segments 			: [],
			   	is_journal 			: 1,
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0				
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);

			this.addRow();
			this.addRowOption();
			this.setRate();			
		},
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,
				tax_item_id 		: "",
				item_id 			: "",				
				measurement_id 		: 0,				
				description 		: "",				
				quantity 	 		: 1,
				price 				: 0,												
				amount 				: 0,
				discount 			: 0,
				fine 				: 0,
				rate				: obj.rate,
				locale				: obj.locale,							
				movement 			: -1,

				item_prices 		: []
			});																	
		},		
		removeRow 			: function(e){						
			var d = e.data;
			if(this.lineDS.total()>1){				
				this.lineDS.remove(d);
		        this.changes();
	        }		        
		},							    
	    transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this, obj = this.get("obj");	    	

	    	//Update references
			if(obj.reference_id>0){
				var ref = this.referenceDS.get(obj.reference_id);
				ref.set("status", 1);
				this.referenceDS.sync();
			} 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();	    	    		
	    		this.lineDS.sync();
	    		this.returnDS.sync();

	    		//Update total changes
	    		if(this.get("original_total") !== obj.amount){	    		
	    			this.set("original_total", obj.amount);

	    			$.each(this.journalLineDS.data(), function(index, value){										
						value.set("deleted", 1);										
					});

					this.addJournal(obj.id);
	    		}	    		
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){					
					//Journal
					self.addJournal(data[0].id);

					//Return
					$.each(self.returnDS.data(), function(index, value){										
						value.set("return_id", data[0].id);

						if(value.type=="Offset_Invoice" && value.reference_id>0){
							var inv = self.invoiceDS.get(value.reference_id),
							amountPaid = inv.amount_paid + value.amount;

							inv.set("amount_paid", amountPaid);

							if(amountPaid>=inv.amount){								
								inv.set("status", 1); //Paid							
							}else{
								inv.set("status", 2); //Partially Paid
							}
						}										
					});
					self.returnDS.sync();

					//Item line
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);										
					});
					self.lineDS.sync();																	
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();			

			window.history.back();
		},
	    //Journal	        
	    addJournal 			: function(transaction_id){
	    	var self = this,
	    	obj = this.get("obj"),
	    	contact = this.contactDS.get(obj.contact_id),
	    	saleList = {},
	    	taxList = {},	    	
	    	inventoryList = {},
	    	cogsList = {},
	    	cashList = {},
	    	sumInvoice = 0,
	    	sumCredit = 0;			
			
			//Group Account from lineDS
			$.each(this.lineDS.data(), function(index, value){
				var item = self.itemDS.get(value.item_id),
				amount = value.quantity * value.price;

				//Income Account
				var incomeID = item.income_account_id;																				
				if(incomeID>0){
					if(saleList[incomeID]===undefined){
						saleList[incomeID]={"id": incomeID, "amount": amount};						
					}else{											
						if(saleList[incomeID].id===incomeID){
							saleList[incomeID].amount += amount;
						}else{
							saleList[incomeID]={"id": incomeID, "amount": amount};
						}
					}
				}

				//Discount by line
				if(value.discount>0){										
					var discount_amount = amount * value.discount;
					amount -= discount_amount;																						
				}

				//TAX Account																								
				if(value.tax_item_id>0){
					var taxItem = self.taxItemDS.get(value.tax_item_id),
					taxID = taxItem.account_id,
					taxAmt = amount * taxItem.rate;
					if(taxList[taxID]===undefined){
						taxList[taxID]={"id": taxID, "amount": taxAmt};						
					}else{											
						if(taxList[taxID].id===taxID){
							taxList[taxID].amount += taxAmt;
						}else{
							taxList[taxID]={"id": taxID, "amount": taxAmt};
						}
					}
				}				

				//Inventory
				if(item.item_type_id==1){
					var itemCost = value.quantity * item.cost;

					//Add inventory list
					var inventoryID = item.inventory_account_id;					
					if(inventoryList[inventoryID]===undefined){
						inventoryList[inventoryID]={"id": inventoryID, "amount": itemCost};						
					}else{											
						if(inventoryList[inventoryID].id===inventoryID){
							inventoryList[inventoryID].amount += itemCost;
						}else{
							inventoryList[inventoryID]={"id": inventoryID, "amount": itemCost};
						}
					}

					//Add cogs list
					var cogsID = item.cogs_account_id;				
					if(cogsList[cogsID]===undefined){
						cogsList[cogsID]={"id": cogsID, "amount": itemCost};						
					}else{											
						if(cogsList[cogsID].id===cogsID){
							cogsList[cogsID].amount += itemCost;
						}else{
							cogsList[cogsID]={"id": cogsID, "amount": itemCost};
						}
					}
				}					  	
			});

			//Group Account from returnDS
			$.each(this.returnDS.data(), function(index, value){
				//Offset Invoice
				if(value.type=="Offset_Invoice"){
					sumInvoice += value.amount;
				}

				//Credit
				if(value.type=="Credit"){ 
					sumCredit += value.amount;
				}

				//Refund
				if(value.type=="Credit_Note"){
					var cashID = value.account_id,
					cashAmt = value.amount;

					if(cashList[cashID]===undefined){
						cashList[cashID]={"id": cashID, "amount": cashAmt};						
					}else{											
						if(cashList[cashID].id===cashID){
							cashList[cashID].amount += cashAmt;
						}else{
							cashList[cashID]={"id": cashID, "amount": cashAmt};
						}
					}
				}
			});		

			//Start journal			
			//Sale on Dr
			if(!jQuery.isEmptyObject(saleList)){
				$.each(saleList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: value.amount,
						cr 					: 0,				
						rate				: obj.rate,
						locale				: obj.locale
					});						
				});
			}

			//Tax on Dr
			if(!jQuery.isEmptyObject(taxList)){
				$.each(taxList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: value.amount,
						cr 					: 0,				
						rate				: obj.rate,
						locale				: obj.locale
					});						
				});
			}			

			//Discount on Cr
			if(obj.discount>0){			
				this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: contact.discount_account_id,				
					contact_id 			: obj.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: [],								
					dr 	 				: 0,
					cr 					: obj.discount,				
					rate				: obj.rate,
					locale				: obj.locale
				});
			}

			//A/R on Cr
			var ar = (obj.amount - obj.amount_paid) + sumInvoice;						
			this.journalLineDS.add({					
				transaction_id 		: transaction_id,
				account_id 			: contact.account_id,				
				contact_id 			: obj.contact_id,				
				description 		: "",
				reference_no 		: "",
				segments 	 		: [],								
				dr 	 				: 0,
				cr 					: ar,				
				rate				: obj.rate,
				locale				: obj.locale
			});			

			//Deposit on Cr
			if(sumCredit>0){			
				this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: contact.deposit_account_id,				
					contact_id 			: obj.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: [],								
					dr 	 				: 0,
					cr 					: sumCredit,				
					rate				: obj.rate,
					locale				: obj.locale
				});
			}

			//Cash on Cr
			if(!jQuery.isEmptyObject(cashList)){
				$.each(cashList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});						
				});
			}

			//INVENTORY
			//Inventory on Dr
			if(!jQuery.isEmptyObject(inventoryList)){
				$.each(inventoryList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: value.amount,
						cr 					: 0,				
						rate				: obj.rate,
						locale				: obj.locale
					});						
				});
			}

			//Cogs on Cr
			if(!jQuery.isEmptyObject(cogsList)){
				$.each(cogsList, function(index, value){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.id,				
						contact_id 			: obj.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: obj.rate,
						locale				: obj.locale
					});						
				});
			}

			this.journalLineDS.sync();
		},
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);				
				
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("discount", recur.discount);
				obj.set("fine", recur.fine);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,							
							item_id 			: value.item_id,									
							description 		: value.description,							
							quantity 			: value.quantity,
							price 				: value.price,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,

							item_prices 		: value.item_prices
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({				
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	discount 			: obj.discount,
			   	fine 				: obj.fine,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,					
					item_id 			: value.item_id,								
					description 		: value.description,													
					amount 	 			: value.amount,
					discount 			: value.discount,
					fine 				: value.fine,						
					rate				: value.rate,
					locale				: value.locale,
					has_vat 			: value.has_vat
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);
	    		
	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	 		
	});	
	banhji.statement = kendo.observable({
		lang 				: langVM,		
		dataSource 			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "invoices/statement",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			sort: { field: "issued_date", dir: "asc" },
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			aggregate: [
			    { field: "amount", aggregate: "sum" }
			],			
			batch: true,
			serverFiltering: true,			
			pageSize: 100
		}),
		agingDS  			: dataStore(apiUrl + "invoices/statement_aging"),
		contactDS  			: dataStore(apiUrl + "contacts"),
		companyDS  			: dataStore(apiUrl + "contacts/branch"),

		sortList			: [ 
	 		{ text:"All", 	value: "all" }, 
	 		{ text:"Today", 	value: "today" }, 
	 		{ text:"This Week",value: "week" }, 
	 		{ text:"This Month", 		value: "month" }, 
	 		{ text:"This Year", 	value: "year" } 
		],
		sorter 				: "all",		
		sdate 				: "",
		edate 				: "",

		obj 				: null,
		company 			: null,
		total 				: 0,

		pageLoad 			: function(id){
			this.loadContact(1);
			this.loadCompany(1);
		},		
		loadContact 		: function(id){
			var self = this;			

			this.contactDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.contactDS.view();
				self.set("obj", view[0]);		    					
			});				
		},
		loadCompany 		: function(id){
			var self = this;			

			this.companyDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.companyDS.view();
				self.set("company", view[0]);		    					
			});				
		},
		total 				: function(){
			return this.dataSource.aggregates().amount.sum;
		}
	});
	banhji.customerDeposit =  kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "transactions"),						
		lineDS  			: dataStore(apiUrl + "account_lines"),
		referenceLineDS		: dataStore(apiUrl + "account_lines"),
		referenceDS			: dataStore(apiUrl + "transactions"),
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "account_lines"),						
		currencyDS 			: dataStore(apiUrl + "currencies"),
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		paymentMethodDS		: dataStore(apiUrl + "payment_methods"),
		contactDS 			: banhji.source.customerDS,
		depositAccountDS 	: banhji.source.depositAccountDS,
		segmentItemDS 		: banhji.source.segmentItemDS,
		accountDS 			: banhji.source.cashAccountDS,
		frequencyList 		: banhji.source.frequencyList,
		monthList 			: banhji.source.monthList,	
		monthOptionList 	: banhji.source.monthOptionList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,						
		referenceTypes 		: [
			{ id:"Sale_Order", name:"Sale Order" }
		],
		showRef 			: true,
		showName 			: false,
		showSegment 		: false,
		showMonthOption 	: false,
		showMonth 			: false,
		bolReference 		: false,
		showWeek 			: false,
		showDay 			: false,		
		obj 				: null,		
		isEdit 				: false,			
		uer_id				: banhji.userManagement.getLogin() === null ? 0 : banhji.userManagement.getLogin().id,
		total				: 0,													
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);							
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},
		loadObj 			: function(id,is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 1
			}).then(function(e){
				var view = self.dataSource.view();

				if(view.length>0){	       
					self.set("obj", view[0]);					
		        }				

				self.lineDS.query({
					filter: { field: "transaction_id", value: id },
					page: 1,
					take: 100
				});								
			});				
		},			
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", view[0].locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", banhji.institute.locale);												
					});
				}
			});				
		},															
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);
			this.journalLineDS.data([]);

			this.set("obj", null);
			this.set("total", 0);								

			this.dataSource.add({
				recurring_id 		: "",
				account_id 			: "",				
				user_id 			: this.get("uer_id"), 	
				reference_id	 	: 0,    			    		
			   	type				: "Deposit", //required			   		   				   		   					   				   	
			   	amount				: 0,
			   	rate				: 1,			   	
			   	locale 				: banhji.institute.locale,			   	
			   	issued_date 		: new Date(),			   	   	
			   	memo 				: "",
			   	memo2 				: "",
			   	segments 			: [],
			   	is_journal 			: 1,
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0			
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);			
			this.addRow();
			this.setRate();				
		},
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,
				payment_method_id 	: 0,
				account_id 			: "",				
				contact_id 			: "",				
				description 		: "",
				reference_no 		: "",
				segments 	 		: [],								
				amount 	 			: 0,							
				rate				: obj.rate,
				locale				: obj.locale
			});																	
		},		
		remove 				: function(e){						
			var d = e.data;
							
			this.lineDS.remove(d);
        	this.changes();	        	        
		},
		changes				: function(){
			var obj = this.get("obj");
			
			if(this.lineDS.total()>0){			
				var sum = 0;								
				
				$.each(this.lineDS.data(), function(index, value) {
					sum += value.amount;
		        });		       	

		        this.set("total", kendo.toString(sum, "c0", obj.locale));		        
		        obj.set("amount", sum);		       								    	
	    	}else{
	    		this.set("total", 0);		        
		        obj.set("amount", 0);				
	    	}   	
		},
		contactChanges 		: function(){
			var obj = this.get("obj");

	    	if(obj.contact_id>0){		    			    	
		    	contact = this.contactDS.get(obj.contact_id);		    	
		    	
		    	obj.set("account_id", contact.deposit_account_id);
		    	obj.set("locale", contact.currency[0].locale);
		    

		    	this.setRate();		    		    			    	
	    	}
	    },				
		segmentChanges 		: function(e) {
			var dataArr = this.get("obj").segments,
			lastIndex = dataArr.length - 1,
			last = this.segmentItemDS.get(dataArr[lastIndex]);
			
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current_index = dataArr[i],
					current = this.segmentItemDS.get(current_index);

					if(current.segment_id === last.segment_id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},			  
		transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this; 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();
	    		this.lineDS.sync();
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);
												
					});

					self.lineDS.sync();
					self.addJournal(data[0].id);		
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();
			
			window.history.back();
		},
		addJournal 			: function(transaction_id){
	    	var self = this,
	    	sum =0 ,
	    	obj = this.get("obj"),
	    	contact = this.contactDS.get(obj.contact_id);			

			//Cash account on DR
					
			$.each(this.lineDS.data(), function(index, value){
				sum += value.amount;
				self.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: value.account_id,				
					contact_id 			: value.contact_id,				
					description 		: "",
					reference_no 		: value.reference_no,
					segments 	 		: [],								
					dr 	 				: value.amount,	
					cr 					: 0,			
					rate				: value.rate,
					locale				: value.locale
				});
			});

			this.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: obj.account_id,				
					contact_id 			: obj.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: obj.segments,								
					dr 	 				: 0,	
					cr 					: sum,			
					rate				: obj.rate,
					locale				: obj.locale
				});
			

			this.journalLineDS.sync();
		},		
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);
				
				obj.set("account_id", recur.account_id);
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,
							payment_method_id 	: value.payment_method_id,
							account_id 			: value.account_id,				
							contact_id 			: value.contact_id,				
							description 		: value.description,
							reference_no 		: value.reference_no,
							segments 	 		: value.segments,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({
				account_id 			: obj.account_id,
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,
					payment_method_id 	: value.payment_method_id,
					account_id 			: value.account_id,
					contact_id 			: value.contact_id,				
					description 		: value.description,
					reference_no 		: value.reference_no,
					segments 	 		: value.segmets,								
					amount 	 			: value.amount,						
					rate				: value.rate,
					locale				: value.locale
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);

	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	    	   
	});
	banhji.customerList = kendo.observable({
		lang 					: langVM,
		dataSource 				: dataStore(apiUrl + "contacts"),
		contactTypeDS			: dataStore(apiUrl + "contacts/type"),

		contact_type_id 		: 0,
		
		pageLoad 				: function(){

		},
		search 					: function(){
			var para = [],
			contact_type_id = this.get("contact_type_id");

			if(contact_type_id){
				para.push({ field:"contact_type_id", value: contact_type_id });
			}

			para.push({ field:"parent_id", operator:"where_related", model:"contact_type", value:1 });

			this.dataSource.filter(para);
		}
	});
	banhji.customerSetting =  kendo.observable({
		lang 				: langVM,		
        contactTypeDS 		: dataStore(apiUrl + "contacts/type"),
        paymentMethodDS		: dataStore(apiUrl + "payment_methods"),
        paymentTermDS		: dataStore(apiUrl + "payment_terms"),        
        
        contactTypeName 	: "",
        paymentMethodName 	: "",
        paymentTermName 	: "",
        paymentTerm 		: "",
        paymentTermPercentage 	: "",         

        pageLoad 			: function() {
        	
        },	    
        addContactType 		: function(){
        	var name = this.get("contactTypeName");

        	if(name!==""){
	        	this.contactTypeDS.add({
	        		parent_id 	: 1,
	        		name 		: name,
	        		description : "",
	        		is_system 	: 0
	        	});

	        	this.contactTypeDS.sync();
        	}
        },
        addPaymentMethod 		: function(){
        	var name = this.get("paymentMethodName");

        	if(name!==""){
	        	this.paymentMethodDS.add({	        		
	        		name 		: name,
	        		description : ""
	        	});

	        	this.paymentMethodDS.sync();
        	}
        },
        addPaymentTerm 		: function(){
        	var name = this.get("paymentTermName");

        	if(name!==""){
	        	this.paymentTermDS.add({	        		
	        		name 		: name,
	        		term 		: this.get("paymentTerm"),
	        		discount_percentage : this.get("paymentTermPercentage")
	        	});

	        	this.paymentTermDS.sync();
        	}
        }        
    });


	/*************************
	*	Cashier Section   *
	**************************/
	banhji.cashier = kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "transactions"),
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		paymentByCashierDS	: dataStore(apiUrl + "transactions"),		
		contactDS 			: dataStore(apiUrl + "contacts"),				
		invoiceDS 			: dataStore(apiUrl + "transactions"),
		updateInvoiceDS 	: dataStore(apiUrl + "transactions"),
		transactionDS 		: dataStore(apiUrl + "transactions"),
		paymentMethodDS 	: dataStore(apiUrl + "payment_methods"),
		invoiceList 		: [],	

		customer 			: null,		
		total_customer 		: 0,
		total_payment 		: kendo.toString(0,"c0", "km-KH"),

		//Payment		
		payment_date		: new Date(),
		payment_method_id	: 1,
		account_id 	 		: 2,
		check_no			: "",		
		cashier				: banhji.source.user_id,
		discount 			: 0,
		fine 				: 0,							
		pay_amount  		: kendo.toString(0,"c0", "km-KH"),
		receive_amount  	: kendo.toString(0,"c0", "km-KH"),
		remain				: kendo.toString(0,"c0", "km-KH"),						
		
		pageLoad 			: function(id){
			var self = this;

			if(id){
				this.set("invoiceList", []);

				this.invoiceDS.query({
					filter: { field:"id", value: id },
					page: 1,
					take: 100
				}).then(function(){
					var view = self.invoiceDS.view(),
					fullIdName = view[0].contact[0].number +" "+ view[0].contact[0].surname +" "+ view[0].contact[0].name;

					if(view[0].contact[0].contact_type_id==5 && view[0].contact[0].contact_type_id==6 && view[0].contact[0].contact_type_id==7){
						fullIdName = view[0].contact[0].number +" "+ view[0].contact[0].company;
					}

					self.loadInvoice(view[0].contact_id, fullIdName);
				});
			}else{
				this.loadPaymentByCashier();
			}			
		},
		total 				: function() {      		
	        var sum = 0;

	        $.each(this.invoiceList, function(index, value) {	        		            
	        	sum += kendo.parseInt(value.amount);		        	          
	        });

	        return kendo.toString(sum, "c0", "km-KH");
	    },
	    loadContact 		: function(id){
			var self = this;

			this.set("invoiceList", []);			

			this.contactDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.contactDS.view(),
				fullIdName = view[0].number +" "+ view[0].fullname;

				self.get("customer", view[0]);
				self.loadInvoice(id, fullIdName, view[0].account_id);		    										
			});
		},		
		loadPaymentByCashier: function(){
			var self = this;

			this.paymentByCashierDS.query({
				filter: [
					{ field:"user_id", value: this.get("cashier") },
					{ field:"issued_date", value: kendo.toString(new Date(), "yyyy-MM-dd") }
				]
			}).then(function(e){
				var view = self.paymentByCashierDS.view(),
				contactIDList = {}, sum = 0, counter = 0;

				if(view.length>0){
					$.each(view, function(index, value){
						var contact_id = value.contact_id;

						if(contactIDList[contact_id]===undefined){
							contactIDList[contact_id]={"id": contact_id};
							counter++;
						}

						sum += value.amount / value.rate;
					});

					self.set("total_customer", counter);
			    	self.set("total_payment", kendo.toString(sum, "c0", banhji.institute.locale));
				}else{						    	
			    	self.set("total_customer", 0);
			    	self.set("total_payment", 0);
		    	}
			});
		},		
		loadInvoice 		: function(contact_id, fullIdName, ar_id){
			var self = this;

			this.invoiceDS.query({
				filter: [
					{ field:"contact_id", value: contact_id },
		    		{ field:"status", operator:"where_in", value: [0,2] },
		    		{ field:"type", operator:"where_in", value:["Invoice", "eInvoice", "wInvoice"] }
				],
				page: 1,
				take: 50	  	
			}).then(function(e) {
			    var view = self.invoiceDS.view();
			    
			    $.each(view, function(index, value){
		    		var result = $.grep(self.get("invoiceList"), function(e){ return e.id == value.id; });

		    		if (result.length == 0) {
					  	// not found
					  	var remainAmount = kendo.parseFloat(value.amount) - kendo.parseFloat(value.amount_paid);
					  	
					  	self.get("invoiceList").push({				
							id 				: value.id,
							isPay 			: true,				
							issued_date 	: value.issued_date,
							fullname 		: fullIdName,							
							number			: value.number,										
							amount 			: remainAmount,
							pay_amount 		: remainAmount,
							rate 			: value.rate,
							locale 			: value.locale,
							contact_id 		: value.contact_id,
							ar_id 			: ar_id,							
							company_id 		: value.company_id
 						});
						self.change();
						self.autoIncreaseNo();
					} else if (result.length == 1) {
					  	// access the foo property using result[0].foo					  
					} else {
					  	// multiple items found					  
					}		    					    		
		    	});		    	
			});			
		},						
		autoIncreaseNo 		: function(){
			$(".sno").each(function(index,element){                 
			   $(element).text(index + 1); 
			});
		},
		change				: function(){		
			var total = 0;		
		    var tpay = 0;
		    $.each(this.get("invoiceList"), function(index, value){
		    	total += kendo.parseFloat(value.amount)/kendo.parseFloat(value.rate);
		    	tpay += kendo.parseFloat(value.pay_amount)/kendo.parseFloat(value.rate);
		    });

		    this.set("pay_amount", kendo.toString(tpay, "c0", banhji.institute.locale));		  	   	    	
	    	
	    	var receive_amount = tpay + kendo.parseFloat(this.get("fine"));
			this.set("receive_amount", kendo.toString(receive_amount, "c0", banhji.institute.locale));
	    	
	    	var remain = (total + kendo.parseFloat(this.get("fine"))) - (tpay + kendo.parseFloat(this.get("discount")));
	    	this.set("remain", kendo.toString(remain, "c0", banhji.institute.locale));	    	   	
		},	
		remove 				: function(e){
			if (confirm("Are you sure, you want to delete it?")) {        
		        var item = e.data,
		        index = this.get("invoiceList").indexOf(item);
		        this.get("invoiceList").splice(index, 1);
		        this.change();
		        this.autoIncreaseNo();
	    	}	    	
	    },
	    checkPay 			: function(e){
	    	e.preventDefault();

	    	var d = e.data;
	    	var target = e.currentTarget;

	    	if(target.checked){
	    		d.set("pay_amount", d.amount);
	    	}else{
	    		d.set("pay_amount", 0);
	    	}
	    	this.change();
	    },
	    transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		save 		 		: function(){
			var self = this, data = this.get("invoiceList"), idList = {};
			
			if(data.length>0){
				$.each(data, function(index, value){
					if(kendo.parseFloat(value.pay_amount)>0 && value.isPay){
						// var contact_id = value.contact_id;						
						// if(idList[contact_id]===undefined){
						// 	idList[contact_id]={"id": contact_id, "amount": value.pay_amount};						
						// }else{											
						// 	if(idList[contact_id].id===contact_id){
						// 		idList[contact_id].amount += value.pay_amount;
						// 	}else{
						// 		idList[contact_id]={"id": contact_id, "amount": value.pay_amount};
						// 	}
						// }

						self.dataSource.add({							
							contact_id 			: value.contact_id,
							user_id 			: self.get("cashier"),													
							reference_id		: value.id,														
							payment_method_id	: self.get("payment_method_id"),
							account_id			: self.get("account_id"),
							check_no			: self.get("check_no"),							
							type 				: "Cash_Receipt",
							amount 				: value.pay_amount,
							fine 				: self.get("fine"),
							discount 			: self.get("discount"),
							rate 				: value.rate,
							locale 				: value.locale,
							issued_date			: kendo.toString(self.get("payment_date"), "yyyy-MM-dd"),
							payment_date		: kendo.toString(self.get("payment_date"), "yyyy-MM-dd"),
							is_journal 			: 1
						});																		
					}
				});							

				this.transactionSync()
				.then(function(data){
					//Start journal
					//Cash on Dr
					self.journalLineDS.add({					
						transaction_id 		: data[0].id,
						account_id 			: data[0].account_id,				
						contact_id 			: data[0].contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: obj.amount,
						cr 					: 0,				
						rate				: data[0].rate,
						locale				: data[0].locale
					});

					//A/R on Cr					
					self.journalLineDS.add({					
						transaction_id 		: data[0].id,
						account_id 			: value.id,				
						contact_id 			: data[0].contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: value.amount,				
						rate				: data[0].rate,
						locale				: data[0].locale
					});										
					
					self.journalLineDS.sync();																						
				}).then(function(){					
					self.clear();
					self.loadPaymentByCashier();
				});				
			}
		},					
		clear 				: function() {
			this.set("check_no", "");			
			this.set("discount", 0);
			this.set("fine", 0);		
			this.set("pay_amount", kendo.toString(0,"c0", "km-KH"));
			this.set("receive_amount", kendo.toString(0,"c0", "km-KH"));
			this.set("remain", kendo.toString(0,"c0", "km-KH"));

			this.set("invoiceList", []);

			this.updateInvoiceDS.data([]);
			this.dataSource.data([]);							
		}
	});
	banhji.reconcile = kendo.observable({
		lang 					: langVM,
		dataSource 				: dataStore(apiUrl + "reconciles"),
		existingDS 				: dataStore(apiUrl + "reconciles"),
		prevAmountDS			: dataStore(apiUrl + "reconciles"),
		reconcileItemDS			: dataStore(apiUrl + "reconciles/item"),
		paymentDS 				: dataStore(apiUrl + "payments"),
		denominationList 		: [
				{ 'denomination':1, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
				{ 'denomination':2, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
				{ 'denomination':5, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
				{ 'denomination':10, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
				{ 'denomination':20, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
				{ 'denomination':50, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
				{ 'denomination':100, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
				{ 'denomination':200, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
				{ 'denomination':500, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
				{ 'denomination':1000, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
				{ 'denomination':2000, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
				{ 'denomination':5000, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
				{ 'denomination':10000, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
				{ 'denomination':20000, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
				{ 'denomination':50000, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' },
				{ 'denomination':100000, 'khr_qty':'', 'usd_qty':'', 'khr_transfer':'', 'usd_transfer': '' }
		],		
		reconcileItemList 		: [],	

		obj 					: null,		
		searchDate 				: new Date(),			
		isEdit 					: false,
		isExisting 				: false,

		cashier 				: banhji.source.user_id,
		cashier_name 			: banhji.userManagement.getLogin() === null ? "" : banhji.userManagement.getLogin().username,
		
		pageLoad 				: function(id){
			if(id){
				this.set("isEdit", true);
				this.loadReconcile(id);
			}else{				
				this.set("isEdit", false);				
				this.addEmpty();
				this.loadPayment();
				this.loadPreviousAmount();

				this.checkExisting();
			}
		},
		str_date 				: function(){
			var strDate = "", obj = this.get("obj");

			if(obj){
				strDate = kendo.toString(new Date(obj.reconciled_date), "dd-MM-yyyy");
			}

			return strDate;
		},		
		loadReconcile 			: function(id){				
			var self = this, obj = this.get("obj");			
						
			this.dataSource.query({
				filter: { field: "id" , value: id },
				page: 1,
				take: 50
			}).then(function(){
				var view = self.dataSource.view();

				self.set("obj", view[0]);
				self.reconcileItemDS.filter({ field:"reconcile_id", value: id });				
			});								
		},
		loadPreviousAmount 			: function(){
			var self = this, obj = this.get("obj");

			this.prevAmountDS.query({
				filter: [
					{ field: "cashier", value: this.get("cashier") },										
					{ field: "reconciled_date <=", value: kendo.toString(new Date(), "yyyy-MM-dd") }
				],				
				page: 1,
				take: 1
			}).then(function(){
				var view = self.prevAmountDS.view();

				obj.set("previous_amount", view[0].balance);
			});			
		},
		loadPayment 			: function(){
			var self = this, obj = this.get("obj");

			this.paymentDS.query({
				filter: [
					{ field: "cashier", value: this.get("cashier") },
					{ field: "type" , value: "invoice" },						
					{ field: "payment_date", value: kendo.toString(new Date(), "yyyy-MM-dd") }
				],
				aggregate: [
					{ field: "amount", aggregate: "sum" }
				],
				page: 1,
				take: 50
			}).then(function(){
				var results = self.paymentDS.aggregates().amount;

				obj.set("received_amount", results.sum);
			});			
		},
		checkExisting 			: function(){				
			var self = this;			
						
			this.existingDS.query({
				filter: [
					{ field: "cashier", value: this.get("cashier") },										
					{ field: "reconciled_date", value: kendo.toString(new Date(), "yyyy-MM-dd") }
				],
				page: 1,
				take: 50
			}).then(function(){
				var view = self.existingDS.view();

				if(view.length>0){
					self.set("isExisting", true);
				}else{
					self.set("isExisting", false);
				}					
			});								
		},		
		change					: function(){
			var totalD = 0;
			var totalR = 0;
			var totalDT = 0;
			var totalRT = 0;

			for(var i=0; i < this.denominationList.length; i++){
				var data = this.denominationList[i];
				var dem = kendo.parseFloat(data.denomination);

		    	totalD += kendo.parseFloat(data.qty_usd) * dem;
		    	totalR += kendo.parseFloat(data.qty_khr) * dem;

		    	totalDT += kendo.parseFloat(data.qty_usd_transfer) * dem;
		    	totalRT += kendo.parseFloat(data.qty_khr_transfer) * dem;	    	
			}

			this.set('totalD', kendo.toString(totalD, 'n0'));
			this.set('totalR', kendo.toString(totalR, 'c0'));

			this.set('totalDT', kendo.toString(totalDT, 'n0'));
			this.set('totalRT', kendo.toString(totalRT, 'c0'));		  	 	
		},	
		transferAll 			: function(){
			$.each(this.reconcileItemDS.data(), function(index, value){
				if(value.khr_qty>0){									
					value.set("khr_transfer", value.khr_qty);
				}

				if(value.usd_qty>0){									
					value.set("usd_transfer", value.usd_qty);
				}
			});
			
			this.change();
		},
		change 					: function(){
			var obj = this.get("obj"),
			khr_sum = 0, usd_sum = 0, khr_transfer_sum = 0, usd_transfer_sum = 0,
			usd2khr_amount = 0, usd2khr_transfer_amount = 0;

			$.each(this.reconcileItemDS.data(), function(index, value){
				if(value.khr_qty>0){
					var khrAmt = kendo.parseFloat(value.denomination) * kendo.parseFloat(value.khr_qty);
					khr_sum += khrAmt;					
					value.set("khr_amount", khrAmt);
				}

				if(value.usd_qty>0){
					var usdAmt = kendo.parseFloat(value.denomination) * kendo.parseFloat(value.usd_qty);
					usd_sum += usdAmt;
					value.set("usd_amount", usdAmt);
				}

				if(value.khr_transfer>0){
					var khr_transfer_amt = kendo.parseFloat(value.denomination) * kendo.parseFloat(value.khr_transfer);
					khr_transfer_sum += khr_transfer_amt;
					value.set("khr_transfer_amount", khr_transfer_amt);
				}

				if(value.usd_transfer>0){
					var usd_transfer_amt = kendo.parseFloat(value.denomination) * kendo.parseFloat(value.usd_transfer);
					usd_transfer_sum += usd_transfer_amt;
					value.set("usd_transfer_amount", usd_transfer_amt);
				}
			});

			//Refresh lisview
			var listView = $("#lvReconcileItem").data("kendoListView");			
			listView.refresh();

			//Total Cash1
			obj.set("total_cash1", kendo.parseFloat(obj.received_amount) + kendo.parseFloat(obj.previous_amount));

			//Actual cash
			obj.set("usd_amount", usd_sum);
			usd2khr_amount = obj.rate * usd_sum;
			obj.set("usd2khr_amount", usd2khr_amount);

			obj.set("khr_amount", khr_sum);

			//Total Cash2
			obj.set("total_cash2", kendo.parseFloat(obj.khr_amount) + kendo.parseFloat(obj.usd2khr_amount));

			//Reconcile
			obj.set("reconciled_amount", kendo.parseFloat(obj.total_cash1) - kendo.parseFloat(obj.total_cash2));

			//Transer
			obj.set("transfer_usd", usd_transfer_sum);
			usd2khr_transfer_amount = kendo.parseFloat(obj.rate) * kendo.parseFloat(usd_transfer_sum);
			obj.set("usd2khr_transfer_amount", usd2khr_transfer_amount);

			obj.set("transfer_khr", khr_transfer_sum);

			//Transfered amount
			obj.set("transfered_amount", kendo.parseFloat(obj.usd2khr_transfer_amount) + kendo.parseFloat(obj.transfer_khr));

			//Balance
			obj.set("balance", kendo.parseFloat(obj.total_cash1) - kendo.parseFloat(obj.transfered_amount));
		},
		addEmpty 				: function(){
			var self = this;
			this.set("isEdit", false);
			this.dataSource.data([]);
			this.reconcileItemDS.data([]);        	
      		
			this.dataSource.add({
				company_id 				: 0,
				transfer_account_id 	: 2,
				cashier 				: this.get('cashier'),															
				rate					: 4000,
				received_amount 		: 0,
				previous_amount 		: 0,
				total_cash1 			: 0,
				usd_amount 				: 0,
				usd2khr_amount			: 0,
				khr_amount 				: 0,
				total_cash2 			: 0,
				reconciled_amount 		: 0,
				transfer_usd			: 0,
				usd2khr_transfer_amount	: 0,
				transfer_khr 			: 0,					
				transfered_amount		: 0,
				balance 				: 0,										
				memo 					: "",
				reconciled_date 		: new Date(),
				status 					: 1		
			});			

			//Reconcile Item							
			$.each(this.get("denominationList"), function(index, value){
				self.reconcileItemDS.add({
					"reconcile_id" 			: 0,
					"denomination" 			: value.denomination,			   			   						   
				   	"khr_qty" 				: value.khr_qty,
				   	"khr_amount"			: 0,		   	
				   	"usd_qty" 				: value.usd_qty,
				   	"usd_amount"			: 0,
				   	"khr_transfer" 			: value.khr_transfer,
				   	"khr_transfer_amount" 	: 0,
				   	"usd_transfer" 			: value.usd_transfer,
				   	"usd_transfer_amount" 	: 0
				});
			});			

			var data = this.dataSource.data();			
			var obj = data[data.length - 1];			
			this.set("obj", obj);	
		},
		save 					: function(){
			var self = this;

			this.dataSource.sync();
			this.reconcileItemDS.sync();
		},			
		addReconcile 			: function(){
			var dfd = $.Deferred();

			var tr = this.get("totalReceive");
			var pr = this.get("prevRemain");				
			var receiveAmount = Number(tr.replace(/[^0-9\.]+/g,""));
			var prevRemain = Number(pr.replace(/[^0-9\.]+/g,""));		

			banhji.ds.reconcileDS.add({
				cashier 			: this.get('cashier'),					 
				reconciled_date 	: kendo.toString(new Date(), 'yyyy-MM-dd'),					
				rate				: this.get('rate'),
				received_amount 	: receiveAmount,
				prev_remain 		: prevRemain,
				reconciled_amount	: kendo.parseFloat(this.totalDR()),
				transfered_amount	: kendo.parseFloat(this.totalTransferCash()),
				transfer_account_id : this.get('transfer_account_id'),
				class_id 			: this.get('class_id'),
				memo 				: this.get('memo')
			});				        

	    	banhji.ds.reconcileDS.sync();
		    banhji.ds.reconcileDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;		
		},
		addJournal 				: function(){
			var self = this;				
			var totalTransferCash = kendo.parseFloat(this.totalTransferCash());

			//Transfer account on Dr
			banhji.journalEntry.add({
				journal_id 	: 0,
		 		account 	: this.get("transfer_account_id"), 		
		 		dr 			: totalTransferCash, 
		 		cr 			: 0,
		 		class_id  	: self.get("class_id"),
		 		memo 		: self.get("memo"),
		 		exchange_rate: 1,
			 	main 		: 0	 		
			});				
			
			var cashInTillList = {};
			$.each(banhji.ds.invoiceDS.data(), function(index, value){
				var cash_in_till_id = value.account_id;
				var amt = kendo.parseFloat(value.paid)															
				if(cash_in_till_id>0){
					if(cashInTillList[cash_in_till_id]===undefined){
						cashInTillList[cash_in_till_id]={"id": cash_in_till_id, "amt": amt};						
					}else{											
						if(cashInTillList[cash_in_till_id].id===cash_in_till_id){
							cashInTillList[cash_in_till_id].amt += amt;
						}else{
							cashInTillList[cash_in_till_id]={"id": cash_in_till_id, "amt": amt};
						}
					}
				}
			});

			//Cash in till on Cr
			$.each(cashInTillList, function(index, value){					
				banhji.journalEntry.add({
					journal_id 	: 0,
			 		account 	: value.id,	 		
			 		dr 			: 0, 
			 		cr 			: value.amt,
			 		class_id  	: self.get("class_id"),
			 		memo 		: self.get("memo"),
			 		exchange_rate: 1,
				 	main 		: 0	 		
				});
			});

		 	//Add journal to datasource
			banhji.transaction.addNew();
			var journal = banhji.transaction.get("current");
			
			journal.set("company_id", banhji.config.userData.company);
			journal.set("people_id", 0);
			journal.set("employee_id", banhji.config.userData.userId);
			journal.set("payment_id", 0);
			journal.set("payment_term_id", 0);
			journal.set("transaction_type", "Reconcile");
			journal.set("payment_method", "");
			journal.set("check_no", null);
			journal.set("memo", "ផ្ទៀងផ្ទាត់ និង ផ្ទេរសាច់ប្រាក់");
			journal.set("date", kendo.toString(new Date(this.get("searchDate")), "yyyy-MM-dd"));				
			journal.set("amount_billed", totalTransferCash);
			journal.set("amount_due", 0);
			journal.set("amount_paid", 0);
			journal.set("voucher", null);
			journal.set("class_id", this.get("class_id"));
			journal.set("status", 0);
			journal.set("reference", null);
			journal.set("vat_id", {id: null});
			journal.set("inJournal", 1);			 	
		 			 	
		 	banhji.transaction.save()
		 	.then(function(journal){			 		
	 			$.each(banhji.journalEntry.dataSource.data(), function(index, value){
	 				value.set("journal_id", journal.data.id);
	 			});
	 					 			
	 			banhji.journalEntry.save();
		 	});			  
		}
	});
	banhji.cashTransaction =  kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "transactions"),						
		lineDS  			: dataStore(apiUrl + "account_lines"),
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "account_lines"),		
		contactDS 			: dataStore(apiUrl + "contacts"),				
		currencyDS 			: dataStore(apiUrl + "currencies"),
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		paymentMethodDS		: dataStore(apiUrl + "payment_methods"),
		accountDS  			: banhji.source.cashAccountDS,
		segmentItemDS 		: banhji.source.segmentItemDS,					
		types 				: [
			{id: 'Deposit', name: 'Deposit'},
			{id: 'Witdraw', name: 'Witdraw'},
			{id: 'Transfer', name: 'Transfer'}
		],
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,				
		showRef 			: true,
		showName 			: false,
		showSegment 		: false,
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,		
		obj 				: null,		
		isEdit 				: false,			
		uer_id				: banhji.userManagement.getLogin() === null ? 0 : banhji.userManagement.getLogin().id,
		total				: 0,
		headerTop 			: "TO",
		headerBottom 		: "FROM",											
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);							
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},
		loadObj 			: function(id,is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 1
			}).then(function(e){
				var view = self.dataSource.view();

				if(view.length>0){	       
					self.set("obj", view[0]);					
		        }				

				self.lineDS.query({
					filter: { field: "transaction_id", value: id },
					page: 1,
					take: 100
				});								
			});				
		},			
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),
			currency_id = banhji.currency.getCurrencyID(obj.locale), 
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");
			
			this.currencyRateDS.query({
				filter: [
					{ field:"currency_id", value: currency_id },
					{ field:"date <=", value: date }
				],
				sort: { field:"date", dir:"desc" },
				page: 1,
				take: 1
			}).then(function(){
				var view = self.currencyRateDS.view();

				if(view.length>0){
					obj.set("rate", kendo.parseFloat(view[0].rate));

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", kendo.parseFloat(view[0].rate));
						value.set("locale", view[0].locale);												
					});					
				}else{
					obj.set("rate", 1);

					$.each(self.lineDS.data(), function(index, value){										
						value.set("rate", 1);
						value.set("locale", banhji.institute.locale);												
					});
				}
			});				
		},															
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.lineDS.data([]);
			this.journalLineDS.data([]);

			this.set("obj", null);
			this.set("total", 0);								

			this.dataSource.add({
				recurring_id 		: "",
				account_id 			: "",				
				user_id 			: this.get("uer_id"), 	    			    		
			   	type				: "Deposit", //required			   		   				   		   					   				   	
			   	amount				: 0,
			   	rate				: 1,			   	
			   	locale 				: banhji.institute.locale,			   	
			   	issued_date 		: new Date(),			   	   	
			   	memo 				: "",
			   	memo2 				: "",
			   	segments 			: [],
			   	is_journal 			: 1,
			   	//Recurring
			   	recurring_name 		: "",
			   	start_date 			: new Date(),
			   	frequency 			: "Daily",
			   	month_option 		: "Day",
			   	interval 			: 1,
			   	day 				: 1,
			   	week 				: 0,
			   	month 				: 0,
			   	is_recurring 		: 0			
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);
			this.typeChanges();
			this.addRow();
			this.setRate();				
		},
		addRow 				: function(){				
			var transaction_id = 0, obj = this.get("obj");
			if(this.get("isEdit")){
				transaction_id = obj.id;
			}
						
			this.lineDS.add({					
				transaction_id 		: transaction_id,
				payment_method_id 	: 0,
				account_id 			: "",				
				contact_id 			: "",				
				description 		: "",
				reference_no 		: "",
				segments 	 		: [],								
				amount 	 			: 0,							
				rate				: obj.rate,
				locale				: obj.locale
			});																	
		},		
		remove 				: function(e){						
			var d = e.data;
							
			this.lineDS.remove(d);
        	this.changes();	        	        
		},
		changes				: function(){
			var obj = this.get("obj");
			
			if(this.lineDS.total()>0){			
				var sum = 0;								
				
				$.each(this.lineDS.data(), function(index, value) {
					sum += value.amount;
		        });		       	

		        this.set("total", kendo.toString(sum, "c0", obj.locale));		        
		        obj.set("amount", sum);		       								    	
	    	}else{
	    		this.set("total", 0);		        
		        obj.set("amount", 0);				
	    	}   	
		},
		typeChanges 		: function(){
			var obj = this.get("obj");

			switch(obj.type) {
			    case "Witdraw":
			        this.set("headerTop", "FROM");
			        this.set("headerBottom", "TO");
			        break;
			    case "Transfer":
			        this.set("headerTop", "FROM");
			        this.set("headerBottom", "TO");
			        break;
			    default:
			        this.set("headerTop", "TO");
			        this.set("headerBottom", "FROM");
			}
		},
		transactionSegmentChanges  	: function() {									
			dataArr = this.get("obj").segments,			
			lastIndex = dataArr.length - 1;
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current = this.segmentItemDS.get(dataArr[i]);
					var last = this.segmentItemDS.get(dataArr[lastIndex]);
					if(current.segment.id === last.segment.id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},
		segmentChanges  	: function(e) {					
			var dataArr = e.data.segments;			
			var lastIndex = dataArr.length - 1;
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current = this.segmentItemDS.get(dataArr[i]);
					var last = this.segmentItemDS.get(dataArr[lastIndex]);
					if(current.segment.id === last.segment.id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},				  
		transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	    	    
		save 				: function(){				
	    	var self = this; 			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();
	    		this.lineDS.sync();
	    	}else{
	    		//Add brand new transaction
				this.transactionSync()
				.then(function(data){
					var debit = 0, credit = 0;
					if(data[0].type=="Deposit"){
						debit = data[0].amount;
					}else{
						credit = data[0].amount;
					}

					//Add Journal
					self.journalLineDS.add({					
						transaction_id 		: data[0].id,
						account_id 			: data[0].account_id,				
						contact_id 			: data[0].contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: data[0].segments,								
						dr 	 				: debit,
						cr 					: credit,				
						rate				: data[0].rate,
						locale				: data[0].locale
					});

					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);

						var dr = 0, cr = 0;
						if(data[0].type=="Deposit"){
							cr = value.amount;
						}else{
							dr = value.amount;
						}

						//Add Journal
						self.journalLineDS.add({					
							transaction_id 		: data[0].id,
							account_id 			: value.account_id,				
							contact_id 			: value.contact_id,				
							description 		: value.description,
							reference_no 		: value.reference_no,
							segments 	 		: value.segments,								
							dr 	 				: dr,
							cr 					: cr,				
							rate				: value.rate,
							locale				: value.locale
						});						
					});

					self.lineDS.sync();
					self.journalLineDS.sync();			
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();
			
			window.history.back();
		},		
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);
				
				obj.set("account_id", recur.account_id);
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,
							payment_method_id 	: value.payment_method_id,
							account_id 			: value.account_id,				
							contact_id 			: value.contact_id,				
							description 		: value.description,
							reference_no 		: value.reference_no,
							segments 	 		: value.segments,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({
				account_id 			: obj.account_id,
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,
					payment_method_id 	: value.payment_method_id,
					account_id 			: value.account_id,
					contact_id 			: value.contact_id,				
					description 		: value.description,
					reference_no 		: value.reference_no,
					segments 	 		: value.segmets,								
					amount 	 			: value.amount,						
					rate				: value.rate,
					locale				: value.locale
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);

	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	    	   
	});
	banhji.cashReceipt =  kendo.observable({
		dataSource 			: dataStore(apiUrl + "transactions"),
		invoiceDS 			: dataStore(apiUrl + "transactions"),
		creditDS 			: dataStore(apiUrl + "transactions"),		
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "transactions/line"),						
		currencyDS  		: banhji.source.currencyDS,
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		contactDS  			: banhji.source.customerDS,
		accountDS  			: banhji.source.cashAccountDS,		
		paymentTermDS 		: dataStore(apiUrl + "payment_terms"),
		paymentMethodDS 	: dataStore(apiUrl + "payment_methods"),
		segmentItemDS		: banhji.source.segmentItemDS,		
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,
	    bgColor 			: "#D5DBDB",
	    showDeposit 		: false,	    
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,
		showCheckNo 		: false,
		obj 				: null,		
		isEdit 				: false,		
		searchText 			: "",
		contact_id 			: "",
		invoice_id 			: 0,		
		sub_total 			: 0,		
		discount 			: 0,		
		total 				: 0,
		pay 		 		: 0,
		remain 				: 0,
		original_total 		: 0,				
		user_id				: banhji.source.user_id,
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);										
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);								
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},	    			
		loadObj 			: function(id, is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}			

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 100
			}).then(function(){
				var view = self.dataSource.view();
				
				self.journalLineDS.filter({ field: "transaction_id", value: id });
				self.creditDS.filter([
					{ field: "reference_id", value: id },
					{ field: "type", value: "Credit" }
				]);				
				self.set("obj", view[0]);
				self.set("original_total", view[0].amount+view[0].discount);
				self.changes();														
			});						
		},
		loadInvoice 		: function(id){
			this.set("invoice_id", id);
			this.search();
		},		
		//Contact
		loadContact 		: function(id){
			this.set("contact_id", id);
			this.search();
		},		
		contactChanges 		: function(){
			this.search();
	    },
	    issuedDateChanges 	: function(){
	    	this.applyTerm();
	    	this.setRate();	
	    },
	    applyTerm 			: function(){
	    	var self = this, obj = this.get("obj"), 
	    	today = new Date();

	    	$.each(this.dataSource.data(), function(index, value){	    		   		
	    		var term = self.paymentTermDS.get(value.payment_term_id),
	    		termDate = new Date(value.reference[0].issued_date);

    			termDate.setDate(termDate.getDate() + term.discount_period);
    			
    			if(today<=termDate){
    				if(value.amount_paid==0){
	    				var amount = value.reference[0].amount * term.discount_percentage;
	    				value.set("discount", amount);
	    				value.set("amount", value.reference[0].amount - amount);
    				}
    			}		    	
	    	});	    	
	    },		
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),			
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");

			var uniqueLocale = [];
			$.each(this.dataSource.data(), function(index, value){							
			    if($.inArray(value.locale, uniqueLocale) === -1) uniqueLocale.push(value.locale);
			});

			$.each(uniqueLocale, function(ind, locale){				
				self.currencyRateDS.query({
					filter: [
						{ field:"locale", value: locale },
						{ field:"date <=", value: date }
					],
					sort: { field:"date", dir:"desc" },
					page: 1,
					take: 1
				}).then(function(){
					var view = self.currencyRateDS.view();
					
					if(view.length>0){
						$.each(self.dataSource.data(), function(index, value){
							if(value.locale==locale){
								value.set("rate",view[0].rate);
							}
						});									
					}else{
						$.each(self.dataSource.data(), function(index, value){
							if(value.locale==locale){
								value.set("rate",1);
							}
						});					
					}

					self.changes();
				});
			});					
		},		
		search 				: function(){
			var self = this, 
			para = [],
			obj = this.get("obj"),			
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd"), 
			searchText = this.get("searchText"), 
			invoice_id = this.get("invoice_id"),
			contact_id = this.get("contact_id");

	    	if(contact_id>0){		    			    	
		    	para.push({ field:"contact_id", value: contact_id });				    			    	
	    	}

	    	if(invoice_id>0){		    			    	
		    	para.push({ field:"id", value: invoice_id });				    			    	
	    	}
			
			if(searchText!==""){
				para.push({ field:"number", value: searchText });
			}

			para.push({ field:"type", value:"Invoice" });
			para.push({ field:"status", operator:"where_in", value:[0,2] });

			if(this.dataSource.total()>0){
				var idList = [];
				$.each(this.dataSource.data(), function(index, value){
					idList.push(value.reference_id);
				});
				para.push({ field:"id", operator:"where_not_in", value:idList });
			}

			this.invoiceDS.query({
				filter: para,
				page: 1,
				pageSize: 100
			}).then(function(){
				var view = self.invoiceDS.view();

				if(view.length>0){
					$.each(view, function(index, value){											
						var amount_due = value.amount - value.amount_paid;							

						self.dataSource.add({
		    				contact_id 			: value.contact_id,				
							account_id 			: obj.account_id,
							payment_term_id		: value.payment_term_id,
							payment_method_id	: obj.payment_method_id,				
							reference_id 		: value.id,								
							user_id 			: self.get("user_id"),
							check_no 			: value.check_no,
						   	type				: "Cash_Receipt",
						   	amount 				: amount_due,				   	
						   	discount 			: 0,
						   	rate				: value.rate,			   	
						   	locale 				: value.locale,			   	
						   	issued_date 		: obj.issued_date,					   	
						   	memo 				: obj.memo,
						   	memo2 				: obj.memo2,
						   	status 				: 0,
						   	segments 			: obj.segments,
						   	is_journal 			: 1,
						   	//Recurring
						   	recurring_name 		: "",
						   	start_date 			: new Date(),
						   	frequency 			: "Daily",
						   	month_option 		: "Day",
						   	interval 			: 1,
						   	day 				: 1,
						   	week 				: 0,
						   	month 				: 0,
						   	is_recurring 		: 0,

						   	contact				: value.contact,
						   	amount_paid 		: value.amount_paid,
						   	reference 			: [{ "number" : value.number, "amount" : value.amount, "issued_date":value.issued_date }]				
				    	});						
					});
					self.applyTerm();
					self.setRate();	
				}				
			});

			this.set("searchText", "");
			this.set("contact_id", "");
			this.set("invoice_id", 0);	
		},
		enterSearch 		: function(e){
			e.preventDefault();

			this.search();
		},		
	    segmentChanges 		: function(e) {
			var dataArr = this.get("obj").segments,
			lastIndex = dataArr.length - 1,
			last = this.segmentItemDS.get(dataArr[lastIndex]);
			
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current_index = dataArr[i],
					current = this.segmentItemDS.get(current_index);

					if(current.segment_id === last.segment_id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},				
		removeRow 			: function(e){			
			this.dataSource.remove(e.data);		    
		    this.changes();	        
		},
		changes				: function(){
			var self = this, obj = this.get("obj"),
			total = 0, subTotal = 0, discount =0, pay = 0, remain = 0;											

			$.each(this.dataSource.data(), function(index, value) {								
				subTotal += ((value.reference[0].amount - value.amount_paid) / value.rate);					
				discount += (value.discount / value.rate);
				pay += (value.amount / value.rate);					
	        });

			total = subTotal - discount;
			remain = total - pay;

	        //Warning over credit allowed
	        if(remain>0){
	        	this.set("bgColor", "Gold");		        	
	        }else{
	        	this.set("bgColor", "#D5DBDB");
	        }

	        this.set("sub_total", kendo.toString(subTotal, "c", banhji.locale));
	        this.set("discount", kendo.toString(discount, "c", banhji.locale));		        
	        this.set("total", kendo.toString(total, "c", banhji.locale));
	        this.set("pay", kendo.toString(pay, "c", banhji.locale));
	        this.set("remain", kendo.toString(remain, "c", banhji.locale));	    		
		},
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.invoiceDS.data([]);
			this.creditDS.data([]);			
			this.journalLineDS.data([]);			

			this.set("obj", null);
			this.set("sub_total", 0);			
			this.set("discount", 0);		
			this.set("total", 0);
			this.set("pay", 0);
			this.set("remain", 0);				

			this.set("obj", {				
				account_id 			: 7,
				payment_method_id	: 1,							   	
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),			   	
			   	memo 				: "",
			   	memo2 				: "",			   	
			   	segments 			: []		
	    	});						
		},							    
	    transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	      	    	    
		save 				: function(){				
	    	var self = this, obj = this.get("obj");	    			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();	    		
	    		
	    		if(this.get("original_total")!==obj.amount+obj.discount){
	    			this.set("original_total", obj.amount+obj.discount)

	    			$.each(this.journalLineDS.data(), function(index, value){										
						value.set("deleted", 1);										
					});

					this.addJournal(obj.id);

					//Credit
					if(this.creditDS.total()>0){
						var credit = this.creditDS.at(0),
						overAmount = ((obj.reference[0].amount - obj.amount_paid) - obj.amount) - obj.discount;
						
						if(overAmount<0){
							credit.set("amount", overAmount*-1);
						}else{
							credit.set("amount", 0);
						}
					}else{
						this.addCredit(obj.id);
					}					
				}	    			    		
	    	}else{
	    		//Add brand new transaction
	    		
	    		$.each(this.dataSource.data(), function(index, value){
	    			value.set("account_id", obj.account_id);
	    			value.set("payment_method_id", obj.payment_method_id);	    			
	    			value.set("issued_date", obj.issued_date);
	    			value.set("memo", obj.memo);
	    			value.set("memo2", obj.memo2);
	    			value.set("segments", obj.segments);
	    		});
	    		
				this.transactionSync()
				.then(function(data){
					self.addCredit(data[0].id);
					self.addJournal(data[0].id);					
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			
			window.history.back();
		},
		addCredit 			: function(cash_receipt_id){
			var self = this, obj = this.get("obj");
			
			//Add over amount to customer credit
			$.each(this.dataSource.data(), function(index, value){			
				var overAmount = ((value.reference[0].amount - value.amount_paid) - value.amount) - value.discount;
				
				if(overAmount<0){
					self.creditDS.add({
	    				contact_id 			: value.contact_id,				
						account_id 			: value.contact[0].deposit_account_id,						
						payment_method_id	: obj.payment_method_id,				
						reference_id 		: cash_receipt_id,								
						user_id 			: self.get("user_id"),
						check_no 			: value.check_no,
					   	type				: "Credit",
					   	amount 				: overAmount*-1,				   	
					   	discount 			: 0,
					   	rate				: value.rate,			   	
					   	locale 				: value.locale,			   	
					   	issued_date 		: obj.issued_date,					   	
					   	memo 				: obj.memo,
					   	memo2 				: obj.memo2,
					   	status 				: 0,
					   	segments 			: obj.segments,
					   	is_journal 			: 0,
					   	//Recurring
					   	recurring_name 		: "",
					   	start_date 			: new Date(),
					   	frequency 			: "Daily",
					   	month_option 		: "Day",
					   	interval 			: 1,
					   	day 				: 1,
					   	week 				: 0,
					   	month 				: 0,
					   	is_recurring 		: 0
			    	});	    			
				}
			});

			this.creditDS.sync();
		},
		addJournal 			: function(transaction_id){
			var self = this, obj = this.get("obj");

			$.each(this.dataSource.data(), function(index, value){
				var overAmount = ((value.reference[0].amount - value.amount_paid) - value.amount) - value.discount;

				//Cash on Dr
				self.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: obj.account_id,				
					contact_id 			: value.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: [],								
					dr 	 				: value.amount,
					cr 					: 0,				
					rate				: value.rate,
					locale				: value.locale
				});

				if(value.discount>0){
					//Discount on Dr
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.contact[0].settlement_discount_id,				
						contact_id 			: value.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: value.discount,
						cr 					: 0,				
						rate				: value.rate,
						locale				: value.locale
					});
				}

				//AR on Cr
				self.journalLineDS.add({					
					transaction_id 		: transaction_id,
					account_id 			: value.contact[0].account_id,				
					contact_id 			: value.contact_id,				
					description 		: "",
					reference_no 		: "",
					segments 	 		: [],								
					dr 	 				: 0,
					cr 					: (value.amount + value.discount) + overAmount,				
					rate				: value.rate,
					locale				: value.locale
				});

				if(overAmount<0){
					self.journalLineDS.add({					
						transaction_id 		: transaction_id,
						account_id 			: value.contact[0].deposit_account_id,				
						contact_id 			: value.contact_id,				
						description 		: "",
						reference_no 		: "",
						segments 	 		: [],								
						dr 	 				: 0,
						cr 					: overAmount*-1,				
						rate				: value.rate,
						locale				: value.locale
					});
				}				
			});

			self.journalLineDS.sync();	
		},    
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);				
				
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("discount", recur.discount);
				obj.set("fine", recur.fine);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,							
							item_id 			: value.item_id,									
							description 		: value.description,							
							quantity 			: value.quantity,
							price 				: value.price,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,

							item_prices 		: value.item_prices
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({				
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	discount 			: obj.discount,
			   	fine 				: obj.fine,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,					
					item_id 			: value.item_id,								
					description 		: value.description,													
					amount 	 			: value.amount,
					discount 			: value.discount,
					fine 				: value.fine,						
					rate				: value.rate,
					locale				: value.locale,
					has_vat 			: value.has_vat
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);
	    		
	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	 		
	});
	banhji.cashPayment =  kendo.observable({
		dataSource 			: dataStore(apiUrl + "transactions"),
		invoiceDS 			: dataStore(apiUrl + "transactions"),		
		journalLineDS		: dataStore(apiUrl + "journal_lines"),
		recurringDS 		: dataStore(apiUrl + "transactions"),
		recurringLineDS 	: dataStore(apiUrl + "transactions/line"),						
		currencyDS  		: banhji.source.currencyDS,
		currencyRateDS		: dataStore(apiUrl + "currencies/rate"),
		contactDS  			: banhji.source.supplierDS,
		accountDS  			: banhji.source.cashAccountDS,		
		paymentTermDS 		: dataStore(apiUrl + "payment_terms"),
		paymentMethodDS 	: dataStore(apiUrl + "payment_methods"),
		segmentItemDS		: banhji.source.segmentItemDS,		
		frequencyList 		: banhji.source.frequencyList,
		monthOptionList 	: banhji.source.monthOptionList,
		monthList 			: banhji.source.monthList,
		weekDayList 		: banhji.source.weekDayList,
		dayList 			: banhji.source.dayList,
	    bgColor 			: "#D5DBDB",
	    showDeposit 		: false,	    
		showMonthOption 	: false,
		showMonth 			: false,
		showWeek 			: false,
		showDay 			: false,
		showCheckNo 		: false,
		obj 				: null,		
		isEdit 				: false,		
		searchText 			: "",
		contact_id 			: "",
		invoice_id 			: 0,		
		sub_total 			: 0,		
		discount 			: 0,		
		total 				: 0,
		pay 		 		: 0,
		remain 				: 0,
		original_total 		: 0,				
		user_id				: banhji.source.user_id,
		pageLoad 			: function(id, is_recurring){
			if(id){
				this.set("isEdit", true);										
				this.loadObj(id, is_recurring);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);								
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}
		},	    			
		loadObj 			: function(id, is_recurring){
			var self = this, para = [];

			para.push({ field:"id", value: id });

			if(is_recurring){
				para.push({ field:"is_recurring", value: 1 });
			}			

			this.dataSource.query({    			
				filter: para,
				page: 1,
				take: 100
			}).then(function(){
				var view = self.dataSource.view();
				
				self.journalLineDS.filter({ field: "transaction_id", value: id });				
				self.set("obj", view[0]);
				self.set("original_total", view[0].amount);
				self.changes();														
			});							
		},
		loadInvoice 		: function(id){
			this.set("invoice_id", id);
			this.search();
		},		
		//Contact
		loadContact 		: function(id){
			this.set("contact_id", id);
			this.search();
		},		
		contactChanges 		: function(){
			this.search();
	    },
	    issuedDateChanges 	: function(){
	    	this.applyTerm();
	    	this.setRate();	
	    },
	    applyTerm 			: function(){
	    	var self = this, obj = this.get("obj"), 
	    	today = new Date();

	    	$.each(this.dataSource.data(), function(index, value){	    		   		
	    		var term = self.paymentTermDS.get(value.payment_term_id),
	    		termDate = new Date(value.reference[0].issued_date);

    			termDate.setDate(termDate.getDate() + term.discount_period);
    			
    			if(today<=termDate){
    				if(value.amount_paid==0){
	    				var amount = value.reference[0].amount * term.discount_percentage;
	    				value.set("discount", amount);
	    				value.set("amount", value.reference[0].amount - amount);
    				}
    			}		    	
	    	});	    	
	    },		
		setRate 			: function(){
			var self = this, 
			obj = this.get("obj"),			
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd");

			var uniqueLocale = [];
			$.each(this.dataSource.data(), function(index, value){							
			    if($.inArray(value.locale, uniqueLocale) === -1) uniqueLocale.push(value.locale);
			});

			$.each(uniqueLocale, function(ind, locale){				
				self.currencyRateDS.query({
					filter: [
						{ field:"locale", value: locale },
						{ field:"date <=", value: date }
					],
					sort: { field:"date", dir:"desc" },
					page: 1,
					take: 1
				}).then(function(){
					var view = self.currencyRateDS.view();
					
					if(view.length>0){
						$.each(self.dataSource.data(), function(index, value){
							if(value.locale==locale){
								value.set("rate",view[0].rate);
							}
						});									
					}else{
						$.each(self.dataSource.data(), function(index, value){
							if(value.locale==locale){
								value.set("rate",1);
							}
						});					
					}

					self.changes();
				});
			});					
		},		
		search 				: function(){
			var self = this, 
			para = [],
			obj = this.get("obj"),			
			date = kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd"), 
			searchText = this.get("searchText"), 
			invoice_id = this.get("invoice_id"),
			contact_id = this.get("contact_id");

	    	if(contact_id>0){		    			    	
		    	para.push({ field:"contact_id", value: contact_id });				    			    	
	    	}

	    	if(invoice_id>0){		    			    	
		    	para.push({ field:"id", value: invoice_id });				    			    	
	    	}
			
			if(searchText!==""){
				para.push({ field:"number", value: searchText });
			}

			para.push({ field:"type", value:"Invoice" });
			para.push({ field:"status", operator:"where_in", value:[0,2] });

			if(this.dataSource.total()>0){
				var idList = [];
				$.each(this.dataSource.data(), function(index, value){
					idList.push(value.reference_id);
				});
				para.push({ field:"id", operator:"where_not_in", value:idList });
			}

			this.invoiceDS.query({
				filter: para,
				page: 1,
				pageSize: 100
			}).then(function(){
				var view = self.invoiceDS.view();

				if(view.length>0){
					$.each(view, function(index, value){											
						var amount_due = value.amount - value.amount_paid;							

						self.dataSource.add({
		    				contact_id 			: value.contact_id,				
							account_id 			: obj.account_id,
							payment_term_id		: value.payment_term_id,
							payment_method_id	: obj.payment_method_id,				
							reference_id 		: value.id,								
							user_id 			: self.get("user_id"),
							check_no 			: value.check_no,
						   	type				: "Cash_Receipt",
						   	amount 				: amount_due,				   	
						   	discount 			: 0,
						   	rate				: value.rate,			   	
						   	locale 				: value.locale,			   	
						   	issued_date 		: obj.issued_date,					   	
						   	memo 				: obj.memo,
						   	memo2 				: obj.memo2,
						   	status 				: 0,
						   	segments 			: obj.segments,
						   	is_journal 			: 1,
						   	//Recurring
						   	recurring_name 		: "",
						   	start_date 			: new Date(),
						   	frequency 			: "Daily",
						   	month_option 		: "Day",
						   	interval 			: 1,
						   	day 				: 1,
						   	week 				: 0,
						   	month 				: 0,
						   	is_recurring 		: 0,

						   	contact				: value.contact,
						   	amount_paid 		: value.amount_paid,
						   	reference 			: [{ "number" : value.number, "amount" : value.amount, "issued_date":value.issued_date }]				
				    	});						
					});
					self.applyTerm();
					self.setRate();	
				}				
			});

			this.set("searchText", "");
			this.set("contact_id", "");
			this.set("invoice_id", 0);	
		},
		enterSearch 		: function(e){
			e.preventDefault();

			this.search();
		},		
	    segmentChanges 		: function(e) {
			var dataArr = this.get("obj").segments,
			lastIndex = dataArr.length - 1,
			last = this.segmentItemDS.get(dataArr[lastIndex]);
			
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current_index = dataArr[i],
					current = this.segmentItemDS.get(current_index);

					if(current.segment_id === last.segment_id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},				
		removeRow 			: function(e){			
			this.dataSource.remove(e.data);		    
		    this.changes();	        
		},
		changes				: function(){
			var self = this, obj = this.get("obj"),
			total = 0, subTotal = 0, discount =0, pay = 0, remain = 0;											

			$.each(this.dataSource.data(), function(index, value) {								
				subTotal += ((value.reference[0].amount - value.amount_paid) / value.rate);					
				discount += (value.discount / value.rate);
				pay += (value.amount / value.rate);					
	        });

			total = subTotal - discount;
			remain = total - pay;

	        //Warning over credit allowed
	        if(remain>0){
	        	this.set("bgColor", "Gold");		        	
	        }else{
	        	this.set("bgColor", "#D5DBDB");
	        }

	        this.set("sub_total", kendo.toString(subTotal, "c", banhji.locale));
	        this.set("discount", kendo.toString(discount, "c", banhji.locale));		        
	        this.set("total", kendo.toString(total, "c", banhji.locale));
	        this.set("pay", kendo.toString(pay, "c", banhji.locale));
	        this.set("remain", kendo.toString(remain, "c", banhji.locale));	    		
		},
		addEmpty 		 	: function(){			
			this.dataSource.data([]);
			this.invoiceDS.data([]);			
			this.journalLineDS.data([]);			

			this.set("obj", null);
			this.set("sub_total", 0);			
			this.set("discount", 0);		
			this.set("total", 0);
			this.set("pay", 0);
			this.set("remain", 0);				

			this.set("obj", {				
				account_id 			: 7,
				payment_method_id	: 1,							   	
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),			   	
			   	memo 				: "",
			   	memo2 				: "",			   	
			   	segments 			: []		
	    	});						
		},							    
	    transactionSync 	: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },	      	    	    
		save 				: function(){				
	    	var self = this, obj = this.get("obj");	    			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();	    		
	    		
	    		if(this.get("original_total")!==obj.amount){
	    			this.set("original_total", obj.amount)

	    			$.each(this.journalLineDS.data(), function(index, value){										
						value.set("deleted", 1);										
					});

					$.each(this.dataSource.data(), function(index, value){
						//Cash on Dr
						self.journalLineDS.add({					
							transaction_id 		: obj.id,
							account_id 			: obj.account_id,				
							contact_id 			: value.contact_id,				
							description 		: "",
							reference_no 		: "",
							segments 	 		: [],								
							dr 	 				: value.amount,
							cr 					: 0,				
							rate				: value.rate,
							locale				: value.locale
						});

						if(value.discount>0){
							//Discount on Dr
							self.journalLineDS.add({					
								transaction_id 		: obj.id,
								account_id 			: value.contact[0].settlement_discount_id,				
								contact_id 			: value.contact_id,				
								description 		: "",
								reference_no 		: "",
								segments 	 		: [],								
								dr 	 				: value.discount,
								cr 					: 0,				
								rate				: value.rate,
								locale				: value.locale
							});
						}

						//AR on Cr
						self.journalLineDS.add({					
							transaction_id 		: obj.id,
							account_id 			: value.contact[0].account_id,				
							contact_id 			: value.contact_id,				
							description 		: "",
							reference_no 		: "",
							segments 	 		: [],								
							dr 	 				: 0,
							cr 					: value.amount + value.discount,				
							rate				: value.rate,
							locale				: value.locale
						});												
					});

					this.journalLineDS.sync();
				}	    			    		
	    	}else{
	    		//Add brand new transaction

	    		$.each(this.dataSource.data(), function(index, value){
	    			value.set("account_id", obj.account_id);
	    			value.set("payment_method_id", obj.payment_method_id);
	    			value.set("rate", obj.rate);
	    			value.set("locale", obj.locale);
	    			value.set("issued_date", obj.issued_date);
	    			value.set("memo", obj.memo);
	    			value.set("memo2", obj.memo2);
	    			value.set("segments", obj.segments);
	    		});

				this.transactionSync()
				.then(function(data){
					//Add Journal
					$.each(data, function(index, value){
						//Cash on Dr
						self.journalLineDS.add({					
							transaction_id 		: value.id,
							account_id 			: obj.account_id,				
							contact_id 			: value.contact_id,				
							description 		: "",
							reference_no 		: "",
							segments 	 		: [],								
							dr 	 				: value.amount,
							cr 					: 0,				
							rate				: value.rate,
							locale				: value.locale
						});

						if(value.discount>0){
							//Discount on Dr
							self.journalLineDS.add({					
								transaction_id 		: value.id,
								account_id 			: value.contact[0].settlement_discount_id,				
								contact_id 			: value.contact_id,				
								description 		: "",
								reference_no 		: "",
								segments 	 		: [],								
								dr 	 				: value.discount,
								cr 					: 0,				
								rate				: value.rate,
								locale				: value.locale
							});
						}

						//AR on Cr
						self.journalLineDS.add({					
							transaction_id 		: value.id,
							account_id 			: value.contact[0].account_id,				
							contact_id 			: value.contact_id,				
							description 		: "",
							reference_no 		: "",
							segments 	 		: [],								
							dr 	 				: 0,
							cr 					: value.amount + value.discount,				
							rate				: value.rate,
							locale				: value.locale
						});

												
					});

					self.journalLineDS.sync();
				}).then(function(){					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();			

			window.history.back();
		},    
		//Recurring		
		applyRecurring 		: function(){
			var self = this, obj = this.get("obj");
			
			if(obj.recurring_id){
				var recur = this.recurringDS.get(obj.recurring_id);				
				
				obj.set("segments", recur.segments);
				obj.set("amount", recur.amount);
				obj.set("discount", recur.discount);
				obj.set("fine", recur.fine);
				obj.set("rate", recur.rate);
				obj.set("locale", recur.locale);					
				obj.set("memo", recur.memo);
				obj.set("memo2", recur.memo2);

				var locale = recur.locale;
				this.set("total", kendo.toString(recur.amount, locale=="km-KH"?"c0":"c", locale));

				this.recurringLineDS.query({
					filter: { field:"transaction_id", value:recur.id },
					page: 1,
					take: 100
				}).then(function(){
					var line = self.recurringLineDS.view();
					self.lineDS.data([]);

					$.each(line, function(index, value){
						self.lineDS.add({					
							transaction_id 		: 0,							
							item_id 			: value.item_id,									
							description 		: value.description,							
							quantity 			: value.quantity,
							price 				: value.price,								
							amount 	 			: value.amount,									
							rate				: value.rate,
							locale				: value.locale,
							has_vat 			: value.has_vat,

							item_prices 		: value.item_prices
						});
					});
				});				
			}else{
				this.addEmpty();
			} 
		},		
		frequencyChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.frequency) {
			    case "Daily":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", false);
			       
			        break;
			    case "Weekly":
			        this.set("showMonthOption", false);
			        this.set("showMonth", false);
			        this.set("showWeek", true);
			        this.set("showDay", false);

			        break;
			    case "Monthly":
			        this.set("showMonthOption", true);
			        this.set("showMonth", false);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    case "Annually":
			        this.set("showMonthOption", false);
			        this.set("showMonth", true);
			        this.set("showWeek", false);
			        this.set("showDay", true);

			        break;
			    default:
			        //Default here..
			}
		},
		monthOptionChanges 	: function(){
			var obj = this.get("obj");

			switch(obj.month_option) {
			    case "Day":			       
			        this.set("showWeek", false);
			        this.set("showDay", true);
			       
			        break;			    
			    default:			        
			        this.set("showWeek", true);
			        this.set("showDay", false);
			}
		},		
		validateRecurring  	: function(){
			var result = true, obj = this.get("obj");
			
			if(obj.recurring_name!==""){
				//Check existing name
				$.each(this.recurringDS.data(), function(index, value){
					if(value.recurring_name==obj.recurring_name){
						result = false;
						alert("This is name is taken.");

						return false;
					}
				});
			}
			else{
				result = false;
				alert("Recurring name is required.");				
			}			

			return result;
		},
		addNewRecurring 	: function(){
			var self = this, obj = this.get("obj");

			this.recurringDS.add({				
				user_id 			: obj.user_id, 	    			    		
			   	type				: obj.type,			   				   				   		   					   				   	
			   	amount				: obj.amount,
			   	discount 			: obj.discount,
			   	fine 				: obj.fine,
			   	rate				: obj.rate,			   	
			   	locale 				: obj.locale,					   		   	   	
			   	memo 				: obj.memo,
			   	memo2 				: obj.memo2,
			   	segments 			: obj.segments,
			   	recurring_name 		: obj.recurring_name,
			   	start_date 			: obj.start_date,
			   	frequency 			: obj.frequency,
			   	month_option 		: obj.month_option,
			   	interval 			: obj.interval,
			   	day 				: obj.day,
			   	week 				: obj.week,
			   	month 				: obj.month,
			   	is_recurring 		: 1			
	    	});

	    	$.each(this.lineDS.data(), function(index, value){
	    		self.recurringLineDS.add({					
					transaction_id 		: 0,					
					item_id 			: value.item_id,								
					description 		: value.description,													
					amount 	 			: value.amount,
					discount 			: value.discount,
					fine 				: value.fine,						
					rate				: value.rate,
					locale				: value.locale,
					has_vat 			: value.has_vat
				});
	    	});
		},
		recurringSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.recurringDS.sync();
		    this.recurringDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		saveRecurring 		: function(){
	    	var self = this, obj = this.get("obj");

	    	if(this.get("isEdit")){
	    		if(obj.is_recurring=="0"){ //Add brand new recurring from existing transaction	    			
	    			this.addNewRecurring();

	    			this.recurringSync()
					.then(function(data){
						$.each(self.recurringLineDS.data(), function(index, value){										
							value.set("transaction_id", data[0].id);						
						});

						self.recurringLineDS.sync();			
					}).then(function(){					
						self.addEmpty();
					});
	    		}else{
	    			this.save();
	    		}
	    	}else{ //Add brand new recurring
	    		obj.set("is_recurring", 1);
	    		
	    		this.transactionSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);								
					});

					self.lineDS.sync();							
				}).then(function(){					
					self.addEmpty();
				});
	    	}	    	
	    }	 		
	});


	/*************************
	*	Inventory Section   *
	**************************/
	banhji.itemDashBoard = kendo.observable({
		lang 				: langVM,
		summaryDS 			: dataStore(apiUrl + "dashboards/customer_summary"),
		topCustomerDS 		: dataStore(apiUrl + "dashboards/top_customer"),
		topARDS 			: dataStore(apiUrl + "dashboards/top_ar"),
		topProductDS 		: dataStore(apiUrl + "dashboards/top_product"),
		graphDS 			: dataStore(apiUrl + 'dashboards/monthly_sale'),
		sale 				: 0,
		sale_customer 		: 0,
		sale_product 		: 0,
		sale_order 			: 0,
		order 				: 0,
		order_avg 			: 0,
		order_open 			: 0,
		ar 					: 0,
		ar_open 			: 0,
		ar_customer 		: 0,
		ar_overdue 			: 0,						
		pageLoad 			: function(){
			var self = this, today = new Date(),
			firstDayOfYear = new Date(today.getFullYear(), 0, 1);

			this.summaryDS.query({
				filter: [
					{ field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
					{ field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
				],								
				page: 1,
				take: 5
			}).then(function(){
				var view = self.summaryDS.view();
				
				self.set("sale", kendo.toString(view[0].sale, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale));
				self.set("sale_customer", kendo.toString(view[0].sale_customer, "n0"));
				self.set("sale_product", kendo.toString(view[0].sale_product, "n0"));
				self.set("sale_order", kendo.toString(view[0].sale_order, "n0"));

				self.set("order", kendo.toString(view[0].order, "n0"));
				self.set("order_avg", kendo.toString(view[0].order_avg, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale));				
				self.set("order_open", kendo.toString(view[0].order_open, "n0"));

				self.set("ar", kendo.toString(view[0].ar, banhji.institute.locale=="km-KH"?"c0":"c", banhji.institute.locale));
				self.set("ar_open", kendo.toString(view[0].ar_open, "n0"));
				self.set("ar_customer", kendo.toString(view[0].ar_customer, "n0"));
				self.set("ar_overdue", kendo.toString(view[0].ar_overdue, "n0"));
			});

			this.topCustomerDS.query({
				filter: [
					{ field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
					{ field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
				],								
				page: 1,
				take: 5
			});

			this.topARDS.query({
				filter: [
					{ field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
					{ field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
				],							
				page: 1,
				take: 5
			});

			this.topProductDS.query({
				filter: [
					{ field:"issued_date >=", operator:"where_related", model:"transaction", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
					{ field:"issued_date <=", operator:"where_related", model:"transaction", value:  kendo.toString(today, "yyyy-MM-dd") }
				],							
				page: 1,
				take: 5
			});

			this.loadGraph();								
		},
		loadGraph 			: function(){
			var self = this, 
			today = new Date(),
			firstDayOfYear = new Date(today.getFullYear(), 0, 1);

			this.graphDS.query({
				filter: [
					{ field:"issued_date >=", value: kendo.toString(firstDayOfYear, "yyyy-MM-dd") },
					{ field:"issued_date <=", value:  kendo.toString(today, "yyyy-MM-dd") }
				],
				page: 1,
				take: 100
			}).then(function(e) {
			    var view = self.graphDS.view();
			    
				$('#graph').kendoChart({
					dataSource: {data: view},												
					series: [
						{field: 'sale', categoryField:'month', type: 'line', axis: 'order'}
					],
					valueAxes: [
						{
		                    name: "order",
		                    color: "#007eff",
		                    min: 0,
		                    majorUnit: 500000,
		                    max: 1000000
		                }
	                ],
	                categoryAxis: {
	                    //categories: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],		                    
	                    axisCrossingValues: [0, 13],
	                    justified: true
	                },
	                tooltip: {
	                    visible: true,
	                    format: "{0}",
	                    template: "#= series.field #: #= value #"
	                }
				});
			});		
		}		
	});
	banhji.itemCenter = kendo.observable({
		lang 				: langVM,		
		itemDS 				: dataStore(apiUrl + 'items'),
		poDS 				: dataStore(apiUrl + "transactions/line"),
    	soDS 				: dataStore(apiUrl + "transactions/line"),
		movementDS			: dataStore(apiUrl + 'items/movement'),		
		categoryDS 			: dataStore(apiUrl + "categories"),
		itemGroupDS			: dataStore(apiUrl + "items/group"),			

		sortList			: banhji.source.sortList,
		sorter 				: "year",
		sdate 				: "",
		edate 				: "",
				
		obj 				: null,
		on_po 				: 0,
		on_so				: 0,		
		searchText 			: "",	
		category_id 		: null,
		selectedItemGroup 	: [],
		isCategorySelected	: false,	
		
		pageLoad 			: function(){		
												
		},
		countPO 		: function(id){
    		var self = this;

    		this.poDS.query({
    			filter:[
	    			{ field:"item_id", value: id },
	    			{ field:"type", model:"transaction", operator:"where_related", value:"Purchase_Order" },
	    			{ field:"status", model:"transaction", operator:"where_related", value:0 }
	    		],
	    		page:1,
	    		take:1
	    	}).then(function(){
	    		var view = self.poDS.view();

	    		if(view.length>0){
	    			var sum = 0;

	    			$.each(view, function(index, value){
	    				sum += kendo.parseInt(value.unit);
	    			});

	    			self.set("on_po", kendo.toString(sum, "n0"));
	    		}else{
	    			self.set("on_po", 0);
	    		}
	    	});
    	},
    	countSO 		: function(id){
    		var self = this;

    		this.soDS.query({
    			filter:[
	    			{ field:"item_id", value: id },
	    			{ field:"type", model:"transaction", operator:"where_related", value:"Sale_Order" },
	    			{ field:"status", model:"transaction", operator:"where_related", value:0 }
	    		],
	    		page:1,
	    		take:1
	    	}).then(function(){
	    		var view = self.soDS.view();

	    		if(view.length>0){
	    			var sum = 0;

	    			$.each(view, function(index, value){
	    				sum += kendo.parseInt(value.unit);
	    			});

	    			self.set("on_so", kendo.toString(sum, "n0"));
	    		}else{
	    			self.set("on_so", 0);
	    		}
	    	});
    	},
		loadOnHand 	: function(){
			var self = this, obj = this.get("obj");
			
			this.movementDS.filter([
			  		{ field:"item_id", value: obj.id },
					{ field:"type", model:"transaction", operator:"where_in_related", value: ["Invoice", "Cash_Sale", "Cash_Purchase", "Credit_Purchase"] }
			]);
		},
		loadPO 	: function(){
			var self = this, obj = this.get("obj");
			
			this.movementDS.filter([
		  		{ field:"item_id", value: obj.id },
				{ field:"type", model:"transaction", operator:"where_related", value: "Purchase_Order" }
			]);
		},
		loadSO 	: function(){
			var self = this, obj = this.get("obj");
			
			this.movementDS.filter([
		  		{ field:"item_id", value: obj.id },
				{ field:"type", model:"transaction", operator:"where_related", value: "Sale_Order" }
			]);
		},
		loadMovement 		: function(id){
			this.movementDS.query({
			  	filter: [
			  		{ field:"item_id", value: id },
					{ field:"type", model:"transaction", operator:"where_in_related", value: ["Invoice", "Cash_Sale", "Cash_Purchase", "Credit_Purchase", "Purchase_Order", "Sale_Order"] }
			  	],			  	
			  	page: 1,
			  	take: 20
			});
		},		
		selectedRow			: function(e){
			var id = e.data.id,
			data = e.data;			
			
			this.set("obj", data);
			this.loadMovement(id);
			this.countPO(id);
			this.countSO(id);			
		},
		sorterChanges 		: function(){
			var value = this.get("sorter");

			switch(value){
			case "today":
				var today = new Date();
				
				this.set("sdate", today);
				this.set("edate", today);
			  					
			  	break;
			case "week":
			  	var thisWeek = new Date;
				var first = thisWeek.getDate() - thisWeek.getDay(); 
				var last = first + 6;

				var firstDayOfWeek = new Date(thisWeek.setDate(first));
				var lastDayOfWeek = new Date(thisWeek.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":
				var thisMonth = new Date;				  	
				var firstDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth(), 1);
				var lastDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":
				var thisYear = new Date();
			  	var firstDayOfYear = new Date(thisYear.getFullYear(), 0, 1);
				var lastDayOfYear = new Date(thisYear.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},
		categoryChanges 		: function(){
			var category_id = this.get("category_id");

			if(category_id){
				this.set("isCategorySelected", true);
				this.itemGroupDS.filter({ field:"category_id", value: category_id });
			}else{
				this.set("isCategorySelected", false);
				this.set("selectedItemGroup", []);
			}        	
        },
		enterSearch 		: function(e){
			e.preventDefault();

			this.search();
		},
		search 				: function(){
			var self = this,
			para = [],
			searchText = this.get("searchText"),			
			category_id = this.get("category_id"),
			selectedItemGroup = this.get("selectedItemGroup");

			if(searchText){
				para.push(      				
      				{ field: "sku", operator: "like", value: searchText },
      				{ field: "name", operator: "or_like", value: searchText }
      			);
			}        	

            if(selectedItemGroup.length>0){
				var ids = [];
				$.each(selectedItemGroup, function(index, value){
					ids.push(value);
				});
				
				para.push({ field:"item_group_id", operator:"where_in", value:ids });
			}else if(category_id){
				para.push({ field:"category_id", value:category_id });
			}

			para.push({ field:"item_type_id", value:1 });
			para.push({ field:"is_catalog", value: 0 });
			para.push({ field:"is_assemble", value: 0 });          

            this.itemDS.query({
            	filter: para,
            	page: 1,
            	take: 100
            }).then(function(data){
            	var view = self.itemDS.view();
            	
            	self.set("searchText", "");
            	self.set("category_id", 0);
            	self.set("isCategorySelected", false);
            	self.set("selectedItemGroup", []);
            });      			
		},
		searchMovement	: function(){
			var self = this,
				para = [],
				start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"),
        		end = kendo.toString(this.get("edate"), "yyyy-MM-dd"),	        		
        		obj = this.get("obj");

        	//Dates
        	if(start && end){
            	para.push({ field:"issued_date >=", model:"transaction", operator: "where_related", value: start });
            	para.push({ field:"issued_date <=", model:"transaction", operator: "where_related", value: end });            	            	
            }else if(start){
            	para.push({ field:"issued_date", model:"transaction", operator: "where_related", value: start });
            }else if(end){
            	para.push({ field:"issued_date <=", model:"transaction", operator: "where_related", value: end });
            }else{
            	
            }

            para.push({ field:"item_id", value: obj.id });             

            this.movementDS.query({
            	filter: para,            	
            	page: 1,
            	take: 20
            });            
		},
		edit				: function(){
			var obj = this.get("obj");

			if(obj.is_catalog=="1"){
				banhji.router.navigate('/item_catalog/'+obj.id);
			}else if(obj.is_assemble=="1"){
				banhji.router.navigate('/item_assembly/'+obj.id);
			}else{
				banhji.router.navigate('/item/'+obj.id);
			}
		},
		pricing				: function(){
			var obj = this.get("obj");

			if(obj.is_catalog=="1"){
				banhji.router.navigate('/item_catalog/'+obj.id);
			}else if(obj.is_assemble=="1"){
				banhji.router.navigate('/item_assembly/'+obj.id);
			}else{
				banhji.router.navigate('/item_prices/'+obj.id);
			}			
		}		
	});	
	banhji.priceList =  kendo.observable({
		lang 				: langVM,    	
    	dataSource 			: dataStore(apiUrl + "item_prices"),
    	itemDS 				: dataStore(apiUrl + "items"),
    	recordDS 			: dataStore(apiUrl + "items/movement"),
    	poDS 				: dataStore(apiUrl + "transactions/line"),
    	soDS 				: dataStore(apiUrl + "transactions/line"),
    	currencyDS  		: banhji.source.currencyDS,
    	unitDS	   			: dataStore(apiUrl + "measurements"),

    	obj 				: null,
    	priceList 			: null,
    	on_po 				: 0,
    	on_so 				: 0,
    	
    	pageLoad 		: function(id){    		
    		this.dataSource.filter({ field:"item_id", value: id });    		
    		this.recordDS.filter({ field:"item_id", value: id });    		
    		this.loadObj(id);
    		this.countPO(id);
    		this.countSO(id);
    	},
    	loadObj 	: function(id){
    		var self = this;

    		this.itemDS.query({    			
				filter: { field:"id", value: id }
			}).then(function(e){
				var view = self.itemDS.view();
						    	
		    	self.set("obj", view[0]);
			});
    	},
    	countPO 		: function(id){
    		var self = this;

    		this.poDS.query({
    			filter:[
	    			{ field:"item_id", value: id },
	    			{ field:"type", model:"transaction", operator:"where_related", value:"PO" },
	    			{ field:"status", model:"transaction", operator:"where_related", value:0 }
	    		],
	    		page:1,
	    		take:1
	    	}).then(function(){
	    		var view = self.poDS.view();

	    		if(view.length>0){
	    			var sum = 0;

	    			$.each(view, function(index, value){
	    				sum += kendo.parseInt(value.unit);
	    			});

	    			self.set("on_po", kendo.toString(sum, "n0"));
	    		}else{
	    			self.set("on_po", 0);
	    		}
	    	});
    	},
    	countSO 		: function(id){
    		var self = this;

    		this.soDS.query({
    			filter:[
	    			{ field:"item_id", value: id },
	    			{ field:"type", model:"transaction", operator:"where_related", value:"SO" },
	    			{ field:"status", model:"transaction", operator:"where_related", value:0 }
	    		],
	    		page:1,
	    		take:1
	    	}).then(function(){
	    		var view = self.soDS.view();

	    		if(view.length>0){
	    			var sum = 0;

	    			$.each(view, function(index, value){
	    				sum += kendo.parseInt(value.unit);
	    			});

	    			self.set("on_so", kendo.toString(sum, "n0"));
	    		}else{
	    			self.set("on_so", 0);
	    		}
	    	});
    	},
    	openWindow		: function(){
      		this.addEmpty();

         	var window = $("#priceList-window").data("kendoWindow");
          	window.title("តំលៃ");          	
          	window.center().open();         	
      	},
      	closeWindow 	: function(){	      		
      		this.dataSource.cancelChanges();

      		var window = $("#priceList-window").data("kendoWindow");          	         	
          	window.close();          	
      	},      	
      	addEmpty 		: function () {
      		this.dataSource.add({      			      			
      			item_id			: this.get("obj").id,
      			measurement_id 	: 0,
      			price 			: 0,
      			unit_value		: 0,
      			locale 			: "km-KH",

      			currency 		: [{locale:"km-KH"}],      			
      			measurement 	: []
			});

			var data = this.dataSource.data();
			var obj = data[data.length - 1];
      						
			this.set("priceList", obj);	
      	},      	 	
      	save 			: function(){
      		this.dataSource.sync();
      		banhji.itemCenter.itemDS.fetch();

      		var window = $("#priceList-window").data("kendoWindow");          	         	
          	window.close(); 		
      	},
      	edit 			: function(e){
      		var data = e.data;
      		
      		this.set("priceList", data);

      		var window = $("#priceList-window").data("kendoWindow");
          	window.title("តំលៃ");          	
          	window.center().open();       		
      	},      	
      	delete 			: function(e){
			if (confirm("Are you sure, you want to delete it?")) {        
		        var data = e.data;
		        this.dataSource.remove(data);
		        this.dataSource.sync();
		        banhji.itemCenter.dataSource.fetch();
	    	}	    	
	    }
    });	
    banhji.item =  kendo.observable({
    	lang 				: langVM,    	
    	dataSource 			: dataStore(apiUrl + "items"),
    	categoryDS 			: dataStore(apiUrl + "categories"),
    	itemGroupDS 		: dataStore(apiUrl + "items/group"),
    	brandDS 	 		: dataStore(apiUrl + "brands"),    	   	   	
    	measurementDS		: dataStore(apiUrl + "measurements"),
    	vendorDS 	 		: dataStore(apiUrl + "contacts"),
    	customerDS 	 		: dataStore(apiUrl + "contacts"),
    	itemVendorDS 	 	: dataStore(apiUrl + "items/contact"),
    	itemCustomerDS 	 	: dataStore(apiUrl + "items/contact"),
    	currencyDS 	 		: dataStore(apiUrl + "currencies"),   	
    	
    	statusList 			: banhji.source.statusList,

        vendorList 			: [],
        customerList 		: [],

    	obj 	 			: null,
    	isEdit 				: false,
    	
    	pageLoad 			: function(id){			
			if(id){
				this.set("isEdit", true);							
				this.loadObj(id);
				this.loadItemContact(id);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}  																							
		},
    	loadObj 			: function(id){
    		var self = this;

    		this.dataSource.query({    			
				filter: { field:"id", value: id }
			}).then(function(e){
				var view = self.dataSource.view();
						    	
		    	self.set("obj", view[0]);
			});
    	},
    	loadVendor 			: function(){
    		var self = this;

    		this.vendorDS.query({    			
				filter: { field:"parent_id", operator:"where_related", model:"contact_type", value:2 }
			}).then(function(e){
				var view = self.vendorDS.view();
				
				$.each(view, function(index, value){
					self.vendorList.push(value);
				});		    	
			});
    	},
    	loadCustomer 		: function(){
    		var self = this;

    		this.customerDS.query({    			
				filter: { field:"parent_id", operator:"where_related", model:"contact_type", value:1 }
			}).then(function(e){
				var view = self.customerDS.view();
				
				$.each(view, function(index, value){
					self.customerList.push(value);
				});		    	
			});
    	},
    	loadItemContact		: function(id){
			this.itemVendorDS.query({
				filter: [ 
					{ "field":"item_id", value: id },
					{ "field":"type", value: "vendor" }
				],
				page: 1,
				pageSize: 100
			});

			this.itemCustomerDS.query({
				filter: [ 
					{ "field":"item_id", value: id },
					{ "field":"type", value: "customer" }
				],
				page: 1,
				pageSize: 100
			});
		},    	   	
      	addEmpty 			: function(){      		
      		this.dataSource.data([]);
      		this.set("obj", null);

      		this.dataSource.add({
      			company_id 				: 0,
      			contact_id 				: "",
      			currency_id 			: 0,
      			category_id 			: 0,
      			item_type_id 			: 1,      			      			
      			category_id 			: 0,
      			item_group_id 			: 0,
      			item_sub_group_id 		: 0,
      			brand_id 				: 0,
      			measurement_id			: 0,
      			main_id 				: 0,
      			sku 					: "",
      			international_code 		: "",
      			IMEI 					: "",
      			serial_number 			: "",
      			supplier_code 			: "",
      			color_code 				: "",
      			name 					: "",
      			description				: "",
      			measurements 			: "",
      			catalogs 				: [],
      			cost 					: 0,
      			price 					: 0,
      			amount 					: 0,
      			rate 					: 1,
      			on_hand					: 0,      			      			     			
      			order_point 			: 0,
      			income_account_id 		: 0,
      			cogs_account_id  		: 0,
      			inventory_account_id 	: 0,
      			deposit_account_id 		: 0,
      			transaction_account_id 	: 0,
      			preferred_vendor_id 	: 0,
      			image_url 				: "",      			
      			favorite 				: false,
      			is_catalog 				: 0,
      			is_assemble 			: 0,
      			status 					: 1,
      			deleted 				: 0
			});      		

			var data = this.dataSource.data();
			var obj = data[data.length - 1];
      						
			this.set("obj", obj);			
      	},
      	objSync 			: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
      	cancel 				: function(e){
      		e.preventDefault();

      		this.dataSource.cancelChanges();
      		window.history.back();      		
      	},      	
      	save 				: function(){
      		var self = this;

      		if(this.get("isEdit")){
      			this.dataSource.sync();
      			this.itemVendorDS.sync();
      			this.itemCustomerDS.sync();
      		}else{
	      		this.objSync().then(function(data){
	      			$.each(self.itemVendorDS.data(), function(index, value){
	      				value.set("item_id", data[0].id);
	      			});

	      			$.each(self.itemCustomerDS.data(), function(index, value){
	      				value.set("item_id", data[0].id);
	      			});

	      			self.itemVendorDS.sync();
	      			self.itemCustomerDS.sync();
	      		}).then(function(){	      			
	      			self.itemVendorDS.data([]);
	      			self.itemCustomerDS.data([]);

	      			self.addEmpty();
	      		});
      		}      		      		
      	},      	
      	delete 				: function(){
			if (confirm("Are you sure, you want to delete it?")) {        
		        var obj = this.dataSource.at(0);
		        this.dataSource.remove(obj);
		        this.dataSource.sync();
		        window.history.back();
	    	}	    	
	    },
	    addEmptyItemVendor 	: function(){
			var item_id = 0;
			if(this.get("isEdit")){
				item_id = this.get("obj").id;
			}

			this.itemVendorDS.add({
				item_id 	: item_id,					 			
				contact_id 	: "",
				code 		: "",      				
				type 		: "vendor"
			});								
		},
		deleteItemVendor 	: function(e){
			if (confirm("Are you sure, you want to delete it?")) {
				var d = e.data,
				obj = this.itemVendorDS.getByUid(d.uid);

				this.itemVendorDS.remove(obj);
			}
		},
		addEmptyItemCustomer 	: function(){
			var item_id = 0;
			if(this.get("isEdit")){
				item_id = this.get("obj").id;
			}

			this.itemCustomerDS.add({
				item_id 	: item_id,					 			
				contact_id 	: "",
				code 		: "",      				
				type 		: "customer"
			});								
		},
		deleteItemCustomer 	: function(e){
			if (confirm("Are you sure, you want to delete it?")) {
				var d = e.data,
				obj = this.itemCustomerDS.getByUid(d.uid);

				this.itemCustomerDS.remove(obj);
			}
		}
    });
    banhji.itemCatalog =  kendo.observable({
    	lang 				: langVM,    	
    	dataSource 			: dataStore(apiUrl + "items"),
    	itemDS 				: banhji.source.itemDS,
    	    	    	   	
    	statusList 			: banhji.source.statusList,

    	obj 	 			: null,    	
    	isEdit 				: false,
    	
    	pageLoad 			: function(id){			
			if(id){
				this.set("isEdit", true);							
				this.loadObj(id);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}  																							
		},
    	loadObj 			: function(id){
    		var self = this;

    		this.dataSource.query({    			
				filter: { field:"id", value: id }
			}).then(function(e){
				var view = self.dataSource.view();
						    	
		    	self.set("obj", view[0]);		    	
			});
    	},    	   	
      	addEmpty 			: function(){      		
      		this.dataSource.data([]);      		
      		this.set("obj", null);

      		this.dataSource.add({
      			company_id 				: 0,
      			contact_id 				: 0,      			
      			category_id 			: 8,
      			brand_id 				: 0,
      			item_type_id 			: 1,      			      			
      			measurement_id			: 0,      			
      			main_id 				: 0,
      			sku 					: "",
      			supplier_code 			: "",
      			color_code 				: "",
      			name 					: "",
      			description				: "",
      			catalogs 				: "",
      			cost 					: 0,
      			price 					: 0,
      			on_hand					: 0,      			     			
      			order_point 			: 0,
      			income_account_id 		: 0,
      			cogs_account_id  		: 0,
      			inventory_account_id 	: 0,
      			deposit_account_id 		: 0,
      			transaction_account_id 	: 0,
      			preferred_vendor_id 	: 0,
      			image_url 				: "",      			
      			favorite 				: false,
      			is_catalog 				: 1,
      			status 					: 1,
      			deleted 				: 0
			});      		

			var data = this.dataSource.data();
			var obj = data[data.length - 1];
      						
			this.set("obj", obj);			
      	},      	
      	cancel 				: function(e){
      		e.preventDefault();

      		this.dataSource.cancelChanges();
      		window.history.back();      		
      	},      	
      	save 				: function(){
      		var self = this, obj = this.get("obj");
      		
      		if(this.get("isEdit")){
      			this.dataSource.sync();      			
      		}else{
	      		this.dataSource.sync();
	      		var saved = false;
	      		this.dataSource.bind("requestEnd", function(e){
	      			if(e.type=="create" && saved==false){		      						      			
		      			self.addEmpty();
	      			}
	      		});
      		}      		      		   		      		
      	},      	
      	delete 				: function(){
			if (confirm("Are you sure, you want to delete it?")) {        
		        var obj = this.dataSource.at(0);
		        this.dataSource.remove(obj);
		        this.dataSource.sync();
		        window.history.back();
	    	}	    	
	    }
    });
	banhji.itemAssembly =  kendo.observable({
		lang 				: langVM,    	
    	dataSource 			: dataStore(apiUrl + "items"),
    	itemDS 				: banhji.source.itemDS,
    	assemblyDS 			: dataStore(apiUrl + "items/assembly"),
    	    	   	
    	statusList 			: banhji.source.statusList,

    	obj 	 			: null,
    	assembly_id			: "",
    	isEdit 				: false,
    	total 				: 0,
    	
    	pageLoad 			: function(id){			
			if(id){
				this.set("isEdit", true);							
				this.loadObj(id);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}  																							
		},
    	loadObj 			: function(id){
    		var self = this;

    		this.dataSource.query({    			
				filter: { field:"id", value: id }
			}).then(function(e){
				var view = self.dataSource.view();
						    	
		    	self.set("obj", view[0]);
		    	self.assemblyDS.filter({ field:"item_id", value:id });
		    	self.set("total", kendo.toString(view[0].price, "c", banhji.institute.locale));
			});
    	},
    	changes				: function(){
			var obj = this.get("obj");

			if(this.assemblyDS.total()>0){			
				var total = 0, subTotal = 0;										

				$.each(this.assemblyDS.data(), function(index, value) {				
					subTotal = value.quantity * value.price;
					total += subTotal;

					value.set("amount", subTotal);					
		        });
		          
				obj.set("price", total);
				this.set("total", kendo.toString(total, "c", banhji.institute.locale));													    	
	    	}else{	    				
				obj.set("price", 0);
				this.set("total", 0);					
	    	}   	
		},		
		measurementChanges 	: function(e){								
			var self = this, data = e.data;
			
			if(data.measurement_id>0){
				$.each(data.priceList, function(index, value){
					if(value.measurement_id==data.measurement_id){						
				        data.set("price", kendo.parseFloat(value.price));				       			       
				        
						return false;
					}
				});	    		
		        	        
		        this.changes();
	        }	                	        	
		},    	   	
      	addEmpty 			: function(){      		
      		this.dataSource.data([]);
      		this.assemblyDS.data([]);
      		this.set("obj", null);

      		this.dataSource.add({
      			company_id 				: 0,
      			contact_id 				: 0,      			
      			category_id 			: 9,
      			brand_id 				: 0,
      			item_type_id 			: 1,      			      			
      			measurement_id			: 0,      			
      			main_id 				: 0,
      			sku 					: "",
      			supplier_code 			: "",
      			color_code 				: "",
      			name 					: "",
      			description				: "",
      			cost 					: "",
      			on_hand					: 0,      			     			
      			order_point 			: 0,
      			income_account_id 		: 0,
      			cogs_account_id  		: 0,
      			inventory_account_id 	: 0,
      			deposit_account_id 		: 0,
      			transaction_account_id 	: 0,
      			preferred_vendor_id 	: 0,
      			image_url 				: "",      			
      			favorite 				: false,
      			status 					: 1,
      			is_assemble 			: 1,
      			deleted 				: 0
			});      		

			var data = this.dataSource.data();
			var obj = data[data.length - 1];
      						
			this.set("obj", obj);			
      	},
      	addItem 			: function(){      		
      		var assembly_id = this.get("assembly_id"),
      		isExisting = false,
      		item = this.itemDS.get(assembly_id),
      		item_id = 0, obj = this.get("obj");
			
			if(this.get("isEdit")){
				item_id = obj.id;
			}
      		
      		if(item){
	      		if(this.assemblyDS.total()>0){
	      			$.each(this.assemblyDS.data(), function(index, value){
	      				if(value.assembly_id==assembly_id){
	      					isExisting = true;

	      					return false;
	      				}
	      			});
	      		}
	      		
	      		if(isExisting===false){	      			
		      		this.assemblyDS.add({
		      			item_id 		: item_id,
		      			assembly_id 	: assembly_id,
		      			currency_id 	: item.item_prices[0].currency_id,
		      			measurement_id 	: item.item_prices[0].measurement_id,
		      			quantity 		: 1,
		      			unit_value 		: 0,
		      			price 			: item.item_prices[0].price,
		      			amount 			: item.item_prices[0].price,
		      			
		      			assembly 		: [{ sku:item.sku, name:item.name, description:item.description }],
		      			currency 		: [item.item_prices[0].currency[0]],
		      			item_prices 		: item.item_prices		      			
					});

					this.changes();	      		
				}
			}			
      	},
      	removeItem 			: function(e){
      		e.preventDefault();

      		if (confirm("Are you sure, you want to delete it?")) {        
		        var data = e.data, 
		        obj = this.assemblyDS.get(data.id);

		        this.assemblyDS.remove(obj);		        	        
	    	}
      	},
      	cancel 				: function(e){
      		e.preventDefault();

      		this.dataSource.cancelChanges();
      		window.history.back();      		
      	},      	
      	save 				: function(){
      		var self = this;

      		if(this.get("isEdit")){
      			this.dataSource.sync();
      			this.assemblyDS.sync();
      		}else{
	      		this.itemSync().then(function(item){
	      			$.each(self.assemblyDS.data(), function(index, value){
	      				value.set("item_id", item[0].id);
	      			});

	      			self.assemblyDS.sync();
	      		}).then(function(){
	      			self.dataSource.data([]);
	      			self.assemblyDS.data([]);

	      			self.addEmpty();
	      		});
      		}      		   		      		
      	},      	
      	delete 				: function(){
			if (confirm("Are you sure, you want to delete it?")) {        
		        var obj = this.dataSource.at(0);
		        this.dataSource.remove(obj);
		        this.dataSource.sync();
		        window.history.back();
	    	}	    	
	    },
	    itemSync 			: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    }
    });
	banhji.itemRecord =  kendo.observable({
		lang 				: langVM,    	
    	dataSource 			: dataStore(apiUrl + "items/record"),
    	itemDS 				: dataStore(apiUrl + "items"),
    	invoiceDS 			: dataStore(apiUrl + "invoices"),    	
    	currencyDS 			: dataStore(apiUrl + "currencies"),
    	contactDS  			: dataStore(apiUrl + "contacts"),
    	measurementDS 	   	: dataStore(apiUrl + "measurements"),
    	
    	obj 				: null,
    	item 				: null,    	
    	isEdit 				: false,

    	pageLoad 			: function(id){			
			if(id){
				this.set("isEdit", true);							
				this.loadObj(id);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}  																							
		},
		loadObj 			: function(id){
    		var self = this;

    		this.dataSource.query({    			
				filter: { field:"id", value: id }
			}).then(function(e){
				var view = self.dataSource.view();
						    	
		    	self.set("obj", view[0]);
			});
    	},
    	loadItem     		: function(id){
    		var self = this;

    		this.itemDS.query({
    			filter: { field:"id", value: id }
    		}).then(function(){
    			var view = self.itemDS.view();

    			self.set("item", view[0]);
    		});
    	},
    	itemChanges 		: function(){
    		var obj = this.get("obj");

    		if(obj.item_id>0){
    			var item = this.itemDS.get(obj.item_id);

    			this.set("item", item);
    		}
    	},	
      	addEmpty 			: function(){
      		this.dataSource.data([]);
      		this.set("obj", null);

      		this.dataSource.add({
      			contact_id 		: "",
      			reference_id 	: "",      			
      			currency_id 	: 1,      				      			
      			measurement_id 	: 0,
      			item_id 		: "",
      			unit 			: 0,
      			price 			: 0,
      			amount			: 0,
      			rate 			: 1,
      			movement 		: "IN",
      			issued_date		: new Date(),
      			memo 			: ""
			});

			var data = this.dataSource.data();
			var obj = data[data.length - 1];
      						
			this.set("obj", obj);      					
      	},      	
      	cancel 		 	: function(e){
      		e.preventDefault();

      		this.dataSource.cancelChanges();
      		window.history.back();      		
      	}, 
      	save 			: function(){
      		var self = this, obj = this.get("obj");

      		if(obj.unit<0){
      			obj.set("movement", "OUT");
      		}

      		this.dataSource.sync();
      		var saved = false;
      		this.dataSource.bind("requestEnd", function(e){
      			if(e.type=="create" && saved==false){
      				saved = true;

      				self.addEmpty();
      			}
      		});
      	},      	
      	delete 			: function(e){
			if (confirm("Are you sure, you want to delete it?")) {        
		        var data = e.data;
		        this.dataSource.remove(data);
		        this.dataSource.sync();
	    	}	    	
	    }
    });
    banhji.itemAdjustment = kendo.observable({
    	lang 				: langVM,
    	dataSource  		: dataStore(apiUrl + "transactions"),	
    	lineDS  			: dataStore(apiUrl + "transactions/line"),	
		itemDS  			: dataStore(apiUrl + "items"),
		contactDS 			: dataStore(apiUrl + "contacts"),
		accountDS 			: dataStore(apiUrl + "accounts"),		
		segmentItemDS		: banhji.source.segmentItemDS,
		categoryDS 			: dataStore(apiUrl + "categories"),
		itemGroupDS			: dataStore(apiUrl + "items/group"),
		
		obj 				: null,		
		biller_id			: banhji.source.user_id,	
		
		category_id 		: null,
		selectedItemGroup 	: [],
		isCategorySelected	: false,

		pageLoad 			: function(id){			
			if(id){
				this.set("isEdit", true);							
				this.loadObj(id);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					
					this.dataSource.data([]);					
					
					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}  																							
		},
		loadObj 			: function(id){
    		var self = this;

    		this.dataSource.query({    			
				filter: { field:"id", value: id }
			}).then(function(e){
				var view = self.dataSource.view();
						    	
		    	self.set("obj", view[0]);
			});
    	},
    	categoryChanges 		: function(){
			var category_id = this.get("category_id");

			if(category_id){
				this.set("isCategorySelected", true);
				this.itemGroupDS.filter({ field:"category_id", value: category_id });
			}else{
				this.set("isCategorySelected", false);
				this.set("selectedItemGroup", []);
			}        	
        }, 		
		onChange 			: function(e) {
			e.preventDefault();

      		var selected = e.data,
      		index = this.lineDS.indexOf(e.data),
  			dataItem = this.lineDS.at(index+1);            
            
            if(kendo.parseInt(selected.new_qty)>0){
            	var diff = selected.new_qty - selected.on_hand;         
		        selected.set("unit", diff);
		        if(diff>0){
		        	selected.set("movement", 1);
		        }else{
		        	selected.set("movement", -1);
		        }
			}			
      					
			if(dataItem){
				$(".txt"+dataItem.uid).focus();
			}else{
				dataItem = this.lineDS.at(0);
				$(".txt"+dataItem.uid).focus();
			}            
        },        
        segmentChanges 		 : function(e) {
			var obj = this.get("obj"),
			dataArr = obj.segments,
			lastIndex = dataArr.length - 1,
			last = banhji.segmentItem.ds.get(dataArr[lastIndex]);
			
			if(dataArr.length > 1) {
				for(var i = 0; i < dataArr.length - 1; i++) {
					var current_index = dataArr[i],
					current = banhji.segmentItem.ds.get(current_index);

					if(current.segment_id === last.segment_id) {
						dataArr.splice(lastIndex, 1);
						break;
					}
				}
			}				
		},
		search 				: function(){
			var self = this,
			para = [],			
			category_id = this.get("category_id"),
			selectedItemGroup = this.get("selectedItemGroup");        	

            if(selectedItemGroup.length>0){
				var ids = [];
				$.each(selectedItemGroup, function(index, value){
					ids.push(value);
				});
				
				para.push({ field:"item_group_id", operator:"where_in", value:ids });
			}else if(category_id){
				para.push({ field:"category_id", value:category_id });
			}

			para.push({ field:"item_type_id", value:1 });
			para.push({ field:"is_catalog", value: 0 });
			para.push({ field:"is_assemble", value: 0 });          

            this.itemDS.query({
            	filter: para,
            	page: 1,
            	take: 100
            }).then(function(data){
            	var view = self.itemDS.view();
            	self.lineDS.data([]);

            	$.each(view, function(index, value){
            		self.lineDS.add({
            			transaction_id 			: 0,
						item_id 			: value.id,
						measurement_id 		: value.measurement_id,						
						description 		: value.sku +" "+ value.name,
						on_hand 			: value.on_hand,
						new_qty 			: "",				
						unit 	 			: "",
						price 				: value.price,												
						amount 				: 0,
						rate				: 1,
						locale				: banhji.institute.locale,
						movement 			: ""						
            		});
            	});
            });
		},
		removeRow 			: function(e){						
			var d = e.data;				
			this.lineDS.remove(d);	        		        
		},
        addEmpty 		 	: function(){							
			this.set("obj", null);				
			
			this.dataSource.add({
				company_id 			: 0,
				location_id 		: 0,
				contact_id 			: "",
				payment_term_id		: 0,
				payment_method_id 	: 0,
				reference_id 		: 0,
				account_id 	 		: 0,
				vat_id 				: 0,
				biller_id 			: this.get("biller_id"),
 	    		number 				: "",
			   	type				: "Adjustment",
			   	sub_total 			: 0,				   		   					   				   	
			   	amount				: 0,
			   	vat 				: 0,
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),
			   	due_date 			: "",
			   	check_no 			: "",
			   	bill_to 			: "",
			   	ship_to 			: "",
			   	memo 				: "",
			   	memo2 				: "",
			   	status 				: 0,

			   	segments 			: []				
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);			
		},
	    invoiceSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },      	
      	save 				: function(){				
	    	var self = this;			
	    	
	    	if(this.get("isEdit")){
	    		this.dataSource.sync();
	    		this.lineDS.sync();
	    	}else{
	    		//Add brand new invoice
				this.invoiceSync()
				.then(function(data){
					$.each(self.lineDS.data(), function(index, value){										
						value.set("transaction_id", data[0].id);						
					});
					self.lineDS.sync();											
				}).then(function(){
					self.dataSource.data([]);
					self.lineDS.data([]);										
					
					self.addEmpty();
				});
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();
			window.history.back();
		},	          	
      	delete 			: function(e){
			if (confirm("Are you sure, you want to delete it?")) {        
		        var data = e.data;
		        this.dataSource.remove(data);
		        this.dataSource.sync();
	    	}	    	
	    }
	});
	banhji.itemSetting =  kendo.observable({
		lang 				: langVM,		        
        categoryDS 			: dataStore(apiUrl + "categories"),
        subCategoryDS 		: dataStore(apiUrl + "categories"),
        itemGroupDS 		: dataStore(apiUrl + "items/group"),
        subItemGroupDS		: dataStore(apiUrl + "items/group"),
        measurementDS		: dataStore(apiUrl + "measurements"),
        brandDS 			: dataStore(apiUrl + "brands"),
        subBrandDS			: dataStore(apiUrl + "brands"),        

        category_sub_of 	: 0,
        category_code 		: "",
        category_name 		: "",
        category_abbr 		: "",

        item_group_category_id 	: 0,
        item_group_sub_of 	: 0,
        item_group_code 	: "",
        item_group_name 	: "",
        item_group_abbr 	: "",

        measurement_name 	: "",

        brand_sub_of 	 	: 0,
        brand_code 			: "",
        brand_name 			: "",
        brand_abbr 			: "",

        pageLoad 			: function() {
        	
        },        
        addCategory 		: function(){
        	var self = this, 
        	name = this.get("category_name"),
        	code = this.get("category_code");

        	if(name!=="" && code!==""){        		
	        	this.categoryDS.add({	        		
	        		sub_of 		 	: this.get("category_sub_of"),
	        		code 			: code,	        		
	        		name 			: name,
	        		abbr 			: this.get("category_abbr"),	        		
	        		is_system 		: 0
	        	});

	        	this.categoryDS.sync();
	        	this.categoryDS.bind("requestEnd", function(e){
	        		if(e.type=="create"){
	        			self.set("category_sub_of", 0);
	        			self.set("category_code", "");
	        			self.set("category_name", "");
	        			self.set("category_abbr", "");
	        		}
	        	});
        	}else{
        		alert("required number and name!");
        	}
        },
        addItemGroup 		: function(){
        	var self = this, 
        	category_id = this.get("item_group_category_id"),
        	name = this.get("item_group_name"),
        	code = this.get("item_group_code");

        	if(category_id>0 && name!=="" && code!==""){        		
	        	this.itemGroupDS.add({	        		
	        		category_id	 	: category_id,
	        		sub_of 		 	: this.get("item_group_sub_of"),
	        		code 			: code,	        		
	        		name 			: name,
	        		abbr 			: this.get("item_group_abbr"),	        		
	        		is_system 		: 0
	        	});

	        	this.itemGroupDS.sync();
	        	this.itemGroupDS.bind("requestEnd", function(e){
	        		if(e.type=="create"){
	        			self.set("item_group_category_id", 0);
	        			self.set("item_group_sub_of", 0);
	        			self.set("item_group_code", "");
	        			self.set("item_group_name", "");
	        			self.set("item_group_abbr", "");
	        		}
	        	});
        	}else{
        		alert("required category, number, and name!");
        	}
        },
        addMeasurement 		: function(){
        	var self = this, 
        	name = this.get("measurement_name");

        	if(name!==""){
	        	this.measurementDS.add({	        		
	        		name 		: name,
	        		description : name
	        	});

	        	this.measurementDS.sync();
	        	this.measurementDS.bind("requestEnd", function(e){
	        		if(e.type=="create"){	        			
	        			self.set("measurement_name", "");	        			
	        		}
	        	});
        	}else{
        		alert("required name");
        	}
        },
        addBrand 		: function(){
        	var self = this, 
        	code = this.get("brand_code"),
        	name = this.get("brand_name");

        	if(name!=="" && code!==""){
	        	this.brandDS.add({
	        		sub_of 		: this.get("brand_sub_of"),
	        		code 		: code,        		
	        		name 		: name,
	        		abbr 		: this.get("brand_abbr")
	        	});

	        	this.brandDS.sync();
	        	this.brandDS.bind("requestEnd", function(e){
	        		if(e.type=="create"){	        			
	        			self.set("brand_sub_of", 0);
	        			self.set("brand_code", "");
	        			self.set("brand_name", "");
	        			self.set("brand_abbr", "");	        			
	        		}
	        	});
        	}else{
        		alert("required number and name!");
        	}
        }
    });
	banhji.inventoryPositionSummary =  kendo.observable({
		lang 				: langVM,    	
    	dataSource 			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "items/inventory_position_summary",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			sort: { field: "on_hand", dir: "desc" },
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true			
		}),

    	as_of 				: new Date(),  	
    	
    	pageLoad 			: function(id){			
																						
		},			
		strDate 			: function(){
			var strDate = "As of " + kendo.toString(this.get("as_of"), "dd-MM-yyyy");			

			return strDate;
		},
		search 				: function(){
			var para = [], 
			as_of = kendo.toString(this.get("as_of"), "yyyy-MM-dd");

        	//Dates
        	if(as_of){        		
            	para.push({ field:"issued_date <=", value: as_of });            	          	            	
            }                   

            this.dataSource.filter(para);
		}    	
    });
    banhji.inventoryPositionDetail =  kendo.observable({
    	lang 				: langVM,    	
    	dataSource 			: dataStore(apiUrl + "items/inventory_position_detail"),

    	sortList			: banhji.source.sortList,
		sorter 				: "all",
		sdate 				: "",
		edate 				: "",   	
    	
    	pageLoad 			: function(id){			
																						
		},
		sorterChanges 		: function(){
			var value = this.get("sorter"),
			today = new Date();

			switch(value){
			case "today":								
				this.set("sdate", today);
				this.set("edate", "");
							  					
			  	break;
			case "week":			  	
				var first = today.getDate() - today.getDay(),
				last = first + 6;

				var firstDayOfWeek = new Date(today.setDate(first)),
				lastDayOfWeek = new Date(today.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":							  	
				var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1),
				lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":				
			  	var firstDayOfYear = new Date(today.getFullYear(), 0, 1),
			  	lastDayOfYear = new Date(today.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},		
		strDate 			: function(){
			var strDate = "",
			sdate = this.get("sdate"),
			edate = this.get("edate");

			if(sdate && edate){
				strDate = "From " + kendo.toString(new Date(sdate), "dd-MM-yyyy") + " To " + kendo.toString(new Date(edate), "dd-MM-yyyy");
			}else if(sdate){
				strDate = "On " + kendo.toString(new Date(sdate),"dd-MM-yyyy");
			}else if(edate){
				strDate = "As Of " + kendo.toString(new Date(edate),"dd-MM-yyyy");
			}else{
				strDate = "";
			}

			return strDate;
		},
		search 				: function(){
			var self = this,
			para = [], 
			start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"), 
			end = kendo.toString(this.get("edate"), "yyyy-MM-dd");

        	//Dates
        	if(start && end){        		
            	para.push({ field:"issued_date >=", value: start });
            	para.push({ field:"issued_date <=", value: end });            	          	            	
            }else if(start){
            	para.push({ field:"issued_date", value: start });
            }else if(end){
            	para.push({ field:"issued_date <=", value: end });
            }else{
            	
            }          

            this.dataSource.filter(para);
		}    	
    });
    banhji.inventorySaleByItem =  kendo.observable({
    	lang 				: langVM,    	
    	dataSource 			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "items/inventory_sale_by_item",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			sort: { field: "qty", dir: "desc" },
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true			
		}),

    	sortList			: banhji.source.sortList,
		sorter 				: "all",
		sdate 				: "",
		edate 				: "",   	
    	
    	pageLoad 			: function(){			
																						
		},
		sorterChanges 		: function(){
			var value = this.get("sorter"),
			today = new Date();

			switch(value){
			case "today":								
				this.set("sdate", today);
				this.set("edate", "");
							  					
			  	break;
			case "week":			  	
				var first = today.getDate() - today.getDay(),
				last = first + 6;

				var firstDayOfWeek = new Date(today.setDate(first)),
				lastDayOfWeek = new Date(today.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":							  	
				var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1),
				lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":				
			  	var firstDayOfYear = new Date(today.getFullYear(), 0, 1),
			  	lastDayOfYear = new Date(today.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},		
		strDate 			: function(){
			var strDate = "",
			sdate = this.get("sdate"),
			edate = this.get("edate");

			if(sdate && edate){
				strDate = "From " + kendo.toString(new Date(sdate), "dd-MM-yyyy") + " To " + kendo.toString(new Date(edate), "dd-MM-yyyy");
			}else if(sdate){
				strDate = "On " + kendo.toString(new Date(sdate),"dd-MM-yyyy");
			}else if(edate){
				strDate = "As Of " + kendo.toString(new Date(edate),"dd-MM-yyyy");
			}else{
				strDate = "";
			}

			return strDate;
		},
		search 				: function(){
			var self = this,
			para = [], 
			start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"), 
			end = kendo.toString(this.get("edate"), "yyyy-MM-dd");

        	//Dates
        	if(start && end){        		
            	para.push({ field:"issued_date >=", value: start });
            	para.push({ field:"issued_date <=", value: end });            	          	            	
            }else if(start){
            	para.push({ field:"issued_date", value: start });
            }else if(end){
            	para.push({ field:"issued_date <=", value: end });
            }else{
            	
            }          

            this.dataSource.filter(para);
            var loaded = false;
            this.dataSource.bind("requestEnd", function(e){
            	if(e.type=="read" && loaded==false){
            		loaded = true;

            		self.dataSource.sort({ field: "qty", dir: "desc" });
            	}
            });
		}    	
    });
    banhji.inventoryTurnoverList =  kendo.observable({
    	lang 				: langVM,    	
    	dataSource 			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "items/inventory_turnover_list",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			sort: { field: "days", dir: "desc" },
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true			
		}),
    	
		as_of 				: new Date(),   	
    	
    	pageLoad 			: function(){			
																						
		},			
		strDate 			: function(){
			var strDate = "As of " + kendo.toString(this.get("as_of"), "dd-MM-yyyy");			

			return strDate;
		},
		search 				: function(){
			var para = [], 
			as_of = kendo.toString(this.get("as_of"), "yyyy-MM-dd");

        	//Dates
        	if(as_of){        		
            	para.push({ field:"issued_date <=", value: as_of });            	          	            	
            }                   

            this.dataSource.filter(para);
		}    	
    });
    banhji.inventoryList =  kendo.observable({
		lang 				: langVM,    	
    	dataSource 			: dataStore(apiUrl + "items"),
    	categoryDS 			: dataStore(apiUrl + "categories"),
    	itemGroupDS 		: dataStore(apiUrl + "items/group"),    	
    	contactDS  			: dataStore(apiUrl + "contacts"),
    	vendorDS  			: dataStore(apiUrl + "contacts"),
    	    	
    	searchField			: "",
    	category_id 		: 0,
    	item_group_id 		: 0,     	
    	
    	pageLoad 			: function(){    		
    		
    	},
    	search 				: function(){
    		var para = [],
    		searchField = this.get("searchField"),
    		category_id = this.get("category_id"),
    		item_group_id = this.get("item_group_id");

    		if(searchField!==""){
    			para.push(      				
      				{ field: "sku", operator: "like", value: searchField },
      				{ field: "name", operator: "or_like", value: searchField }
      			);
    		}

    		if(item_group_id>0){
    			para.push({ field:"item_group_id", value:item_group_id });
    		}else if(category_id>0){
    			para.push({ field:"category_id", value:category_id });
    		}

    		this.dataSource.filter(para);    		
    	},
    	searchFavorite 	: function(){
    		this.dataSource.filter({ field:"favorite", value: 1 });
    	},    	
    	vendorChanges 	: function(e){    		
    		var index = e.sender.select().index();
    		var data = this.vendorDS.at(index);    		
    		
    		this.dataSource.filter({ field:"contact_id", operator:"by_vendor", value:data.id });
    	}    		
    });
    banhji.inventoryMovementSummary =  kendo.observable({
    	lang 				: langVM,    	    	    	
    	dataSource 			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "items/inventory_movement_summary",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			sort: { field: "begining", dir: "desc" },
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true			
		}),

    	sortList			: [ 
	 		{ text:"All", value: "all" }, 
	 		{ text:"Today",	value: "today" }, 
	 		{ text:"This Week", value: "week" }, 
	 		{ text:"This Month", value: "month" }, 
	 		{ text:"This Year", value: "year" } 
		],
		sorter 				: "all",
		sdate 				: "",
		edate 				: "",   	
    	
    	pageLoad 			: function(id){			
																						
		},
		sorterChanges 		: function(){
			var value = this.get("sorter"),
			today = new Date();

			switch(value){
			case "today":								
				this.set("sdate", today);
				this.set("edate", "");
							  					
			  	break;
			case "week":			  	
				var first = today.getDate() - today.getDay(),
				last = first + 6;

				var firstDayOfWeek = new Date(today.setDate(first)),
				lastDayOfWeek = new Date(today.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":							  	
				var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1),
				lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":				
			  	var firstDayOfYear = new Date(today.getFullYear(), 0, 1),
			  	lastDayOfYear = new Date(today.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},		
		strDate 			: function(){
			var strDate = "",
			sdate = this.get("sdate"),
			edate = this.get("edate");

			if(sdate && edate){
				strDate = "From " + kendo.toString(new Date(sdate), "dd-MM-yyyy") + " To " + kendo.toString(new Date(edate), "dd-MM-yyyy");
			}else if(sdate){
				strDate = "On " + kendo.toString(new Date(sdate),"dd-MM-yyyy");
			}else if(edate){
				strDate = "As Of " + kendo.toString(new Date(edate),"dd-MM-yyyy");
			}else{
				strDate = "";
			}

			return strDate;
		},
		search 				: function(){
			var self = this,
			para = [], 
			start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"), 
			end = kendo.toString(this.get("edate"), "yyyy-MM-dd");

        	//Dates
        	if(start && end){        		
            	para.push({ field:"issued_date >=", value: start });
            	para.push({ field:"issued_date <=", value: end });            	          	            	
            }else if(start){
            	para.push({ field:"issued_date", value: start });
            }else if(end){
            	para.push({ field:"issued_date <=", value: end });
            }else{
            	
            }          

            this.dataSource.filter(para);
		}    	
    });
    banhji.inventoryMovementDetail =  kendo.observable({
    	lang 				: langVM,    	    	    	
    	dataSource 			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "items/inventory_movement_detail",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			sort: { field: "begining", dir: "desc" },
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true			
		}),

    	sortList			: [ 
	 		{ text:"All", value: "all" }, 
	 		{ text:"Today",	value: "today" }, 
	 		{ text:"This Week", value: "week" }, 
	 		{ text:"This Month", value: "month" }, 
	 		{ text:"This Year", value: "year" } 
		],
		sorter 				: "all",
		sdate 				: "",
		edate 				: "",   	
    	
    	pageLoad 			: function(id){			
																						
		},
		sorterChanges 		: function(){
			var value = this.get("sorter"),
			today = new Date();

			switch(value){
			case "today":								
				this.set("sdate", today);
				this.set("edate", "");
							  					
			  	break;
			case "week":			  	
				var first = today.getDate() - today.getDay(),
				last = first + 6;

				var firstDayOfWeek = new Date(today.setDate(first)),
				lastDayOfWeek = new Date(today.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":							  	
				var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1),
				lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":				
			  	var firstDayOfYear = new Date(today.getFullYear(), 0, 1),
			  	lastDayOfYear = new Date(today.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},		
		strDate 			: function(){
			var strDate = "",
			sdate = this.get("sdate"),
			edate = this.get("edate");

			if(sdate && edate){
				strDate = "From " + kendo.toString(new Date(sdate), "dd-MM-yyyy") + " To " + kendo.toString(new Date(edate), "dd-MM-yyyy");
			}else if(sdate){
				strDate = "On " + kendo.toString(new Date(sdate),"dd-MM-yyyy");
			}else if(edate){
				strDate = "As Of " + kendo.toString(new Date(edate),"dd-MM-yyyy");
			}else{
				strDate = "";
			}

			return strDate;
		},
		search 				: function(){
			var self = this,
			para = [], 
			start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"), 
			end = kendo.toString(this.get("edate"), "yyyy-MM-dd");

        	//Dates
        	if(start && end){        		
            	para.push({ field:"issued_date >=", value: start });
            	para.push({ field:"issued_date <=", value: end });            	          	            	
            }else if(start){
            	para.push({ field:"issued_date", value: start });
            }else if(end){
            	para.push({ field:"issued_date <=", value: end });
            }else{
            	
            }          

            this.dataSource.filter(para);
		}    	
    });
    banhji.inventoryPurchaseByVendorSummary =  kendo.observable({
    	lang 				: langVM,    	    	    	
    	dataSource 			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "items/purchase_by_vendor_summary",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			sort: { field: "amount", dir: "desc" },
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true			
		}),

    	sortList			: [ 
	 		{ text:"All", value: "all" }, 
	 		{ text:"Today",	value: "today" }, 
	 		{ text:"This Week", value: "week" }, 
	 		{ text:"This Month", value: "month" }, 
	 		{ text:"This Year", value: "year" } 
		],
		sorter 				: "all",
		sdate 				: "",
		edate 				: "",   	
    	
    	pageLoad 			: function(id){			
																						
		},
		sorterChanges 		: function(){
			var value = this.get("sorter"),
			today = new Date();

			switch(value){
			case "today":								
				this.set("sdate", today);
				this.set("edate", "");
							  					
			  	break;
			case "week":			  	
				var first = today.getDate() - today.getDay(),
				last = first + 6;

				var firstDayOfWeek = new Date(today.setDate(first)),
				lastDayOfWeek = new Date(today.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":							  	
				var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1),
				lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":				
			  	var firstDayOfYear = new Date(today.getFullYear(), 0, 1),
			  	lastDayOfYear = new Date(today.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},		
		strDate 			: function(){
			var strDate = "",
			sdate = this.get("sdate"),
			edate = this.get("edate");

			if(sdate && edate){
				strDate = "From " + kendo.toString(new Date(sdate), "dd-MM-yyyy") + " To " + kendo.toString(new Date(edate), "dd-MM-yyyy");
			}else if(sdate){
				strDate = "On " + kendo.toString(new Date(sdate),"dd-MM-yyyy");
			}else if(edate){
				strDate = "As Of " + kendo.toString(new Date(edate),"dd-MM-yyyy");
			}else{
				strDate = "";
			}

			return strDate;
		},
		search 				: function(){
			var self = this,
			para = [], 
			start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"), 
			end = kendo.toString(this.get("edate"), "yyyy-MM-dd");

        	//Dates
        	if(start && end){        		
            	para.push({ field:"issued_date >=", value: start });
            	para.push({ field:"issued_date <=", value: end });            	          	            	
            }else if(start){
            	para.push({ field:"issued_date", value: start });
            }else if(end){
            	para.push({ field:"issued_date <=", value: end });
            }else{
            	
            }          

            this.dataSource.filter(para);
		}    	
    });
    banhji.inventoryPurchaseByVendorDetail = kendo.observable({
    	lang 				: langVM,    	    	    	
    	dataSource 			: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl + "items/purchase_by_vendor_detail",
					type: "GET",
					headers: banhji.header,
					dataType: 'json'
				},				
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.take,
							page: options.page,
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
			},
			sort: { field: "issued_date", dir: "asc" },			
			schema 	: {
				model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
			},
			batch: true,
			serverFiltering: true			
		}),

    	sortList			: [ 
	 		{ text:"All", value: "all" }, 
	 		{ text:"Today",	value: "today" }, 
	 		{ text:"This Week", value: "week" }, 
	 		{ text:"This Month", value: "month" }, 
	 		{ text:"This Year", value: "year" } 
		],
		sorter 				: "all",
		sdate 				: "",
		edate 				: "",   	
    	
    	pageLoad 			: function(id){			
																						
		},
		sorterChanges 		: function(){
			var value = this.get("sorter"),
			today = new Date();

			switch(value){
			case "today":								
				this.set("sdate", today);
				this.set("edate", "");
							  					
			  	break;
			case "week":			  	
				var first = today.getDate() - today.getDay(),
				last = first + 6;

				var firstDayOfWeek = new Date(today.setDate(first)),
				lastDayOfWeek = new Date(today.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":							  	
				var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1),
				lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":				
			  	var firstDayOfYear = new Date(today.getFullYear(), 0, 1),
			  	lastDayOfYear = new Date(today.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},		
		strDate 			: function(){
			var strDate = "",
			sdate = this.get("sdate"),
			edate = this.get("edate");

			if(sdate && edate){
				strDate = "From " + kendo.toString(new Date(sdate), "dd-MM-yyyy") + " To " + kendo.toString(new Date(edate), "dd-MM-yyyy");
			}else if(sdate){
				strDate = "On " + kendo.toString(new Date(sdate),"dd-MM-yyyy");
			}else if(edate){
				strDate = "As Of " + kendo.toString(new Date(edate),"dd-MM-yyyy");
			}else{
				strDate = "";
			}

			return strDate;
		},
		search 				: function(){
			var self = this,
			para = [], 
			start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"), 
			end = kendo.toString(this.get("edate"), "yyyy-MM-dd");

        	//Dates
        	if(start && end){        		
            	para.push({ field:"issued_date >=", value: start });
            	para.push({ field:"issued_date <=", value: end });            	          	            	
            }else if(start){
            	para.push({ field:"issued_date", value: start });
            }else if(end){
            	para.push({ field:"issued_date <=", value: end });
            }else{
            	
            }          

            this.dataSource.filter(para);
		}    	
    });


	/*************************
	*   Electricity Section   *
	**************************/
	banhji.eDashBoard = kendo.observable({
		dataSource 			: dataStore(apiUrl + "invoices/edashboard"),
		saleByLocationDS 	: dataStore(apiUrl + "invoices/esale_by_location"),

		sortList			: [ 
	 		{ text:"All", value: "all" }, 
	 		{ text:"Today", value: "today" }, 
	 		{ text:"This Week", value: "week" }, 
	 		{ text:"This Month", value: "month" }, 
	 		{ text:"This Year", value: "year" } 
		],
		sorter 				: "year",
		sdate 				: "",
		edate 				: "",		

		locale 				: "km-KH",
		balance 			: kendo.toString(0, "c0"),
		deposit 			: kendo.toString(0, "c0"),

		activeCustomer 		: kendo.toString(0, "n0"),		
		inactiveCustomer 	: kendo.toString(0, "n0"),
		voidCustomer 		: kendo.toString(0, "n0"),
		totalCustomer 		: kendo.toString(0, "n0"),

		totalUnpaid 		: kendo.toString(0, "n0"),
		totalDisconnect 	: kendo.toString(0, "n0"),
				
		pageLoad 			: function(){
			var self = this;			

			this.dataSource.query({			  
			  	page: 1,
			 	take: 50
			}).then(function(e) {
			    var view = self.dataSource.view();
			    
			    self.set("balance", kendo.toString(view[0], "c0"));
			    self.set("deposit", kendo.toString(view[1], "c0"));
			    
			    self.set("activeCustomer", kendo.toString(view[2], "n0"));
			    self.set("inactiveCustomer", kendo.toString(view[3], "n0"));
			    self.set("voidCustomer", kendo.toString(view[4], "n0"));
			    self.set("totalCustomer", kendo.toString(view[5], "n0"));
			    
			    self.set("totalUnpaid", kendo.toString(view[6], "n0"));
			    self.set("totalDisconnect", kendo.toString(view[7], "n0"));
		  	});
		},

		sorterChanges 		: function(){
			var value = this.get("sorter");

			switch(value){
			case "today":
				var today = new Date();
				
				this.set("sdate", today);
				this.set("edate", "");
			  					
			  	break;
			case "week":
			  	var thisWeek = new Date;
				var first = thisWeek.getDate() - thisWeek.getDay(); 
				var last = first + 6;

				var firstDayOfWeek = new Date(thisWeek.setDate(first));
				var lastDayOfWeek = new Date(thisWeek.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":
				var thisMonth = new Date;				  	
				var firstDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth(), 1);
				var lastDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":
				var thisYear = new Date();
			  	var firstDayOfYear = new Date(thisYear.getFullYear(), 0, 1);
				var lastDayOfYear = new Date(thisYear.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},
		autoIncreaseNo 		: function(){
			$(".sno").each(function(index,element){                 
			   $(element).text(index + 1); 
			});
		},
		search 				: function(){
			var self = this,
				start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"),
        		end = kendo.toString(this.get("edate"), "yyyy-MM-dd"),	        		
        		para = [];

        	//Dates
        	if(start && end){
            	para.push({ field:"issued_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
            	para.push({ field:"issued_date <=", value: kendo.toString(end, "yyyy-MM-dd") });            	            	
            }else if(start){
            	para.push({ field:"issued_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
            	para.push({ field:"issued_date <=", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{
            	
            }

            this.saleByLocationDS.query({
            	filter: para,
            	page: 1,
            	pageSize: 100
            }).then(function(){
            	self.autoIncreaseNo();
            });            
		}		
	});	
	banhji.meter = kendo.observable({		
		customer 		: null,
		meter 			: null,
		current_company_id : null,
		utility_id 		: null,		
		company_id 		: 0,
		contact_id 		: 0,

		tariffList 		: [],
		exemptionList 	: [],
		maintenanceList : [],

		ampereList 		: [],
		phaseList 		: [],
		voltageList 	: [],
		parentMeterList : [],

		dataSource 		: dataStore(apiUrl + "meters/index"),
		meterDS  		: dataStore(apiUrl + "meters/index"),
		contactDS 		: dataStore(apiUrl + "contacts/index"),
		locationDS 		: dataStore(apiUrl + "meters/location"),		
		electricityBoxDS : dataStore(apiUrl + "electricity_boxes/index"),
		electricityUnitDS : dataStore(apiUrl + "electricity_units/index"),		
		itemDS 			: dataStore(apiUrl + "meters/item"),
		feeDS 			: dataStore(apiUrl + "fees/index"),
		statusList 		: [            
			{ "id": 1, "name": "កំពុងប្រើប្រាស់" },
			{ "id": 2, "name": "ផ្អាក់ប្រើប្រាស់" },
			{ "id": 0, "name": "ឈប់ប្រើប្រាស់" }
        ],		

		pageLoad 		: function(utility_id){
			if(this.get("utility_id")!=utility_id){
			 	this.set("utility_id", utility_id);

			 	
			}								
		},
		loadData 		: function(company_id){			
			if(this.get("current_company_id")!=company_id){
			 	this.set("current_company_id", company_id);
				
				this.locationDS.filter([
					{ field:"company_id", value: company_id },
					{ field:"utility_id", value: this.get("utility_id") }
				]);

				var category_id = 1;
				if(this.get("utility_id")=="2"){
					category_id = 3;
				}
				
				this.itemDS.filter([
					{ field:"company_id", value: company_id },
					{ field:"category_id", value: category_id }
				]);

				this.loadFee(company_id);

				if(this.get("utility_id")=="1"){
					this.loadElectricityUnit(company_id);
				}
			}						
		},				
		loadFee		 	: function(company_id){
			var self = this;
			
			this.set("tariffList", []);
			this.set("exemptionList", []);
			this.set("maintenanceList", []);

			this.feeDS.filter([
				{ field:"company_id", value: company_id },
				{ field:"utility_id", value: this.get("utility_id") }
			]);
			this.feeDS.bind("requestEnd", function(e){
				var response = e.response.results;
				
				$.each(response, function(index, value){																						
					if(value.type=="tariff"){							
						self.tariffList.push({
							id 	: value.id,
							name: value.name 
						});
					}
					if(value.type=="exemption"){							
						self.exemptionList.push({
							id 	: value.id,
							name: value.name 
						});
					}
					if(value.type=="maintenance"){
						self.maintenanceList.push({
							id 	: value.id,
							name: value.name 
						});
					}								
				});
			});
		},
		loadElectricityUnit : function(company_id){
			var self = this;

			this.set("ampereList", []);
			this.set("phaseList", []);
			this.set("voltageList", []);
			
			this.electricityUnitDS.filter({ field:"company_id", value: company_id });
			this.electricityUnitDS.bind("requestEnd", function(e){
				var response = e.response.results;

				$.each(response, function(index, value){					
					if(value.type==="ampere"){
						self.ampereList.push({
							id 	: value.id,
							name: value.name 
						});
					}
					if(value.type==="phase"){
						self.phaseList.push({
							id 	: value.id,
							name: value.name 
						});
					}
					if(value.type==="voltage"){
						self.voltageList.push({
							id 	: value.id,
							name: value.name 
						});
					}									
				});
			});								
		},
		loadMeter 		: function(contact_id){
			var self = this;

			this.dataSource.filter([
				{ field:"contact_id", value: contact_id },
				{ field:"utility_id", value: this.get("utility_id") }
			]);
			this.dataSource.bind("requestEnd", function(e){
				var response = e.response.results;
				
				$.each(response, function(index, value){																						
					if(value.reactive_of==0 && value.backup_of==0){							
						self.parentMeterList.push({
							id 	: value.id,
							name: value.number 
						});
					}										
				});
			});			
		},
		addEmpty		: function(){										      		
      		this.dataSource.add({
      			company_id 			: this.get("company_id"),
      			utility_id 			: this.get("utility_id"),
      			location_id 		: 0,
      			electricity_box_id 	: 0,
      			contact_id 			: this.get("contact_id"),
      			item_id 			: 0,
      			reactive_of 		: 0,
				backup_of 			: 0,
				number 				: "",
				multiplier			: 1,
				max_number			: 10000,
				ear_sealed			: true,
				cover_sealed		: true,				
				memo				: "",	
				status				: 1,
				date_used 			: new Date(),

				item_name 			: "",
				electricity_box_number : "",
				
				amperes 			: {id:0},				
				phases 				: {id:0},				
				voltages 			: {id:0},
				
				tariffs 			: {id:0},				
				exemptions 			: {id:0},								
				maintenances 		: {id:0}
			});

			var data = this.dataSource.data();
			var obj = data[data.length - 1];
      						
			this.set("meter", obj);			
      	},
      	openMeterWindow	: function(){
      		this.addEmpty();

         	var window = $("#meter-window").data("kendoWindow");
          	window.title("Meter");          	
          	window.center().open();         	
      	},
      	closeMeterWindow: function(){	      		
      		this.dataSource.cancelChanges();
      		var window = $("#meter-window").data("kendoWindow");          	         	
          	window.close();          	
      	},
      	edit 			: function(e){
      		var data = e.data;
      		
      		this.set("meter", data);      		    		

      		var window = $("#meter-window").data("kendoWindow");
          	window.title("Meter");          	
          	window.center().open();
      	},
      	save 			: function(){
      		var self = this;

      		this.dataSource.sync();
      		var saved = false;
      		this.dataSource.bind("requestEnd", function(e){
      			if(saved==false){
					saved = true;

	      			self.set("meter", null);

	      			var window = $("#meter-window").data("kendoWindow");          	         	
	          		window.close();
          		}
      		});
      	},      	
      	delete 			: function(e){
			if (confirm("Are you sure, you want to delete it?")) {        
		        var data = e.data;
		        this.dataSource.remove(data);
		        this.dataSource.sync();
	    	}	    	
	    }
	});	
	banhji.reading = kendo.observable({		
		monthOfSearch 	: null,
		company 		: null,
		location_id 	: null,
		meter_id 		: null,
		utility_id 		: null,
				
		month_of 		: new Date(),
		from_date		: new Date(),
		to_date			: new Date(),
		read_by 		: null,		
						
		dataSource 		: new kendo.data.DataSource({
			transport: {
				read: {
					url: apiUrl + "meters/reading",
					headers: {
						"Entity": getDB()
					},
					type: "GET",
					dataType: "json"
				}			  	
			},						
			pageSize: 100,							  	
		  	schema: {
				model: {
					id: "id"
				},
				data: "results",
				total: "count"	
			}
		}),
		readerDS 		: dataStore(apiUrl + "contacts/employee"),
		branchDS 		: dataStore(apiUrl + "contacts/branch"),
		elocationDS 	: dataStore(apiUrl + "meters/elocation"),
		wlocationDS 	: dataStore(apiUrl + "meters/wlocation"),
		
		meterDS			: dataStore(apiUrl + "meters/index"),
		meterRecordDS	: dataStore(apiUrl + "meters/reading"),
		
		pageLoad 		: function(utility_id){
			if(this.get("utility_id")!=utility_id){
			 	this.set("utility_id", utility_id);


			}								
		},
		strMonthOf 		: function(){
			return "អំនានប្រចាំខែ " + kendo.toString(this.get("monthOfSearch"), "MM-yyyy");
		},		
		search 			: function(){								
			var monthOfSearch = this.get("monthOfSearch");			
			var location_id = this.get("location_id");
			var meter_id = this.get("meter_id");
			var para = Array();
		
			if(monthOfSearch){				
				if(location_id || meter_id){						
					var monthOf = new Date(monthOfSearch);
					monthOf.setDate(1);
					monthOf = kendo.toString(monthOf, "yyyy-MM-dd");
					para.push({ month_of: monthOf });				
					
					this.dataSource.transport.options.read.data={
						month_of: monthOf,
						location_id: location_id,
						meter_id: meter_id
					};
					this.dataSource.read();	
				}
			}		
		},						
		isSupported 	: function() {
			// check if File API is supported in this browser
			if(window.File && window.FileReader && window.FileList && window.Blob) {
				return true;
			} else {
				return false;
			}
		},			
		readFile 		: function(e){
			e.preventDefault();
			var self = this;

			var reader = new FileReader();					
			if(this.get("isSupported")) {
				var file = document.getElementById('myFile').files[0];
				// var file = $('#myFile').get(0).files[0];

				if(file !== undefined) {
					this.set("uploadStatus", "");
					reader.readAsText(file);
					
					reader.onload = function() {						
 						var result = reader.result.split('\r');	 						
 						
						// for (var i = 1; i < result.length; i ++) {								
						// 	var data = result[i].split(',');
						// 	readingList.push(data);															
						// }

						self.dataSource.transport.options.read.data = result;
						self.dataSource.read();																		
					}

					reader.onerror = function() {							
						this.set("uploadStatus", reader.error);
					}						
				} else {
					this.set("uploadStatus", "សូមSelectឯកសា!");
				}

			} else {
				this.set("uploadStatus", "Invalid file!");					
			}
		},				
      	onChange 		: function(e) {
      		e.preventDefault();

      		var self = this;
      		var selected = e.data;            
            
            if(kendo.parseInt(selected.current)>0){        
		        var add_up = 0;
		        if(selected.new_round){
		        	add_up = kendo.parseInt(selected.max_number);            	
	        	}
	        	var usage = ((kendo.parseInt(selected.current) + add_up) - kendo.parseInt(selected.previous))*selected.multiplier;
	            selected.set("usage", usage);
	            
	            if(usage<0){
					selected.set("isValid", false);
				}else{
					selected.set("isValid", true);
				}
			}else{
				selected.set("usage", "");
				selected.set("isValid", true);
			}

			var nextID = selected.index+1;
			$(".txt"+nextID).focus();            
        },
        companyChanges	: function(e){        	
        	this.set("location_id", null);
        },
        total 			: function() {      		
	        var sum = 0;

	        $.each(this.dataSource.data(), function(index, value) {	        		            
	        	sum += kendo.parseInt(value.usage);		        	          
	        });

	        return kendo.toString(sum, "n0");
	    },
	    checkInput 		: function() {	        
	        var isValid = true;
	        var hasReading = false;

	        $.each(this.dataSource.data(), function(index, value) {
	        	if(value.current>0){
	        		hasReading = true;
	        	}

	        	if(value.isValid==false){
	        		isValid = false;
	        	}		        	          
	        });

	        if(hasReading==false){
	        	isValid = false;
	        }

	        return isValid;
	    },             	
      	save 			: function(){
      		var self = this;	      		     			
  			var monthOf = new Date(this.get("month_of"));
			monthOf.setDate(1);
			monthOf = kendo.toString(monthOf, "yyyy-MM-dd");

			$.each(this.dataSource.data(), function(index, value){
				if(kendo.parseInt(value.current)>0){
					self.meterRecordDS.add({				
						meter_id	: value.id,
						read_by 	: self.get("read_by"),
						input_by 	: 0,						
					   	previous	: value.previous,
					   	current 	: value.current,					   	
					   	new_round	: value.new_round,
					   	usage 		: value.usage,					   	
					   	month_of 	: monthOf,
					   	from_date	: kendo.toString(self.get("from_date"), "yyyy-MM-dd"),						   
					   	to_date 	: kendo.toString(self.get("to_date"), "yyyy-MM-dd")
					});
				}
			});

			this.meterRecordDS.sync();
			var saved = false;				
			this.meterRecordDS.bind("requestEnd", function(e){				
				if(saved==false){
					saved = true;

					self.meterRecordDS.data([]);
					self.dataSource.data([]);
				}
			});      			
      	}      			
	});
	banhji.uInvoice = kendo.observable({		
		dataSource  	: dataStore(apiUrl + "invoices/uInvoice"),
		meterDS  		: dataStore(apiUrl + "meters"),		
		branchDS 		: dataStore(apiUrl + "contacts/branch"),
		elocationDS 	: dataStore(apiUrl + "meters/elocation"),
		wlocationDS 	: dataStore(apiUrl + "meters/wlocation"),		
		tariffItemDS 	: dataStore(apiUrl + "meters/tariff_item"),		
		readingDS 		: new kendo.data.DataSource({
			transport: {
				read: {
					url: apiUrl + "meters/reading_for_invoice",
					headers: {
						"Entity": getDB()
					},
					type: "GET",
					dataType: "json"
				}			  	
			},						
			pageSize: 100,							  	
		  	schema: {
				model: {
					id: "id"
				},
				data: "results",
				total: "count"	
			}		  			
		}),

		chkAll 			: false,		
		monthOfSearch 	: null,
		company_id 		: null,
		location_id 	: null,
		utility_id		: 1,
		biller 			: banhji.userManagement.getLogin() === null ? '':banhji.userManagement.getLogin().id,
				
		issued_date		: new Date(),
		payment_date 	: new Date(),
		due_date 		: new Date(),	
		month_of 		: new Date(),
		
		pageLoad 		: function(utility_id){
			this.set("utility_id", utility_id);

			this.tariffItemDS.read();
		},		
		search 			: function(){
			var monthOfSearch = this.get("monthOfSearch");			
			var location_id = this.get("location_id");
			var meter_id = this.get("meter_id");
			var para = Array();
		
			if(monthOfSearch){
				if(location_id || meter_id){						
					var monthOf = new Date(monthOfSearch);
					monthOf.setDate(1);
					monthOf = kendo.toString(monthOf, "yyyy-MM-dd");
					para.push({ month_of: monthOf });				
					
					this.readingDS.transport.options.read.data={
						month_of: monthOf,
						location_id: location_id,
						meter_id: meter_id
					};
					this.readingDS.read();	
				}
			}
		},	
		checkAll 		: function(e){
			e.preventDefault();

			var bolValue = this.get("chkAll");
			var data = this.readingDS.data();
			
			if(data.length>0){						
		        $.each(data, function(index, value){		        			        	
		        	value.set("isCheck", bolValue);		        	
		        });		        			        
	        }							
		},		
		companyChanges 	: function(e){				
        	e.preventDefault();
        	this.set("location_id", null);
        },
        total 			: function(){      		
	        var sum = 0;

	        $.each(this.readingDS.data(), function(index, value) {	        		            
	        	sum += kendo.parseInt(value.usage);		        	          
	        });

	        return kendo.toString(sum, "n0");
	    },	 
		save 	 		: function(){
			var self = this;
			var monthOf = new Date(this.get("month_of"));
			monthOf.setDate(1);
			monthOf = kendo.toString(monthOf, "yyyy-MM-dd");

			var data = this.readingDS.data();

			var invoiceType = "eInvoice";
			if(this.get("utility_id")==2){
				invoiceType = "wInvoice";
			}			
			//Get unique contact_id
			var uniqueCustomerID = [];
			$.each(data, function(index, value){
				if(value.isCheck){				
			    	if($.inArray(value.customers.id, uniqueCustomerID) === -1) uniqueCustomerID.push(value.customers.id);
			    }				
			});			
			
			for (var i=0;i<uniqueCustomerID.length;i++) {
				var invoiceLineList = [];
				var amount = 0, rate = 1, locale = "km-KH", company_id = 0, location_id = 0;

				//Calculation
				$.each(data, function(indexmr, mr){															
					if(mr.customers.id==uniqueCustomerID[i]){						
						var usage = kendo.parseInt(mr.usage);
						var current_amount = 0;

						var company_rate = self.branchDS.get(mr.customers.company_id).rate;						
						rate = kendo.parseFloat(company_rate)/kendo.parseFloat(mr.customers.rate);
						locale = mr.customers.locale;
						company_id = mr.customers.company_id;
						location_id = mr.meters.location_id;
						
						//Exemption as usage						
						if(mr.exemptions.length>0){							
							if(mr.exemptions[0].unit=="usage"){
								var exemptionUsage = kendo.parseFloat(mr.exemptions[0].amount);
								if(usage>exemptionUsage){
									usage -= exemptionUsage;
								}else{
									usage = 0;
								}

								invoiceLineList.push({				
							   		"invoice_id"		: 0,
									"item_id" 			: 0,															
								   	"meter_record_id"	: 0,
								   	"description" 		: mr.exemptions[0].name,					   	
								   	"unit" 				: mr.exemptions[0].amount,
								   	"price"				: 0,					   	
								   	"amount" 			: 0,
								   	"rate"				: rate,
								   	"locale" 			: locale,
								   	"has_vat" 			: false
								});
							}					
						}
						
						//Tariff						
						if(mr.tariffs.length>0){							
							$.each(self.tariffItemDS.data(), function(indext, tariff){
								var tariffUsage = kendo.parseFloat(tariff.usage);						
								var tamount = 0;
								
								if(kendo.parseInt(tariff.fee_id)==mr.tariffs[0].id){
									if(tariff.is_flat){								
										tamount = kendo.parseFloat(tariff.price);																																																																																
									}else{								
										tamount = usage * kendo.parseFloat(tariff.price);																						
									}

									invoiceLineList.push({				
								   		"invoice_id"		: 0,
										"item_id" 			: 0,																
									   	"meter_record_id"	: mr.id,
									   	"description" 		: mr.tariffs[0].name,					   	
									   	"unit" 				: usage,
									   	"price"				: tariff.price,					   	
									   	"amount" 			: tamount*rate,
									   	"rate"				: rate,
									   	"locale" 			: locale,
									   	"has_vat" 			: false
									});

									current_amount += tamount;				

									return false;						
								}
							});					
						}
						
						//Exemption as money and $
						if(mr.exemptions.length>0){											
							if(mr.exemptions[0].unit=="money"){												
								invoiceLineList.push({				
							   		"invoice_id"		: 0,
									"item_id" 			: 0,															
								   	"meter_record_id"	: 0,
								   	"description" 		: mr.exemptions[0].name,					   	
								   	"unit" 				: 1,
								   	"price"				: mr.exemptions[0].amount,					   	
								   	"amount" 			: mr.exemptions[0].amount*rate,
								   	"rate"				: rate,
								   	"locale" 			: locale,
								   	"has_vat" 			: false
								});

								if(current_amount>kendo.parseFloat(mr.exemptions[0].amount)){
									current_amount -=  kendo.parseFloat(mr.exemptions[0].amount);
								}else{
									current_amount = 0;
								}						
							}

							if(mr.exemptions[0].unit=="%"){
								var exemptionPercent = amount / kendo.parseFloat(mr.exemptions[0].amount);
								invoiceLineList.push({				
							   		"invoice_id"		: 0,
									"item_id" 			: 0,													
								   	"meter_record_id"	: 0,
								   	"description" 		: mr.exemptions[0].name,					   	
								   	"unit" 				: 1,
								   	"price"				: mr.exemptions[0].amount,					   	
								   	"amount" 			: exemptionPercent*rate,
								   	"rate"				: rate,
								   	"locale" 			: locale,
								   	"has_vat" 			: false
								});
							}
						}

						amount += current_amount;
					}					
				});				

				//Add invoice
				this.dataSource.add({				
			   		"company_id"	: company_id,
			   		"contact_id"	: uniqueCustomerID[i],
			   		"payment_term_id": 0,
			   		"payment_method_id":0,
			   		"reference_id" 	: 0,
			   		"account_id"  	: 0,
			   		"vat_id"		: 0,
			   		"biller_id" 	: this.get("biller"),
			   		"location_id" 	: location_id,	
					"number" 		: "",											
				   	"type"			: invoiceType,
				   	"amount" 		: amount*rate,
				   	"vat" 			: 0,					   	
				   	"rate" 			: rate,
				   	"locale" 		: locale,
				   	"month_of" 		: monthOf,
				   	"issued_date"	: kendo.toString(this.get("issued_date"), "yyyy-MM-dd"),					   	
				   	"payment_date" 	: kendo.toString(this.get("payment_date"), "yyyy-MM-dd"),
				   	"due_date" 		: kendo.toString(this.get("due_date"), "yyyy-MM-dd"),
				   	"check_no" 		: "",
				   	"memo" 			: "",
				   	"memo2" 		: "",
				   	"status" 		: 0,

				   	"invoice_lines" : invoiceLineList
				});
			}

			var saved = false;			
			this.dataSource.sync();
			this.dataSource.bind("requestEnd", function(e){
				if(saved==false){
					saved = true;
					
					self.readingDS.read();
				}
			});
		}	
	});	
	banhji.invoicePrint = kendo.observable({
		monthOfSearch 	: new Date("2015-08-01"),
		company_id 		: 4,
		location_id 	: 8,
		utility_id		: 1,
		invoice_id 		: null,	
		isVisible 		: true,		
				
		dataSource 	 	: dataStore(apiUrl + "invoices/print"),
		invoiceDS 	 	: dataStore(apiUrl + "invoices/index"),
		branchDS 		: dataStore(apiUrl + "contacts/branch"),
		elocationDS 	: dataStore(apiUrl + "meters/elocation"),
		wlocationDS 	: dataStore(apiUrl + "meters/wlocation"),
				
		pageLoad 		: function(utility_id, id){
			this.set("utility_id", utility_id);			
			
			if(id){

			}			
		},
		search 			: function(){
			var self = this;

			var monthOfSearch = this.get("monthOfSearch");			
			var location_id = this.get("location_id");
								
			if(monthOfSearch && location_id){								
				var monthOf = new Date(monthOfSearch);
				monthOf.setDate(1);
				monthOf = kendo.toString(monthOf, "yyyy-MM-dd");
												
				this.dataSource.query({
					filter: [
						{ field:"month_of", value: monthOf },
						{ field:"location_id", value: location_id }
					],
					page: 1,
					pageSize: 5
				}).then(function(e){
					self.barcod();
				});				
			}											
		},
		companyChanges 	: function(e){				
        	e.preventDefault();
        	this.set("location_id", null);
        },	
		barcod 			: function(){									
			var view = this.dataSource.view();
			
			for (var i=0;i<view.length;i++) {
				var d = view[i];
				
				if(this.get("utility_id")=="1"){								
					$("."+d.number).kendoBarcode({
						renderAs: "svg",
					  	value: d.customers.number,
					  	type: "code128",
					  	width: 200,
						height: 40,
						text:{
						    visible: false
						}	
					});
				}else{
					$("."+d.number).kendoBarcode({
						renderAs: "svg",
					  	value: d.customers.number,
					  	type: "code128",
					  	width: 200,
						height: 40
					});
				}
			}		
		},		
		print 			: function(e) {
			var printBtn = e.target;
			if(printBtn.checked) {
				$(".hiddenPrint").css("visibility", "hidden");
			} else {
				$(".hiddenPrint").css("visibility", "visible");
			}
		}
	});


	/*************************
	*	Water Section   *
	**************************/
	banhji.wDashBoard = kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "invoices/wdashboard"),
		saleByBranchDS 		: dataStore(apiUrl + "invoices/wsale_by_branch"),
		saleByLocationDS 	: dataStore(apiUrl + "invoices/wsale_by_location"),

		sortList			: [ 
	 		{ text:"All", value: "all" }, 
	 		{ text:"Today", value: "today" }, 
	 		{ text:"This Week", value: "week" }, 
	 		{ text:"This Month", value: "month" }, 
	 		{ text:"This Year", value: "year" } 
		],
		sorter 				: "year",
		sdate 				: "",
		edate 				: "",		

		locale 				: "km-KH",
		balance 			: kendo.toString(0, "c0"),
		deposit 			: kendo.toString(0, "c0"),

		activeCustomer 		: kendo.toString(0, "n0"),		
		inactiveCustomer 	: kendo.toString(0, "n0"),
		voidCustomer 		: kendo.toString(0, "n0"),
		totalCustomer 		: kendo.toString(0, "n0"),

		totalUnpaid 		: kendo.toString(0, "n0"),
		totalDisconnect 	: kendo.toString(0, "n0"),
				
		pageLoad 			: function(){
			var self = this;

			this.dataSource.query({			  
			  	page: 1,
			 	take: 50
			}).then(function(e) {
			    var view = self.dataSource.view();
			    
			    self.set("balance", kendo.toString(view[0], "c0", banhji.institute.locale));
			    self.set("deposit", kendo.toString(view[1], "c0", banhji.institute.locale));
			    
			    self.set("activeCustomer", kendo.toString(view[2], "n0"));
			    self.set("inactiveCustomer", kendo.toString(view[3], "n0"));
			    self.set("voidCustomer", kendo.toString(view[4], "n0"));
			    self.set("totalCustomer", kendo.toString(view[5], "n0"));
			    
			    self.set("totalUnpaid", kendo.toString(view[6], "n0"));
			    self.set("totalNoMeter", kendo.toString(view[7], "n0"));
		  	});
		},
		sorterChanges 		: function(){
			var value = this.get("sorter");

			switch(value){
			case "today":
				var today = new Date();
				
				this.set("sdate", today);
				this.set("edate", today);
			  					
			  	break;
			case "week":
			  	var thisWeek = new Date;
				var first = thisWeek.getDate() - thisWeek.getDay(); 
				var last = first + 6;

				var firstDayOfWeek = new Date(thisWeek.setDate(first));
				var lastDayOfWeek = new Date(thisWeek.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":
				var thisMonth = new Date;				  	
				var firstDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth(), 1);
				var lastDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":
				var thisYear = new Date();
			  	var firstDayOfYear = new Date(thisYear.getFullYear(), 0, 1);
				var lastDayOfYear = new Date(thisYear.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},
		autoIncreaseNo 		: function(){
			$(".sno").each(function(index,element){                 
			   $(element).text(index + 1); 
			});

			$(".snoo").each(function(index,element){                 
			   $(element).text(index + 1); 
			});
		},
		search 				: function(){
			var self = this,
				start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"),
        		end = kendo.toString(this.get("edate"), "yyyy-MM-dd"),	        		
        		para = [];

        	//Dates
        	if((start && end) && (new Date(start) < new Date(end))){        		
            	para.push({ field:"start_date", value: kendo.toString(start, "yyyy-MM-dd") });
            	para.push({ field:"end_date", value: kendo.toString(end, "yyyy-MM-dd") });            	            	
            }else if(start){
            	para.push({ field:"start_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
            	para.push({ field:"end_date", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{
            	
            }

            this.saleByBranchDS.query({
            	filter: para,
            	page: 1,
            	pageSize: 100
            });

            this.saleByLocationDS.query({
            	filter: para,
            	page: 1,
            	pageSize: 100
            }).then(function(){
            	self.autoIncreaseNo();
            });             
		}
	});
	banhji.wCustomerCenter = kendo.observable({
		lang 				: langVM,
		transactionDS  		: dataStore(apiUrl + 'invoices/wtransaction'),
		contactDS 			: dataStore(apiUrl + 'contacts'),
		contactTypeDS		: dataStore(apiUrl + 'contacts/type'),
		noteDS 				: dataStore(apiUrl + 'notes'),		
		branchDS 			: dataStore(apiUrl + 'contacts/branch'),
		locationDS 			: dataStore(apiUrl + 'locations'),
		currencyDS 			: dataStore(apiUrl + 'currencies'),
		monthlyDS 			: dataStore(apiUrl + 'invoices/wmonthly'),
		outstandingDS 		: dataStore(apiUrl + "invoices/woutstanding"),
		meterDS 			: dataStore(apiUrl + 'meters/wdeposit'),

		sortList			: [ 
	 		{ text:"All", value: "all" }, 
	 		{ text:"Today", value: "today" }, 
	 		{ text:"This Week", value: "week" }, 
	 		{ text:"This Month", value: "month" }, 
	 		{ text:"This Year", value: "year" } 
		],
		sorter 				: "year",
		sdate 				: "",
		edate 				: "",
				
		obj 				: null,
		note 				: "",		
		searchText 			: "",
		branch_id 			: 0,
		location_id 		: 0,
		contact_type_id 	: 0,
		currency_id 		: 0,
		user_id 			: banhji.userManagement.getLogin() === null ? '':banhji.userManagement.getLogin().id,

		balance 			: 0,
		deposit 			: 0,
		outInvoice 			: 0,
		overInvoice 		: 0,
		
		pageLoad 			: function(){		
												
		},
		loadOutStandingInvoice: function(id){
			var self = this;

			this.outstandingDS.query({
				filter: { field: "contact_id", value: id },
				page: 1,
				take: 100
			}).then(function(e) {
				var view = self.outstandingDS.view();

				self.set("deposit", kendo.toString(view[0].deposit, "c0", "km-KH"));
				self.set("outInvoice", kendo.toString(view[1].outInvoice, "n0"));
				self.set("overInvoice", kendo.toString(view[2].overInvoice, "n0"));
				self.set("balance", kendo.toString(view[3].balance, "c0", "km-KH"));
			});
		},
		loadTransaction 	: function(id){
			this.transactionDS.query({
			  	filter: { field:"contact_id", value: id },
			  	sort: { field: "issued_date", dir: "desc" },
			  	page: 1,
			  	take: 100
			});
		},
		loadBalance 		: function(){
			var obj = this.get("obj");

			this.transactionDS.query({
			  	filter: [
			  		{ field:"contact_id", operator:"invoice", value: obj.id },
			  		{ field:"type", operator:"where_in", value: ["Invoice", "wInvoice"] },
			  		{ field:"status", operator:"invoice", value: 0 },
			  		{ field:"id", operator:"payment", value: 0 }
			  	],
			  	sort: { field: "issued_date", dir: "desc" },
			  	page: 1,
			  	take: 100
			});
		},
		loadDeposit 		: function(){
			var obj = this.get("obj");

			this.transactionDS.query({
			  	filter: [
			  		{ field:"contact_id", operator:"payment", value: obj.id },
			  		{ field:"type", operator:"payment", value:"deposit" },			  		
			  		{ field:"id", operator:"invoice", value: 0 }
			  	],
			  	sort: { field: "issued_date", dir: "desc" },
			  	page: 1,
			  	take: 100
			});
		},
		loadOverInvoice 	: function(){
			var obj = this.get("obj");

			this.transactionDS.query({
			  	filter: [
			  		{ field:"contact_id", operator:"invoice", value: obj.id },
			  		{ field:"type", operator:"where_in", value: ["Invoice", "wInvoice"] },
			  		{ field:"status", operator:"invoice", value: 0 },
			  		{ field:"due_date <", operator:"invoice", value: kendo.toString(new Date(), "yyyy-MM-dd") },
			  		{ field:"id", operator:"payment", value: 0 }
			  	],
			  	sort: { field: "issued_date", dir: "desc" },
			  	page: 1,
			  	take: 100
			});
		},
		loadMeter 			: function(id){
			this.meterDS.filter([
				{ field:"contact_id", value: id },
				{ field:"utility_id", value: 2 }
			]);
		},
		loadNote 			: function(id){
			this.noteDS.query({
				filter: { field:"contact_id", value: id },
				sort: { field:"noted_date", dir:"desc" },
				page: 1,
				take: 100
			});
		},
		loadGraph 			: function(id){
			var self = this;

			this.monthlyDS.query({
				filter: { field: "contact_id", value: id },
				page: 1,
				take: 100
			}).then(function(e) {
			    var view = self.monthlyDS.view();
			    
				$('#wUsage-graph').kendoChart({
					dataSource: {data: view},												
					series: [
						{field: 'amount', categoryField:'month', type: 'line', axis: 'sale'},
						{field: 'usage', categoryField:'month', type: 'area', axis: 'usage'}
					],
					valueAxes: [
						{
		                    name: "sale",
		                    color: "#007eff",
		                    min: 0,
		                    majorUnit: 10000,
		                    max: 100000
		                }, 
		                {
		                    name: "usage",
		                    min: 0,	
		                    majorUnit: 5,		                   
		                    max: 50
		                }
	                ],
	                categoryAxis: {
	                    //categories: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],		                    
	                    axisCrossingValues: [0, 13],
	                    justified: true
	                },
	                tooltip: {
	                    visible: true,
	                    format: "{0}",
	                    template: "#= series.field #: #= value #"
	                }
				});
			});		
		},		
		selectedRow			: function(e){
			var id = e.data.id,
			data = e.data;			
			
			this.set("obj", data);
			this.loadGraph(id);
			this.loadOutStandingInvoice(id);
			this.loadTransaction(id);
			this.loadMeter(id);
			this.loadNote(id);
		},
		sorterChanges 		: function(){
			var value = this.get("sorter");

			switch(value){
			case "today":
				var today = new Date();
				
				this.set("sdate", today);
				this.set("edate", today);
			  					
			  	break;
			case "week":
			  	var thisWeek = new Date;
				var first = thisWeek.getDate() - thisWeek.getDay(); 
				var last = first + 6;

				var firstDayOfWeek = new Date(thisWeek.setDate(first));
				var lastDayOfWeek = new Date(thisWeek.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":
				var thisMonth = new Date;				  	
				var firstDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth(), 1);
				var lastDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":
				var thisYear = new Date();
			  	var firstDayOfYear = new Date(thisYear.getFullYear(), 0, 1);
				var lastDayOfYear = new Date(thisYear.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},
		enterSearch 		: function(e){
			e.preventDefault();

			this.search();
		},
		search 				: function(){
			var self = this, 
			para = [],
      		txtSearch = this.get("searchText"), 
      		company_id = this.get("branch_id"),
      		location_id = this.get("location_id"), 
      		contact_type_id = this.get("contact_type_id"),
      		currency_id = this.get("currency_id");

      		para.push({ field: "use_water", value: 1 });
      		
      		if(txtSearch){
      			para.push(      				
      				{ field: "wnumber", operator: "like", value: txtSearch },
      				{ field: "surname", operator: "or_like", value: txtSearch },
					{ field: "name", operator: "or_like", value: txtSearch },
					{ field: "company", operator: "or_like", value: txtSearch }
      			);
      		}

      		if(location_id){
      			para.push({ field: "wlocation_id", value: location_id });
      		}else{
      			if(company_id){
	      			para.push({ field: "wbranch_id", value: company_id });
	      		}
      		}

      		if(contact_type_id){
      			para.push({ field: "contact_type_id", value: contact_type_id });
      		}

      		if(currency_id){
      			para.push({ field: "currency_id", value: currency_id });
      		}      		

      		this.contactDS.filter(para);
      		var loaded = false;
      		this.contactDS.bind("requestEnd", function(e){
      			if(e.type=="read" && loaded==false){
      				loaded = true;

      				//Clear search filters
		      		self.set("searchText", "");
		      		self.set("branch_id", 0);
		      		self.set("location_id", 0);
		      		self.set("contact_type_id", 0);
		      		self.set("currency_id", 0);
      			}
      		});      			
		},
		searchTransaction	: function(){
			var self = this,
				start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"),
        		end = kendo.toString(this.get("edate"), "yyyy-MM-dd"),	        		
        		para = [];

        	//Dates
        	if(start && end){
            	para.push({ field:"start_date", value: kendo.toString(start, "yyyy-MM-dd") });
            	para.push({ field:"end_date", value: kendo.toString(end, "yyyy-MM-dd") });            	            	
            }else if(start){
            	para.push({ field:"start_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
            	para.push({ field:"end_date", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{
            	
            }            

            this.transactionDS.query({
            	filter: para,
            	sort: { field: "issued_date", dir: "desc" },
            	page: 1,
            	pageSize: 100
            });            
		},
		branchChanges 		: function(e){
			if(e.sender.selectedIndex==0){
				this.set("location_id", 0);
			}
		},		
		goToNewWaterDeposit		: function(){
			var obj = this.get("obj");	
			
			banhji.router.navigate('/wDeposit');
			banhji.wDeposit.loadContact(obj.id);			
		},
		goToWaterDepositWitdraw	: function(e){
			var data = e.data;

			banhji.router.navigate('/wDeposit_witdraw');
			banhji.wDepositWitdraw.loadMeter(data.id);
		},
		goEditContact 		: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/wCustomer/'+obj.id);
		},
		goEstimate			: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/estimate');
			banhji.estimate.loadContact(obj.id);			
		},
		goSO				: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/so');
			banhji.so.loadContact(obj.id);
		},
		goReceipt			: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/receipt');
			banhji.receipt.loadContact(obj.id);
		},
		goInvoice			: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/invoice');
			banhji.invoice.loadContact(obj.id);					
		},
		goGDN				: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/gdn');
			banhji.gdn.loadContact(obj.id);
		},
		goStatement			: function(){
			var obj = this.get("obj");

			banhji.router.navigate('/statement');
			banhji.statement.loadContact(obj.id);
		},
		saveNote 			: function(){
			var self = this;

			if(this.get("note")!==""){
				this.noteDS.insert(0, {
					contact_id 	: this.get("obj").id,
					note 		: this.get("note"),
					noted_date	: new Date(),
					created_by 	: this.get("user_id"),

					creator 	: ""
				});
				var saved = false;
				this.noteDS.sync();
				this.noteDS.bind("requestEnd", function(){
					if(saved==false){
						saved = true;

						self.set("note", "");
					}
				});
			}else{
				alert("ត្រូវការ កំណត់Memo");
			}
		}		
	});
	banhji.wNewCustomer = kendo.observable({
		lang 					: langVM,
		dataSource 				: dataStore(apiUrl + "contacts"),
		existingDS 				: dataStore(apiUrl + "contacts"),			
		branchDS  				: dataStore(apiUrl + "contacts/branch"),
		locationDS  			: dataStore(apiUrl + "locations"),

        obj 					: null,
        isDuplicateNumber 		: false,		
		
		pageLoad 				: function(){
					
		},
		openWindow		: function(e){
			var data = e.data;

			this.set("obj", data);
      		
         	var window = $("#window").data("kendoWindow");
          	window.title(data.number +"-"+ data.fullname);          	
          	window.center().open();         	
      	},
      	closeWindow 	: function(){	      		
      		this.dataSource.cancelChanges();

      		var window = $("#window").data("kendoWindow");          	         	
          	window.close();          	
      	},
      	checkExistingNumber 	: function(){
			var self = this;	
			
			var number = this.get("obj").wnumber;			
			
			if(number){
				this.existingDS.query({
					filter: { field:"wnumber", value: number },
					page: 1,
					take: 1
				}).then(function(e){
					var view = self.existingDS.view();
					
					if(view.length>0){
				 		self.set("isDuplicateNumber", true);						
					}else{
						self.set("isDuplicateNumber", false);
					}
				});							
			}else{
				this.set("isDuplicateNumber", false);
			}			
		},
      	save 			: function(){
      		var self = this, saved = false, obj = this.get("obj");

      		obj.set("use_water", 1);

      		this.dataSource.sync();
      		this.dataSource.bind("requestEnd", function(e){      			
      			if(e.type=="update" && saved==false){
      				saved = true;

      				self.dataSource.fetch();
      				self.set("obj", null);
      				
      				var window = $("#window").data("kendoWindow");          	         	
          			window.close();
      			}
      		});
      	}
	});
	banhji.wCustomer = kendo.observable({
		lang 					: langVM,
		dataSource 				: dataStore(apiUrl + "contacts"),
		deleteDS 				: dataStore(apiUrl + "invoices"),			
		existingDS 				: dataStore(apiUrl + "contacts"),
		WExistingDS				: dataStore(apiUrl + "contacts"),			
		contactPersonDS			: dataStore(apiUrl + "contact_persons"),		
		currencyDS 				: dataStore(apiUrl + "currencies"),
		paymentTermDS			: dataStore(apiUrl + "payment_terms"),
		paymentMethodDS			: dataStore(apiUrl + "payment_methods"),

		genders					: ["M", "F"],
		statusList 				: [            
			{ "id": 1, "name": "Active" },
			{ "id": 0, "name": "Inactive" },
			{ "id": 2, "name": "Void" }
        ],

        obj 					: null,       
		originalNo				: null,		
		originalWNo				: null,		
		
		isDuplicateNumber 		: false,		
		isDuplicateWNumber 		: false,

		isCompany 				: false,
		isEdit 					: false,		
		
		pageLoad 				: function(id){			
			this.set("isEdit", true);							
			this.loadCustomer(id);
			this.loadContactPerson(id);					
		},		
		loadCustomer 			: function(id){
			var self = this;

			this.dataSource.query({
				filter: { "field":"id", value: id },
				page: 1,
				take: 1
			}).then(function(e){
				var view = self.dataSource.view();

				if(view[0].contact_type_id=="6" || view[0].contact_type_id=="7" || view[0].contact_type_id=="8"){
					self.set("isCompany", true);
				}else{
					self.set("isCompany", false);
				}

				self.set("obj", view[0]);
				self.loadMap();
				self.set("originalNo", view[0].number);				
				self.set("originalWNo", view[0].wnumber);								
			});
		},
		loadContactPerson		: function(id){
			this.contactPersonDS.query({
				filter: { "field":"contact_id", value: id },
				page: 1,
				take: 100
			});
		},
		loadMap 				: function(){
			var obj = this.get("obj"), lat = kendo.parseFloat(obj.latitute),
			lng = kendo.parseFloat(obj.longtitute);
			
			if(lat && lng){
				var myLatLng = {lat:lat, lng:lng};
				var mapOptions = {
					zoom: 17,					
					center: myLatLng,
					mapTypeControl: false,
					zoomControl: false,
					scaleControl: false,
					streetViewControl: false
				};
				var map = new google.maps.Map(document.getElementById('map'),mapOptions);
				var marker = new google.maps.Marker({
					position: myLatLng,
					map: map,
					title: obj.wnumber
				});
			} 
		},
		copyBillTo 				: function(){
			var obj = this.get("obj");

			obj.set("ship_to", obj.bill_to);
		},      	
		checkExistingNumber 	: function(){
			var self = this;	
			
			var number = this.get("obj").number;
			var originalNo = this.get("originalNo");
			
			if(number.length>0 && number!==originalNo){
				this.existingDS.query({
					filter: { field:"number", value: number },
					page: 1,
					pageSize: 100
				}).then(function(e){
					var view = self.existingDS.view();
					
					if(view.length>0){
				 		self.set("isDuplicateNumber", true);						
					}else{
						self.set("isDuplicateNumber", false);
					}
				});							
			}else{
				this.set("isDuplicateNumber", false);
			}			
		},		
		checkExistingWNumber 	: function(){
			var self = this;	
			
			var number = this.get("obj").wnumber;
			var originalNo = this.get("originalWNo");
			
			if(number.length>0 && number!==originalNo){
				this.WExistingDS.query({
					filter: { field:"wnumber", value: number },
					page: 1,
					pageSize: 100
				}).then(function(e){
					var view = self.WExistingDS.view();
					
					if(view.length>0){
				 		self.set("isDuplicateWNumber", true);						
					}else{
						self.set("isDuplicateWNumber", false);
					}
				});							
			}else{
				this.set("isDuplicateWNumber", false);
			}			
		},
		addEmptyContactPerson 	: function(){			
			this.contactPersonDS.add({					 			
				contact_id 			: this.get("obj").id,
      			prefix 				: "",      			
				name 				: "",
				department			: "",
				phone				: "",
				email				: ""
			});								
		},
		deleteContactPerson 	: function(e){
			if (confirm("Are you sure, you want to delete it?")) {
				var d = e.data,
				obj = this.contactPersonDS.getByUid(d.uid);

				this.contactPersonDS.remove(obj);
			}
		},						
		save 					: function(){			
			this.dataSource.sync();
			this.contactPersonDS.sync();							
		},
		delete 					: function(){
			var self = this,
			obj = this.get("obj");

			if (confirm("Are you sure, you want to delete it?")) {				
				this.deleteDS.query({
				  	filter: { field: "contact_id", value: obj.id },
				  	page: 1,
				  	take: 1
				}).then(function() {
					var view = self.deleteDS.view();

					if(view.length>0){
						alert("Sorry, you can not delete.");
					}else{
						var data = self.dataSource.get(obj.id);
				        self.dataSource.remove(data);
				        self.save();
					}
				});											
	    	}
		},
		cancel 					: function(){
			this.dataSource.cancelChanges();
			this.contactPersonDS.cancelChanges();

			window.history.back();
		}
	});
	banhji.wCustomerOrder = kendo.observable({
		lang 				: langVM,		
		dataSource  		: new kendo.data.DataSource({
			transport: {
				read 	: {
					url: apiUrl+"contacts/worder",
					type: "GET",
					headers: {
						"Entity": getDB(),
						"User": banhji.userManagement.getLogin() === null ? '':banhji.userManagement.getLogin().id
					},
					dataType: 'json'
				},							
				update 	: {
					url: apiUrl+"contacts",
					type: "PUT",
					headers: {
						"Entity": getDB(),
						"User": banhji.userManagement.getLogin() === null ? '':banhji.userManagement.getLogin().id
					},
					dataType: 'json'
				},
				parameterMap: function(options, operation) {									
					if(operation === 'read') {
						return {
							location_id: options.location_id
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}				
			},			
            schema: {
                model: {
					id: 'id'
				},
				data: 'results',
				total: 'count'
            },
            batch: true,            
            pageSize: 100
        }),        
		branchDS 			: dataStore(apiUrl + "contacts/branch"),		
		locationDS 			: dataStore(apiUrl + "locations"),
		
		branch_id 			: 0,
		location_id 		: 0,		
				
		pageLoad 			: function(){
			
		},		
		search 				: function(){
			var self = this, 
			location_id = this.get("location_id");

			if(location_id){
				this.dataSource.transport.options.read.data={					
					location_id: location_id
				};
				this.dataSource.read();					
			}else{
				alert("ត្រូវការ Location");
			}			 
		},		
		save 				: function(){
			this.dataSource.sync();
			var saved = false;
			this.dataSource.bind("requestEnd", function(e){				
				if(e.type=="update" && saved==false){
					saved = true;
					$("#ntf1").data("kendoNotification").info("Saved Successful");
				}
			});
		}
	});
	banhji.wInstallment = kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "installments"),		
		deleteDS 			: dataStore(apiUrl + "installments"),		
		contactDS 			: dataStore(apiUrl + "contacts"),
		statusList 			: [            
			{ "id": 1, "name": "Active" },
			{ "id": 0, "name": "Inactive" },
			{ "id": 2, "name": "Void" }
        ],
        obj 				: null,             
        isEdit 				: false,       	

		pageLoad 			: function(id){
			if(id){
				this.set("isEdit", true);
				this.loadInstallment(id);				
			}else{
				this.set("isEdit", false);
				
				this.addEmpty();				
			}									
		},
		loadInstallment 	: function(id){
			var self = this;

			this.dataSource.query({
				filter: { field:"id", value: id },
				page: 1,
  				take: 50
			}).then(function(e) {
			    var view = self.dataSource.view();
			    
			    
			});
		},		
		loadMap 			: function(){
			var obj = this.get("obj"), lat = kendo.parseFloat(obj.latitute),
			lng = kendo.parseFloat(obj.longtitute);

			if(lat && lng){
				var myLatLng = {lat:lat, lng:lng};
				var mapOptions = {
					zoom: 17,					
					center: myLatLng,
					mapTypeControl: false,
					zoomControl: false,
					scaleControl: false,
					streetViewControl: false
				};
				var map = new google.maps.Map(document.getElementById('map'),mapOptions);
				var marker = new google.maps.Marker({
					position: myLatLng,
					map: map,
					title: obj.number
				});
			} 
		},
		loadData 			: function(company_id){			
			if(this.get("current_company_id")!=company_id){
			 	this.set("current_company_id", company_id);

			 	var self = this;
				
				//Location
				this.locationDS.filter([
					{ field:"company_id", value: company_id },
					{ field:"utility_id", value: 2 }
				]);				
				
				//Item
				this.itemDS.filter([
					{ field:"company_id", value: company_id },
					{ field:"category_id", value: 3 }
				]);

				//Fee
				this.set("tariffList", []);
				this.set("exemptionList", []);
				this.set("maintenanceList", []);

				this.feeDS.query({
					filter: [
						{ field:"company_id", value: company_id },
						{ field:"utility_id", value: 2 }
					],
					page: 1,
	  				take: 100
				}).then(function(e) {
				    var view = self.feeDS.view();
				    
				    $.each(view, function(index, value){																						
						if(value.type=="tariff"){							
							self.tariffList.push({
								id 	: value.id,
								name: value.name 
							});
						}
						if(value.type=="exemption"){							
							self.exemptionList.push({
								id 	: value.id,
								name: value.name 
							});
						}
						if(value.type=="maintenance"){
							self.maintenanceList.push({
								id 	: value.id,
								name: value.name 
							});
						}								
					});
				    
				    if(self.get("isEdit")){
				    	var obj = self.dataSource.view();
				    	self.set("obj", obj[0]);			    				    	
			    		self.loadMap();
				    }
				});				
			}						
		},
		checkExistingNumber : function(){
			var self = this;	
			
			var number = this.get("obj").number;
			var originalNo = this.get("originalNo");
			
			if(number.length>0 && number!==originalNo){
				this.existingDS.query({
					filter: { field:"number", value: number },
					page: 1,
					pageSize: 100
				}).then(function(e){
					var view = self.existingDS.view();
					
					if(view.length>0){
				 		self.set("isDuplicateNumber", true);						
					}else{
						self.set("isDuplicateNumber", false);
					}
				});							
			}else{
				this.set("isDuplicateNumber", false);
			}			
		},		
		addEmpty 			: function(){			
        	this.set("isEdit", false);
        	this.dataSource.data([]);

      		if(this.dataSource.total()==0){
				this.dataSource.add({					 			
					company_id 			: this.get("company_id"),
	      			utility_id 			: 2,
	      			location_id 		: 0,
	      			electricity_box_id 	: 0,
	      			contact_id 			: this.get("contact_id"),
	      			item_id 			: 0,
	      			reactive_of 		: 0,
					backup_of 			: 0,
					number 				: "",
					multiplier			: 1,
					max_number			: 10000,
					ear_sealed			: true,
					cover_sealed		: true,				
					memo				: "",
					longtitute 			: "",
					latitute 			: "",	
					status				: 1,
					date_used 			: new Date(),

					item_name 			: "",
					electricity_box_number : "",
					
					amperes 			: {id:0},				
					phases 				: {id:0},				
					voltages 			: {id:0},
					
					tariffs 			: {id:0},				
					exemptions 			: {id:0},								
					maintenances 		: {id:0}
				});
				
				var data = this.dataSource.data();			
				var obj = data[data.length - 1];			
				this.set("obj", obj);
			}				
		},		
		save 				: function(){			
			var self = this, saved = false;

			this.dataSource.sync();			
			this.dataSource.bind("requestEnd", function(e){				
				if(e.type=="create" && saved==false){					
					saved = true;
					banhji.wCustomerCenter.meterDS.fetch();
					self.addEmpty();										
				}

				if(e.type=="update" && saved==false){
					saved = true;
					banhji.wCustomerCenter.meterDS.fetch();
				}

				if(e.type=="destroy" && saved==false){
					saved = true;
					banhji.wCustomerCenter.meterDS.fetch();					
					window.history.back();
				}
			});
		},
		delete 				: function(){
			var self = this,
			id = this.get("obj").id;

			if (confirm("Are you sure, you want to delete it?")) {
				this.deleteDS.query({
				  	filter: { field: "meter_id", value: id },
				  	page: 1,
				  	take: 1
				}).then(function() {
					var view = self.deleteDS.view();

					if(view.length>0){
						alert("Sorry, you can not delete it because it is using now.");
					}else{
						var data = self.dataSource.get(id);
				        self.dataSource.remove(data);
				        self.save();
					}
				});				
	    	}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			window.history.back();
		}		
	});
	banhji.wDeposit =  kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "invoices"),
		lineDS 				: dataStore(apiUrl + "invoices/line"),					
		contactDS  			: dataStore(apiUrl + "contacts"),
		meterDS  			: dataStore(apiUrl + "meters"),
		itemDS 				: dataStore(apiUrl + "items"),
		paymentDS  			: dataStore(apiUrl + "payments"),					
				
		itemList 			: [],

		obj 				: null,
		isEdit 				: false,
		cashier_id			: banhji.userManagement.getLogin() === null ? 0 : banhji.userManagement.getLogin().id,		

		pageLoad 			: function(id){			
			if(id){
				this.set("isEdit", true);							
				this.loadDeposit(id);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					this.set("obj", null);

					this.dataSource.data([]);
					this.lineDS.data([]);
					this.meterDS.data([]);
					this.paymentDS.data([]);

					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}  																							
		},	    
	    loadContact 		: function(id){
			var self = this;			

			this.contactDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.contactDS.view(),
				obj = self.get("obj");
		    	
		    	obj.set("contact_id", view[0].id);
		    	obj.set("payment_method_id", view[0].payment_method_id);
		    	obj.set("account_id", view[0].account_id);
		    	obj.set("deposit_account_id", view[0].deposit_account_id);		    		    			  				  											
				obj.set("locale", view[0].currency[0].locale);
				obj.set("bill_to", view[0].bill_to);				
			});				
		},							
		loadDeposit 		: function(id){
			var self = this;			

			this.dataSource.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var obj = self.dataSource.view()[0];				 			

				self.lineDS.filter({ field: "invoice_id", value: obj.id });
				self.contactDS.filter({ field: "id", value: obj.contact_id });
				self.paymentDS.filter([
					{ field: "reference_id", value: obj.id },
					{ field: "type", value: "wdeposit" }
				]);
				self.set("obj", obj);
			});				
		},
		setItem 			: function(){
			var self = this;

			this.itemDS.query({
				filter: [
					{ field:"item_type_id", value: 1 },
					{ field:"status", value: 1 }
				],
				page: 1,
				take: 100
			}).then(function(){
				var view = self.itemDS.view();

				$.each(view, function(index, value){
					self.itemList.push(value);
				});
			});
		},		
		getRate 			: function(){
			var rate = 1, obj = this.get("obj"),
			contact = this.contactDS.get(obj.contact_id);

			rate = banhji.currency.getAmount(banhji.institute.locale) / banhji.currency.getAmount(contact.currency[0].locale);			

			return rate;		
		},					
		addEmpty 		 	: function(){
			this.dataSource.add({
				company_id 			: 0,
				location_id 		: 0,
				contact_id 			: "",
				payment_term_id		: 0,
				payment_method_id 	: 0,
				reference_id 		: 0,
				deposit_account_id 	: 0,
				account_id 			: 2,					
				vat_id 				: 0,
				biller_id 			: this.get("cashier_id"),
 	    		number 				: "",
			   	type				: "wdeposit",
			   	sub_total 			: 0,				   		   					   				   	
			   	amount				: 0,
			   	vat 				: 0,
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),
			   	due_date 			: "",
			   	check_no 			: "",
			   	bill_to 			: "",
			   	ship_to 			: "",
			   	memo 				: "",
			   	memo2 				: "",
			   	status 				: 0,

			   	segments 			: []
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);

			this.addRow();			
		},		
		contactChanges 		: function(e){	    	
	    	if(e.sender.selectedIndex>0){
		    	var obj = this.get("obj"),		    	
		    	contact = this.contactDS.get(obj.contact_id);		    	
		    	
		    	obj.set("payment_method_id", contact.payment_method_id);
		    	obj.set("account_id", contact.account_id);
		    	obj.set("deposit_account_id", contact.deposit_account_id);
		    	obj.set("locale", contact.currency[0].locale);
		    	obj.set("bill_to", contact.bill_to);		    	
	    	}
	    },
	    changes				: function(){
			var obj = this.get("obj"),
			total = 0;			
			
			$.each(this.lineDS.data(), function(index, value) {				
				total += value.amount;				
	        });
	       		
			obj.set("amount", total);	    	
		},
	    itemChanges 		: function(e){								
			var data = e.data, obj = this.get("obj");

			if(data.item_id>0 && obj.contact_id>0){
				var item = this.itemDS.get(data.item_id),
				contact = this.contactDS.get(obj.contact_id),							
				rate = kendo.parseFloat(contact.currency[0].rate)/kendo.parseFloat(item.item_prices[0].currency[0].rate);
		        	        
	    		data.set("description", item.name);
	    		data.set("amount", item.item_prices[0].price*rate);		        
		        data.set("rate", rate);		        	        
		        		        	        
		        this.changes();
	        }else{
	        	alert("Please select customer!");
	        }	                	        	
		},
		addRow 				: function(){				
			var obj = this.get("obj");		
						
			this.lineDS.add({					
				invoice_id 			: 0,
				item_id 			: "",
				measurement_id 		: 0,
				meter_record_id	 	: 0,
				description 		: "",				
				unit 	 			: 1,
				price 				: 0,												
				amount 				: 0,
				rate				: 1,
				locale				: obj.locale,
				has_vat 			: false,
				type 				: "",

				priceList 			: []
			});																	
		},		
		addPayment 			: function(meter_id){
			var obj = this.get("obj"), rate = this.getRate(),
			deposit = this.dataSource.at(0);

			this.paymentDS.add({
				company_id 			: obj.company_id,
				contact_id 			: obj.contact_id,
				cashier_id 			: this.get("cashier_id"),
				meter_id 			: meter_id,							
				reference_id		: deposit.id,														
				payment_method_id	: obj.payment_method_id,
				account_id			: obj.account_id,
				check_no			: obj.check_no,							
				type 				: "wdeposit",
				amount 				: obj.amount,
				fine 				: 0,
				discount 			: 0,
				rate 				: rate,
				locale 				: obj.locale,
				payment_date		: kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd")
			});

			this.paymentDS.sync();					
		},
		meterSync 		: function(deposit_id){
	    	var dfd = $.Deferred(), obj = this.get("obj"),
			contact = this.contactDS.get(obj.contact_id);

			this.meterDS.add({
				company_id 			: contact.wbranch_id,
      			utility_id 			: 2,
      			deposit_id 			: deposit_id,
      			invoice_id 			: 0,
      			location_id 		: contact.wlocation_id,
      			ampere_id 			: 0,
      			phase_id 			: 0,
      			voltage_id 			: 0,
      			electricity_box_id 	: 0,
      			contact_id 			: obj.contact_id,
      			item_id 			: 0,
      			reactive_of 		: 0,
				backup_of 			: 0,
				number 				: "",				
				multiplier			: 1,
				max_number			: 10000,
				startup_reading 	: 0,
				ear_sealed			: true,
				cover_sealed		: true,				
				memo				: "",
				longtitute 			: "",
				latitute 			: "",	
				status				: 0,
				date_used 			: "",

				item_name 			: "",
				electricity_box_number : "",
				
				amperes 			: {id:0},				
				phases 				: {id:0},				
				voltages 			: {id:0},
				
				tariffs 			: {id:0},				
				exemptions 			: {id:0},								
				maintenances 		: {id:0}
			});	        

	    	this.meterDS.sync();
		    this.meterDS.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
	    invoiceSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		save 				: function(){							
		    var self = this, obj = this.get("obj"), rate = this.getRate();

		    if(obj.amount>0){	
		        obj.set("amount", kendo.parseFloat(obj.amount)*rate);
		        obj.set("rate", rate);				        
		       		    	
		    	if(this.get("isEdit")){
		    		this.dataSource.sync();
		    		this.lineDS.sync();

		    		if(this.lineDS.hasChanges()){
		    			var pay = this.paymentDS.at(0);
		    			pay.set("amount", obj.amount);
		    			this.paymentDS.sync();
		    		}		    		
		    	}else{
		    		//Add brand new invoice
					this.invoiceSync()
					.then(function(invoice){
						$.each(self.lineDS.data(), function(index, value){										
							value.set("invoice_id", invoice[0].id);
							value.set("rate", rate);
						});

						self.lineDS.sync();						

						return self.meterSync(invoice[0].id);
					}).then(function(meter){
						self.addPayment(meter[0].id);
					}).then(function(){												
						self.dataSource.data([]);
						self.lineDS.data([]);
						self.meterDS.data([]);
						self.paymentDS.data([]);

						banhji.wCustomerCenter.meterDS.fetch();
						window.history.back();
					});
				}
			}else{
				alert("សូមមេត្តា បញ្ចូលចំនួនប្រាក់កក់");
			}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();
			window.history.back();
		}	 		
	});
	banhji.wDepositWitdraw =  kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "invoices"),
		prevDepositDS 		: dataStore(apiUrl + "invoices"),							
		contactDS  			: dataStore(apiUrl + "contacts"),
		meterDS  			: dataStore(apiUrl + "meters"),		
		paymentDS  			: dataStore(apiUrl + "payments"),
		obj 				: null,
		meter 				: null,
		isEdit 				: false,
		cashier_id			: banhji.userManagement.getLogin() === null ? 0 : banhji.userManagement.getLogin().id,
		total 				: 0,
		pageLoad 			: function(id){			
			if(id){
				this.set("isEdit", true);							
				this.loadDeposit(id);
			}else{				
				if(this.get("isEdit")){
					this.set("isEdit", false);
					
					this.dataSource.data([]);					
					this.meterDS.data([]);
					this.paymentDS.data([]);

					this.addEmpty();
				}else if(this.dataSource.total()==0){
					this.addEmpty();					
				}								
			}  																							
		},	    
		loadMeter 		: function(id){
			var self = this;			

			this.meterDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.meterDS.view();

				self.set("meter", view[0]);
				self.loadContact(view[0].contact_id);
				self.loadPrevDeposit(view[0].deposit_id);		    			    	    					
			});				
		},
		loadContact 		: function(id){
			var self = this;			

			this.contactDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.contactDS.view(),
				obj = self.get("obj");
		    	
		    	obj.set("contact_id", view[0].id);		    	
		    	obj.set("deposit_account_id", view[0].deposit_account_id);		    		    			  				  											
				obj.set("locale", view[0].currency[0].locale);
				obj.set("bill_to", view[0].bill_to);
			});				
		},
		loadPrevDeposit		: function(id){
			var self = this;			

			this.prevDepositDS.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var view = self.prevDepositDS.view();
				
		    	self.set("total", kendo.toString(view[0].amount*-1, view[0].locale=="km-KH"?"c0":"c", view[0].locale));		    					
			});				
		},							
		loadDeposit 		: function(id){
			var self = this;			

			this.dataSource.query({    			
				filter: { field:"id", value: id },
				page: 1,
				take: 100
			}).then(function(e){
				var obj = self.dataSource.view()[0];				 			

				self.lineDS.filter({ field: "invoice_id", value: id });
				self.contactDS.filter({ field: "id", value: obj.contact_id });
				self.paymentDS.filter([
					{ field: "reference_id", value: id },
					{ field: "type", value: "wdeposit" }
				]);
				self.set("obj", obj);
			});				
		},			
		getRate 			: function(){
			var rate = 1, obj = this.get("obj"),
			contact = this.contactDS.get(obj.contact_id);

			rate = banhji.currency.getAmount(banhji.institute.locale) / banhji.currency.getAmount(contact.currency[0].locale);			

			return rate;		
		},
		contactChanges 		: function(e){	    	
	    	if(e.sender.selectedIndex>0){
		    	var obj = this.get("obj"),		    	
		    	contact = this.contactDS.get(obj.contact_id);		    	
		    	
		    	obj.set("account_id", contact.account_id);
		    	obj.set("deposit_account_id", contact.deposit_account_id);
		    	obj.set("locale", contact.currency[0].locale);
		    	obj.set("bill_to", contact.bill_to);		    	
	    	}
	    },					
		addEmpty 		 	: function(){
			this.set("obj", null);

			this.dataSource.add({
				company_id 			: 0,
				location_id 		: 0,
				contact_id 			: "",
				payment_term_id		: 0,
				payment_method_id 	: 0,
				reference_id 		: 0,
				deposit_account_id 	: 0,
				account_id 	 		: 2,					
				vat_id 				: 0,
				biller_id 			: this.get("cashier_id"),
 	    		number 				: "",
			   	type				: "wdeposit",
			   	sub_total 			: 0,				   		   					   				   	
			   	amount				: 0,
			   	vat 				: 0,
			   	rate				: 1,			   	
			   	locale 				: "km-KH",			   	
			   	issued_date 		: new Date(),
			   	due_date 			: "",
			   	check_no 			: "",
			   	bill_to 			: "",
			   	ship_to 			: "",
			   	memo 				: "",
			   	memo2 				: "",
			   	status 				: 0,

			   	segments 			: []
	    	});		    		
			
			var data = this.dataSource.data();
			var obj = data[data.length-1];			
			this.set("obj", obj);				
		},				
		addPayment 			: function(invoice_id){
			var obj = this.get("obj"), rate = this.getRate(),
			meter = this.meterDS.at(0);

			this.paymentDS.add({
				company_id 			: obj.company_id,
				contact_id 			: obj.contact_id,
				cashier_id 			: this.get("cashier_id"),
				meter_id 			: meter.id,							
				reference_id		: invoice_id,														
				payment_method_id	: obj.payment_method_id,
				account_id			: obj.account_id,
				check_no			: obj.check_no,							
				type 				: "wdeposit",
				amount 				: obj.amount,
				fine 				: 0,
				discount 			: 0,
				rate 				: rate,
				locale 				: obj.locale,
				payment_date		: kendo.toString(new Date(obj.issued_date), "yyyy-MM-dd")
			});

			this.paymentDS.sync();					
		},
		invoiceSync 		: function(){
	    	var dfd = $.Deferred();	        

	    	this.dataSource.sync();
		    this.dataSource.bind("requestEnd", function(e){			    	
				dfd.resolve(e.response.results);    				
		    });

		    return dfd;	    		    	
	    },
		save 				: function(){
			if(this.dataSource.hasChanges()){							
			    var self = this, obj = this.get("obj"), rate = this.getRate(),
			    payment = this.prevDepositDS.at(0);
		    		    
		        obj.set("amount", kendo.parseFloat(payment.amount)*rate*-1);
		        obj.set("rate", rate);				        
		       		    	
		    	if(this.get("isEdit")){
		    		this.dataSource.sync();	    					    		
		    	}else{
		    		//Add brand new invoice
					this.invoiceSync()
					.then(function(invoice){						
						var meter = self.meterDS.at(0);
						meter.set("status", 2);

						self.meterDS.sync();
						self.addPayment(invoice[0].id);										
					}).then(function(){												
						self.dataSource.data([]);
						self.prevDepositDS.data([]);						
						self.meterDS.data([]);
						self.paymentDS.data([]);

						banhji.wCustomerCenter.meterDS.fetch();
						window.history.back();
					});
				}
			}			
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			this.lineDS.cancelChanges();
			window.history.back();
		}	 		
	});	
	banhji.wMeter = kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "meters"),
		existingDS 			: dataStore(apiUrl + "meters"),
		deleteDS 			: dataStore(apiUrl + "meters/record"),		
		contactDS 			: dataStore(apiUrl + "contacts"),					
		locationDS 			: dataStore(apiUrl + "locations"),
		itemDS 				: dataStore(apiUrl + "items"),
		feeDS 				: dataStore(apiUrl + "fees"),
		statusList 			: [            
			{ "id": 1, "name": "Active" },
			{ "id": 0, "name": "Inactive" },
			{ "id": 2, "name": "Void" }
        ],
        tariffList 			: [],
        exemptionList 		: [],
        maintenanceList 	: [],
        deposit_link 		: null,
        invoice_link 		: null,
        deposit_amount 		: 0,
        invoice_amount 		: 0,
        obj 				: null,             
        current_company_id 	: 0,
        current_meter_id 	: 0,
        isDuplicateNumber 	: false,
        originalNo 			: null,
		pageLoad 			: function(id){
			this.loadMeter(id);									
		},		
		loadMeter 			: function(id){
			var self = this;

			if(this.get("current_meter_id")!=id){
			 	this.set("current_meter_id", id);				

				this.dataSource.query({
					filter: { field:"id", value: id },
					page: 1,
	  				take: 50
				}).then(function(e) {
				    var view = self.dataSource.view();

				    self.set("originalNo", view[0].number);				    
				    self.contactDS.filter({ field:"id", value:view[0].contact_id });		    			    	
			    	self.contactDS.filter([]);

			    	return self.feeQuery(view[0].company_id);	    		   	    			    			    				    
				}).then(function(fee){
					var view = self.dataSource.view();					
					
					self.set("obj", view[0]);
					self.set("deposit_link", "#/wDeposit/"+view[0].deposit_id);
					self.set("invoice_link", "#/wMeterInvoice/"+view[0].invoice_id);

					if(view[0].deposit[0]){
						self.set("deposit_amount", kendo.toString(kendo.parseFloat(view[0].deposit[0].amount), "c", view[0].deposit[0].locale));
					}else{
						self.set("deposit_amount", 0);
					}

					if(view[0].invoice[0]){
						self.set("invoice_amount", kendo.toString(kendo.parseFloat(view[0].invoice[0].amount), "c", view[0].invoice[0].locale));
					}else{
						self.set("invoice_amount", 0);
					}					
										
					self.loadMap();
				});
			}
		},		
		loadMap 			: function(){
			var obj = this.get("obj"), lat = kendo.parseFloat(obj.latitute),
			lng = kendo.parseFloat(obj.longtitute);

			if(lat && lng){
				var myLatLng = {lat:lat, lng:lng};
				var mapOptions = {
					zoom: 17,					
					center: myLatLng,
					mapTypeControl: false,
					zoomControl: false,
					scaleControl: false,
					streetViewControl: false
				};
				var map = new google.maps.Map(document.getElementById('map'),mapOptions);
				var marker = new google.maps.Marker({
					position: myLatLng,
					map: map,
					title: obj.number
				});
			} 
		},
		feeQuery 			: function(company_id){
			var self = this, dfd = $.Deferred();

			if(this.get("current_company_id")!=company_id){
			 	this.set("current_company_id", company_id);
				
		    	this.feeDS.query({
					filter: [
						{ field:"company_id", value: company_id },
						{ field:"utility_id", value: 2 }
					]
				}).then(function(e) {
					var view = self.feeDS.view();

					self.set("tariffList", []);
					self.set("exemptionList", []);
					self.set("maintenanceList", []);

					$.each(view, function(index, value){																						
						if(value.type=="tariff"){							
							self.tariffList.push({
								id 	: value.id,
								name: value.name 
							});
						}
						if(value.type=="exemption"){							
							self.exemptionList.push({
								id 	: value.id,
								name: value.name 
							});
						}
						if(value.type=="maintenance"){
							self.maintenanceList.push({
								id 	: value.id,
								name: value.name 
							});
						}								
					});

					dfd.resolve(view);				    			   		    			
				});
			}			

		    return dfd;	    		    	
	    },	    	
		contactChanges 		: function(e){
			if(e.sender.selectedIndex>0){
				var obj = this.get("obj"),
				contact = this.contactDS.get(obj.contact_id);

				obj.set("company_id", contact.wbranch_id);
				obj.set("location_id", contact.wlocation_id);
				
				this.feeQuery(contact.wbranch_id);
			}
		},
		checkExistingNumber : function(){
			var self = this;	
			
			var number = this.get("obj").number;
			var originalNo = this.get("originalNo");
			
			if(number.length>0 && number!==originalNo){
				this.existingDS.query({
					filter: { field:"number", value: number },
					page: 1,
					pageSize: 100
				}).then(function(e){
					var view = self.existingDS.view();
					
					if(view.length>0){
				 		self.set("isDuplicateNumber", true);						
					}else{
						self.set("isDuplicateNumber", false);
					}
				});							
			}else{
				this.set("isDuplicateNumber", false);
			}			
		},				
		save 				: function(){			
			var self = this, saved = false;

			this.dataSource.sync();			
			this.dataSource.bind("requestEnd", function(e){				
				if(e.type=="create" && saved==false){					
					saved = true;
					banhji.wCustomerCenter.meterDS.fetch();
					self.addEmpty();										
				}

				if(e.type=="update" && saved==false){
					saved = true;
					banhji.wCustomerCenter.meterDS.fetch();
					window.history.back();
				}

				if(e.type=="destroy" && saved==false){
					saved = true;
					banhji.wCustomerCenter.meterDS.fetch();					
					window.history.back();
				}
			});
		},
		delete 				: function(){
			var self = this,
			obj = this.get("obj");

			if (confirm("Are you sure, you want to delete it?")) {
				this.deleteDS.query({
				  	filter: { field: "meter_id", value: obj.id },
				  	page: 1,
				  	take: 1
				}).then(function() {
					var view = self.deleteDS.view();

					if(view.length>0){
						alert("Sorry, you can not delete it because it is using now.");
					}else{
						var data = self.dataSource.get(obj.id);
				        self.dataSource.remove(data);
				        self.save();
					}
				});				
	    	}
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			window.history.back();
		}		
	});
	banhji.wReadingCenter = kendo.observable({
		lang 				: langVM,		
		dataSource 			: dataStore(apiUrl + "meters/record"),
		meterDS 			: dataStore(apiUrl + "meters"),
		meter_id 			: null,
		rowIndex 			: 0,
		pageLoad 			: function(id){
			if(id){
				this.dataSource.query({
					filter: { field:"meter_id", value: id },
					sort: { field:"month_of", dir:"desc" },
					page: 1,
					take: 100
				});
			}						
		},			
		search 				: function(){											
			var meter_id = this.get("meter_id");
			this.set("rowIndex", 0);
			
			if(meter_id){
				this.dataSource.query({
					filter: { field:"meter_id", value: meter_id },
					sort: { field:"month_of", dir:"desc" },
					page: 1,
					take: 100
				});
			}					
		}  	  			
	});
	banhji.wEditReading = kendo.observable({
		lang 				: langVM,		
		dataSource 			: dataStore(apiUrl + "meters/record"),
		meterDS	 			: dataStore(apiUrl + "meters"),
		readerDS 			: dataStore(apiUrl + "employees"),
		invoiceDS 			: dataStore(apiUrl + "invoices"),
		invoiceLineDS 		: dataStore(apiUrl + "invoices/line"),
		feeDS 		 		: dataStore(apiUrl + "fees"),
		tariffItemDS 		: dataStore(apiUrl + "fees/item"),
		obj 				: null,
		invoice 			: null,
		hasInvoice 			: false,
		originalAmount 		: 0,
		pageLoad 			: function(id){
			var self = this;

			this.dataSource.query({
				filter: { field:"id", value: id },				
				page: 1,
				take: 100
			}).then(function(e) {
			    var view = self.dataSource.view();

			    self.set("obj", view[0]);
			    self.loadMeter(view[0].meter_id);
			    self.loadInvoiceLine(view[0].id);			    
			});
		},
		loadInvoice 		: function(id){
			var self = this;

			this.invoiceDS.query({
				filter: { field:"id", value: id },				
				page: 1,
				take: 100
			}).then(function(e) {
			    var view = self.invoiceDS.view();

			    self.set("invoice", view[0]);
			    self.set("originalAmount", view[0].amount);			    
			});
		},
		loadInvoiceLine 	: function(id){
			var self = this;

			this.invoiceLineDS.query({
				filter: { field:"meter_record_id", value: id },				
				page: 1,
				take: 100
			}).then(function(e) {
			    var view = self.invoiceLineDS.view();

			    if(view.length>0){
			    	self.set("hasInvoice", true);
			    	self.loadInvoice(view[0].invoice_id);			    	
			    }else{
			    	self.set("hasInvoice", false);
			    }
			});
		},
		loadMeter 			: function(id){
			var self = this;

			this.meterDS.query({
				filter: { field:"id", value: id },				
				page: 1,
				take: 100
			}).then(function(e) {
			    var view = self.meterDS.view();

			    self.feeDS.filter({ field:"company_id", value: view[0].company_id });
			    self.tariffItemDS.query({
					filter: { field:"fee_id", value: view[0].tariff_id },				
					sort: { field: "usage", dir: "desc" },
					page: 1,
					take: 100
				});
			});
		},
		readingChanges 		: function(){
			var obj = this.get("obj"),			
			usage = obj.current - obj.previous;

			obj.set("usage", usage);
		},
		save 			: function(){
			var obj = this.get("obj"),			
			usage = obj.current - obj.previous;			

			if(this.get("hasInvoice")){
				var line = this.invoiceLineDS.at(0),
				meter = this.meterDS.at(0),				
				exemption = this.feeDS.get(meter.exemption_id),
				maintenance = this.feeDS.get(meter.maintenance_id),
				usage = obj.current - obj.previous,
				price = 0,
				amount = 0,
				originalAmount = this.get("originalAmount");
				
				//Apply usage exemption
				if(exemption.unit=="usage"){
					var exemptionUsage = kendo.parseInt(exemption.amount);
					if(usage>exemptionUsage){
						usage -= exemptionUsage;
					}else{
						usage = 0;
					}
				}

				//Apply tariff
				$.each(this.tariffItemDS.data(), function(index, value){
					if(usage>=value.usage){
						if(value.is_flat){								
							amount = kendo.parseFloat(value.price);
						}else{								
							amount = usage * kendo.parseFloat(value.price);
						}

						price = value.price;

						return false;
					}										
				});

				//Apply money exemption
				if(exemption.unit=="money"){
					var exemptionAmount = kendo.parseFloat(exemption.amount);

					if(amount>exemptionAmount){
						amount -=  exemptionAmount;
					}else{
						amount = 0;
					}
				}

				//Apply % exemption
				if(exemption.unit=="%"){
					var exemptionPercentTageAmount = amount * kendo.parseFloat(exemption.amount);

					if(amount>exemptionPercentTageAmount){
						amount -=  exemptionPercentTageAmount;
					}else{
						amount = 0;
					}					
				}							

				//Update line
				$.each(this.invoiceLineDS.data(), function(index, value){
					if(value.type=="tariff"){
						value.set("unit", usage);
						value.set("price", price);
						value.set("amount", amount);
					}										
				});

				var inv = this.get("invoice"),
				diffAmount = originalAmount - amount,
				newBalance = originalAmount - diffAmount;

				inv.set("amount", newBalance);
				
				this.invoiceLineDS.sync();
				this.set("originalAmount", 0);			
			}

			this.dataSource.sync();
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			window.history.back();
		}			
	});
	banhji.wReading = kendo.observable({
		lang 				: langVM,						
		dataSource 			: new kendo.data.DataSource({
			transport: {
				read: {
					url: apiUrl + "meters/wreading",
					headers: {
						"Entity": getDB()
					},
					type: "GET",
					dataType: "json"
				}			  	
			},						
			pageSize: 100,							  	
		  	schema: {
				model: {
					id: "id"
				},
				data: "results",
				total: "count"	
			}
		}),
		readerDS 			: dataStore(apiUrl + "contacts/employee"),
		branchDS 			: dataStore(apiUrl + "contacts/branch"),		
		locationDS 			: dataStore(apiUrl + "locations"),		
		meterDS				: dataStore(apiUrl + "meters"),
		meterRecordDS		: dataStore(apiUrl + "meters/record"),
		monthOfSearch 		: null,		
		brand_id 			: null,
		location_id 		: null,
		meter_id 			: null,
		month_of 			: new Date(),
		from_date			: new Date(),
		to_date				: new Date(),
		read_by 			: null,
		pageLoad 			: function(){
										
		},
		strMonthOf 			: function(){
			return "អំនានប្រចាំខែ " + kendo.toString(this.get("monthOfSearch"), "MM-yyyy");
		},		
		search 				: function(){											
			var monthOfSearch = this.get("monthOfSearch"),
			location_id = this.get("location_id"),
			meter_id = this.get("meter_id");
					
			if(monthOfSearch){				
				if(location_id || meter_id){						
					var monthOf = new Date(monthOfSearch);
					monthOf.setDate(1);
					monthOf = kendo.toString(monthOf, "yyyy-MM-dd");
										
					this.dataSource.transport.options.read.data={
						month_of 	: monthOf,
						location_id : location_id,
						meter_id 	: meter_id
					};
					this.dataSource.read();	
				}
			}else{
				alert("សូមSelect ខែ");
			}		
		},						
		isSupported 		: function() {
			// check if File API is supported in this browser
			if(window.File && window.FileReader && window.FileList && window.Blob) {
				return true;
			} else {
				return false;
			}
		},			
		readFile 			: function(e){
			e.preventDefault();
			var self = this;

			var reader = new FileReader();					
			if(this.get("isSupported")) {
				var file = document.getElementById('myFile').files[0];
				// var file = $('#myFile').get(0).files[0];

				if(file !== undefined) {
					this.set("uploadStatus", "");
					reader.readAsText(file);
					
					reader.onload = function() {						
 						var result = reader.result.split('\r');	 						
 						
						// for (var i = 1; i < result.length; i ++) {								
						// 	var data = result[i].split(',');
						// 	readingList.push(data);															
						// }

						self.dataSource.transport.options.read.data = result;
						self.dataSource.read();																		
					}

					reader.onerror = function() {							
						this.set("uploadStatus", reader.error);
					}						
				} else {
					this.set("uploadStatus", "Please select file");
				}

			} else {
				this.set("uploadStatus", "Invalid file!");					
			}
		},				
      	onChange 			: function(e) {
      		e.preventDefault();

      		var self = this;
      		var selected = e.data;            
            
            if(kendo.parseInt(selected.current)>0){        
		        var add_up = 0;
		        if(selected.new_round){
		        	add_up = kendo.parseInt(selected.max_number);            	
	        	}
	        	var usage = ((kendo.parseInt(selected.current) + add_up) - kendo.parseInt(selected.previous))*selected.multiplier;
	            selected.set("usage", usage);
	            
	            if(usage<0){
					selected.set("isValid", false);
				}else{
					selected.set("isValid", true);
				}
			}else{
				selected.set("usage", "");
				selected.set("isValid", true);
			}

			var nextID = selected.index+1;
			$(".txt"+nextID).focus();            
        },       
        total 				: function() {      		
	        var sum = 0;

	        $.each(this.dataSource.data(), function(index, value) {	        		            
	        	sum += kendo.parseInt(value.usage);		        	          
	        });

	        return kendo.toString(sum, "n0");
	    },
	    checkInput 			: function() {	        
	        var isValid = true;
	        var hasReading = false;

	        $.each(this.dataSource.data(), function(index, value) {
	        	if(value.current>0){
	        		hasReading = true;
	        	}

	        	if(value.isValid==false){
	        		isValid = false;
	        	}		        	          
	        });

	        if(hasReading==false){
	        	isValid = false;
	        }

	        return isValid;
	    },             	
      	save 				: function(){
      		var self = this;	      		     			
  			var monthOf = new Date(this.get("month_of"));
			monthOf.setDate(1);
			monthOf = kendo.toString(monthOf, "yyyy-MM-dd");

			$.each(this.dataSource.data(), function(index, value){
				if(kendo.parseInt(value.current)>0){
					self.meterRecordDS.add({				
						meter_id	: value.id,
						read_by 	: self.get("read_by"),
						input_by 	: 0,						
					   	previous	: value.previous,
					   	current 	: value.current,					   	
					   	new_round	: false,
					   	usage 		: value.usage,					   	
					   	month_of 	: monthOf,
					   	from_date	: kendo.toString(self.get("from_date"), "yyyy-MM-dd"),						   
					   	to_date 	: kendo.toString(self.get("to_date"), "yyyy-MM-dd"),
					   	memo 		: ""
					});
				}
			});

			this.meterRecordDS.sync();
			var saved = false;				
			this.meterRecordDS.bind("requestEnd", function(e){				
				if(saved==false){
					saved = true;

					self.meterRecordDS.data([]);
					self.dataSource.data([]);
				}
			});      			
      	}      			
	});
	banhji.wIRReader = kendo.observable({
		lang 				: langVM,						
		dataSource 			: new kendo.data.DataSource({
			transport: {
				read: {
					url: apiUrl + "meters/wreading",
					headers: {
						"Entity": getDB()
					},
					type: "GET",
					dataType: "json"
				}			  	
			},						
			pageSize: 100,							  	
		  	schema: {
				model: {
					id: "id"
				},
				data: "results",
				total: "count"	
			}
		}),
		readerDS 			: dataStore(apiUrl + "contacts/employee"),
		branchDS 			: dataStore(apiUrl + "contacts/branch"),		
		locationDS 			: dataStore(apiUrl + "locations"),		
		meterDS				: dataStore(apiUrl + "meters"),
		meterRecordDS		: dataStore(apiUrl + "meters/record"),
		monthOfSearch 		: null,		
		brand_id 			: null,
		location_id 		: null,
		meter_id 			: null,
		month_of 			: new Date(),
		from_date			: new Date(),
		to_date				: new Date(),
		read_by 			: null,
		pageLoad 			: function(){
										
		},
		strMonthOf 			: function(){
			return "អំនានប្រចាំខែ " + kendo.toString(this.get("monthOfSearch"), "MM-yyyy");
		},		
		search 				: function(){											
			var monthOfSearch = this.get("monthOfSearch"),
			location_id = this.get("location_id"),
			meter_id = this.get("meter_id");
					
			if(monthOfSearch){				
				if(location_id || meter_id){						
					var monthOf = new Date(monthOfSearch);
					monthOf.setDate(1);
					monthOf = kendo.toString(monthOf, "yyyy-MM-dd");
										
					this.dataSource.transport.options.read.data={
						month_of 	: monthOf,
						location_id : location_id,
						meter_id 	: meter_id
					};
					this.dataSource.read();	
				}
			}else{
				alert("សូមSelect ខែ");
			}		
		},						
		isSupported 		: function() {
			// check if File API is supported in this browser
			if(window.File && window.FileReader && window.FileList && window.Blob) {
				return true;
			} else {
				return false;
			}
		},			
		readFile 			: function(e){
			e.preventDefault();
			var self = this;

			var reader = new FileReader();					
			if(this.get("isSupported")) {
				var file = document.getElementById('myFile').files[0];
				// var file = $('#myFile').get(0).files[0];

				if(file !== undefined) {
					this.set("uploadStatus", "");
					reader.readAsText(file);
					
					reader.onload = function() {						
 						var result = reader.result.split('\r');	 						
 						
						// for (var i = 1; i < result.length; i ++) {								
						// 	var data = result[i].split(',');
						// 	readingList.push(data);															
						// }

						self.dataSource.transport.options.read.data = result;
						self.dataSource.read();																		
					}

					reader.onerror = function() {							
						this.set("uploadStatus", reader.error);
					}						
				} else {
					this.set("uploadStatus", "Please select file!");
				}

			} else {
				this.set("uploadStatus", "Invalid file!");					
			}
		},				
      	onChange 			: function(e) {
      		e.preventDefault();

      		var self = this;
      		var selected = e.data;            
            
            if(kendo.parseInt(selected.current)>0){        
		        var add_up = 0;
		        if(selected.new_round){
		        	add_up = kendo.parseInt(selected.max_number);            	
	        	}
	        	var usage = ((kendo.parseInt(selected.current) + add_up) - kendo.parseInt(selected.previous))*selected.multiplier;
	            selected.set("usage", usage);
	            
	            if(usage<0){
					selected.set("isValid", false);
				}else{
					selected.set("isValid", true);
				}
			}else{
				selected.set("usage", "");
				selected.set("isValid", true);
			}

			var nextID = selected.index+1;
			$(".txt"+nextID).focus();            
        },       
        total 				: function() {      		
	        var sum = 0;

	        $.each(this.dataSource.data(), function(index, value) {	        		            
	        	sum += kendo.parseInt(value.usage);		        	          
	        });

	        return kendo.toString(sum, "n0");
	    },
	    checkInput 			: function() {	        
	        var isValid = true;
	        var hasReading = false;

	        $.each(this.dataSource.data(), function(index, value) {
	        	if(value.current>0){
	        		hasReading = true;
	        	}

	        	if(value.isValid==false){
	        		isValid = false;
	        	}		        	          
	        });

	        if(hasReading==false){
	        	isValid = false;
	        }

	        return isValid;
	    },             	
      	save 				: function(){
      		var self = this;	      		     			
  			var monthOf = new Date(this.get("month_of"));
			monthOf.setDate(1);
			monthOf = kendo.toString(monthOf, "yyyy-MM-dd");

			$.each(this.dataSource.data(), function(index, value){
				if(kendo.parseInt(value.current)>0){
					self.meterRecordDS.add({				
						meter_id	: value.id,
						read_by 	: self.get("read_by"),
						input_by 	: 0,						
					   	previous	: value.previous,
					   	current 	: value.current,					   	
					   	new_round	: false,
					   	usage 		: value.usage,					   	
					   	month_of 	: monthOf,
					   	from_date	: kendo.toString(self.get("from_date"), "yyyy-MM-dd"),						   
					   	to_date 	: kendo.toString(self.get("to_date"), "yyyy-MM-dd"),
					   	memo 		: ""
					});
				}
			});

			this.meterRecordDS.sync();
			var saved = false;				
			this.meterRecordDS.bind("requestEnd", function(e){				
				if(saved==false){
					saved = true;

					self.meterRecordDS.data([]);
					self.dataSource.data([]);
				}
			});      			
      	}      			
	});
	banhji.wInvoice = kendo.observable({
		lang 				: langVM,		
		dataSource  		: dataStore(apiUrl + "invoices/uInvoice"),
		meterDS  			: dataStore(apiUrl + "meters"),		
		branchDS 			: dataStore(apiUrl + "contacts/branch"),		
		locationDS 			: dataStore(apiUrl + "locations"),				
		feeDS 		 		: dataStore(apiUrl + "fees"),
		tariffItemDS 		: dataStore(apiUrl + "fees/item"),		
		readingDS 			: new kendo.data.DataSource({
			transport: {
				read: {
					url: apiUrl + "meters/reading_for_invoice",
					headers: {
						"Entity": getDB()
					},
					type: "GET",
					dataType: "json"
				}			  	
			},						
			pageSize: 100,							  	
		  	schema: {
				model: {
					id: "id"
				},
				data: "results",
				total: "count"	
			}		  			
		}),

		chkAll 			: false,		
		monthOfSearch 	: null,
		company_id 		: null,
		location_id 	: null,
		meter_id 		: null,		
		biller 			: banhji.userManagement.getLogin() === null ? '':banhji.userManagement.getLogin().id,
				
		issued_date		: new Date(),
		payment_date 	: new Date(),
		due_date 		: new Date(),	
		month_of 		: new Date(),
		
		pageLoad 		: function(){
			this.feeDS.filter({ field:"utility_id", value: 2 });			
			this.tariffItemDS.query({
				filter: [],				
				sort: [					
					{ field: "fee_id", dir: "asc" },
					{ field: "usage", dir: "desc" }
				],
				page: 1,
				take: 100
			});			
		},		
		search 			: function(){
			var monthOfSearch = this.get("monthOfSearch"),
			location_id = this.get("location_id"),
			meter_id = this.get("meter_id");
					
			if(monthOfSearch){				
				if(location_id || meter_id){						
					var monthOf = new Date(monthOfSearch);
					monthOf.setDate(1);
					monthOf = kendo.toString(monthOf, "yyyy-MM-dd");
										
					this.readingDS.transport.options.read.data={
						month_of 	: monthOf,
						location_id : location_id,
						meter_id 	: meter_id
					};
					this.readingDS.read();	
				}
			}else{
				alert("សូមSelect ខែ");
			}
		},	
		checkAll 		: function(e){
			e.preventDefault();

			var bolValue = this.get("chkAll");
			var data = this.readingDS.data();
			
			if(data.length>0){						
		        $.each(data, function(index, value){		        			        	
		        	value.set("isCheck", bolValue);		        	
		        });		        			        
	        }							
		},		
        total 			: function(){      		
	        var sum = 0;

	        $.each(this.readingDS.data(), function(index, value) {	        		            
	        	sum += kendo.parseInt(value.usage);		        	          
	        });

	        return kendo.toString(sum, "n0");
	    },	    	 
		save 	 		: function(){
			var self = this,
			data = this.readingDS.data(),
			companyRate =  banhji.currency.getAmount(banhji.institute.locale),
			monthOf = new Date(this.get("month_of"));

			monthOf.setDate(1);
			monthOf = kendo.toString(monthOf, "yyyy-MM-dd");
					
			//Get unique contact_id
			var uniqueCustomerID = [];
			$.each(data, function(index, value){
				if(value.isCheck){				
			    	if($.inArray(value.customer[0].id, uniqueCustomerID) === -1) uniqueCustomerID.push(value.customer[0].id);
			    }				
			});			
			
			for (var i=0;i<uniqueCustomerID.length;i++) {
				var contactID = uniqueCustomerID[i], invoiceLineList = [], amount = 0, rate = 1, locale = "km-KH", company_id = 0, location_id = 0;

				//Calculation
				$.each(data, function(index, value){															
					if(value.customer[0].id==contactID){						
						var usage = kendo.parseInt(value.usage),
						current_amount = 0,						
						customerCurrency = banhji.currency.dataSource.get(value.customer[0].currency_id),					
						tariff = self.feeDS.get(value.meter[0].tariff_id),
						exemption = self.feeDS.get(value.meter[0].exemption_id),
						maintenance = self.feeDS.get(value.meter[0].maintenance_id);

						company_id = value.customer[0].wbranch_id;
						location_id = value.customer[0].wlocation_id;						
						rate = kendo.parseFloat(customerCurrency.rate)/companyRate;						
						locale = customerCurrency.locale;

						//Apply usage exemption						
						if(value.meter[0].exemption_id>0){							
							if(exemption.unit=="usage"){
								var exemptionUsage = kendo.parseFloat(exemption.amount);
								if(usage>exemptionUsage){
									usage -= exemptionUsage;
								}else{
									usage = 0;
								}

								invoiceLineList.push({				
							   		"invoice_id"		: 0,
									"item_id" 			: 0,															
								   	"meter_record_id"	: value.id,
								   	"description" 		: exemption.name,					   	
								   	"unit" 				: 1,
								   	"price"				: exemption.amount,					   	
								   	"amount" 			: exemption.amount,
								   	"rate"				: rate,
								   	"locale" 			: locale,
								   	"has_vat" 			: false,
								   	"type" 				: "exemptionUsage"
								});
							}					
						}
						
						//Apply tariff						
						if(value.meter[0].tariff_id>0){							
							$.each(self.tariffItemDS.data(), function(indexti, tariffItem){
								var tariffItemUsage = kendo.parseInt(tariffItem.usage);
								
								if((tariffItem.fee_id==tariff.id) && (usage>=tariffItemUsage)){
									if(tariffItem.is_flat){								
										current_amount = kendo.parseFloat(tariffItem.price);																																																																																
									}else{								
										current_amount = usage * kendo.parseFloat(tariffItem.price);																						
									}

									invoiceLineList.push({				
								   		"invoice_id"		: 0,
										"item_id" 			: 0,																
									   	"meter_record_id"	: value.id,
									   	"description" 		: tariff.name,					   	
									   	"unit" 				: usage,
									   	"price"				: tariffItem.price,					   	
									   	"amount" 			: current_amount,
									   	"rate"				: rate,
									   	"locale" 			: locale,
									   	"has_vat" 			: false,
								   		"type" 				: "tariff"
									});

									return false;						
								}
							});					
						}
						
						//Apply exemption
						if(value.meter[0].exemption_id>0){
							//Exemption money											
							if(exemption.unit=="money"){												
								invoiceLineList.push({				
							   		"invoice_id"		: 0,
									"item_id" 			: 0,															
								   	"meter_record_id"	: value.id,
								   	"description" 		: exemption.name,					   	
								   	"unit" 				: 1,
								   	"price"				: exemption.amount,					   	
								   	"amount" 			: exemption.amount,
								   	"rate"				: rate,
								   	"locale" 			: locale,
								   	"has_vat" 			: false,
								   	"type" 				: "exemptionMoney"
								});

								if(current_amount>kendo.parseFloat(exemption.amount)){
									current_amount -= kendo.parseFloat(exemption.amount);
								}else{
									current_amount = 0;
								}						
							}

							//Exemtpion %
							if(exemption.unit=="%"){
								var exemptionPercentTageAmount = current_amount * kendo.parseFloat(exemption.amount);

								invoiceLineList.push({				
							   		"invoice_id"		: 0,
									"item_id" 			: 0,													
								   	"meter_record_id"	: value.id,
								   	"description" 		: exemption.name,					   	
								   	"unit" 				: 1,
								   	"price"				: exemption.amount,					   	
								   	"amount" 			: exemptionPercentTageAmount,
								   	"rate"				: rate,
								   	"locale" 			: locale,
								   	"has_vat" 			: false,
								   	"type" 				: "exemptionP"
								});

								if(current_amount>exemptionPercentTageAmount){
									current_amount -= exemptionPercentTageAmount;
								}else{
									current_amount = 0;
								}
							}
						}

						//Apply maintenance						
						if(value.meter[0].maintenance_id>0){
							invoiceLineList.push({				
						   		"invoice_id"		: 0,
								"item_id" 			: 0,															
							   	"meter_record_id"	: value.id,
							   	"description" 		: maintenance.name,					   	
							   	"unit" 				: 1,
							   	"price"				: maintenance.amount,					   	
							   	"amount" 			: maintenance.amount,
							   	"rate"				: rate,
							   	"locale" 			: locale,
							   	"has_vat" 			: false,
							   	"type" 				: "maintenance"
							});

							current_amount += kendo.parseFloat(maintenance.amount);												
						}

						amount += current_amount;
					}					
				});				
				
				//Add invoice
				this.dataSource.add({				
			   		"company_id"		: company_id,
			   		"location_id" 		: location_id,
			   		"contact_id"		: contactID,
			   		"payment_term_id" 	: 0,
			   		"payment_method_id" : 0,
			   		"reference_id" 		: 0,
			   		"account_id" 		: 0,
			   		"vat_id"			: 0,
			   		"biller_id" 		: this.get("biller"),			   			
					"number" 			: "",											
				   	"type"				: "wInvoice",
				   	"amount" 			: amount,
				   	"amount_paid" 		: 0,
				   	"vat" 				: 0,					   	
				   	"rate" 				: rate,
				   	"locale" 			: locale,
				   	"month_of" 			: monthOf,
				   	"issued_date"		: kendo.toString(this.get("issued_date"), "yyyy-MM-dd"),					   	
				   	"payment_date" 		: kendo.toString(this.get("payment_date"), "yyyy-MM-dd"),
				   	"due_date" 			: kendo.toString(this.get("due_date"), "yyyy-MM-dd"),
				   	"check_no" 			: "",
				   	"memo" 				: "",
				   	"memo2" 			: "",
				   	"status" 			: 0,

				   	"invoice_lines"  	: invoiceLineList
				});
			}

			var saved = false;			
			this.dataSource.sync();
			this.dataSource.bind("requestEnd", function(e){
				if(saved==false){
					saved = true;
					
					self.readingDS.read();
				}
			});
		},
		cancel 				: function(){
			this.dataSource.cancelChanges();
			window.history.back();
		}	
	});
	banhji.wPrintCenter = kendo.observable({
		lang 				: langVM,				
		dataSource 	 		: dataStore(apiUrl + "invoices/wprint"),
		snapshotDS 	 		: dataStore(apiUrl + "invoices/wprint_snapshot"),
		branchDS 			: dataStore(apiUrl + "contacts/branch"),
		locationDS 			: dataStore(apiUrl + "locations"),
		obj 				: null,
		monthOfSearch 		: "",
		branch_id 			: null,
		selectedLocations 	: [],
		isBranchSelected	: false,
		chkAll				: true,
		pageLoad 			: function(id){			
			if(id){
				this.dataSource.filter({ field:"id", value: id });
			}			
		},
		branchChanges 		: function(){
			var branch_id = this.get("branch_id");

			if(branch_id){
				this.set("isBranchSelected", true);
				this.locationDS.filter({ field:"company_id", value: branch_id });
			}else{
				this.set("isBranchSelected", false);
				this.set("selectedLocations", []);
			}        	
        },
        checkAll 			: function(){
			var bolValue = this.get("chkAll");
			var data = this.dataSource.data();
			
			if(data.length>0){						
		        $.each(data, function(index, value){		        			        	
		        	value.set("isCheck", bolValue);		        	
		        });		        			        
	        }							
		},
		search 				: function(){
			var self = this, 
			para = [],
			monthOfSearch = this.get("monthOfSearch"),
			branch_id = this.get("branch_id"),
			selectedLocations = this.get("selectedLocations");
			
			if(selectedLocations.length>0){
				var ids = [];
				$.each(selectedLocations, function(index, value){
					ids.push(value);
				});
				
				para.push({ field:"location_id", operator:"where_in", value:ids });
			}else if(branch_id){
				para.push({ field:"company_id", value:branch_id });
			}					

			if(monthOfSearch){								
				var monthOf = new Date(monthOfSearch);
				monthOf.setDate(1);
				monthOf = kendo.toString(monthOf, "yyyy-MM-dd");
												
				para.push({ field:"month_of", value:monthOf });
			}			
						
			this.dataSource.query({
				filter: para,
				page:1,
				take:100
			}).then(function(){
				self.checkAll();
			});

			this.snapshotDS.query({
				filter: para,
				page:1,
				take:100
			}).then(function(){
				var view = self.snapshotDS.view();
				self.set("obj", view[0]);
			});							
		},
		print 				: function(){
			if(this.dataSource.total()>0){
				var ids = [];
				$.each(this.dataSource.data(), function(index, value){		        			        	
		        	if(value.isCheck){
		        		ids.push(value.id);
		        	}	        	
		        });

				if(ids.length>0){
			        banhji.router.navigate('/wInvoice_print');

			        banhji.wInvoicePrint.dataSource.query({
			        	filter: { field:"id", operator:"where_in", value:ids },
			        	page:1,
			        	take:100
			        }).then(function(){
			        	banhji.wInvoicePrint.barcod();
			        });
		    	}else{
		    		alert("Please check the box");
		    	}
			}else{
				alert("No data found");
			}
		}		
	});
	banhji.wInvoicePrint = kendo.observable({
		lang 				: langVM,				
		dataSource 	 		: dataStore(apiUrl + "invoices/wInvoice_print"),
		invoiceDS 	 		: dataStore(apiUrl + "invoices"),	
		isVisible 			: true,
		user_id 			: banhji.userManagement.getLogin() === null ? '':banhji.userManagement.getLogin().id,	
				
		pageLoad 			: function(id){
			if(id){
				var self = this;
				this.dataSource.query({
					filter: { field:"id", value: id },
					page:1,
					take:100
				}).then(function(){
					self.barcod();
				});
			}			
		},					
		barcod 			: function(){									
			var view = this.dataSource.view();
			
			for (var i=0;i<view.length;i++) {
				var d = view[i];				
												
				$("#"+d.contact[0].wnumber).kendoBarcode({
					renderAs: "svg",
				  	value: d.contact[0].wnumber,
				  	type: "code128",
				  	width: 200,
					height: 40,
					text:{
					    visible: false
					}	
				});				
			}		
		},
		print 						: function(){
			var self = this;
			$.each(this.dataSource.data(), function(index, value){
				value.set("print_count", kendo.parseInt(value.print_count)+1);
				value.set("printed_by", self.get("user_id"));
			});

			window.print();

			this.dataSource.sync();
			// var saved = false;
			// this.dataSource.bind("requestEnd", function(){
			// 	if(e.type=="update"){
			// 		saved = true;

			// 		self.dataSource.data([]);
			// 		window.history.back();
			// 	}
			// });
		},		
		hideFrameInvoice 			: function(e) {
			var printBtn = e.target;
			if(printBtn.checked) {
				$(".hiddenPrint").css("visibility", "hidden");
			} else {
				$(".hiddenPrint").css("visibility", "visible");
			}
		}
	});
	banhji.wInventoryItem =  kendo.observable({
		lang 				: langVM,    	
    	dataSource 			: dataStore(apiUrl + "items"),
    	categoryDS 			: dataStore(apiUrl + "categories"),
    	itemGroupDS			: dataStore(apiUrl + "items/group"),    	
    	contactDS  			: dataStore(apiUrl + "contacts"),
    	
    	searchField			: "",
    	category_id 		: 0,
    	item_group_id 		: 0,
    	    	
    	pageLoad 			: function(){    		
    		
    	},
    	search 				: function(){
    		var para = [],
    		searchField = this.get("searchField"),
    		category_id = this.get("category_id"),
    		item_group_id = this.get("item_group_id");

    		if(searchField!==""){
    			para.push(      				
      				{ field: "sku", operator: "like", value: searchField },
      				{ field: "name", operator: "or_like", value: searchField }
      			);
    		}

    		if(item_group_id>0){
    			para.push({ field:"item_group_id", value:item_group_id });
    		}else if(category_id>0){
    			para.push({ field:"category_id", value:category_id });
    		}

    		para.push({ field:"item_type_id", value:1 });

    		this.dataSource.filter(para);    		
    	},
    	searchFavorite 		: function(){
    		this.dataSource.filter({ field:"favorite", value: true });
    	},
    	categoryChanges : function(e){
    		e.preventDefault();
    		
    		var data = e.data;    		
    		this.dataSource.filter({ field:"category_id", value:data.id });
    	}		
    });	
	banhji.wSettings =  kendo.observable({
		lang 				: langVM,		
        contactTypeDS 		: dataStore(apiUrl + "contacts/type"),        
        blockDS 	 		: dataStore(apiUrl + "locations"),
        branchDS 	 		: dataStore(apiUrl + "contacts/branch"),
        tariffDS 	 		: dataStore(apiUrl + "fees"),
        tariffItemDS 		: dataStore(apiUrl + "fees/item"),
        exemptionDS  		: dataStore(apiUrl + "fees"),
        maintenanceDS  		: dataStore(apiUrl + "fees"),
        flatList			: [ 
	 		{ id:"false", name: "Not Flat" }, 
	 		{ id:"true", name: "Flat" }
		],
		exemptionTypeList			: [ 
	 		{ id:"usage", name: "m3" }, 
	 		{ id:"money", name: "Money" },
	 		{ id:"%", name: "%" }
		],
        contactTypeName 	: "",
        blockName 			: "",
        blockCompanyId  	: 0,
        blockAbbr 			: "",
        tariffName 			: "",
        tariffCompanyId 	: 0,
        fee_id 				: 0,
        tariffUsage 		: "",
        tariffPrice 		: "",
        tariffFlat 			: false,
        selectedTariffName 	: "",
        selectedTariff 		: false,
        exemptionName 		: "",
        exemptionAmount 	: "",
        exemptionCompanyId 	: 0,
        exemptionType 		: "",
        maintenanceName 	: "",
        maintenanceAmount 	: "",
        maintenanceCompanyId: 0,
        pageLoad 			: function() {
        	this.contactTypeDS.filter({ field:"parent_id", value: 1 });
        	this.blockDS.filter({ field:"utility_id", value: 2 });
        	this.tariffDS.filter([
        		{ field:"utility_id", value: 2 },
        		{ field:"type", value: "tariff" }
        	]);
        	this.exemptionDS.filter([
        		{ field:"utility_id", value: 2 },
        		{ field:"type", value: "exemption" }
        	]);
        	this.maintenanceDS.filter([
        		{ field:"utility_id", value: 2 },
        		{ field:"type", value: "maintenance" }
        	]);
        },	    
        addContactType 		: function(){
        	var name = this.get("contactTypeName");

        	if(name!==""){
	        	this.contactTypeDS.add({
	        		parent_id 	: 1,
	        		name 		: name
	        	});

	        	this.contactTypeDS.sync();
        	}
        },
        addBlock 			: function(){
        	var name = this.get("blockName");
        	
        	if(name!==""){
	        	this.blockDS.add({	        		
	        		company_id 	: this.get("blockCompanyId"),
	        		utility_id 	: 2,
	        		name 		: name,
	        		abbr 		: this.get("blockAbbr"),
	        		company 	: []
	        	});

	        	this.blockDS.sync();
        	}
        },
        addTariff 			: function(){
        	var name = this.get("tariffName");
        	
        	if(name!==""){
	        	this.tariffDS.add({	        		
	        		company_id 	: this.get("tariffCompanyId"),
	        		utility_id 	: 2,
	        		type 		: "tariff",
	        		name 		: name,
	        		amount 		: 0,
	        		unit 		: null,
	        		status 		: 1,

	        		company 	: []
	        	});

	        	this.tariffDS.sync();
        	}
        },
        addTariffItem 		: function(){
        	var usage = this.get("tariffUsage");
        	
        	if(usage!==""){
	        	this.tariffItemDS.add({	        		
	        		fee_id 		: this.get("fee_id"),
	        		usage 	 	: usage,
	        		price 		: this.get("tariffPrice"),
	        		is_flat		: this.get("tariffFlat")	        		
	        	});

	        	this.tariffItemDS.sync();
        	}
        },
        loadTariffItem 		: function(e){
	        var d = e.data;

	        this.set("selectedTariff", true);
	        this.set("fee_id", d.id);
	        this.set("selectedTariffName", d.name);
	        this.tariffItemDS.query({
	        	filter: { field:"fee_id", value: d.id },
	        	sort: { field:"usage", dir:"asc" },
	        	page: 1,
	        	take: 100
	        });  	
        },
        addExemption 		: function(){
        	var name = this.get("exemptionName");
        	
        	if(name!==""){
	        	this.exemptionDS.add({	        		
	        		company_id 	: this.get("exemptionCompanyId"),
	        		utility_id 	: 2,
	        		type 		: "exemption",
	        		name 		: name,
	        		amount 		: this.get("exemptionAmount"),
	        		unit 		: this.get("exemptionType"),
	        		status 		: 1,

	        		company 	: []
	        	});

	        	this.exemptionDS.sync();
        	}
        },
        addMaintenance		: function(){
        	var name = this.get("maintenanceName");
        	
        	if(name!==""){
	        	this.maintenanceDS.add({	        		
	        		company_id 	: this.get("maintenanceCompanyId"),
	        		utility_id 	: 2,
	        		type 		: "maintenance",
	        		name 		: name,
	        		amount 		: this.get("maintenanceAmount"),
	        		unit 		: null,
	        		status 		: 1,

	        		company 	: []
	        	});

	        	this.maintenanceDS.sync();
        	}
        }
    });
	banhji.wBranch =  kendo.observable({
		lang 				: langVM,		
        dataSource 			: dataStore(apiUrl + "contacts/branch"),
        existingDS			: dataStore(apiUrl + "contacts/branch"),
        deleteDS 			: dataStore(apiUrl + "locations"),
        currencyDS 			: dataStore(apiUrl + 'currencies'),

        statusList 			: [            
			{ "id": 1, "name": "Active" },
			{ "id": 0, "name": "Inactive" },
			{ "id": 2, "name": "Void" }
        ],

        obj 			: null,
        isEdit 			: false,
        isExisting 		: false,         	
                
        pageLoad 		: function(id){
        	var self = this;

        	if(id){        		
        		this.set("isEdit", true);        		
        		
        		this.dataSource.query({
				  	filter: { field: "id", value: id },
				  	page: 1,
				  	take: 50
				}).then(function(e) {
    				var view = self.dataSource.view();

    				if(view.length>0){
    					self.set("obj", view[0]);
    				}else{
    					self.addEmpty();
    				}
				});
        	}else{        		
        		this.set("isEdit", false);
        		this.addEmpty();
        	}
        },        
        checkExisting 	: function(){
        	var self = this, 
        	number = this.get("obj").operation_license;

        	this.existingDS.query({
			  	filter: { field: "operation_license", value: number },
			  	page: 1,
			  	take: 50
			}).then(function(e) {
				var view = self.existingDS.view();

				if(view.length>0){
					self.set("isExisting", true);
				}else{
					self.set("isExisting", false);
				}
			});
        },
        addEmpty 		: function(){
        	this.set("isEdit", false);
        	this.dataSource.data([]);

      		if(this.dataSource.total()==0){
				this.dataSource.add({					 			
					utility_id 			: 2,
					currency_id 		: 0,
					province_id 		: 0,
					country_id 			: 0,
					name 				: "",
					description 		: "",
					abbr 				: "",
					representative 		: "",
					email 				: "",
					mobile 				: "",
					phone 				: "",
					address 			: "",					
					expire_date 		: "",
					max_customer 		: "",
					operation_license 	: "",
					term_of_condition 	: "",
					image_url 			: "",
					status 				: 1
				});
				
				var data = this.dataSource.data();			
				var obj = data[data.length - 1];			
				this.set("obj", obj);
			}	
		},
		save 			: function(){			
			var self = this, saved = false;

			this.dataSource.sync();			
			this.dataSource.bind("requestEnd", function(e){				
				if(e.type=="create" && saved==false){					
					saved = true;
					
					self.addEmpty();
					banhji.wSettings.branchDS.fetch();					
				}

				if(e.type=="update" && saved==false){
					saved = true;
					banhji.wSettings.branchDS.fetch();
				}

				if(e.type=="destroy" && saved==false){
					saved = true;
					banhji.wSettings.branchDS.fetch();
					window.history.back();
				}
			});
		},
		delete 			: function(){
			var self = this,
			id = this.get("obj").id;

			if (confirm("Are you sure, you want to delete it?")) {
				this.deleteDS.query({
				  	filter: { field: "company_id", value: id },
				  	page: 1,
				  	take: 1
				}).then(function() {
					var view = self.deleteDS.view();

					if(view.length>0){
						alert("Sorry, you can not delete it because it is using now.");
					}else{
						var data = self.dataSource.get(id);
				        self.dataSource.remove(data);
				        self.save();
					}
				});				
	    	}
		},
		cancel 			: function(){
			this.dataSource.cancelChanges();
			window.history.back();
		}
    });
    //Water Reports
	banhji.wReportCenter = kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "invoices/wkpi"),
		branchDS 			: dataStore(apiUrl + "contacts/branch"),
		obj 				: null,
		branch_id 			: null,
		pageLoad 			: function(){
			
		},
		branchChanges		: function(){			
			var branch_id = this.get("branch_id");
			
			this.loadKPI(branch_id);			
		},
		loadKPI 			: function(id){
			var self = this;
			
			if(id){
				this.dataSource.query({
					filter: { field:"company_id", value: id },
					page: 1,
					take: 100
				}).then(function(){
					var view = self.dataSource.view();
					
					if(view.length>0){
						self.set("obj", view[0]);
					}else{
						self.set("obj", null);
					}
				});
			}else{
				this.set("obj", null);
			}			
		}
	});
	banhji.wCustomerNoMeter = kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "contacts/no_meter"),
		branchDS 			: dataStore(apiUrl + "contacts/branch"),		
		
		branch_id 			: 0,				
				
		pageLoad 			: function(){
			
		},
		goToNewMeter 		: function(e){
			var obj = e.data;	
			
			banhji.router.navigate('/wDeposit');
			banhji.wDeposit.loadContact(obj.id);			
		},				
		search 				: function(){
			var branch_id = this.get("branch_id"), para = [];

        	if(branch_id){
        		this.dataSource.filter([
	    			{ field:"wbranch_id", value: branch_id },
	    			{ field:"use_water", value: 1 },
	    			{ field:"status", value: 1 },
	    		]); 
        	}else{
        		alert("Please select license");
        	}        	                 
		}
	});
	banhji.wBrandNewCustomer = kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "contacts/branch_new"),
		branchDS 			: dataStore(apiUrl + "contacts/branch"),
		sortList			: [ 
	 		{ text:"All", value: "all" }, 
	 		{ text:"Today", value: "today" }, 
	 		{ text:"This Week", value: "week" }, 
	 		{ text:"This Month", value: "month" }, 
	 		{ text:"This Year", value: "year" } 
		],
		sorter 				: "month",
		sdate 				: "",
		edate 				: "",
		branch_id 			: 0,
		pageLoad 			: function(){
			
		},
		strDate 			: function(){
			var strDate = "",
			sdate = this.get("sdate"),
			edate = this.get("edate");

			if(sdate && edate){
				strDate = "From " + kendo.toString(new Date(sdate), "dd-MM-yyyy") + " To " + kendo.toString(new Date(edate), "dd-MM-yyyy");
			}else if(sdate){
				strDate = "On " + kendo.toString(new Date(sdate),"dd-MM-yyyy");
			}else if(edate){
				strDate = "As Of " + kendo.toString(new Date(edate),"dd-MM-yyyy");
			}else{
				strDate = "";
			}

			return strDate;
		},
		sorterChanges 		: function(){
			var value = this.get("sorter"),
			today = new Date();

			switch(value){
			case "today":								
				this.set("sdate", today);
				this.set("edate", "");				
			  					
			  	break;
			case "week":
			  	var thisWeek = new Date;
				var first = thisWeek.getDate() - thisWeek.getDay(); 
				var last = first + 6;

				var firstDayOfWeek = new Date(thisWeek.setDate(first));
				var lastDayOfWeek = new Date(thisWeek.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":
				var thisMonth = new Date;				  	
				var firstDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth(), 1);
				var lastDayOfMonth = new Date(thisMonth.getFullYear(), thisMonth.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":
				var thisYear = new Date();
			  	var firstDayOfYear = new Date(thisYear.getFullYear(), 0, 1);
				var lastDayOfYear = new Date(thisYear.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},		
		search 				: function(){
			var self = this,
				branch_id = this.get("branch_id"),
				start = this.get("sdate"),
        		end = this.get("edate"),	        		
        		para = [];

        	//Dates
        	if((start && end) && (new Date(start) < new Date(end))){        		
            	para.push({ field:"registered_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
            	para.push({ field:"registered_date <=", value: kendo.toString(end, "yyyy-MM-dd") });            	            	
            }else if(start){
            	para.push({ field:"registered_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
            	para.push({ field:"registered_date <=", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{
            	
            }

            if(branch_id){
            	para.push({ field:"wbranch_id", value:branch_id });
            }

            para.push({ field:"use_water", value:1 });
            para.push({ field:"status", value:1 });    

            this.dataSource.query({
            	filter: para,
            	sort: { field: "registered_date", dir: "desc" },
            	page: 1,
            	take: 100
            });            
		}
	});
    banhji.wAgingSummary = kendo.observable({
    	lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "invoices/waging_summary"),		
		branchDS 			: dataStore(apiUrl + "contacts/branch"),		
		locationDS 			: dataStore(apiUrl + "locations"),
		
		branch_id 			: 0,
		location_id 		: 0,
		search_date 		: new Date(),
		strDate 			: "",		
				
		pageLoad 			: function(){
			
		},			
		strDate 			: function(){
			var search_date = this.get("search_date");
			
			return kendo.toString(new Date(search_date), "dd-MM-yyyy");
		},
		search 				: function(){
			var para = [],
			branch_id = this.get("branch_id"), 
			location_id = this.get("location_id"), 
			search_date = kendo.toString(this.get("search_date"), "yyyy-MM-dd");

        	if(location_id){
        		para.push({ field:"wlocation_id", value: location_id });
        	}else if(branch_id){
        		para.push({ field:"wbranch_id", value: branch_id });
        	}

        	if(search_date){
        		para.push({ field:"search_date", value: search_date });
        	}

        	if(para.length>0){
	            this.dataSource.query({
	            	filter: para,	            	           	
	            	page: 1,
	            	take: 100
	            });
            }             
		}
	});
	banhji.wAgingDetail = kendo.observable({
		lang 				: langVM,
		dataSource 			: new kendo.data.DataSource({
			transport: {
                read 	: {
					url: apiUrl + "invoices/waging_detail",
					type: "GET",
					headers: {
						"Entity": getDB(),
						"User": banhji.userManagement.getLogin() === null ? '':banhji.userManagement.getLogin().id
					},
					dataType: 'json'
				},
				parameterMap: function(options, operation) {
					if(operation === 'read') {
						return {
							limit: options.pageSize,
							page: options.page,
							filter: options.filter,
							sort: options.sort
						};
					} else {
						return {models: kendo.stringify(options.models)};
					}
				}
            },
            schema:{
                model: {
                    fields: {                                    
                        number: { type: "string" },
                        amount: { type: "number" },
                        issued_date: { type: "date" },
                        due_date: { type: "date" },
                        fullIdName: { type: "string" },
                        age: { type: "number" },
                        ageGroup: { type: "string" }
                    }
                },
				data: 'results',
				total: 'count'
            },
            pageSize: 100,
            serverFiltering: true,
            sort: { field: "issued_date", dir: "asc" },
            group: {
                field: "Aging", aggregates: [                	
                	{ field: "number", aggregate: "count" },
                    { field: "amount", aggregate: "sum" }
                ]
            },
            aggregate: [            	
            	{ field: "number", aggregate: "count" }, 
            	{ field: "amount", aggregate: "sum" }
            ]
		}),		
		branchDS 			: dataStore(apiUrl + "contacts/branch"),		
		locationDS 			: dataStore(apiUrl + "locations"),
		
		branch_id 			: 0,
		location_id 		: 0,
		search_date 		: new Date(),
		strDate 			: "",		
				
		pageLoad 			: function(){
			
		},			
		strDate 			: function(){
			var search_date = this.get("search_date");
			
			return kendo.toString(new Date(search_date), "dd-MM-yyyy");
		},
		search 				: function(){
			var para = [],
			branch_id = this.get("branch_id"), 
			location_id = this.get("location_id"), 
			search_date = kendo.toString(this.get("search_date"), "yyyy-MM-dd");

        	if(location_id){
        		para.push({ field:"location_id", value: location_id });
        	}else if(branch_id){
        		para.push({ field:"company_id", value: branch_id });
        	}

        	if(search_date){
        		para.push({ field:"issued_date <=", value: search_date });
        	}

        	if(para.length>0){
	            this.dataSource.filter(para);
            }             
		}
	});
	banhji.wSaleSummary = kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "invoices/wsale_summary"),
		sortList			: [ 
	 		{ text:"All", 	value: "all" }, 
	 		{ text:"Today", 	value: "today" }, 
	 		{ text:"This Week",value: "week" }, 
	 		{ text:"This Month", 		value: "month" }, 
	 		{ text:"This Year", 	value: "year" } 
		],
		sorter 				: "all",
		sdate 				: "",
		edate 				: "",
		pageLoad 			: function(){
			
		},
		sorterChanges 		: function(){
			var value = this.get("sorter"),
			today = new Date();

			switch(value){
			case "today":								
				this.set("sdate", today);
				this.set("edate", "");
							  					
			  	break;
			case "week":			  	
				var first = today.getDate() - today.getDay(),
				last = first + 6;

				var firstDayOfWeek = new Date(today.setDate(first)),
				lastDayOfWeek = new Date(today.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":							  	
				var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1),
				lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":				
			  	var firstDayOfYear = new Date(today.getFullYear(), 0, 1),
			  	lastDayOfYear = new Date(today.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},		
		strDate 			: function(){
			var strDate = "",
			sdate = this.get("sdate"),
			edate = this.get("edate");

			if(sdate && edate){
				strDate = "From " + kendo.toString(new Date(sdate), "dd-MM-yyyy") + " To " + kendo.toString(new Date(edate), "dd-MM-yyyy");
			}else if(sdate){
				strDate = "On " + kendo.toString(new Date(sdate),"dd-MM-yyyy");
			}else if(edate){
				strDate = "As Of " + kendo.toString(new Date(edate),"dd-MM-yyyy");
			}else{
				strDate = "";
			}

			return strDate;
		},
		search 				: function(){
			var self = this,
			para = [], 
			start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"), 
			end = kendo.toString(this.get("edate"), "yyyy-MM-dd");

        	//Dates
        	if(start && end){        		
            	para.push({ field:"issued_date", operator:"between", value1:"'"+start+"'", value2:"'"+end+"'" });            	          	            	
            }else if(start){
            	para.push({ field:"issued_date", value: start });
            }else if(end){
            	para.push({ field:"issued_date <=", value: end });
            }else{
            	
            }          

            this.dataSource.filter(para);
		}
	});
	banhji.wSaleDetail = kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "invoices/wsale_detail"),
		branchDS 			: dataStore(apiUrl + "contacts/branch"),
		locationDS 			: dataStore(apiUrl + "locations"),
		sortList			: [ 
	 		{ text:"All", 	value: "all" }, 
	 		{ text:"Today", 	value: "today" }, 
	 		{ text:"This Week",value: "week" }, 
	 		{ text:"This Month", 		value: "month" }, 
	 		{ text:"This Year", 	value: "year" } 
		],
		sorter 				: "all",
		sdate 				: "",
		edate 				: "",
		branch_id 			: null,
		selectedLocations 	: [],
		isBranchSelected	: false,
		pageLoad 			: function(){
			
		},
		sorterChanges 		: function(){
			var value = this.get("sorter"),
			today = new Date();

			switch(value){
			case "today":								
				this.set("sdate", today);
				this.set("edate", "");
							  					
			  	break;
			case "week":			  	
				var first = today.getDate() - today.getDay(),
				last = first + 6;

				var firstDayOfWeek = new Date(today.setDate(first)),
				lastDayOfWeek = new Date(today.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":							  	
				var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1),
				lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":				
			  	var firstDayOfYear = new Date(today.getFullYear(), 0, 1),
			  	lastDayOfYear = new Date(today.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},		
		strDate 			: function(){
			var strDate = "",
			sdate = this.get("sdate"),
			edate = this.get("edate");

			if(sdate && edate){
				strDate = "From " + kendo.toString(new Date(sdate), "dd-MM-yyyy") + " To " + kendo.toString(new Date(edate), "dd-MM-yyyy");
			}else if(sdate){
				strDate = "On " + kendo.toString(new Date(sdate),"dd-MM-yyyy");
			}else if(edate){
				strDate = "As Of " + kendo.toString(new Date(edate),"dd-MM-yyyy");
			}else{
				strDate = "";
			}

			return strDate;
		},
		branchChanges 		: function(){
			var branch_id = this.get("branch_id");

			if(branch_id){
				this.set("isBranchSelected", true);
				this.locationDS.filter({ field:"company_id", value: branch_id });
			}else{
				this.set("isBranchSelected", false);
				this.set("selectedLocations", []);
			}        	
        },
		search 				: function(){
			var self = this,
			para = [], 
			start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"), 
			end = kendo.toString(this.get("edate"), "yyyy-MM-dd"),
			branch_id = this.get("branch_id"),
			selectedLocations = this.get("selectedLocations");

        	//Dates
        	if(start && end){        		
            	para.push({ field:"issued_date", operator:"between", value1:"'"+start+"'", value2:"'"+end+"'" });            	          	            	
            }else if(start){
            	para.push({ field:"issued_date", value: start });
            }else if(end){
            	para.push({ field:"issued_date <=", value: end });
            }else{
            	
            }

            if(selectedLocations.length>0){
				var ids = [];
				$.each(selectedLocations, function(index, value){
					ids.push(value);
				});
				
				para.push({ field:"location_id", operator:"where_in", value:ids });
			}else if(branch_id){
				para.push({ field:"company_id", value:branch_id });
			}          

            this.dataSource.filter(para);
		}
	});
	banhji.wPaymentSummary = kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "payments/wsummary"),

		sortList			: [ 
	 		{ text:"All", value: "all" }, 
	 		{ text:"Today", value: "today" }, 
	 		{ text:"This Week", value: "week" }, 
	 		{ text:"This Month", value: "month" }, 
	 		{ text:"This Year", value: "year" } 
		],
		sorter 				: "all",
		sdate 				: "",
		edate 				: "",
		strDate 			: "",		
				
		pageLoad 			: function(){
			
		},
		sorterChanges 		: function(){
			var value = this.get("sorter"),
			today = new Date();

			switch(value){
			case "today":								
				this.set("sdate", today);
				this.set("edate", "");
							  					
			  	break;
			case "week":			  	
				var first = today.getDate() - today.getDay(),
				last = first + 6;

				var firstDayOfWeek = new Date(today.setDate(first)),
				lastDayOfWeek = new Date(today.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":							  	
				var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1),
				lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":				
			  	var firstDayOfYear = new Date(today.getFullYear(), 0, 1),
			  	lastDayOfYear = new Date(today.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},		
		strDate 			: function(){
			var strDate = "",
			sdate = this.get("sdate"),
			edate = this.get("edate");

			if(sdate && edate){
				strDate = "From " + kendo.toString(new Date(sdate), "dd-MM-yyyy") + " To " + kendo.toString(new Date(edate), "dd-MM-yyyy");
			}else if(sdate){
				strDate = "On " + kendo.toString(new Date(sdate),"dd-MM-yyyy");
			}else if(edate){
				strDate = "As Of " + kendo.toString(new Date(edate),"dd-MM-yyyy");
			}else{
				strDate = "";
			}

			return strDate;
		},
		search 				: function(){
			var self = this, start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"), end = kendo.toString(this.get("edate"), "yyyy-MM-dd"), para = [];

        	//Dates
        	if(start && end){        		
            	para.push({ field:"date", operation:">=", value: kendo.toString(start, "yyyy-MM-dd") });
            	para.push({ field:"date", operation:"<=", value: kendo.toString(end, "yyyy-MM-dd") });            	            	
            }else if(start){
            	para.push({ field:"date", operation:"=", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
            	para.push({ field:"date", operation:"<=", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{
            	
            }          

            this.dataSource.query({
            	filter: para,            	
            	page: 1,
            	take: 100
            });             
		}
	});
	banhji.wPaymentDetail = kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "payments/wdetail"),

		sortList			: [ 
	 		{ text:"All", value: "all" }, 
	 		{ text:"Today", value: "today" }, 
	 		{ text:"This Week", value: "week" }, 
	 		{ text:"This Month", value: "month" }, 
	 		{ text:"This Year", value: "year" } 
		],
		sorter 				: "month",
		sdate 				: "",
		edate 				: "",		
				
		pageLoad 			: function(){
			
		},
		sorterChanges 		: function(){
			var value = this.get("sorter"),
			today = new Date();

			switch(value){
			case "today":								
				this.set("sdate", today);
				this.set("edate", "");
							  					
			  	break;
			case "week":			  	
				var first = today.getDate() - today.getDay(),
				last = first + 6;

				var firstDayOfWeek = new Date(today.setDate(first)),
				lastDayOfWeek = new Date(today.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":							  	
				var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1),
				lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":				
			  	var firstDayOfYear = new Date(today.getFullYear(), 0, 1),
			  	lastDayOfYear = new Date(today.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},
		strDate 			: function(){
			var strDate = "",
			sdate = this.get("sdate"),
			edate = this.get("edate");

			if(sdate && edate){
				strDate = "From " + kendo.toString(new Date(sdate), "dd-MM-yyyy") + " To " + kendo.toString(new Date(edate), "dd-MM-yyyy");
			}else if(sdate){
				strDate = "On " + kendo.toString(new Date(sdate),"dd-MM-yyyy");
			}else if(edate){
				strDate = "As Of " + kendo.toString(new Date(edate),"dd-MM-yyyy");
			}else{
				strDate = "";
			}

			return strDate;
		},		
		search 				: function(){
			var self = this, start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"), end = kendo.toString(this.get("edate"), "yyyy-MM-dd"), para = [];

        	//Dates
        	if(start && end){        		
            	para.push({ field:"payment_date >=", value: kendo.toString(start, "yyyy-MM-dd") });
            	para.push({ field:"payment_date <=", value: kendo.toString(end, "yyyy-MM-dd") });            	            	
            }else if(start){
            	para.push({ field:"payment_date", value: kendo.toString(start, "yyyy-MM-dd") });
            }else if(end){
            	para.push({ field:"payment_date <=", value: kendo.toString(end, "yyyy-MM-dd") });
            }else{
            	
            }

            para.push({ field:"type", operator:"where_in", value:["invoice", "receipt", "wdeposit"] });

            this.dataSource.query({
            	filter: para,
            	sort: { field: "payment_date", dir: "desc" },
            	page: 1,
            	take: 100
            });             
		}
	});
	banhji.wPaymentBySourceSummary = kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "payments/wsource_summary"),
		sortList			: [ 
	 		{ text:"All", 	value: "all" }, 
	 		{ text:"Today", 	value: "today" }, 
	 		{ text:"This Week",value: "week" }, 
	 		{ text:"This Month", 		value: "month" }, 
	 		{ text:"This Year", 	value: "year" } 
		],
		sorter 				: "all",
		sdate 				: "",
		edate 				: "",
		pageLoad 			: function(){
			
		},
		sorterChanges 		: function(){
			var value = this.get("sorter"),
			today = new Date();

			switch(value){
			case "today":								
				this.set("sdate", today);
				this.set("edate", "");
							  					
			  	break;
			case "week":			  	
				var first = today.getDate() - today.getDay(),
				last = first + 6;

				var firstDayOfWeek = new Date(today.setDate(first)),
				lastDayOfWeek = new Date(today.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":							  	
				var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1),
				lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":				
			  	var firstDayOfYear = new Date(today.getFullYear(), 0, 1),
			  	lastDayOfYear = new Date(today.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},		
		strDate 			: function(){
			var strDate = "",
			sdate = this.get("sdate"),
			edate = this.get("edate");

			if(sdate && edate){
				strDate = "From " + kendo.toString(new Date(sdate), "dd-MM-yyyy") + " To " + kendo.toString(new Date(edate), "dd-MM-yyyy");
			}else if(sdate){
				strDate = "On " + kendo.toString(new Date(sdate),"dd-MM-yyyy");
			}else if(edate){
				strDate = "As Of " + kendo.toString(new Date(edate),"dd-MM-yyyy");
			}else{
				strDate = "";
			}

			return strDate;
		},
		search 				: function(){
			var self = this,
			para = [], 
			start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"), 
			end = kendo.toString(this.get("edate"), "yyyy-MM-dd");

        	//Dates
        	if(start && end){        		
            	para.push({ field:"payment_date", operator:"between", value1:"'"+start+"'", value2:"'"+end+"'" });            	          	            	
            }else if(start){
            	para.push({ field:"payment_date", value: start });
            }else if(end){
            	para.push({ field:"payment_date <=", value: end });
            }else{
            	
            }          

            this.dataSource.filter(para);
		}
	});
	banhji.wPaymentBySourceDetail = kendo.observable({
		lang 				: langVM,
		dataSource 			: dataStore(apiUrl + "payments/wsource_detail"),
		branchDS 			: dataStore(apiUrl + "contacts/branch"),
		locationDS 			: dataStore(apiUrl + "locations"),
		sortList			: [ 
	 		{ text:"All", 	value: "all" }, 
	 		{ text:"Today", 	value: "today" }, 
	 		{ text:"This Week",value: "week" }, 
	 		{ text:"This Month", 		value: "month" }, 
	 		{ text:"This Year", 	value: "year" } 
		],
		sorter 				: "all",
		sdate 				: "",
		edate 				: "",
		branch_id 			: null,
		selectedLocations 	: [],
		isBranchSelected	: false,
		pageLoad 			: function(){
			
		},
		sorterChanges 		: function(){
			var value = this.get("sorter"),
			today = new Date();

			switch(value){
			case "today":								
				this.set("sdate", today);
				this.set("edate", "");
							  					
			  	break;
			case "week":			  	
				var first = today.getDate() - today.getDay(),
				last = first + 6;

				var firstDayOfWeek = new Date(today.setDate(first)),
				lastDayOfWeek = new Date(today.setDate(last));				

				this.set("sdate", firstDayOfWeek);
				this.set("edate", lastDayOfWeek);
				
			  	break;
			case "month":							  	
				var firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1),
				lastDayOfMonth = new Date(today.getFullYear(), today.getMonth() + 1, 0);

				this.set("sdate", firstDayOfMonth);
				this.set("edate", lastDayOfMonth);

			  	break;
			case "year":				
			  	var firstDayOfYear = new Date(today.getFullYear(), 0, 1),
			  	lastDayOfYear = new Date(today.getFullYear(), 11, 31);

				this.set("sdate", firstDayOfYear);
				this.set("edate", lastDayOfYear);

			  	break;
			default:
				this.set("sdate", "");
				this.set("edate", "");					  
			}
		},		
		strDate 			: function(){
			var strDate = "",
			sdate = this.get("sdate"),
			edate = this.get("edate");

			if(sdate && edate){
				strDate = "From " + kendo.toString(new Date(sdate), "dd-MM-yyyy") + " To " + kendo.toString(new Date(edate), "dd-MM-yyyy");
			}else if(sdate){
				strDate = "On " + kendo.toString(new Date(sdate),"dd-MM-yyyy");
			}else if(edate){
				strDate = "As Of " + kendo.toString(new Date(edate),"dd-MM-yyyy");
			}else{
				strDate = "";
			}

			return strDate;
		},
		branchChanges 		: function(){
			var branch_id = this.get("branch_id");

			if(branch_id){
				this.set("isBranchSelected", true);
				this.locationDS.filter({ field:"company_id", value: branch_id });
			}else{
				this.set("isBranchSelected", false);
				this.set("selectedLocations", []);
			}        	
        },
		search 				: function(){
			var self = this,
			para = [], 
			start = kendo.toString(this.get("sdate"), "yyyy-MM-dd"), 
			end = kendo.toString(this.get("edate"), "yyyy-MM-dd"),
			branch_id = this.get("branch_id"),
			selectedLocations = this.get("selectedLocations");

        	//Dates
        	if(start && end){        		
            	para.push({ field:"payment_date", operator:"between", value1:"'"+start+"'", value2:"'"+end+"'" });            	          	            	
            }else if(start){
            	para.push({ field:"payment_date", value: start });
            }else if(end){
            	para.push({ field:"payment_date <=", value: end });
            }else{
            	
            }

            if(selectedLocations.length>0){
				var ids = [];
				$.each(selectedLocations, function(index, value){
					ids.push(value);
				});
				
				para.push({ field:"wlocation_id", operator:"where_in", model:"contact", value:ids });
			}else if(branch_id){
				para.push({ field:"company_id", value:branch_id });
			}          

            this.dataSource.filter(para);
		}
	});	    	
	//END OF DAWINE  ---------------------------------------------------------------------------------


	<!-- views and layout -->
	banhji.view = {
		layout 		: new kendo.Layout('#layout', {model: banhji.Layout}),
		blank		: new kendo.View('<div></div>'),		
		index  		: new kendo.Layout("#index", {model: banhji.index}),		
		menu 		: new kendo.Layout('#menu-tmpl', {model: banhji.userManagement}),
		schContact 	: new kendo.View("#menu-search-contact-tmpl", {model: banhji.userManagement}),
		schTranx 	: new kendo.View("#menu-search-transaction-tmpl", {model: banhji.userManagement}),
		schItem 	: new kendo.View("#menu-search-item-tmpl", {model: banhji.userManagement}),	

		//DAWINE -----------------------------------------------------------------------------------------
		//Accounting
		journal: new kendo.Layout("#journal", {model: banhji.journal}),
		currencyRate: new kendo.Layout("#currencyRate", {model: banhji.currencyRate}),
		recurring: new kendo.Layout("#recurring", {model: banhji.recurring}),
		journalReport: new kendo.Layout("#journalReport", {model: banhji.journalReport}),
		saleTax: new kendo.Layout("#saleTax", {model: banhji.saleTax}),

		//Employee
		employeeContainer: new kendo.Layout("#employee-section-tmpl", {model: banhji.employee}),
		employeeDashboard: new kendo.View("#employee-section-dashboard-tmpl", {model: banhji.employee}),
		cashAdvance: new kendo.Layout("#cashAdvance", {model: banhji.cashAdvance}),
		expense: new kendo.Layout("#expense", {model: banhji.expense}),

		//Vendor
		vendorDashboard: new kendo.Layout("#vendorDashboard", {model: banhji.vendorDashboard}),
		vendorCenter: new kendo.Layout("#vendorCenter", {model: banhji.vendorCenter}),
		vendor: new kendo.Layout("#vendor", {model: banhji.vendor}),
		po: new kendo.Layout("#po", {model: banhji.po}),
		grn: new kendo.Layout("#grn", {model: banhji.grn}),
		purchase: new kendo.Layout("#purchase", {model: banhji.purchase}),
		purchaseReturn: new kendo.Layout("#purchaseReturn", {model: banhji.purchaseReturn}),
		vendorDeposit: new kendo.Layout("#vendorDeposit", {model: banhji.vendorDeposit}),		
		vendorSetting: new kendo.Layout("#vendorSetting", {model: banhji.vendorSetting}),

		//SME
		customerDashboard: new kendo.Layout("#customerDashboard", {model: banhji.customerDashboard}),
		customerCenter: new kendo.Layout("#customerCenter", {model: banhji.customerCenter}),		
		customer: new kendo.Layout("#customer", {model: banhji.customer}),
		customerList : new kendo.Layout("#customerList", {model: banhji.customerList}),		
		
		invoice: new kendo.Layout("#invoice", {model: banhji.invoice}),
		cashSale: new kendo.Layout("#cashSale", {model: banhji.cashSale}),
		saleOrder: new kendo.Layout("#saleOrder", {model: banhji.saleOrder}),
		quote: new kendo.Layout("#quote", {model: banhji.quote}),		
		gdn: new kendo.Layout("#gdn", {model: banhji.gdn}),
		saleReturn: new kendo.Layout("#saleReturn", {model: banhji.saleReturn}),		
		statement: new kendo.Layout("#statement", {model: banhji.statement}),
		customerDeposit: new kendo.Layout("#customerDeposit", {model: banhji.customerDeposit}),
		customerReportCenter: new kendo.Layout("#customerReportCenter"),
		customerSetting: new kendo.Layout("#customerSetting", {model: banhji.customerSetting}),

		//Cashier
		cashier: new kendo.Layout("#cashier", {model: banhji.cashier}),
		reconcile: new kendo.Layout("#reconcile", {model: banhji.reconcile}),
		cashTransaction: new kendo.Layout("#cashTransaction", {model: banhji.cashTransaction}),
		cashReceipt: new kendo.Layout("#cashReceipt", {model: banhji.cashReceipt}),
		cashPayment: new kendo.Layout("#cashPayment", {model: banhji.cashPayment}),
		
		//Inventory		
		itemDashBoard: new kendo.Layout("#itemDashBoard", {model: banhji.itemDashBoard}),
		itemCenter: new kendo.Layout("#itemCenter", {model: banhji.itemCenter}),		
		item: new kendo.Layout("#item", {model: banhji.item}),
		priceList: new kendo.Layout("#priceList", {model: banhji.priceList}),
		itemCatalog: new kendo.Layout("#itemCatalog", {model: banhji.itemCatalog}),
		itemAssembly: new kendo.Layout("#itemAssembly", {model: banhji.itemAssembly}),
		itemRecord: new kendo.Layout("#itemRecord", {model: banhji.itemRecord}),
		itemAdjustment: new kendo.Layout("#itemAdjustment", {model: banhji.itemAdjustment}),
		itemSetting: new kendo.Layout("#itemSetting", {model: banhji.itemSetting}),
		itemReportCenter: new kendo.Layout("#itemReportCenter"),
		inventoryPositionSummary: new kendo.Layout("#inventoryPositionSummary", {model: banhji.inventoryPositionSummary}),
		inventoryPositionDetail: new kendo.Layout("#inventoryPositionDetail", {model: banhji.inventoryPositionDetail}),
		inventorySaleByItem: new kendo.Layout("#inventorySaleByItem", {model: banhji.inventorySaleByItem}),
		inventoryTurnoverList: new kendo.Layout("#inventoryTurnoverList", {model: banhji.inventoryTurnoverList}),
		inventoryList: new kendo.Layout("#inventoryList", {model: banhji.inventoryList}),
		inventoryMovementSummary: new kendo.Layout("#inventoryMovementSummary", {model: banhji.inventoryMovementSummary}),
		inventoryMovementDetail: new kendo.Layout("#inventoryMovementDetail", {model: banhji.inventoryMovementDetail}),
		inventoryPurchaseByVendorSummary: new kendo.Layout("#inventoryPurchaseByVendorSummary", {model: banhji.inventoryPurchaseByVendorSummary}),
		inventoryPurchaseByVendorDetail: new kendo.Layout("#inventoryPurchaseByVendorDetail", {model: banhji.inventoryPurchaseByVendorDetail}),
		
		//Electricity
		eDashBoard: new kendo.Layout("#eDashBoard", {model: banhji.eDashBoard}),		
		eMeter: new kendo.Layout("#eMeter", {model: banhji.meter}),		
		eReading: new kendo.Layout("#eReading", {model: banhji.reading}),		
		eInvoice: new kendo.Layout("#eInvoice", {model: banhji.uInvoice}),		
		eInvoicePrint: new kendo.Layout("#eInvoicePrint", {model: banhji.invoicePrint}),		
		
		//Water
		wDashBoard: new kendo.Layout("#wDashBoard", {model: banhji.wDashBoard}),
		wCustomerCenter: new kendo.Layout("#wCustomerCenter", {model: banhji.wCustomerCenter}),
		wNewCustomer: new kendo.Layout("#wNewCustomer", {model: banhji.wNewCustomer}),
		wCustomer: new kendo.Layout("#wCustomer", {model: banhji.wCustomer}),
		wCustomerOrder: new kendo.Layout("#wCustomerOrder", {model: banhji.wCustomerOrder}),		
		wDeposit: new kendo.Layout("#wDeposit", {model: banhji.wDeposit}),
		wDepositWitdraw: new kendo.Layout("#wDepositWitdraw", {model: banhji.wDepositWitdraw}),
		wMeter: new kendo.Layout("#wMeter", {model: banhji.wMeter}),
		wReadingCenter: new kendo.Layout("#wReadingCenter", {model: banhji.wReadingCenter}),
		wEditReading: new kendo.Layout("#wEditReading", {model: banhji.wEditReading}),
		wReading: new kendo.Layout("#wReading", {model: banhji.wReading}),
		wIRReader: new kendo.Layout("#wIRReader", {model: banhji.wIRReader}),
		wReadingBook: new kendo.Layout("#wReadingBook", {model: langVM}),
		wInvoice: new kendo.Layout("#wInvoice", {model: banhji.wInvoice}),
		wPrintCenter: new kendo.Layout("#wPrintCenter", {model: banhji.wPrintCenter}),
		wInvoicePrint: new kendo.Layout("#wInvoicePrint", {model: banhji.wInvoicePrint}),		
		wInstallment: new kendo.Layout("#wInstallment", {model: banhji.wInstallment}),
		wInventoryItem: new kendo.Layout("#wInventoryItem", {model: banhji.wInventoryItem}),
				
		wReportCenter: new kendo.Layout("#wReportCenter", {model: banhji.wReportCenter}),
		wCustomerList: new kendo.Layout("#wCustomerList"),
		wCustomerBalance: new kendo.Layout("#wCustomerBalance"),
		wCustomerDeposit: new kendo.Layout("#wCustomerDeposit"),
		wLowConsumption: new kendo.Layout("#wLowConsumption"),
		wDisconnectList: new kendo.Layout("#wDisconnectList"),
		wAgingSummary: new kendo.Layout("#wAgingSummary", {model: banhji.wAgingSummary}),
		wAgingDetail: new kendo.Layout("#wAgingDetail", {model: banhji.wAgingDetail}),
		wSaleSummary: new kendo.Layout("#wSaleSummary", {model: banhji.wSaleSummary}),
		wSaleDetail: new kendo.Layout("#wSaleDetail", {model: banhji.wSaleDetail}),
		wPaymentSummary: new kendo.Layout("#wPaymentSummary", {model: banhji.wPaymentSummary}),
		wPaymentDetail: new kendo.Layout("#wPaymentDetail", {model: banhji.wPaymentDetail}),
		wPaymentBySourceSummary: new kendo.Layout("#wPaymentBySourceSummary", {model: banhji.wPaymentBySourceSummary}),
		wPaymentBySourceDetail: new kendo.Layout("#wPaymentBySourceDetail", {model: banhji.wPaymentBySourceDetail}),
		wCustomerNoMeter: new kendo.Layout("#wCustomerNoMeter", {model: banhji.wCustomerNoMeter}),
		wBrandNewCustomer: new kendo.Layout("#wBrandNewCustomer", {model: banhji.wBrandNewCustomer}),
		wBranch: new kendo.Layout("#wBranch", {model: banhji.wBranch}),		
		wSettings: new kendo.Layout("#wSettings", {model: banhji.wSettings}),		

		accountingMenu: new kendo.View("#accountingMenu", {model: langVM}),
		vendorMenu: new kendo.View("#vendorMenu", {model: langVM}),
		customerMenu: new kendo.View("#customerMenu", {model: langVM}),
		waterMenu: new kendo.View("#waterMenu", {model: langVM}),
		inventoryMenu: new kendo.View("#inventoryMenu", {model: langVM})				
		//END OF DAWINE  ---------------------------------------------------------------------------------
	};
	<!-- views and layout-->
	banhji.router = new kendo.Router({
		init: function() {
			
			var language = JSON.parse(localStorage.getItem('userData/lang'));	
			switch(language) {
				case "KH": 
					langVM.set('lang', km_KH);
					localforage.setItem("lang", language);
					langVM.set('localeCode', language);
					break;
				case "EN":
					langVM.set('lang', en_US);
					localforage.setItem("lang", language);
					langVM.set('localeCode', language);
					break;
				default: 
					langVM.set('lang', en_US);
					localforage.setItem("lang", language);
					langVM.set('localeCode', language);
			}
			localforage.getItem('user', function(err, data){
				if (err) {
					
				} else {
					$('#current-section').html('|&nbsp;Company');
					$('#home-menu').addClass('active');
					banhji.view.layout.render("#wrapperApplication");
					banhji.index.set('companyName', data.institute.name);
					banhji.index.set('companyLogo', data.institute.logo);
					var blank = new kendo.View('#blank-tmpl');
					banhji.view.layout.showIn('#menu', banhji.view.menu);
					if(userPool.getCurrentUser() == null) {
						window.location.replace(baseUrl + "login");
					}
					banhji.aws.getImage();
					console.log(data);
				}
			});	
			
		},
		routeMissing: function(e) {
			// banhji.view.layout.showIn("#layout-view", banhji.view.missing);
			console.log("no resource found.")
		}
	});

	/* Login page */
	banhji.router.route('/', function(){
		var blank = new kendo.View('#blank-tmpl');
		banhji.view.layout.showIn('#content', banhji.view.index);
		banhji.view.layout.showIn('#menu', banhji.view.menu);
		$('#main-top-navigation').append('<li><a href="\#">Home</a></li>');
		$('#current-section').text("");
		$("#secondary-menu").html("");
		banhji.index.getLogo();
		banhji.view.layout.showIn('#content', banhji.view.index);
	});
	
	
	//DAWINE -----------------------------------------------------------------------------------------	
	/*************************
	* Accounting Section   *
	**************************/
	banhji.router.route("/journal(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.journal);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.journal;
			
			if(banhji.pageLoaded["journal"]==undefined){
				banhji.pageLoaded["journal"] = true;

				vm.recurringDS.filter([
					{ field:"type", value:"Journal" },
					{ field:"is_recurring", value:1 }
				]);				            		
 
				var currency = $("#cbbCurrency").kendoComboBox({
                    dataTextField: "code",
                    dataValueField: "locale",
                    valuePrimitive: true,
                    height: 400,
                    template:"#=code# - #=country#",
                    dataSource: {
                    	transport: {
							read 	: {
								url: apiUrl+"currencies",
								type: "GET",
								headers: {
									"Entity": getDB(),
									"User": banhji.userManagement.getLogin() === null ? '':banhji.userManagement.getLogin().id
								},
								dataType: 'json'
							}							
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},						
						group: { field: "group" },						
						page: 1,						
						take: 100
                    }
                }).data("kendoComboBox");					
   
				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validates()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validates()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validates() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});				
			}

			vm.pageLoad(id,is_recurring);
		}		
	});
	banhji.router.route("/currency_rate", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.currencyRate);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.currencyRate;
			
			if(banhji.pageLoaded["currency_rate"]==undefined){
				banhji.pageLoaded["currency_rate"] = true;

				vm.setBaseCurrency();

				var currency = $("#cbbCurrency").kendoComboBox({
                    dataTextField: "code",
                    dataValueField: "id",
                    height: 400,
                    template:"#=code# - #=country#",
                    dataSource: {
                    	transport: {
							read 	: {
								url: apiUrl+"currencies",
								type: "GET",
								headers: {
									"Entity": getDB(),
									"User": banhji.userManagement.getLogin() === null ? '':banhji.userManagement.getLogin().id
								},
								dataType: 'json'
							}							
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},						
						group: { field: "group" },						
						page: 1,						
						take: 100
                    }
                }).data("kendoComboBox");

				function startChange() {
                    var startDate = start.value(),
                    endDate = end.value();

                    if (startDate) {
                        startDate = new Date(startDate);
                        startDate.setDate(startDate.getDate());
                        end.min(startDate);
                    } else if (endDate) {
                        start.max(new Date(endDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function endChange() {
                    var endDate = end.value(),
                    startDate = start.value();

                    if (endDate) {
                        endDate = new Date(endDate);
                        endDate.setDate(endDate.getDate());
                        start.max(endDate);
                    } else if (startDate) {
                        end.min(new Date(startDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function dateChanges(){
                	var strDate = "";

					if(start.value() && end.value()){
						strDate = "From " + kendo.toString(new Date(start.value()), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end.value()), "dd-MM-yyyy");
					}else if(start.value()){
						strDate = "On " + kendo.toString(new Date(start.value()),"dd-MM-yyyy");
					}else if(end.value()){
						strDate = "As Of " + kendo.toString(new Date(end.value()),"dd-MM-yyyy");
					}else{
						strDate = "";
					}

					$("#strDate").text(strDate);
                }

                var start = $("#sdate").kendoDatePicker({
                	format: "dd-MM-yyyy",
                    change: startChange
                }).data("kendoDatePicker");

                var end = $("#edate").kendoDatePicker({
                	format: "dd-MM-yyyy",
                    change: endChange
                }).data("kendoDatePicker");

                var sorter = $("#sorter").change(function(){
                	var today = new Date(),
                	sdate = "",
                	edate = "",
                	value = $("#sorter").val();

					switch(value){
					case "today":								
						sdate = today;
															  					
					  	break;
					case "week":			  	
						var first = today.getDate() - today.getDay(),
						last = first + 6;

						var sdate = new Date(today.setDate(first)),
						edate = new Date(today.setDate(last));						
						
					  	break;
					case "month":							  	
						var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
						edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

					  	break;
					case "year":				
					  	var sdate = new Date(today.getFullYear(), 0, 1),
					  	edate = new Date(today.getFullYear(), 11, 31);

					  	break;
					default:
											  
					}

					start.value(sdate);
					end.value(edate);
					
					start.max(end.value());
                	end.min(start.value());

                	dateChanges();                	
                });

                start.max(end.value());
                end.min(start.value());				

				$("#search").click(function(e){
		        	e.preventDefault();

		        	var para = [],
		        	currency_id = currency.value(), 
					sdate = kendo.toString(start.value(), "yyyy-MM-dd"), 
					edate = kendo.toString(end.value(), "yyyy-MM-dd");
					
		        	//Dates
		        	if(start.value() && end.value()){        		
		            	para.push({ field:"date >=", value: sdate });
		            	para.push({ field:"date <=", value: edate });            	          	            	
		            }else if(start.value()){
		            	para.push({ field:"date", value: sdate });
		            }else if(end.value()){
		            	para.push({ field:"date <=", value: edate });
		            }else{
		            	
		            }

		            if(currency_id){
		            	para.push({ field:"currency_id", value: currency_id }); 
		            }         

		            vm.dataSource.filter(para);		            
		        });
			}

			vm.pageLoad();			
		}		
	});
	banhji.router.route("/recurring", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.recurring);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.recurring;
			
			if(banhji.pageLoaded["recurring"]==undefined){
				banhji.pageLoaded["recurring"] = true;   
				
				vm.dataSource.filter({ field:"is_recurring", value: 1 });	 		
			}

			vm.pageLoad();					
		}		
	});
	banhji.router.route("/journal_report", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.journalReport);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);			
			
			var vm = banhji.journalReport;

			if(banhji.pageLoaded["journal_report"]==undefined){
				banhji.pageLoaded["journal_report"] = true;

				function startChange() {
                    var startDate = start.value(),
                    endDate = end.value();

                    if (startDate) {
                        startDate = new Date(startDate);
                        startDate.setDate(startDate.getDate());
                        end.min(startDate);
                    } else if (endDate) {
                        start.max(new Date(endDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function endChange() {
                    var endDate = end.value(),
                    startDate = start.value();

                    if (endDate) {
                        endDate = new Date(endDate);
                        endDate.setDate(endDate.getDate());
                        start.max(endDate);
                    } else if (startDate) {
                        end.min(new Date(startDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function dateChanges(){
                	var strDate = "";

					if(start.value() && end.value()){
						strDate = "From " + kendo.toString(new Date(start.value()), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end.value()), "dd-MM-yyyy");
					}else if(start.value()){
						strDate = "On " + kendo.toString(new Date(start.value()),"dd-MM-yyyy");
					}else if(end.value()){
						strDate = "As Of " + kendo.toString(new Date(end.value()),"dd-MM-yyyy");
					}else{
						strDate = "";
					}

					$("#strDate").text(strDate);
                }

                var start = $("#sdate").kendoDatePicker({
                	format: "dd-MM-yyyy",
                    change: startChange
                }).data("kendoDatePicker");

                var end = $("#edate").kendoDatePicker({
                	format: "dd-MM-yyyy",
                    change: endChange
                }).data("kendoDatePicker");

                var sorter = $("#sorter").change(function(){
                	var today = new Date(),
                	sdate = "",
                	edate = "",
                	value = $("#sorter").val();

					switch(value){
					case "today":								
						sdate = today;
															  					
					  	break;
					case "week":			  	
						var first = today.getDate() - today.getDay(),
						last = first + 6;

						var sdate = new Date(today.setDate(first)),
						edate = new Date(today.setDate(last));						
						
					  	break;
					case "month":							  	
						var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
						edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

					  	break;
					case "year":				
					  	var sdate = new Date(today.getFullYear(), 0, 1),
					  	edate = new Date(today.getFullYear(), 11, 31);

					  	break;
					default:
											  
					}

					start.value(sdate);
					end.value(edate);
					
					start.max(end.value());
                	end.min(start.value());

                	dateChanges();                	
                });

                start.max(end.value());
                end.min(start.value());				

				$("#search").click(function(e){
		        	e.preventDefault();

		        	var para = [],		        	
					sdate = kendo.toString(start.value(), "yyyy-MM-dd"), 
					edate = kendo.toString(end.value(), "yyyy-MM-dd");
					
		        	//Dates
		        	if(start.value() && end.value()){        		
		            	para.push({ field:"issued_date >=", value: sdate });
		            	para.push({ field:"issued_date <=", value: edate });            	          	            	
		            }else if(start.value()){
		            	para.push({ field:"issued_date", value: sdate });
		            }else if(end.value()){
		            	para.push({ field:"issued_date <=", value: edate });
		            }else{
		            	
		            }

		            vm.dataSource.filter(para);		            
		        });								
						
			}
		}		
	});
	banhji.router.route("/sale_tax", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.saleTax);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.accountingMenu);			
			
			var vm = banhji.saleTax;

			if(banhji.pageLoaded["sale_tax"]==undefined){
				banhji.pageLoaded["sale_tax"] = true;
														
			}
		$("#ddlIncome").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",		            
		            template: '#=code# #=name#',
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "accounts",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"account_type_id", value: 20 }
					}
		        }).data("kendoDropDownList");
		}		
	});
	
	/*************************
	*   Employee Section   *
	**************************/
	banhji.router.route('/employees', function() {
		banhji.view.layout.showIn('#menu', banhji.view.menu);
		banhji.view.layout.showIn('#content', banhji.view.employeeContainer);
		banhji.view.employeeContainer.showIn('#employeeDashboard', banhji.view.employeeDashboard);
	});
	banhji.router.route("/cash_advance(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.cashAdvance);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.cashAdvance;
			
			if(banhji.pageLoaded["cash_advance"]==undefined){
				banhji.pageLoaded["cash_advance"] = true;
				
				vm.contactDS.filter({ field:"contact_type_id", value:3 });

				vm.recurringDS.filter([
					{ field:"type", value:"Cash_Advance" },
					{ field:"is_recurring", value:1 }
				]);				            		
 
				var currency = $("#cbbCurrency").kendoComboBox({
                    dataTextField: "code",
                    dataValueField: "locale",
                    valuePrimitive: true,
                    height: 400,
                    template:"#=code# - #=country#",
                    dataSource: {
                    	transport: {
							read 	: {
								url: apiUrl+"currencies",
								type: "GET",
								headers: {
									"Entity": getDB(),
									"User": banhji.userManagement.getLogin() === null ? '':banhji.userManagement.getLogin().id
								},
								dataType: 'json'
							}							
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},						
						group: { field: "group" },						
						page: 1,						
						take: 100
                    }
                }).data("kendoComboBox");					
   
				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});				
			}

			vm.pageLoad(id,is_recurring);
		}		
	});
	banhji.router.route("/expense(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.expense);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.expense;
			
			if(banhji.pageLoaded["expense"]==undefined){
				banhji.pageLoaded["expense"] = true;						
   
				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});				
			}

			vm.pageLoad(id,is_recurring);
		}		
	});

	/*************************
	*   Vendor Section   *
	**************************/
	banhji.router.route("/vendors", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.vendorDashboard);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.vendorMenu);
			
			var vm = banhji.vendorDashboard;

			if(banhji.pageLoaded["vendors"]==undefined){
				banhji.pageLoaded["vendors"] = true;
				
								               
			}

			vm.pageLoad();				
		}
	});
	banhji.router.route("/vendor_center", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.vendorCenter);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.vendorMenu);
			
			var vm = banhji.vendorCenter;

			if(banhji.pageLoaded["vendor_center"]==undefined){
				banhji.pageLoaded["vendor_center"] = true;
				
				vm.sorterChanges();				
				vm.contactTypeDS.filter({ field:"parent_id", value:2 });
				
				vm.contactDS.query({
				  	filter:{ field:"parent_id", operator:"where_related", model:"contact_type", value:2 },
				  	page: 1,
				  	take: 50
				}).then(function(e) {
				    var view = vm.contactDS.data();
				    
				    if(view.length>0){
				    	vm.set("obj", view[0]);				    	
				    	vm.loadSummary(view[0].id);
				    	vm.loadTransaction(view[0].id);				    	
				    	vm.loadNote(view[0].id);
				    }
				});				               
			}				
		}
	});
	banhji.router.route("/vendor(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{			
			var vm = banhji.vendor;
			vm.pageLoad(id);
			
			banhji.view.layout.showIn("#content", banhji.view.vendor);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			if(banhji.pageLoaded["vendor"]==undefined){
				banhji.pageLoaded["vendor"] = true;		             		        	       		         

		        var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){					
		        	e.preventDefault();					

					if(validator.validate()){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});	        	
			}			
		}				
	});
	banhji.router.route("/purchase_order(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.po);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.po;
			
			if(banhji.pageLoaded["po"]==undefined){
				banhji.pageLoaded["po"] = true;				        

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#savePrint").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.print();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id, is_recurring);			
		}		
	});
	banhji.router.route("/grn(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.grn);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.grn;
			
			if(banhji.pageLoaded["grn"]==undefined){
				banhji.pageLoaded["grn"] = true;				        

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#savePrint").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.print();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id, is_recurring);			
		}		
	});	
	banhji.router.route("/vendor_deposit(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.vendorDeposit);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.vendorDeposit;
			
			if(banhji.pageLoaded["vendor_deposit"]==undefined){
				banhji.pageLoaded["vendor_deposit"] = true;				        

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#savePrint").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.print();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});				
			}

			vm.pageLoad(id, is_recurring);			
		}		
	});	
	banhji.router.route("/purchase(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.purchase);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.purchase;
			
			if(banhji.pageLoaded["purchase"]==undefined){
				banhji.pageLoaded["purchase"] = true;								        

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#savePrint").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.print();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id, is_recurring);			
		}		
	});
	banhji.router.route("/purchase_return(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.purchaseReturn);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.purchaseReturn;
			
			if(banhji.pageLoaded["purchase_return"]==undefined){
				banhji.pageLoaded["purchase_return"] = true;				        

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.get("remain")==0){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.get("remain")==0){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#savePrint").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.get("remain")==0){
		            	vm.save();
		            	window.print();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring() && vm.get("remain")==0){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id, is_recurring);			
		}		
	});	
	banhji.router.route("/vendor_setting", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.vendorSetting);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.vendorMenu);

			var vm = banhji.vendorSetting;
			
			if(banhji.pageLoaded["vendor_setting"]==undefined){
				banhji.pageLoaded["vendor_setting"] = true;

				vm.contactTypeDS.filter({ field:"parent_id", value: 2 });
			}

			vm.pageLoad();			     		
		}
	});


	/*************************
	*   SME Section   *
	**************************/
	banhji.router.route("/customers", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.customerDashboard);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);
			
			var vm = banhji.customerDashboard;

			if(banhji.pageLoaded["customers"]==undefined){
				banhji.pageLoaded["customers"] = true;					               
			}

			$('#graph-01').kendoChart({
                title: {
                    text: "Gross domestic product growth \n /GDP annual %/"
                },
                legend: {
                    position: "bottom"
                },
                seriesDefaults: {
                    type: "area",
                    area: {
                        line: {
                            style: "smooth"
                        }
                    }
                },
                series: [{
                    name: "India",
                    data: [3.907, 7.943, 7.848, 9.284, 9.263, 9.801, 3.890, 8.238, 9.552, 6.855]
                }, {
                    name: "World",
                    data: [1.988, 2.733, 3.994, 3.464, 4.001, 3.939, 1.333, -2.245, 4.339, 2.727]
                }, {
                    name: "Haiti",
                    data: [-0.253, 0.362, -3.519, 1.799, 2.252, 3.343, 0.843, 2.877, -5.416, 5.590]
                }],
                valueAxis: {
                    labels: {
                        format: "{0}%"
                    },
                    line: {
                        visible: false
                    },
                    axisCrossingValue: -10
                },
                categoryAxis: {
                    categories: [2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011],
                    majorGridLines: {
                        visible: false
                    },
                    labels: {
                        rotation: "auto"
                    }
                },
                tooltip: {
                    visible: true,
                    format: "{0}%",
                    template: "#= series.name #: #= value #"
                }
            });

			vm.pageLoad();				
		}
	});
	banhji.router.route("/customer_center", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.customerCenter);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);
			
			var vm = banhji.customerCenter;

			if(banhji.pageLoaded["customer_center"]==undefined){
				banhji.pageLoaded["customer_center"] = true;
				
				vm.sorterChanges();				
				
				vm.contactDS.query({
				  	filter:{ field:"parent_id", operator:"where_related", model:"contact_type", value:1 },
				  	page: 1,
				  	take: 50
				}).then(function(e) {
				    var view = vm.contactDS.data();
				    
				    if(view.length>0){
				    	vm.set("obj", view[0]);				    	
				    	vm.loadOutStandingInvoice(view[0].id);
				    	vm.loadTransaction(view[0].id);				    	
				    	vm.loadNote(view[0].id);
				    }
				});				               
			}				
		}
	});
	banhji.router.route("/customer(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{			
			var vm = banhji.customer;
						
			banhji.view.layout.showIn("#content", banhji.view.customer);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			if(banhji.pageLoaded["customer"]==undefined){
				banhji.pageLoaded["customer"] = true;		         

		        var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){				
					e.preventDefault();				

					if(validator.validate() && vm.get("isDuplicateNumber")==false){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});	        	
			}

			vm.pageLoad(id);			
		}				
	});
	banhji.router.route("/invoice(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.invoice);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.invoice;
			
			if(banhji.pageLoaded["invoice"]==undefined){
				banhji.pageLoaded["invoice"] = true;				        

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#savePrint").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.print();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id, is_recurring);			
		}		
	});
	banhji.router.route("/cash_sale(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.cashSale);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.cashSale;
			
			if(banhji.pageLoaded["cash_sale"]==undefined){
				banhji.pageLoaded["cash_sale"] = true;				        

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#savePrint").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.print();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
				$("#ddlCash").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",		            
		            template: '#=code# #=name#',
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "accounts",
								headers: banhji.header,
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"account_type_id", value: 6 }
					}
		        }).data("kendoDropDownList");
			}

			vm.pageLoad(id, is_recurring);			
		}		
	});
	banhji.router.route("/sale_order(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.saleOrder);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.saleOrder;
			
			if(banhji.pageLoaded["sale_order"]==undefined){
				banhji.pageLoaded["sale_order"] = true;				        

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#savePrint").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.print();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id, is_recurring);			
		}		
	});
	banhji.router.route("/quote(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.quote);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.quote;
			
			if(banhji.pageLoaded["quote"]==undefined){
				banhji.pageLoaded["quote"] = true;				        

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#savePrint").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.print();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id, is_recurring);			
		}		
	});		
	banhji.router.route("/gdn(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.gdn);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.gdn;
			
			if(banhji.pageLoaded["gdn"]==undefined){
				banhji.pageLoaded["gdn"] = true;				        

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#savePrint").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.print();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id, is_recurring);			
		}		
	});
	banhji.router.route("/sale_return(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.saleReturn);					
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.saleReturn;
			
			if(banhji.pageLoaded["sale_return"]==undefined){
				banhji.pageLoaded["sale_return"] = true;				        

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');				
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();
					
					if(validator.validate() && vm.get("remain")===0){
		            	vm.save();		            	
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.get("remain")===0){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#savePrint").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.get("remain")===0){
		            	vm.save();
		            	window.print();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring() && remain==0){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id, is_recurring);			
		}		
	});
	banhji.router.route("/statement(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{			

			banhji.view.layout.showIn("#content", banhji.view.statement);					
			
			var vm = banhji.statement;

			if(banhji.pageLoaded["statement"]==undefined){
				banhji.pageLoaded["statement"] = true;

				function startChange() {
                    var startDate = start.value(),
                    endDate = end.value();

                    if (startDate) {
                        startDate = new Date(startDate);
                        startDate.setDate(startDate.getDate());
                        end.min(startDate);
                    } else if (endDate) {
                        start.max(new Date(endDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function endChange() {
                    var endDate = end.value(),
                    startDate = start.value();

                    if (endDate) {
                        endDate = new Date(endDate);
                        endDate.setDate(endDate.getDate());
                        start.max(endDate);
                    } else if (startDate) {
                        end.min(new Date(startDate));
                    } else {
                        endDate = new Date();
                        start.max(endDate);
                        end.min(endDate);
                    }

                    dateChanges();
                }

                function dateChanges(){
                	var strDate = "";

					if(start.value() && end.value()){
						strDate = "From " + kendo.toString(new Date(start.value()), "dd-MM-yyyy") + " To " + kendo.toString(new Date(end.value()), "dd-MM-yyyy");
					}else if(start.value()){
						strDate = "On " + kendo.toString(new Date(start.value()),"dd-MM-yyyy");
					}else if(end.value()){
						strDate = "As Of " + kendo.toString(new Date(end.value()),"dd-MM-yyyy");
					}else{
						strDate = "";
					}

					$("#strDate").text(strDate);
                }

                var start = $("#sdate").kendoDatePicker({
                	format: "dd-MM-yyyy",
                    change: startChange
                }).data("kendoDatePicker");

                var end = $("#edate").kendoDatePicker({
                	format: "dd-MM-yyyy",
                    change: endChange
                }).data("kendoDatePicker");

                var sorter = $("#sorter").change(function(){
                	var today = new Date(),
                	sdate = "",
                	edate = "",
                	value = $("#sorter").val();

					switch(value){
					case "today":								
						sdate = today;
															  					
					  	break;
					case "week":			  	
						var first = today.getDate() - today.getDay(),
						last = first + 6;

						var sdate = new Date(today.setDate(first)),
						edate = new Date(today.setDate(last));						
						
					  	break;
					case "month":							  	
						var sdate = new Date(today.getFullYear(), today.getMonth(), 1),
						edate = new Date(today.getFullYear(), today.getMonth() + 1, 0);

					  	break;
					case "year":				
					  	var sdate = new Date(today.getFullYear(), 0, 1),
					  	edate = new Date(today.getFullYear(), 11, 31);

					  	break;
					default:
											  
					}

					start.value(sdate);
					end.value(edate);
					
					start.max(end.value());
                	end.min(start.value());

                	dateChanges();                	
                });

                start.max(end.value());
                end.min(start.value());
								
				$("#gridAging").kendoGrid({
					autoBind: false,		            		            		           
		            dataSource: vm.agingDS,		           
		            resizable: true,
		            columns: [		                		                	                
		                { field: "amount", title:"Current", template:'#=kendo.toString(current, locale=="km-KH"?"c0":"c", locale)#', attributes:{style:"text-align:right;"} },		                
		                { field: "oneMonth", title:"1-30", template:'#=kendo.toString(oneMonth, locale=="km-KH"?"c0":"c", locale)#', attributes:{style:"text-align:right;"} },
		                { field: "twoMonth", title:"31-60", template:'#=kendo.toString(twoMonth, locale=="km-KH"?"c0":"c", locale)#', attributes:{style:"text-align:right;"} },		                
		                { field: "threeMonth", title:"61-90", template:'#=kendo.toString(threeMonth, locale=="km-KH"?"c0":"c", locale)#', attributes:{style:"text-align:right;"} },
		                { field: "overMonth", title:">90", template:'#=kendo.toString(overMonth, locale=="km-KH"?"c0":"c", locale)#', attributes:{style:"text-align:right;"} },		                
		                { field: "amount", title:"Total", template:'#=kendo.toString(amount, locale=="km-KH"?"c0":"c", locale)#', attributes:{style:"text-align:right;"} }
		            ]
		        });

		        $("#grid").kendoGrid({
		            toolbar: ["excel"],
		            excel: {
		                fileName: "statement.xlsx"
		            },		            		           
		            dataSource: vm.dataSource,
		            autoBind:false,		            		           		                        
		            reorderable: true,
		            resizable: true,
		            rowTemplate: kendo.template($("#statement-row-template").html())
		            // columns: [		                
		            //     { field: "issued_date", title: "Date" },
		            //     { field: "description", title: "Description" },		                
		            //     { field: "amount", title:"Amount", template:'#=kendo.toString(amount, locale=="km-KH"?"c0":"c", locale)#', attributes:{style:"text-align:right;"} },		                
		            //     { field: "balance", title:"Balance", attributes:{style:"text-align:right;"}, template:kendo.template($("#statement-balance-template").html()) },
		            // ]
		        });

		        $("#search").click(function(e){
		        	e.preventDefault();

		        	var para = [], 
					sdate = kendo.toString(start.value(), "yyyy-MM-dd"), 
					edate = kendo.toString(end.value(), "yyyy-MM-dd");
					
		        	//Dates
		        	if(start.value() && end.value()){        		
		            	para.push({ field:"issued_date >=", value: sdate });
		            	para.push({ field:"issued_date <=", value: edate });            	          	            	
		            }else if(start.value()){
		            	para.push({ field:"issued_date", value: sdate });
		            }else if(end.value()){
		            	para.push({ field:"issued_date <=", value: edate });
		            }else{
		            	
		            }

		            para.push({ field:"contact_id", value: vm.obj.id });          

		            vm.dataSource.filter(para);
		            vm.agingDS.filter(para);
		            vm.agingDS.bind("requestEnd", function(e){
		            	if(e.type=="read"){
		            		var response = e.response.results;
		            		vm.set("total", kendo.toString(response[0].amount), "c");
		            	}
		            });
		        });		       			
			}

			vm.pageLoad(id);
		}		
	});
	banhji.router.route("/customer_deposit(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.customerDeposit);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.customerDeposit;
			
			if(banhji.pageLoaded["customer_deposit"]==undefined){
				banhji.pageLoaded["customer_deposit"] = true;				        

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#savePrint").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.print();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});				
			}

			vm.pageLoad(id, is_recurring);			
		}		
	});
	banhji.router.route("/customer_report_center", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.customerReportCenter);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);

			//var vm = banhji.customerReportCenter;			
			
			if(banhji.pageLoaded["customer_report_center"]==undefined){
				banhji.pageLoaded["customer_report_center"] = true;				
								
			}			
		}		
	});
	banhji.router.route("/customer_list", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.customerList);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);

			var vm = banhji.customerList;			
			
			if(banhji.pageLoaded["customer_list"]==undefined){
				banhji.pageLoaded["customer_list"] = true;				
				
				vm.contactTypeDS.filter({ field:"parent_id", value:1 });
				vm.dataSource.filter({ field:"parent_id", operator:"where_related", model:"contact_type", value:1 });

				$("#grid").kendoGrid({
				    dataSource: vm.dataSource,
				    toolbar: ["excel"],
		            excel: {
		                fileName: "Customer_List.xlsx",
		                filterable: true
		            },
		            reorderable: true,
				    groupable: true,
				    sortable: true,				    				    
				    pageable: true,				    
				    columns:[
				    	{ field: "number", title:"Number" },
				    	{ field: "surname", title:"Surname" },
				    	{ field: "name", title:"Name" },
				    	{ field: "contact_type", title:"Type" }
				    ]				    
				});
			}			
		}		
	});
	banhji.router.route("/customer_setting", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.customerSetting);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.customerMenu);

			var vm = banhji.customerSetting;
			
			if(banhji.pageLoaded["customer_setting"]==undefined){
				banhji.pageLoaded["customer_setting"] = true;

				vm.contactTypeDS.filter({ field:"parent_id", value: 1 });
			}

			vm.pageLoad();			     		
		}
	});


	/*************************
	*   Cashier Section   *
	**************************/
	banhji.router.route("/cashier(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.cashier);				
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.cashier;
						
			if(banhji.pageLoaded["cashier"]==undefined){
				banhji.pageLoaded["cashier"] = true;
				
				$("#ddlContact").kendoComboBox({
					placeholder: "លេខកូដ...",
					valuePrimitive: true,
	                dataTextField: "fullname",
	                dataValueField: "id",
	                filter: "search",
	                autoBind: false,
	                minLength: 3,
	                height: 400,
	                dataSource: vm.contactDS,
	                change: function(e) {
					    var value = this.value(),					    
					    data = this.dataSource.get(value);

					    vm.set("customer", data);
					    vm.transactionDS.filter({ field:"contact_id", value: value });
					    vm.loadInvoice(value, data.fullname, data.account_id);					    				    	
					},
					template:'#=number# #=fullname#'
	            });	           

		        $("#ddlCashAccount").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "accounts",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"account_type_id", value: 6 }
					},
					template: '#=code# #=name#'             
		        }).data("kendoDropDownList");

		        var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});        		
			}

			vm.pageLoad(id);
		}							
	});
	banhji.router.route("/reconcile(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.reconcile);				
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.reconcile;
			vm.pageLoad(id);
			
			if(banhji.pageLoaded["reconcile"]==undefined){
				banhji.pageLoaded["reconcile"] = true;

				$("#ddlCashAccount").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "accounts",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"account_type_id", value: 6 }
					},
					template: '#=code# #=name#'             
		        }).data("kendoDropDownList");

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.get("isExisting")==false && vm.get("obj").transfered_amount>0){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}
		}					
	});
	banhji.router.route("/cash_transaction(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.cashTransaction);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.cashTransaction;
			
			if(banhji.pageLoaded["cash_transaction"]==undefined){
				banhji.pageLoaded["cash_transaction"] = true;
				
				vm.recurringDS.filter([
					{ field:"type", operator:"where_in", value:["Deposit","Witdraw","Transfer"] },
					{ field:"is_recurring", value:1 }
				]);				            		
 
				var currency = $("#cbbCurrency").kendoComboBox({
                    dataTextField: "code",
                    dataValueField: "locale",
                    valuePrimitive: true,
                    height: 400,
                    template:"#=code# - #=country#",
                    dataSource: {
                    	transport: {
							read 	: {
								url: apiUrl+"currencies",
								type: "GET",
								headers: {
									"Entity": getDB(),
									"User": banhji.userManagement.getLogin() === null ? '':banhji.userManagement.getLogin().id
								},
								dataType: 'json'
							}							
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},						
						group: { field: "group" },						
						page: 1,						
						take: 100
                    }
                }).data("kendoComboBox");					
   
				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});				
			}

			vm.pageLoad(id,is_recurring);
		}		
	});
	banhji.router.route("/cash_receipt(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.cashReceipt);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.cashReceipt;
			
			if(banhji.pageLoaded["cash_receipt"]==undefined){
				banhji.pageLoaded["cash_receipt"] = true;

				vm.paymentTermDS.read();				        

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#savePrint").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.print();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id, is_recurring);			
		}		
	});
	banhji.router.route("/cash_payment(/:id)(/:is_recurring)", function(id,is_recurring){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.cashPayment);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.cashPayment;
			
			if(banhji.pageLoaded["cash_payment"]==undefined){
				banhji.pageLoaded["cash_payment"] = true;				        

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#saveNew").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();		            	

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveClose").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.history.back();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#savePrint").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();
		            	window.print();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});

				$("#saveRecurring").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.validateRecurring()){
		            	vm.saveRecurring();
		            	
		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id, is_recurring);			
		}		
	});


	/*************************
	*   Inventory Section   *
	**************************/
	banhji.router.route("/inventories", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.itemDashBoard);			
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);
			
			var vm = banhji.itemDashBoard;

			if(banhji.pageLoaded["inventories"]==undefined){							
				banhji.pageLoaded["inventories"] = true;
												
			}

			vm.pageLoad();
		}				
	});	
	banhji.router.route("/item_center", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.itemCenter);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);
			
			var vm = banhji.itemCenter;

			if(banhji.pageLoaded["item_center"]==undefined){
				banhji.pageLoaded["item_center"] = true;
				
				vm.sorterChanges();				
								
				vm.itemDS.query({
				  	filter:{ field:"item_type_id", value:1 },
				  	page: 1,
				  	take: 100
				}).then(function(){
					var view = vm.itemDS.view();
					vm.set("obj", view[0]);
					vm.loadMovement(view[0].id);
				});				               
			}				
		}
	});
	banhji.router.route("/item(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			var vm = banhji.item;
			
			banhji.view.layout.showIn("#content", banhji.view.item);						
			
			if(banhji.pageLoaded["item"]==undefined){
				banhji.pageLoaded["item"] = true;				

				vm.loadVendor();
				vm.loadCustomer();

				var categories = $("#categories").kendoDropDownList({
                    optionLabel: "(--- Category ---)",
                    valuePrimitive: true,
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.categoryDS,
                    change: function(e) {
					    //var value = this.value();
					    vm.set("item_group_id", 0);
					}
                }).data("kendoDropDownList");

                var itemGroups = $("#itemGroups").kendoDropDownList({
                	optionLabel: "(--- Group ---)",
                	valuePrimitive: true,
                    autoBind: false,
                    cascadeFrom: "categories",
                    cascadeFromField: "category_id",                    
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.itemGroupDS
                }).data("kendoDropDownList");				

				$("#ddlIncome").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",		            
		            template: '#=code# #=name#',
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "accounts",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"account_type_id", value: 20 }
					}
		        }).data("kendoDropDownList");

		        $("#ddlCogs").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            template: '#=code# #=name#',
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "accounts",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"account_type_id", value: 21 }
					}		            
		        }).data("kendoDropDownList");

		        $("#ddlInventory").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            template: '#=code# #=name#',
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "accounts",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"account_type_id", value: 28 }
					}
		        }).data("kendoDropDownList");

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id);	
		}
	});
	banhji.router.route("/item_prices/:id", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{			
			var vm = banhji.priceList;
			
			banhji.view.layout.showIn("#content", banhji.view.priceList);
			
			if(banhji.pageLoaded["item_prices"]==undefined){
				banhji.pageLoaded["item_prices"] = true;
				
			}

			vm.pageLoad(id);				
		}
	});
	banhji.router.route("/item_catalog(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			var vm = banhji.itemCatalog;
			
			banhji.view.layout.showIn("#content", banhji.view.itemCatalog);						
			
			if(banhji.pageLoaded["item_catalog"]==undefined){
				banhji.pageLoaded["item_catalog"] = true;

				vm.itemDS.filter([
					{ field:"item_type_id", operator:"where_in", value: [1,4] }
				]);

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id);	
		}
	});
	banhji.router.route("/item_assembly(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			var vm = banhji.itemAssembly;
			
			banhji.view.layout.showIn("#content", banhji.view.itemAssembly);						
			
			if(banhji.pageLoaded["item_assembly"]==undefined){
				banhji.pageLoaded["item_assembly"] = true;

				vm.itemDS.filter([
					{ field:"item_type_id", operator:"where_in", value: [1,4] },
					{ field:"category_id", operator:"where_not_in", value: [8,9] }
				]);

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id);	
		}
	});
	banhji.router.route("/item_record(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{		
			var vm = banhji.itemRecord;
			banhji.view.layout.showIn("#content", banhji.view.itemRecord);
			
			if(banhji.pageLoaded["item_record"]==undefined){
				banhji.pageLoaded["item_record"] = true;

				vm.contactDS.filter({ field:"parent_id", operator:"where_related", model:"contact_type", value:2 });

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});	            
			}

			vm.pageLoad(id);				
		}
	});
	banhji.router.route("/item_adjustment(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.itemAdjustment);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

			var vm = banhji.itemAdjustment;

			if(banhji.pageLoaded["item_adjustment"]==undefined){
				banhji.pageLoaded["item_adjustment"] = true;
								
				vm.contactDS.filter({ field:"contact_type_id", value:3 });

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id);
		}		
	});
	banhji.router.route("/item_setting", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.itemSetting);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

			var vm = banhji.itemSetting;
			
			if(banhji.pageLoaded["item_setting"]==undefined){
				banhji.pageLoaded["item_setting"] = true;
				
				vm.subCategoryDS.filter({ field:"sub_of", value: 0 });
				vm.subItemGroupDS.filter({ field:"sub_of", value: 0 });
				vm.subBrandDS.filter({ field:"sub_of", value: 0 });
			}

			vm.pageLoad();			     		
		}
	});
	banhji.router.route("/item_report_center", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.itemReportCenter);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

			//var vm = banhji.itemReportCenter;			
			
			if(banhji.pageLoaded["item_report_center"]==undefined){
				banhji.pageLoaded["item_report_center"] = true;				
											
			}			
		}		
	});
	banhji.router.route("/inventory_position_summary", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.inventoryPositionSummary);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

			var vm = banhji.inventoryPositionSummary;			
			
			if(banhji.pageLoaded["inventory_position_summary"]==undefined){
				banhji.pageLoaded["inventory_position_summary"] = true;				
				
			}			
		}		
	});
	banhji.router.route("/inventory_position_detail", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.inventoryPositionDetail);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

			var vm = banhji.inventoryPositionDetail;			
			
			if(banhji.pageLoaded["inventory_position_detail"]==undefined){
				banhji.pageLoaded["inventory_position_detail"] = true;				
								
			}			
		}		
	});
	banhji.router.route("/inventory_sale_by_item", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.inventorySaleByItem);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

			var vm = banhji.inventorySaleByItem;			
			
			if(banhji.pageLoaded["inventory_sale_by_item"]==undefined){
				banhji.pageLoaded["inventory_sale_by_item"] = true;				
				
			}			
		}		
	});
	banhji.router.route("/inventory_turnover_list", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.inventoryTurnoverList);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

			var vm = banhji.inventoryTurnoverList;			
			
			if(banhji.pageLoaded["inventory_turnover_list"]==undefined){
				banhji.pageLoaded["inventory_turnover_list"] = true;				
				
			}			
		}		
	});
	banhji.router.route("/inventory_list", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.inventoryList);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);
			
			var vm = banhji.inventoryList;						
			
			if(banhji.pageLoaded["inventory_list"]==undefined){
				banhji.pageLoaded["inventory_list"] = true;

				vm.vendorDS.filter({ field:"parent_id", operator:"where_related", model:"contact_type", value: 2 });

				var categories = $("#categories").kendoDropDownList({
                    optionLabel: "(--- Category ---)",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.categoryDS,
                    change: function(e) {
					    //var value = this.value();
					    vm.set("item_group_id", 0);
					}
                }).data("kendoDropDownList");

                var itemGroups = $("#itemGroups").kendoDropDownList({
                    autoBind: false,
                    cascadeFrom: "categories",
                    cascadeFromField: "category_id",
                    optionLabel: "(--- Group ---)",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.itemGroupDS
                }).data("kendoDropDownList");
			}

			vm.pageLoad();				
		}
	});
	banhji.router.route("/inventory_movement_summary", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.inventoryMovementSummary);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

			var vm = banhji.inventoryMovementSummary;			
			
			if(banhji.pageLoaded["inventory_movement_summary"]==undefined){
				banhji.pageLoaded["inventory_movement_summary"] = true;				
				
			}			
		}		
	});
	banhji.router.route("/inventory_movement_detail", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.inventoryMovementDetail);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

			var vm = banhji.inventoryMovementDetail;			
			
			if(banhji.pageLoaded["inventory_movement_detail"]==undefined){
				banhji.pageLoaded["inventory_movement_detail"] = true;				
				
			}			
		}		
	});
	banhji.router.route("/inventory_purchase_by_vendor_summary", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.inventoryPurchaseByVendorSummary);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

			var vm = banhji.inventoryPurchaseByVendorSummary;			
			
			if(banhji.pageLoaded["inventory_purchase_by_vendor_summary"]==undefined){
				banhji.pageLoaded["inventory_purchase_by_vendor_summary"] = true;				
				
			}			
		}		
	});
	banhji.router.route("/inventory_purchase_by_vendor_detail", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.inventoryPurchaseByVendorDetail);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.inventoryMenu);

			var vm = banhji.inventoryPurchaseByVendorDetail;			
			
			if(banhji.pageLoaded["inventory_purchase_by_vendor_detail"]==undefined){
				banhji.pageLoaded["inventory_purchase_by_vendor_detail"] = true;				
				
			}			
		}		
	});


	/*************************
	*   Electricity Section   *
	**************************/
	banhji.router.route("/electricity", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			var vm = banhji.eDashBoard;
			
			banhji.view.layout.showIn("#content", banhji.view.eDashBoard);
			$("#secondary-menu").html("<li><a href='\#/electricity' class='glyphicons home'><i></i></a></li> <li><a href='\#/customer'>អតិថិជនថ្មី</a></li> <li><a href='\#/meter/1'>Meter</a></li> <li><a href='\#/reading/1'>Reading</a></li> <li><a href='\#/uInvoice/1'>វិក្កយបត្រ</a></li> <li><a href='\#/uInvoice_print/1'>Printវិក្កយបត្រ</a></li> <li><a href='\#/cashier'>បេឡាករ</a></li> ");			
					
			vm.pageLoad();		

			if(banhji.pageLoaded["electricity"]==undefined){							
				banhji.pageLoaded["electricity"] = true;

				vm.sorterChanges();
				vm.search();

				var monthlyDS = new kendo.data.DataSource({
					transport: {
						read 	: {
							url: apiUrl + 'invoices/emonthly',
							type: "GET",
							headers: {
								"Entity": getDB(),
								"User": banhji.userManagement.getLogin() === null ? '':banhji.userManagement.getLogin().id
							},
							dataType: 'json'
						},
						parameterMap: function(options, operation) {
							if(operation === 'read') {
								return {
									limit: options.take,
									page: options.page,
									filter: options.filter
								};
							}
						}
					},
					schema 	: {
						data: 'results',
						total: 'count'
					},
					group: {
						field: 'issued_date',
						aggregates: [
							{field: 'amount', aggregate: 'sum'}
						]
					},
					batch: true,
					serverFiltering: true,
					serverPaging: true,
					pageSize: 1000
				});				 
        		
        		monthlyDS.fetch(function(e){				
					$('#esale-graph').kendoChart({
						dataSource: {data: monthlyDS.data()},
						series: [
							{field: 'amount', categoryField: 'issued_date'}
						]
					});
				});				
			}
		}				
	});	
	banhji.router.route("/meter/:utility_id", function(utility_id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			var vm = banhji.meter;
			
			if(utility_id=="1"){
				banhji.view.layout.showIn("#content", banhji.view.eMeter);
			}else{
				banhji.view.layout.showIn("#content", banhji.view.wMeter);
			}					
			kendo.fx($("#slide-form")).slideIn("down").play();
			
			vm.pageLoad(utility_id);		

			if(banhji.pageLoaded["meter"+utility_id]==undefined){							
				banhji.pageLoaded["meter"+utility_id] = true;

				var location = $("#location").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            autoBind: false,
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",			            
		            dataSource: vm.locationDS
		        }).data("kendoDropDownList");

				if(utility_id=="1"){
					$("#electricityBox").kendoDropDownList({
			        	optionLabel: "(--- Select ---)",
			        	autoBind: false,
			        	valuePrimitive: true,
			        	cascadeFrom: "location",
			        	cascadeFromField: "location_id",	            	            
			            dataTextField: "number",
			            dataValueField: "id",	            
			            dataSource: vm.electricityBoxDS
			        }).data("kendoDropDownList");
		        }								

				$("#customers").kendoComboBox({
					placeholder: "លេខកូដអតិថិជន...",
	                dataTextField: "fullIdName",
	                dataValueField: "id",
	                filter: "search",
	                autoBind: false,
	                minLength: 3,
	                height: 400,
	                dataSource: vm.contactDS,
	                change: function(e){
	                	var value = this.value();                		
	                	var data = this.dataSource.get(value);				
						
						vm.set("meter", null);
						vm.set("contact_id", data.id);
						vm.set("company_id", data.company_id);
						vm.loadMeter(value);
						vm.loadData(data.company_id);				
	                }
	            });

	            $("#meters").kendoComboBox({
					placeholder: "លេខកូដកុងទ័រ...",
	                dataTextField: "number",
	                dataValueField: "id",
	                filter: "startswith",
	                autoBind: false,
	                minLength: 3,
	                height: 400,
	                dataSource: vm.meterDS,
	                change: function(e){
	                	var value = this.value();                		
	                	var data = this.dataSource.get(value);				
						
						vm.set("meter", null);
						vm.set("contact_id", data.contact_id);
						vm.set("company_id", data.company_id);
						vm.loadMeter(data.contact_id);
						vm.loadData(data.company_id);				
	                }
	            });		        

		        var validator = $("#example").kendoValidator().data("kendoValidator"),
				status = $("#status");

		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();     	

			            status.text("Saveបានសំរេច")
				        	.removeClass("alert alert-error")
				        	.addClass("alert alert-success");
				        status.show();
				        setTimeout(function(){
							status.hide();
						},4000);
			        }else{		        	
			            status.text("សូមត្រួតពិនិត្រឪ្យបានត្រឹមត្រូវម្ដងទៀត")
			                .removeClass("alert alert-success")
				            .addClass("alert alert-error");
			        }		            
				});	        	
			}			
		}				
	});		
	banhji.router.route("/reading/:utility_id", function(utility_id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{		
			var vm = banhji.reading;
			vm.pageLoad(utility_id);			

			if(utility_id=="1"){
				banhji.view.layout.showIn("#content", banhji.view.eReading);
			}else{
				banhji.view.layout.showIn("#content", banhji.view.wReading);
			}

			if(banhji.pageLoaded["reading"+utility_id]==undefined){
				banhji.pageLoaded["reading"+utility_id] = true;

				$("#pager").kendoPager({
	                dataSource: vm.dataSource
	            });

	            $("#meters").kendoComboBox({
					placeholder: "លេខកូដកុងទ័រ...",
					valuePrimitive: true,
	                dataTextField: "number",
	                dataValueField: "id",
	                filter: "startswith",
	                autoBind: false,
	                minLength: 3,
	                height: 400,
	                dataSource: vm.meterDS
	            });

	            var company = $("#company").kendoDropDownList({
		            optionLabel: "(--- License ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: vm.branchDS
		        }).data("kendoDropDownList");

	            if(utility_id=="1"){
			        var elocation = $("#elocation").kendoDropDownList({
			        	optionLabel: "(--- Location ---)",
		                autoBind: false,
		                cascadeFrom: "company",
		                cascadeFromField: "company_id",
		                valuePrimitive: true,                
		                dataTextField: "name",
		                dataValueField: "id",
		                dataSource: vm.elocationDS
		            }).data("kendoDropDownList");
		    	}else{
		            var wlocation = $("#wlocation").kendoDropDownList({
			        	optionLabel: "(--- Location ---)",
		                autoBind: false,
		                cascadeFrom: "company",
		                cascadeFromField: "company_id",
		                valuePrimitive: true,                
		                dataTextField: "name",
		                dataValueField: "id",
		                dataSource: vm.wlocationDS
		            }).data("kendoDropDownList");						
				}

				var validator = $("#example").kendoValidator({
					rules: {
				        greaterdate: function (input) {
		                    if (input.is("[data-greaterdate-msg]") && input.val() != "") {                                    
		                        var edate = kendo.parseDate(input.val()),
		                            sdate = kendo.parseDate($("[name='" + input.data("greaterdateField") + "']").val());
		                        return sdate == null || sdate.getTime() < edate.getTime();
		                    }
		                    return true;
		                }               
				    }
				}).data("kendoValidator"), status = $("#status");

				$("#save").click(function(e){
					e.preventDefault();
					
		            if(validator.validate() && vm.checkInput()){
		            	vm.save();

			            status.text("Saveបានសំរេច")
				        	.removeClass("alert alert-error")
				        	.addClass("alert alert-success");
				        status.show();
				        setTimeout(function(){
							status.hide();
						},4000);
			        }else{
			        	status.show();		        	        	
			            status.text("សូមត្រួតពិនិត្រឪ្យបានត្រឹមត្រូវម្ដងទៀត")
			                .removeClass("alert alert-success")
				            .addClass("alert alert-error");
			        }
				});
			}
		}		
	});
	banhji.router.route("/uInvoice/:utility_id", function(utility_id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{					
			var vm = banhji.uInvoice;

			if(utility_id=="1"){
				banhji.view.layout.showIn("#content", banhji.view.eInvoice);
			}else{
				banhji.view.layout.showIn("#content", banhji.view.wInvoice);
			}

			vm.pageLoad(utility_id);
			
			if(banhji.pageLoaded["uInvoice"+utility_id]==undefined){
				banhji.pageLoaded["uInvoice"+utility_id] = true;			

				$("#meters").kendoComboBox({
					placeholder: "លេខកូដកុងទ័រ...",
					valuePrimitive: true,
	                dataTextField: "number",
	                dataValueField: "id",
	                filter: "startswith",
	                autoBind: false,
	                minLength: 3,
	                height: 400,
	                dataSource: vm.meterDS
	            });

	            $("#pager").kendoPager({
	                dataSource: vm.readingDS
	            });

				var company = $("#company").kendoDropDownList({
		            optionLabel: "(--- License ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: vm.branchDS
		        }).data("kendoDropDownList");

				if(utility_id=="1"){
			        var elocation = $("#elocation").kendoDropDownList({
			        	optionLabel: "(--- Location ---)",
		                autoBind: false,
		                cascadeFrom: "company",
		                cascadeFromField: "company_id",
		                valuePrimitive: true,                
		                dataTextField: "name",
		                dataValueField: "id",
		                dataSource: vm.elocationDS
		            }).data("kendoDropDownList");
		    	}else{
		            var wlocation = $("#wlocation").kendoDropDownList({
			        	optionLabel: "(--- Location ---)",
		                autoBind: false,
		                cascadeFrom: "company",
		                cascadeFromField: "company_id",
		                valuePrimitive: true,                
		                dataTextField: "name",
		                dataValueField: "id",
		                dataSource: vm.wlocationDS
		            }).data("kendoDropDownList");						
				}
		        
				var validator = $("#example").kendoValidator().data("kendoValidator"),
					status = $("#status");						

				$("#save").click(function(e){
					e.preventDefault();			
					
		            if(validator.validate()){	            	            	
		            	vm.save();
						
			            status.text("Saveបានសំរេច")
				        	.removeClass("alert alert-error")
				        	.addClass("alert alert-success");
				        status.show();
				        setTimeout(function(){
							status.hide();
						},4000);				        
			        }else{
			        	status.show();		        	
			            status.text("សូមត្រួតពិនិត្រឪ្យបានត្រឹមត្រូវម្ដងទៀត")
			                .removeClass("alert alert-success")
				            .addClass("alert alert-error");
			        }
				});
			}
		}		
	});
	banhji.router.route("/uInvoice_print/:utility_id(/:id)", function(utility_id, id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{			
			var vm = banhji.invoicePrint;
			vm.pageLoad(utility_id, id);

			if(utility_id=="1"){
				banhji.view.layout.showIn("#content", banhji.view.eInvoicePrint);
			}else{				
				banhji.view.layout.showIn("#content", banhji.view.wInvoicePrint);
			}			
			
			if(banhji.pageLoaded["uInvoice_print"+utility_id]==undefined){
				banhji.pageLoaded["uInvoice_print"+utility_id] = true;

				$("#pager").kendoPager({
	                dataSource: vm.dataSource
	            });
				
				$("#invoices").kendoComboBox({
					placeholder: "Number...",
					valuePrimitive: true,
	                dataTextField: "number",
	                dataValueField: "id",
	                filter: "startswith",
	                autoBind: false,
	                minLength: 3,
	                height: 400,
	                dataSource: vm.invoiceDS,
	                change: function(e) {
					    var value = this.value();
					    vm.dataSource.query({
					    	filter: { field:"id", value: value }
					    }).then(function(e){
					    	vm.barcod();					    				    	
					    });
					}
	            });

				var company = $("#company").kendoDropDownList({
		            optionLabel: "(--- License ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: vm.branchDS
		        }).data("kendoDropDownList");

		        if(utility_id=="1"){
			        var elocation = $("#elocation").kendoDropDownList({
			        	optionLabel: "(--- Location ---)",
		                autoBind: false,
		                cascadeFrom: "company",
		                cascadeFromField: "company_id",
		                valuePrimitive: true,                
		                dataTextField: "name",
		                dataValueField: "id",
		                dataSource: vm.elocationDS
		            }).data("kendoDropDownList");
		    	}else{
		            var wlocation = $("#wlocation").kendoDropDownList({
			        	optionLabel: "(--- Location ---)",
		                autoBind: false,
		                cascadeFrom: "company",
		                cascadeFromField: "company_id",
		                valuePrimitive: true,                
		                dataTextField: "name",
		                dataValueField: "id",
		                dataSource: vm.wlocationDS
		            }).data("kendoDropDownList");						
				}			
			}
		}							
	});


	/*************************
	*   Water Section   *
	**************************/
	banhji.router.route("/water", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wDashBoard);			
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);
			
			var vm = banhji.wDashBoard;

			if(banhji.pageLoaded["water"]==undefined){							
				banhji.pageLoaded["water"] = true;

				vm.sorterChanges();
				vm.search();

				var container = $("#employeeForm");
                kendo.init(container);
                container.kendoValidator({
                    rules: {
                        greaterdate: function (input) {
                            if (input.is("[data-greaterdate-msg]") && input.val() != "") {                                    
                                var date = kendo.parseDate(input.val()),
                                    otherDate = kendo.parseDate($("[name='" + input.data("greaterdateField") + "']").val());
                                return otherDate == null || otherDate.getTime() < date.getTime();
                            }

                            return true;
                        }
                    }
                });

                var validator = $("#employeeForm").data("kendoValidator");
                validator.validate();                       

				var monthlyDS = new kendo.data.DataSource({
					transport: {
						read 	: {
							url: apiUrl + 'invoices/wmonthly',
							type: "GET",
							headers: {
								"Entity": getDB(),
								"User": banhji.userManagement.getLogin() === null ? '':banhji.userManagement.getLogin().id
							},
							dataType: 'json'
						},
						parameterMap: function(options, operation) {
							if(operation === 'read') {
								return {
									limit: options.take,
									page: options.page,
									filter: options.filter
								};
							}
						}
					},
					schema 	: {
						data: 'results',
						total: 'count'
					},
					group: {
						field: 'month',
						aggregates: [
							{field: 'amount', aggregate: 'sum'},
							{field: 'usage', aggregate: 'sum'}
						]
					},
					batch: true,
					serverFiltering: true,
					serverPaging: true,
					pageSize: 1000
				});				 
        		
        		monthlyDS.fetch(function(e){				
					$('#wsale-graph').kendoChart({
						dataSource: {data: monthlyDS.data()},												
						series: [
							{field: 'amount', categoryField:'month', type: 'line', axis: 'sale'},
							{field: 'usage', categoryField:'month', type: 'column', axis: 'usage'}
						],
						valueAxes: [
							{
			                    name: "sale",
			                    color: "#007eff",
			                    min: 0,
			                    majorUnit: 5000000,
			                    max: 50000000
			                }, 
			                {
			                    name: "usage",
			                    color: "#3399ff",
			                    min: 0,	
			                    majorUnit: 5000,		                   
			                    max: 50000
			                }
		                ],
		                categoryAxis: {
		                    //categories: ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12"],		                    
		                    axisCrossingValues: [0, 13],
		                    justified: true
		                },
		                tooltip: {
		                    visible: true,
		                    format: "{0}"
		                }

					});
				});		
			}

			vm.pageLoad();
		}				
	});
	banhji.router.route("/wCustomer_center", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wCustomerCenter);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);

			var vm = banhji.wCustomerCenter;

			if(banhji.pageLoaded["wCustomer_center"]==undefined){
				banhji.pageLoaded["wCustomer_center"] = true;
				
				vm.sorterChanges();			
				vm.branchDS.filter({ field:"utility_id", value:2 });
				vm.contactTypeDS.filter({ field:"parent_id", value:1 });
								
				vm.contactDS.query({
				  	filter:[
				  		{ field:"use_water", value:1 },
				  		{ field:"parent_id", operator:"where_related", model:"contact_type", value:1 }
				  	],
				  	page: 1,
				  	take: 50
				}).then(function(e) {
				    var view = vm.contactDS.data();
				    
				    if(view.length>0){
				    	vm.set("obj", view[0]);
				    	vm.loadGraph(view[0].id);
				    	vm.loadOutStandingInvoice(view[0].id);
				    	vm.loadTransaction(view[0].id);
				    	vm.loadMeter(view[0].id);
				    	vm.loadNote(view[0].id);
				    }
				});							

				//Search
				var ddlBranch = $("#ddlBranch").kendoDropDownList({
                    optionLabel: "(--- License ---)",
                    autoBind: "false",
                    valuePrimitive: "true",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.branchDS,
                    change: function(e) {
					    vm.set("location_id", null);					    
					}
                }).data("kendoDropDownList");

                var ddlLocation = $("#ddlLocation").kendoDropDownList({
                	optionLabel: "(--- Location ---)",
                    autoBind: false,
                    valuePrimitive: "true",
                    cascadeFrom: "ddlBranch",                    
                    cascadeFromField: "company_id",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.locationDS
                }).data("kendoDropDownList");                
			}				
		}
	});
	banhji.router.route("/wNew_customer", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{			
			var vm = banhji.wNewCustomer;
			
			banhji.view.layout.showIn("#content", banhji.view.wNewCustomer);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			if(banhji.pageLoaded["wNew_customer"]==undefined){
				banhji.pageLoaded["wNew_customer"] = true;

				vm.dataSource.filter([
					{ field:"parent_id", model:"contact_type", operator:"where_related", value:1 },
					{ field:"use_water", value:0 },
					{ field:"status", value:1 }
				]);

				vm.branchDS.filter({ field:"utility_id", value: 2 });

				var ddlBranch = $("#ddlBranch").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            autoBind: false,
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: vm.branchDS          
		        }).data("kendoDropDownList");

		        var ddlLocation = $("#ddlLocation").kendoDropDownList({
		        	optionLabel: "(--- Select ---)",
                    autoBind: false,
                    valuePrimitive: true,
                    cascadeFrom: "ddlBranch",                    
                    cascadeFromField: "company_id",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.locationDS
                }).data("kendoDropDownList");
		        
		        var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.isDuplicateNumber==false){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});	        	
			}

			vm.pageLoad();			
		}				
	});
	banhji.router.route("/wCustomer/:id", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{			
			var vm = banhji.wCustomer;
						
			banhji.view.layout.showIn("#content", banhji.view.wCustomer);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			if(banhji.pageLoaded["wCustomer"]==undefined){
				banhji.pageLoaded["wCustomer"] = true;

				$("#ddlContactType").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "contacts/type",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"parent_id", value: 1 }
					},
					change: function(e){
		            	var value = this.value(); 

	                	if(value=="6" || value=="7" || value=="8"){
	                		vm.set("isCompany", true);
	                	}else{
	                		vm.set("isCompany", false);
	                	}
		            }                
		        }).data("kendoDropDownList");		        

		        $("#ddlAR").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "accounts",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"account_type_id", value: 7 }
					},
					template: '#=code# #=name#'             
		        }).data("kendoDropDownList");

		        $("#ddlRA").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "accounts",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"account_type_id", value: 20 }
					},
					template: '#=code# #=name#'             
		        }).data("kendoDropDownList");

		        $("#ddlDepositAccount").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "accounts",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"account_type_id", value: 16 }
					},
					template: '#=code# #=name#'             
		        }).data("kendoDropDownList");

		        $("#ddlDiscountAccount").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "accounts",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"account_type_id", value:21 }
					},
					template: '#=code# #=name#'             
		        }).data("kendoDropDownList");

		        $("#ddlTaxItem").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "items/item",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"item_type_id", value: 6 }
					},
					template: '#=sku# #=name#'             
		        }).data("kendoDropDownList");		        

		        var ddlBranch = $("#ddlBranch").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "contacts/branch",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"utility_id", value: 2 }
					}          
		        }).data("kendoDropDownList");

		        var ddlLocation = $("#ddlLocation").kendoDropDownList({
		        	optionLabel: "(--- Select ---)",
                    autoBind: false,
                    valuePrimitive: true,
                    cascadeFrom: "ddlBranch",                    
                    cascadeFromField: "company_id",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: {
		                transport: {
							read: {
								url: apiUrl + "locations",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true
					}
                }).data("kendoDropDownList");	

		        var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate() 
						&& (vm.get("isDuplicateNumber")==false)						
						&& (vm.get("isDuplicateWNumber")==false)){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});	        	
			}

			vm.pageLoad(id);			
		}				
	});
	banhji.router.route("/wCustomer_order", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wCustomerOrder);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);

			var vm = banhji.wCustomerOrder;

			if(banhji.pageLoaded["wCustomer_order"]==undefined){
				banhji.pageLoaded["wCustomer_order"] = true;
				
				var ddlBranch = $("#ddlBranch").kendoDropDownList({
                    optionLabel: "(--- License ---)",
                    autoBind: "false",
                    valuePrimitive: "true",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.branchDS,
                    change: function(e) {
					    vm.set("location_id", null);					    
					}
                }).data("kendoDropDownList");

                var ddlLocation = $("#ddlLocation").kendoDropDownList({
                	optionLabel: "(--- Location ---)",
                    autoBind: false,
                    valuePrimitive: "true",
                    cascadeFrom: "ddlBranch",                    
                    cascadeFromField: "company_id",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.locationDS
                }).data("kendoDropDownList");
				
				var grid = $("#grid").kendoGrid({
				    dataSource: vm.dataSource,
				    autoBind: false,  
				    scrollable: false,    
				    columns: [				    	
				    	{ field:"worder", title: vm.lang.lang.order1 },				    	
				    	{ field:"wnumber", title:vm.lang.lang.number },
				    	{ field:"fullname", title:vm.lang.lang.customer }
				    ]            
				}).data("kendoGrid");

				grid.table.kendoDraggable({
				    filter: "tbody > tr",
				    group: "gridGroup",
				    threshold: 100,
				    hint: function(e) {
				        return $('<div class="k-grid k-widget"><table><tbody><tr>' + e.html() + '</tr></tbody></table></div>');
				    }
				});

				grid.table.kendoDropTarget({
				    group: "gridGroup",
				    drop: function(e) {        
				        e.draggable.hint.hide();
				        var target = vm.dataSource.getByUid($(e.draggable.currentTarget).data("uid")),
				            dest = $(document.elementFromPoint(e.clientX, e.clientY));
				       
				        if (dest.is("th")) {
				            return;
				        }       
				        dest = vm.dataSource.getByUid(dest.parent().data("uid"));

				        //not on same item
				        if (target.get("id") !== dest.get("id")) {
				            //reorder the items
				            var tmp = target.get("worder");
				            target.set("worder", dest.get("worder"));
				            dest.set("worder", tmp);
				            
				            vm.dataSource.sort({ field: "worder", dir: "asc" });
				        }                
				    }
				});
			}							
		}
	});
	banhji.router.route("/wInstallment(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wInstallment);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);								
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.wInstallment;

			if(banhji.pageLoaded["wInstallment"]==undefined){							
				banhji.pageLoaded["wInstallment"] = true;				

		        var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});	        	
			}

			vm.pageLoad(id);
		}				
	});
	banhji.router.route("/wDeposit(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.wDeposit);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.wDeposit;
			
			if(banhji.pageLoaded["wDeposit"]==undefined){
				banhji.pageLoaded["wDeposit"] = true;

				vm.setItem();
				
				$("#ddlPaymentMethod").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: dataStore(apiUrl + "payment_methods")
		        }).data("kendoDropDownList");

		        $("#ddlCashAccount").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "accounts",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"account_type_id", value: 6 }
					},
					template: '#=code# #=name#'             
		        }).data("kendoDropDownList");

		        $("#ddlDepositAccount").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "accounts",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"account_type_id", operator:"where_in", value: [14,16] }
					},
					template: '#=code# #=name#'             
		        }).data("kendoDropDownList");							
				
				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id);			
		}	
	});
	banhji.router.route("/wDeposit_witdraw(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{						
			banhji.view.layout.showIn("#content", banhji.view.wDepositWitdraw);			
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.wDepositWitdraw;
			
			if(banhji.pageLoaded["wDeposit_witdraw"]==undefined){
				banhji.pageLoaded["wDeposit_witdraw"] = true;				

				$("#ddlCashAccount").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "accounts",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"account_type_id", value: 6 }
					},
					template: '#=code# #=name#'             
		        }).data("kendoDropDownList");

		        $("#ddlDepositAccount").kendoDropDownList({
		            optionLabel: "(--- Select ---)",
		            valuePrimitive: true,
		            dataTextField: "name",
		            dataValueField: "id",
		            dataSource: {
		                transport: {
							read: {
								url: apiUrl + "accounts",
								headers: {
									"Entity": getDB()
								},
								type: "GET",
								dataType: "json"
							}
						},
						schema 	: {
							model: {
								id: 'id'
							},
							data: 'results',
							total: 'count'
						},
						serverFiltering: true,
						filter: { field:"account_type_id", operator:"where_in", value: [14,16] }
					},
					template: '#=code# #=name#'             
		        }).data("kendoDropDownList");										
				
				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');
				
		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id);			
		}	
	});
	banhji.router.route("/wMeter(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wMeter);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);								
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.wMeter;

			if(banhji.pageLoaded["wMeter"]==undefined){							
				banhji.pageLoaded["wMeter"] = true;

				vm.itemDS.filter({ field:"item_type_id", value: 1 });

		        var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate() && (vm.get("isDuplicateNumber")==false)){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});	        	
			}

			vm.pageLoad(id);
		}				
	});
	banhji.router.route("/wReading_center(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wReadingCenter);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);

			var vm = banhji.wReadingCenter;
			
			if(banhji.pageLoaded["wReading_center"]==undefined){
				banhji.pageLoaded["wReading_center"] = true;

				vm.meterDS.filter({ field:"utility_id", value: 2 });				
			}

			vm.pageLoad(id);
		}		
	});
	banhji.router.route("/wEdit_reading/:id", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wEditReading);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);

			var vm = banhji.wEditReading;
			
			if(banhji.pageLoaded["wEdit_reading"]==undefined){
				banhji.pageLoaded["wEdit_reading"] = true;	            
				
				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id);
		}		
	});
	banhji.router.route("/wReading", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wReading);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);

			var vm = banhji.wReading;
			
			if(banhji.pageLoaded["wReading"]==undefined){
				banhji.pageLoaded["wReading"] = true;

				vm.branchDS.filter({ field:"utility_id", value:2 });
				vm.meterDS.filter({ field:"utility_id", value:2 });
				vm.readerDS.filter({ field:"contact_type_id", value:3 });				

	            var ddlBranch = $("#ddlBranch").kendoDropDownList({
                    optionLabel: "(--- License ---)",
                    autoBind: "false",
                    valuePrimitive: "true",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.branchDS,
                    change: function(e) {
					    vm.set("location_id", null);					    
					}
                }).data("kendoDropDownList");

                var ddlLocation = $("#ddlLocation").kendoDropDownList({
                	optionLabel: "(--- រើស Location ---)",
                    autoBind: false,
                    valuePrimitive: "true",
                    cascadeFrom: "ddlBranch",                    
                    cascadeFromField: "company_id",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.locationDS
                }).data("kendoDropDownList");				

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}
			vm.pageLoad();
		}		
	});
	banhji.router.route("/wIR_reader", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wIRReader);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);

			var vm = banhji.wIRReader;
			
			if(banhji.pageLoaded["wIR_reader"]==undefined){
				banhji.pageLoaded["wIR_reader"] = true;

				vm.readerDS.filter({ field:"contact_type_id", value:3 });

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad();
		}		
	});
	banhji.router.route("/wReading_book", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wReadingBook);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);			
			
			if(banhji.pageLoaded["wReading_book"]==undefined){
				banhji.pageLoaded["wReading_book"] = true;

				var dataSource = dataStore(apiUrl + "meters/wbook");

				var ddlBranch = $("#ddlBranch").kendoDropDownList({
                    optionLabel: "(--- License ---)",
                    autoBind: "false",
                    valuePrimitive: "true",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: dataStore(apiUrl + "contacts/branch")
                }).data("kendoDropDownList");

                var ddlLocation = $("#ddlLocation").kendoDropDownList({
                	optionLabel: "(--- Location ---)",
                    autoBind: false,
                    valuePrimitive: "true",
                    cascadeFrom: "ddlBranch",                    
                    cascadeFromField: "company_id",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: dataStore(apiUrl + "locations")
                }).data("kendoDropDownList");
				
				$("#grid").kendoGrid({
		            toolbar: ["excel"],
		            excel: {
		                fileName: "readingbook.xlsx"
		            },		            		           
		            dataSource: dataSource,		           		                        
		            reorderable: true,
		            resizable: true,
		            columns: [
		                { field: "contact_number", title: langVM.lang.number },
		                { field: "fullname", title: langVM.lang.customer },
		                { field: "location_name", title: langVM.lang.location },
		                { field: "month_of", title: langVM.lang.month_of },
		                { field: "number", title: langVM.lang.meter },	                
		                { field: "reading", title: langVM.lang.reading },
		            ]
		        });		       

				$("#search").click(function(){
					var para = [];
				
					if(ddlLocation.value()){
						para.push({ field:"location_id", value:ddlLocation.value() });
					}else if(ddlBranch.value()){
						para.push({ field:"company_id", value:ddlBranch.value() });
					}
					
					dataSource.filter(para);
				});
			}			
		}		
	});
	banhji.router.route("/wInvoice", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wInvoice);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);

			var vm = banhji.wInvoice;

			if(banhji.pageLoaded["wInvoice"]==undefined){
				banhji.pageLoaded["wInvoice"] = true;			

				vm.pageLoad();
				vm.branchDS.filter({ field:"utility_id", value:2 });
				vm.meterDS.filter({ field:"utility_id", value:2 });				

	            var ddlBranch = $("#ddlBranch").kendoDropDownList({
                    optionLabel: "(--- License ---)",
                    autoBind: "false",
                    valuePrimitive: "true",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.branchDS,
                    change: function(e) {
					    vm.set("location_id", null);					    
					}
                }).data("kendoDropDownList");

                var ddlLocation = $("#ddlLocation").kendoDropDownList({
                	optionLabel: "(--- រើស Location ---)",
                    autoBind: false,
                    valuePrimitive: "true",
                    cascadeFrom: "ddlBranch",                    
                    cascadeFromField: "company_id",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.locationDS
                }).data("kendoDropDownList");				

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate()){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}
		}		
	});
	banhji.router.route("/wPrint_center(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wPrintCenter);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);

			var vm = banhji.wPrintCenter;
			
			if(banhji.pageLoaded["wPrint_center"]==undefined){
				banhji.pageLoaded["wPrint_center"] = true;				
				
				vm.branchDS.filter({ field:"utility_id", value:2 });				
			}

			vm.pageLoad(id);
		}							
	});
	banhji.router.route("/wInvoice_print(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wInvoicePrint);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);

			var vm = banhji.wInvoicePrint;
			
			if(banhji.pageLoaded["wInvoice_print"]==undefined){
				banhji.pageLoaded["wInvoice_print"] = true;							

			}

			vm.pageLoad(id);
		}							
	});
	banhji.router.route("/wInventory_item", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wInventoryItem);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);
					
			var vm = banhji.wInventoryItem;			
			
			if(banhji.pageLoaded["wInventory_item"]==undefined){
				banhji.pageLoaded["wInventory_item"] = true;
				
				vm.dataSource.filter({ field:"item_type_id", value:1 });

				var categories = $("#categories").kendoDropDownList({
                    optionLabel: "(--- Select ---)",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.categoryDS,
                    change: function(e) {
					    //var value = this.value();
					    vm.set("item_group_id", 0);
					}
                }).data("kendoDropDownList");

                var itemGroups = $("#itemGroups").kendoDropDownList({
                    autoBind: false,
                    cascadeFrom: "categories",
                    cascadeFromField: "category_id",
                    optionLabel: "(--- Select ---)",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.itemGroupDS
                }).data("kendoDropDownList");											
			}

			vm.pageLoad();				
		}
	});	
	banhji.router.route("/wSettings", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wSettings);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);

			var vm = banhji.wSettings;
			
			if(banhji.pageLoaded["wSettings"]==undefined){
				banhji.pageLoaded["wSettings"] = true;

				vm.branchDS.filter({ field:"utility_id", value: 2 });
			}

			vm.pageLoad();			     		
		}
	});
	banhji.router.route("/wBranch(/:id)", function(id){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wBranch);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.wBranch;
			
			if(banhji.pageLoaded["wBranch"]==undefined){
				banhji.pageLoaded["wBranch"] = true;

				var validator = $("#example").kendoValidator().data("kendoValidator");
				var notification = $("#notification").kendoNotification({				    
				    autoHideAfter: 5000,
				    width: 300,				    
				    height: 50
				}).data('kendoNotification');

		        $("#save").click(function(e){				
					e.preventDefault();

					if(validator.validate() && vm.get("isExisting")==false){
		            	vm.save();

		            	notification.success("Save Successful");			  
			        }else{
			        	notification.error("Warning, please review it again!");			           
			        }		            
				});
			}

			vm.pageLoad(id);			     		
		}
	});


	//Water Reports
	banhji.router.route("/wReport_center", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wReportCenter);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);

			var vm = banhji.wReportCenter;			
			
			if(banhji.pageLoaded["wReport_center"]==undefined){
				banhji.pageLoaded["wReport_center"] = true;				

				vm.branchDS.query({
					filter: { field:"utility_id", value: 2 },
					page: 1,
					take: 100
				}).then(function(){
					var view = vm.branchDS.view();

					if(view.length>0){
						vm.set("branch_id", view[0].id);						
						vm.loadKPI(view[0].id);
					}
				});									
			}			
		}		
	});
	banhji.router.route("/wCustomer_list", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wCustomerList);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);
			kendo.fx($("#slide-form")).slideIn("down").play();			
			
			if(banhji.pageLoaded["wCustomer_list"]==undefined){
				banhji.pageLoaded["wCustomer_list"] = true;

				var dataSource = dataStore(apiUrl + "contacts/wlist"),
				branchDS =  dataStore(apiUrl + "contacts/branch"),
				locationDS =  dataStore(apiUrl + "locations");

				branchDS.filter({ field:"utility_id", value:2 });

				$("#grid").kendoGrid({
				    dataSource: dataSource,
				    groupable: true,
				    sortable: true,				    				    
				    pageable: true,				    
				    columns:[
				    	{ field: "wnumber", title:"Number" },
				    	{ field: "fullname", title:"Fullname" },
				    	{ field: "contact_type_name", title:"Type" },
				    	{ field: "wlocation_name", title:"Location" },
				    	{ field: "wbranch_name", title:"License" }
				    ]				    
				});

				var ddlBranch = $("#ddlBranch").kendoDropDownList({
                    optionLabel: "(--- License ---)",
                    autoBind: "false",
                    valuePrimitive: true,
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: branchDS
                }).data("kendoDropDownList");

                var ddlLocation = $("#ddlLocation").kendoDropDownList({
                	optionLabel: "(--- Location ---)",
                    autoBind: false,
                    valuePrimitive: true,
                    cascadeFrom: "ddlBranch",                    
                    cascadeFromField: "company_id",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: locationDS
                }).data("kendoDropDownList");

				$("#search").click(function(){
					if(ddlLocation.value()){
						dataSource.filter({ field:"wlocation_id", value:ddlLocation.value() });
					}else if(ddlBranch.value()){
						dataSource.filter({ field:"wbranch_id", value:ddlBranch.value() });
					}else{
						dataSource.filter([]);
					}
				});
		    }      
		}	
	});
	banhji.router.route("/wCustomer_no_meter", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wCustomerNoMeter);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.wCustomerNoMeter;			
			
			if(banhji.pageLoaded["wCustomer_no_meter"]==undefined){
				banhji.pageLoaded["wCustomer_no_meter"] = true;		
				
				vm.branchDS.filter({ field:"utility_id", value:2 });				 
			}
		}
	});
	banhji.router.route("/wBrand_new_customer", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wBrandNewCustomer);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.wBrandNewCustomer;			
			
			if(banhji.pageLoaded["wBrand_new_customer"]==undefined){
				banhji.pageLoaded["wBrand_new_customer"] = true;		
				
				vm.sorterChanges();
				vm.branchDS.filter({ field:"utility_id", value:2 });

				var container = $("#employeeForm");
                kendo.init(container);
                container.kendoValidator({
                    rules: {
                        greaterdate: function (input) {
                            if (input.is("[data-greaterdate-msg]") && input.val() != "") {                                    
                                var date = kendo.parseDate(input.val()),
                                    otherDate = kendo.parseDate($("[name='" + input.data("greaterdateField") + "']").val());
                                return otherDate == null || otherDate.getTime() < date.getTime();
                            }

                            return true;
                        }
                    }
                });

                var validator = $("#employeeForm").data("kendoValidator");
                validator.validate();				
			}
		}
	});
	banhji.router.route("/wCustomer_balance", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wCustomerBalance);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);
			kendo.fx($("#slide-form")).slideIn("down").play();			
			
			if(banhji.pageLoaded["wCustomer_balance"]==undefined){
				banhji.pageLoaded["wCustomer_balance"] = true;

				var dataSource =  dataStore(apiUrl + "contacts/wbalance"),
				branchDS =  dataStore(apiUrl + "contacts/branch"),
				locationDS =  dataStore(apiUrl + "locations");

				branchDS.filter({ field:"utility_id", value:2 });

				$("#grid").kendoGrid({
				    dataSource: dataSource,
				    groupable: true,				    
				    pageable: true,        
				    columns: [ 
			    		{ field: "wnumber", title: "Number" }, 
			    		{ field: "fullname", title: "Fullname" },
			    		{ field: "contact_type_name", title: "Type" },
			    		{ field: "wlocation_name", title: "Location" },
			    		{ field: "wbranch_name", title: "License" },
			    		{ field: "balance", title: "Balance", template: '#=kendo.toString(balance, "c0", banhji.institute.locale)#', attributes:{style:"text-align:right;"} }
				    ]
				});

				var ddlBranch = $("#ddlBranch").kendoDropDownList({
                    optionLabel: "(--- License ---)",
                    autoBind: "false",
                    valuePrimitive: true,
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: branchDS
                }).data("kendoDropDownList");

                var ddlLocation = $("#ddlLocation").kendoDropDownList({
                	optionLabel: "(--- Location ---)",
                    autoBind: false,
                    valuePrimitive: true,
                    cascadeFrom: "ddlBranch",                    
                    cascadeFromField: "company_id",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: locationDS
                }).data("kendoDropDownList");

				$("#search").click(function(){
					if(ddlLocation.value()){
						dataSource.filter({ field:"wlocation_id", value:ddlLocation.value() });
					}else if(ddlBranch.value()){
						dataSource.filter({ field:"wbranch_id", value:ddlBranch.value() });
					}else{
						dataSource.filter([]);
					}
				});
		    }      
		}	
	});
	banhji.router.route("/wCustomer_deposit", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wCustomerDeposit);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);
			kendo.fx($("#slide-form")).slideIn("down").play();			
			
			if(banhji.pageLoaded["wCustomer_deposit"]==undefined){
				banhji.pageLoaded["wCustomer_deposit"] = true;

				var dataSource =  dataStore(apiUrl + "contacts/wdeposit"),
				branchDS =  dataStore(apiUrl + "contacts/branch"),
				locationDS =  dataStore(apiUrl + "locations");

				branchDS.filter({ field:"utility_id", value:2 });

				$("#grid").kendoGrid({
				    dataSource: dataSource,
				    groupable: true,				    
				    pageable: true,        
				    columns: [ 
			    		{ field: "wnumber", title: "Number" }, 
			    		{ field: "fullname", title: "Fullname" },
			    		{ field: "contact_type_name", title: "Type" },
			    		{ field: "wlocation_name", title: "Location" },
			    		{ field: "wbranch_name", title: "License" },
			    		{ field: "deposit", title: "Deposit", template: '#=kendo.toString(deposit, "c0", banhji.institute.locale)#', attributes:{style:"text-align:right;"} }
				    ]
				});

				var ddlBranch = $("#ddlBranch").kendoDropDownList({
                    optionLabel: "(--- License ---)",
                    autoBind: "false",
                    valuePrimitive: true,
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: branchDS
                }).data("kendoDropDownList");

                var ddlLocation = $("#ddlLocation").kendoDropDownList({
                	optionLabel: "(--- Location ---)",
                    autoBind: false,
                    valuePrimitive: true,
                    cascadeFrom: "ddlBranch",                    
                    cascadeFromField: "company_id",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: locationDS
                }).data("kendoDropDownList");

				$("#search").click(function(){
					if(ddlLocation.value()){
						dataSource.filter({ field:"wlocation_id", value:ddlLocation.value() });
					}else if(ddlBranch.value()){
						dataSource.filter({ field:"wbranch_id", value:ddlBranch.value() });
					}else{
						dataSource.filter([]);
					}
				});
		    }      
		}	
	});
	banhji.router.route("/wAging_summary", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wAgingSummary);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);
			kendo.fx($("#slide-form")).slideIn("down").play();			
			
			var vm = banhji.wAgingSummary;

			if(banhji.pageLoaded["wAging_summary"]==undefined){
				banhji.pageLoaded["wAging_summary"] = true;				

				var ddlBranch = $("#ddlBranch").kendoDropDownList({
                    optionLabel: "(--- License ---)",
                    autoBind: false,
                    valuePrimitive: true,
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.branchDS,
                    change: function(e) {
					    vm.set("location_id", null);					    
					}
                }).data("kendoDropDownList");

                var ddlLocation = $("#ddlLocation").kendoDropDownList({
                	optionLabel: "(--- Location ---)",
                    autoBind: false,
                    valuePrimitive: true,
                    cascadeFrom: "ddlBranch",                    
                    cascadeFromField: "company_id",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.locationDS
                }).data("kendoDropDownList");                
			}
		}
	});
	banhji.router.route("/wAging_detail", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wAgingDetail);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.wAgingDetail;			
			
			if(banhji.pageLoaded["wAging_detail"]==undefined){
				banhji.pageLoaded["wAging_detail"] = true;		
				
				var ddlBranch = $("#ddlBranch").kendoDropDownList({
                    optionLabel: "(--- License ---)",
                    autoBind: "false",
                    valuePrimitive: true,
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.branchDS,
                    change: function(e) {
					    vm.set("location_id", null);					    
					}
                }).data("kendoDropDownList");

                var ddlLocation = $("#ddlLocation").kendoDropDownList({
                	optionLabel: "(--- Location ---)",
                    autoBind: false,
                    valuePrimitive: true,
                    cascadeFrom: "ddlBranch",                    
                    cascadeFromField: "company_id",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: vm.locationDS
                }).data("kendoDropDownList");

                $("#grid").kendoGrid({
                    dataSource: vm.dataSource,
                    autoBind: false,
                    sortable: true,
                    scrollable: false,
                    pageable: true,
                    columns: [
                        { field: "number", title: "Number", groupFooterTemplate: "Total:" },
                        { field: "issued_date", title: "Date", template:'#=kendo.toString(new Date(issued_date), "dd-MM-yyyy")#' },
                        { field: "fullIdName", title: "Customer" },                        
                        { field: "due_date", title: "Due Date", template:'#=kendo.toString(new Date(due_date), "dd-MM-yyyy")#' },
                        { field: "age", title: "Aging" },                       
                        { field: "amount", title: "Amount",
                        	attributes: {
						      "class": "table-cell",
						      style: "text-align: right;"
						    },
                        	template: "#=kendo.toString(amount, 'c0', banhji.institute.locale)#", 
                        	aggregates: ["sum"], groupFooterTemplate: "<div align='right'>#=kendo.toString(sum, 'c0', banhji.institute.locale)#</div>", 
                        	groupHeaderTemplate: "#= value #"                        	
                        }
                    ]
                });
			}
		}
	});
	banhji.router.route("/wSale_summary", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wSaleSummary);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);			
			
			var vm = banhji.wSaleSummary;

			if(banhji.pageLoaded["wSale_summary"]==undefined){
				banhji.pageLoaded["wSale_summary"] = true;
								
				$("#grid").kendoGrid({
		            toolbar: ["excel"],
		            excel: {
		                fileName: "sale_summary.xlsx"
		            },		            		           
		            dataSource: vm.dataSource,
		            groupable: true,		           		                        
		            reorderable: true,
		            resizable: true,
		            columns: [		                
		                { field: "branch_name", title: "License" },
		                { field: "location_name", title: "Location" },		                
		                { field: "usage", title:"m3", template:'#=kendo.toString(usage, "n0")#', attributes:{style:"text-align:right;"} },		                
		                { field: "amount", title:"Amount", template:'#=kendo.toString(amount, "c0", banhji.institute.locale)#', attributes:{style:"text-align:right;"} },
		            ]
		        });		       			
			}
		}		
	});
	banhji.router.route("/wSale_detail", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wSaleDetail);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);			
			
			var vm = banhji.wSaleDetail;

			if(banhji.pageLoaded["wSale_detail"]==undefined){
				banhji.pageLoaded["wSale_detail"] = true;

				vm.branchDS.filter({ field:"utility_id", value:2 });
								
				$("#grid").kendoGrid({
		            toolbar: ["excel"],
		            excel: {
		                fileName: "sale_detail.xlsx"
		            },		            		           
		            dataSource: vm.dataSource,
		            groupable: true,
		            sortable: true,		           		                        
		            reorderable: true,
		            resizable: true,
		            columns: [		                
		                { field: "contact_number", title: "Number" },
		                { field: "fullname", title: "Customer" },
		                { field: "contact_type_name", title: "Type" },
		                { field: "location_name", title: "Location" },		                
		                { field: "usage", title:"Usage", template:'#=kendo.toString(usage, "n0")#', attributes:{style:"text-align:right;"}, sortable: false },		                
		                { field: "amount", title:"Amount", template:'#=kendo.toString(amount, "c0", banhji.institute.locale)#', attributes:{style:"text-align:right;"} },
		            ]
		        });		       			
			}
		}		
	});
	banhji.router.route("/wPayment_summary", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wPaymentSummary);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);
			kendo.fx($("#slide-form")).slideIn("down").play();			
			
			var vm = banhji.wPaymentSummary;

			if(banhji.pageLoaded["wPayment_summary"]==undefined){
				banhji.pageLoaded["wPayment_summary"] = true;		
				
				vm.sorterChanges();

				var container = $("#employeeForm");
                kendo.init(container);
                container.kendoValidator({
                    rules: {
                        greaterdate: function (input) {
                            if (input.is("[data-greaterdate-msg]") && input.val() != "") {                                    
                                var date = kendo.parseDate(input.val()),
                                    otherDate = kendo.parseDate($("[name='" + input.data("greaterdateField") + "']").val());
                                return otherDate == null || otherDate.getTime() < date.getTime();
                            }

                            return true;
                        }
                    }
                });

                var validator = $("#employeeForm").data("kendoValidator");
                validator.validate();
			}
		}
	});
	banhji.router.route("/wPayment_detail", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wPaymentDetail);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);
			kendo.fx($("#slide-form")).slideIn("down").play();

			var vm = banhji.wPaymentDetail;			
			
			if(banhji.pageLoaded["wPayment_detail"]==undefined){
				banhji.pageLoaded["wPayment_detail"] = true;		
				
				vm.sorterChanges();

				var container = $("#employeeForm");
                kendo.init(container);
                container.kendoValidator({
                    rules: {
                        greaterdate: function (input) {
                            if (input.is("[data-greaterdate-msg]") && input.val() != "") {                                    
                                var date = kendo.parseDate(input.val()),
                                    otherDate = kendo.parseDate($("[name='" + input.data("greaterdateField") + "']").val());
                                return otherDate == null || otherDate.getTime() < date.getTime();
                            }

                            return true;
                        }
                    }
                });

                var validator = $("#employeeForm").data("kendoValidator");
                validator.validate();
			}
		}
	});
	banhji.router.route("/wPayment_by_source_summary", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wPaymentBySourceSummary);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);			
			
			var vm = banhji.wPaymentBySourceSummary;

			if(banhji.pageLoaded["wPayment_by_source_summary"]==undefined){
				banhji.pageLoaded["wPayment_by_source_summary"] = true;
								
				$("#grid").kendoGrid({
		            toolbar: ["excel"],
		            excel: {
		                fileName: "payment_by_resource_summary.xlsx"
		            },		            		           
		            dataSource: vm.dataSource,
		            groupable: true,		           		                        
		            reorderable: true,
		            resizable: true,
		            columns: [		                
		                { field: "branch_name", title: "License" },
		                { field: "location_name", title: "Location" },		                
		                { field: "cash", title:"Cash", template:'#=kendo.toString(cash, "c0", banhji.institute.locale)#', attributes:{style:"text-align:right;"} },		                
		                { field: "check", title:"Cheque", template:'#=kendo.toString(check, "c0", banhji.institute.locale)#', attributes:{style:"text-align:right;"} },
		                { field: "bank", title:"Bank", template:'#=kendo.toString(bank, "c0", banhji.institute.locale)#', attributes:{style:"text-align:right;"} },		                
		                { field: "direct", title:"Home", template:'#=kendo.toString(direct, "c0", banhji.institute.locale)#', attributes:{style:"text-align:right;"} },
		                { field: "internet", title:"Internet", template:'#=kendo.toString(internet, "c0", banhji.institute.locale)#', attributes:{style:"text-align:right;"} }
		            ]
		        });		       			
			}
		}		
	});
	banhji.router.route("/wPayment_by_source_detail", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wPaymentBySourceDetail);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);			
			
			var vm = banhji.wPaymentBySourceDetail;

			if(banhji.pageLoaded["wPayment_by_source_detail"]==undefined){
				banhji.pageLoaded["wPayment_by_source_detail"] = true;

				vm.branchDS.filter({ field:"utility_id", value:2 });
								
				$("#grid").kendoGrid({
		            toolbar: ["excel"],
		            excel: {
		                fileName: "payment_by_resource_detail.xlsx"
		            },		            		           
		            dataSource: vm.dataSource,
		            groupable: true,
		            sortable: true,		           		                        
		            reorderable: true,
		            resizable: true,
		            columns: [		                
		                { field: "contact_id", title: "Number", template:'#=contact_number#' },
		                { field: "contact_id", title: "Customer", template:'#=fullname#' },
		                { field: "contact_type_name", title: "Type" },
		                { field: "cashier_id", title: "បេឡាករ", template:'#=cashier_name#' },
		                { field: "payment_method_id", title: "Payment Method", template:'#=payment_method_name#' },		                		                
		                { field: "amount", title:"Amount", template:'#=kendo.toString(amount, "c0", banhji.institute.locale)#', attributes:{style:"text-align:right;"} },
		            ]
		        });		       			
			}
		}		
	});	
	banhji.router.route("/wLow_consumption", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wLowConsumption);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);
			kendo.fx($("#slide-form")).slideIn("down").play();			
			
			if(banhji.pageLoaded["wLow_consumption"]==undefined){
				banhji.pageLoaded["wLow_consumption"] = true;

				var dataSource =  dataStore(apiUrl + "meters/wlow_consumption"),
				branchDS =  dataStore(apiUrl + "contacts/branch"),
				locationDS =  dataStore(apiUrl + "locations");

				branchDS.filter({ field:"utility_id", value:2 });

				var ddlBranch = $("#ddlBranch").kendoDropDownList({
                    optionLabel: "(--- License ---)",
                    autoBind: false,
                    valuePrimitive: true,
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: branchDS
                }).data("kendoDropDownList");

                var ddlLocation = $("#ddlLocation").kendoDropDownList({
                	optionLabel: "(--- Location ---)",
                    autoBind: false,
                    valuePrimitive: true,
                    cascadeFrom: "ddlBranch",                    
                    cascadeFromField: "company_id",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: locationDS
                }).data("kendoDropDownList");

				var monthpicker = $("#monthpicker").kendoDatePicker({        	     	
		            start: "year",            
		            depth: "year",
		            format: "MM-yyyy",            
		            change: function() {
				        var value = this.value();
				        value.setDate(1);				        		        
				        $("#strDate").text("As Of " + kendo.toString(value, "MM-yyyy")); 
				    }
		        }).data("kendoDatePicker");

				var usage = $("#usage").kendoNumericTextBox({
                    format: "<= # m3",
                    min: 1,
                    value: 20
                }).data("kendoNumericTextBox");

				$("#grid").kendoGrid({
				    dataSource: dataSource,
				    autoBind: false,
				    groupable: true,
				    sortable: true,				    				    
				    pageable: true,				    
				    columns:[				    	
				    	{ field: "contact_number", title:"Number" },
				    	{ field: "fullname", title:"Fullname" },				    	
				    	{ field: "location_name", title:"Location" },
				    	{ field: "branch_name", title:"License" },
				    	{ field: "meter_number", title:"Meter" },
				    	{ field: "usage", title:"Usage" }
				    ]				    
				});				

				$("#search").click(function(){
					var para = [];
				
					if(ddlLocation.value()){
						para.push({ field:"location_id", operator:"join_meter", value:ddlLocation.value() });
					}else if(ddlBranch.value()){
						para.push({ field:"company_id", operator:"join_meter", value:ddlBranch.value() });
					}

					if(monthpicker.value()){
						para.push({ field:"month_of", value: kendo.toString(monthpicker.value(), "yyyy-MM-dd") });
					}

					if(usage.value()){
						para.push({ field:"usage <=", value: usage.value() });
					}
					
					dataSource.filter(para);
				});
		    }      
		}	
	});
	banhji.router.route("/wDisconnect_list", function(){
		if(!banhji.userManagement.getLogin()){
			banhji.router.navigate('/manage');
		}else{
			banhji.view.layout.showIn("#content", banhji.view.wDisconnectList);
			banhji.view.layout.showIn('#menu', banhji.view.menu);
			banhji.view.menu.showIn('#secondary-menu', banhji.view.waterMenu);
			kendo.fx($("#slide-form")).slideIn("down").play();			
			
			if(banhji.pageLoaded["wDisconnect_list"]==undefined){
				banhji.pageLoaded["wDisconnect_list"] = true;

				var dataSource =  dataStore(apiUrl + "invoices/wdisconnect"),
				branchDS =  dataStore(apiUrl + "contacts/branch"),
				locationDS =  dataStore(apiUrl + "locations");

				branchDS.filter({ field:"utility_id", value:2 });

				var ddlBranch = $("#ddlBranch").kendoDropDownList({
                    optionLabel: "(--- License ---)",
                    autoBind: false,
                    valuePrimitive: true,
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: branchDS
                }).data("kendoDropDownList");

                var ddlLocation = $("#ddlLocation").kendoDropDownList({
                	optionLabel: "(--- Location ---)",
                    autoBind: false,
                    valuePrimitive: true,
                    cascadeFrom: "ddlBranch",                    
                    cascadeFromField: "company_id",
                    dataTextField: "name",
                    dataValueField: "id",
                    dataSource: locationDS
                }).data("kendoDropDownList");				

				var days = $("#days").kendoNumericTextBox({
                    format: "<= # days",
                    min: 1,
                    value: 10
                }).data("kendoNumericTextBox");

				$("#grid").kendoGrid({
				    dataSource: dataSource,
				    autoBind: false,
				    groupable: true,
				    sortable: true,				    				    
				    pageable: true,				    
				    columns:[				    	
				    	{ field: "contact_number", title:"Number" },
				    	{ field: "fullname", title:"Fullname" },	
				    	{ field: "location_name", title:"Location" },				    	
				    	{ field: "number", title:"Number" },
				    	{ field: "due_date", title:"Due Date" },
				    	{ field: "amount", title:"Amount", template:'#=kendo.toString(amount, "c0", banhji.institute.locale)#', attributes:{style:"text-align:right;"} },				    	
				    	{ field: "days", title:"Number of days", attributes:{style:"text-align:right;"} }
				    ]				    
				});				

				$("#search").click(function(){
					var para = [];
				
					if(ddlLocation.value()){
						para.push({ field:"location_id", operator:"join_meter", value:ddlLocation.value() });
					}else if(ddlBranch.value()){
						para.push({ field:"company_id", operator:"join_meter", value:ddlBranch.value() });
					}					

					if(days.value()){
						para.push({ field:"days", operator:"days", value: days.value() });
					}
					
					dataSource.filter(para);
				});
		    }      
		}	
	});	
	//END OF DAWINE  ---------------------------------------------------------------------------------
	
	// portal mockup data
	// dataSource
	dataSource = [
		{
			id: 1, 
			type: 'invoice', 
			sentFrom: {id:7, name: 'Best Luck'}, 
			sentTo: {id:2, name: 'Tiger Beer'}, 
			invoice_number: 'inv-343424', 
			data: [
				{itemCode: 'MT-213', amount: 232}, 
				{itemCode: 'MT-100', amount: 500}
			],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 2, 
			type: 'so', 
			sentFrom: {id:10, name: 'Hello Beer'}, 
			sentTo: {id: 3, name: 'Johner Runner'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 3, 
			type: 'invoice', 
			sentFrom: {id:7, name: 'Best Luck'}, 
			sentTo: {id:10, name: 'Hello Beer'}, 
			invoice_number: 
			'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 4, 
			type: 'invoice', 
			sentFrom: {id:7, name: 'Best Luck'}, 
			sentTo: {id: 3, name: 'Johner Runner'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 5, 
			type: 'invoice', 
			sentFrom: {id:7, name: 'Best Luck'}, 
			sentTo: {id:10, name: 'Hello Beer'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 6, 
			type: 'po', 
			sentFrom: {id:7, name: 'Best Luck'}, 
			sentTo: {id:10, name: 'Hello Beer'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 7, 
			type: 'so', 
			sentFrom: {id:7, name: 'Best Luck'}, 
			sentTo: {id: 3, name: 'Johner Runner'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 8, 
			type: 'invoice', 
			sentFrom: {id:7, name: 'Best Luck'}, 
			sentTo: {id:2, name: 'Tiger Beer'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 9, 
			type: 'invoice', 
			sentFrom: {id:7, name: 'Best Luck'}, 
			sentTo: {id:10, name: 'Hello Beer'}, invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 10, 
			type: 'so', 
			sentFrom: {id:7, name: 'Best Luck'}, 
			sentTo: {id:2, name: 'Tiger Beer'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 11, 
			type: 'invoice', 
			sentFrom: {id:7, name: 'Best Luck'}, 
			sentTo: {id:2, name: 'Tiger Beer'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 12, 
			type: 'invoice', 
			sentFrom: {id:9, name: 'Good Luck'}, 
			sentTo: {id:10, name: 'Hello Beer'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 13, 
			type: 'invoice', 
			sentFrom: {id:7, name: 'Best Luck'}, 
			sentTo: {id:2, name: 'Tiger Beer'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 14, 
			type: 'invoice', 
			sentFrom: {id:9, name: 'Good Luck'}, 
			sentTo: {id:2, name: 'Tiger Beer'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 15, 
			type: 'po', 
			sentFrom: {id:9, name: 'Good Luck'}, 
			sentTo: {id:2, name: 'Tiger Beer'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 16, 
			type: 'invoice', 
			sentFrom: {id:7, name: 'Best Luck'}, 
			sentTo: {id:10, name: 'Hello Beer'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 17, 
			type: 'po', 
			sentFrom: {id:9, name: 'Good Luck'}, 
			sentTo: {id:5, name: 'DayOne'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 18, 
			type: 'invoice', 
			sentFrom: {id:7, name: 'Best Luck'}, 
			sentTo: {id:5, name: 'DayOne'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		},
		{
			id: 19, 
			type: 'invoice', 
			sentFrom: {id:7, name: 'Best Luck'}, 
			sentTo: {id:5, name: 'DayOne'}, 
			invoice_number: 'inv-343424', 
			data: [{itemCode: 'MT-213', amount: 232}, {itemCode: 'MT-100', amount: 500}],
			created: '2016-01-05', 
			status: false
		}
	];
	banhji.portal = kendo.observable({
		dataStore 	: dataSource,
		close  		: function() {
			window.history.back(-1);
		},
		receive 	: function(e) {
			e.data.set('status', true);
			// bootbox.alert("កត់ត្រាបានសំរេច", function(result){});
			alert("You added the bill.");
		}
	});
	// view
	vendorView = new kendo.View('#vendorReceiveBill', {model: banhji.portal});
	customerView=new kendo.View('#customerInvoiceSent', {model: banhji.portal});
	banhji.router.route('/vendorReceiveBill', function(){
		banhji.view.layout.showIn("#content", vendorView);
	});
	banhji.router.route('/customerInvoiceSent', function(){
		banhji.view.layout.showIn("#content", customerView);
	});
	$(function() {	
		banhji.router.start();		
		if(userPool.getCurrentUser() == null){
			window.location.replace(baseUrl + "login");
		} else {
			var cognitoUser = userPool.getCurrentUser();
              if(cognitoUser !== null) {
                banhji.aws.getImage();
                cognitoUser.getSession(function(err, result){
                  if(result) {
                    AWS.config.credentials = new AWS.CognitoIdentityCredentials({
                      IdentityPoolId: 'us-east-1:35445541-da4c-4dbb-b83f-d1d0301a26a9',
                      Logins: {
                        'cognito-idp.us-east-1.amazonaws.com/us-east-1_56S0nUDS4' : result.getIdToken().getJwtToken()
                      }
                    });
                  }
                });
              }
			if(banhji.currency.dataSource.total()===0) {
				banhji.currency.dataSource.read();				
			}			
		}
	});
</script>